<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>藤枝学院系统说明文档</title>
      <link href="/article/916f8bd4.html"/>
      <url>/article/916f8bd4.html</url>
      
        <content type="html"><![CDATA[<h1 id="藤枝学院系统说明文档"><a href="#藤枝学院系统说明文档" class="headerlink" title="藤枝学院系统说明文档"></a>藤枝学院系统说明文档</h1><h2 id="1、系统总体设计"><a href="#1、系统总体设计" class="headerlink" title="1、系统总体设计"></a>1、系统总体设计</h2><h3 id="1-1、系统需求分析"><a href="#1-1、系统需求分析" class="headerlink" title="1.1、系统需求分析"></a>1.1、系统需求分析</h3><p>本系统分为学员用户前台系统和管后台管理系统两个子系统。学员可通过第三方登录进入该系统，或是以游客身份浏览课程。登录后用户可以开启订阅，开启订阅后可学习该系统所有课程。用户通过观看每一章节下每一个小节的视频完成对一门课程的学习，学习过程可对课程发表评论，在完成了一门课程的所有小节学习可获取该课程对应的证书。学员在个人中心可查看学习进度，查看订阅剩余天数等功能；后台管理系统主要对系统资源进行管理，如讲师管理，上传课程资源，删除含有敏感信息的评论等功能。</p><h3 id="1-2、系统总体结构分析与设计"><a href="#1-2、系统总体结构分析与设计" class="headerlink" title="1.2、系统总体结构分析与设计"></a>1.2、系统总体结构分析与设计</h3><p>本系统采用B&#x2F;S架构，用户安装浏览器即可使用该系统。采用前后端分离开发。前端使用<a href="https://getbootstrap.com/">Bootstrap</a>,<a href="https://element.eleme.io/#/zh-CN">Element-UI</a>等UI框架完成页面开发，使用<a href="https://vuejs.org/">Vue.js</a>进行请求和接收json数据并进行数据渲染。后端使用Java语言提供restful服务，使用<a href="https://spring.io/projects/spring-boot">SpringBoot</a>框架，使用<a href="https://baomidou.com/">MyBatis-Plus</a>生成部分SQL语句，传统关系型数据库Mysql存储数据，使用redis缓存短信验证码等信息。此外，使用云存储平台存储网站资源，整合了支付宝支付，谷歌第三方登录等功能。系统总体结构如图 1‑1系统总体结构图所示。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220419211558133.png" alt="图 1‑1系统总体结构图"></p><h3 id="1-3、系统总体功能结构图"><a href="#1-3、系统总体功能结构图" class="headerlink" title="1.3、系统总体功能结构图"></a>1.3、系统总体功能结构图</h3><p>功能结构如图 1‑2系统功能结构图所示</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220419203643530.png" alt="图 1‑2系统功能结构图"></p><h3 id="1-4、系统运行环境"><a href="#1-4、系统运行环境" class="headerlink" title="1.4、系统运行环境"></a>1.4、系统运行环境</h3><p>以下是系统的硬件环境。</p><ul><li>客户端：内存4G以上，硬盘容量250G以上，处理器性能要求较好，为主流的i5类型</li><li>应用服务端：1核，2G内存，1M带宽，50G高性能盘</li><li>数据库服务端：1核，1G内存，100GB，SSD盘</li></ul><p>以下是系统的软件环境。</p><ul><li>客户端<br>操作系统：Windows 10<br>浏览器：IE 10以上，Google Chrome 73.0.3683.86要上，其他常见浏览器如FireFox</li><li>应用服务端<br>操作系统：Linux系统<br>应用服务器：Tomcat 8或更新版本</li><li>数据库服务器端<br>操作系统：Linux系统<br>数据库管理系统：MySQL 5.7或更新版本</li></ul><hr><h2 id="2、用户系统操作使用说明"><a href="#2、用户系统操作使用说明" class="headerlink" title="2、用户系统操作使用说明"></a>2、用户系统操作使用说明</h2><h3 id="2-1、第三方登录"><a href="#2-1、第三方登录" class="headerlink" title="2.1、第三方登录"></a>2.1、第三方登录</h3><p>为方便用户使用，本系统不开发注册功能，使用第三方账号并绑定手机即可使用该系统。</p><p>【操作说明】<br>1）进入系统首页，点击右上角【登录】或【立即体验】，进入登录界面。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220419234314032.png" alt="图 2-1系统首页"></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220419234350920.png" alt="图 2-2登录界面"></p><p>2）点击【使用Goole账号登录】或【使用Github账号登录】（暂未实现），在弹出框中输入账号密码完成授权，跳转到绑定手机和设置登录密码界面，完成此操作后，可使用手机号和密码登录进入此系统。</p><p>3）登录后系统首页右上角变为导航条+头像，点击头像左侧【我】，再点击【退出登录】即可退出当前账号。<br><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220420104317196.png" alt="图 2-3登录后首页"></p><p>4）未登录的用户在进行如购买订阅，使用订阅，评论等需要登录才可使用功能时，会被拦截到登录界面。</p><h3 id="2-2、购买订阅"><a href="#2-2、购买订阅" class="headerlink" title="2.2、购买订阅"></a>2.2、购买订阅</h3><p>用户在订阅后可以学习系统内所有课程，所有用户可获得一次一个月的免费试用订阅，订阅分为年度和月度，年度有优惠。开启订阅后的用户头像有金框且右边显示vip字样<br><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220420105201176.png" alt="图2-4 已开启订阅用户首页"></p><h4 id="2-2-1、一个月试用"><a href="#2-2-1、一个月试用" class="headerlink" title="2.2.1、一个月试用"></a>2.2.1、一个月试用</h4><p>【操作说明】</p><p>1）已登录用户点击首页【一个月试用】，在弹出框中点击确定，即可开启一个月试用订阅。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420105013427.png" alt="图 2-5试用订阅"></p><p>2）已经试用过的用户在到期后将无法再次试用。</p><h4 id="2-2-2、购买订阅"><a href="#2-2-2、购买订阅" class="headerlink" title="2.2.2、购买订阅"></a>2.2.2、购买订阅</h4><p>【操作说明】</p><p>1）已登录用户点击首页【购买订阅】，在订阅页面选择【年费方案】或【月费方案】，然后选择支付方式：【支付宝】【微信】（暂未实现）【USTD】（暂未实现）。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420105649139.png" alt="图 2-6订阅界面"></p><p>2）选择订阅类型和支付方式后进入订单界面，选择【套餐时长】，点击【立即支付】，前往对应的支付界面完成支付即成功开启订阅。</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220420105838537.png" alt="图 2-7订单界面"></p><p>3）订阅不可叠加和取消，只能待到期后决定续费与否</p><h3 id="2-3、学习课程"><a href="#2-3、学习课程" class="headerlink" title="2.3、学习课程"></a>2.3、学习课程</h3><h4 id="2-3-1、课程推荐"><a href="#2-3-1、课程推荐" class="headerlink" title="2.3.1、课程推荐"></a>2.3.1、课程推荐</h4><p>对于未登录用户，将按照课程访问量推荐热门课程；对于已登录用户，将推荐热门课程和根据用户学习记录推荐用户可能感兴趣的课程。</p><p>【操作说明】</p><p>用户下拉首页即可看到推荐的课程。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420110720630.png" alt="图 2-8已登录用户推荐界面"></p><h4 id="2-3-2、分类检索课程"><a href="#2-3-2、分类检索课程" class="headerlink" title="2.3.2、分类检索课程"></a>2.3.2、分类检索课程</h4><p>【操作说明】</p><p>1）用户点击首页热门领域下的【课程分类名】。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420111135340.png" alt="图 2-9课程分类"></p><p>2）查看该分类下的所有课程，在右侧会推荐和该分类相似的分类。用户可选择【最佳匹配】【最新课程】【最多观看】对指定分类下的课程进行排序查看。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420111254869.png" alt="图 2-10课程列表"></p><h4 id="2-3-3、课程搜索"><a href="#2-3-3、课程搜索" class="headerlink" title="2.3.3、课程搜索"></a>2.3.3、课程搜索</h4><p>【操作说明】</p><p>用户在顶部搜索框输入关键字点击搜索按钮，系统将按照课程名模糊匹配，分类匹配。标签匹配的顺序为用户生成搜索结果。用户可选择【最佳匹配】【最新课程】【最多观看】对搜索结果进行排序。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420111724166.png" alt="图 2-10课程搜索界面"></p><h4 id="2-3-4、观看视频学习"><a href="#2-3-4、观看视频学习" class="headerlink" title="2.3.4、观看视频学习"></a>2.3.4、观看视频学习</h4><p>【操作说明】</p><p>1）用户通过搜索页面、首页、课程列表等界面点击【课程卡片】进入课程详情页。详情页右侧为课程大纲，可点击选择章节和小节进行学习，已学习视频小节会变为灰色。未开启订阅用户无法进行学习。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420121714437.png" alt="图 2-11课程详情"></p><p>2）下面的课程概览显示课程简介，讲师简介，课程目标等信息</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420121918352.png" alt="图 2-12课程概览"></p><h3 id="2-4、课程评论"><a href="#2-4、课程评论" class="headerlink" title="2.4、课程评论"></a>2.4、课程评论</h3><p>【操作说明】</p><p>在课程详情页面点击【评论】，可以查看评论和评论。未登录用户将提醒登录后进行评论</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420122107394.png" alt="图 2-13评论界面"></p><h3 id="2-5、获取证书"><a href="#2-5、获取证书" class="headerlink" title="2.5、获取证书"></a>2.5、获取证书</h3><p>完成某一课程全部小节视频的学习，可获得系统颁布的证书。</p><p>【操作说明】</p><p>1）在【个人中心】- 【课程记录】查看以学完课程</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420122446807.png" alt="图 2-14个人中心-课程记录"></p><p>2）点击【点击获取证书】，在弹框中输入真实姓名，在生成证书界面下载证书。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420122525265.png" alt="图 2-15 生成证书界面"></p><h3 id="2-6、个人中心"><a href="#2-6、个人中心" class="headerlink" title="2.6、个人中心"></a>2.6、个人中心</h3><p>个人中心可进行查看学习进度，学习情况，订阅时间等内容。</p><h4 id="2-6-1、查看学习进度"><a href="#2-6-1、查看学习进度" class="headerlink" title="2.6.1、查看学习进度"></a>2.6.1、查看学习进度</h4><p>【操作说明】</p><p>1）首页点击【个人中心】-【我的学习】，在该界面查看学习进度，以及最近三个月学习情况<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420122833966.png" alt="图 2-16个人中心-我的学习"></p><p>2）右侧搜索栏可进行课程名搜索</p><h4 id="2-6-2、查看订阅"><a href="#2-6-2、查看订阅" class="headerlink" title="2.6.2、查看订阅"></a>2.6.2、查看订阅</h4><p>【操作说明】</p><p>首页点击【个人中心】-【我的订阅】，在该界面查看订阅详情<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420123004742.png" alt="图 2-17个人中心-我的订阅"></p><h4 id="2-6-3、查看已学完课程"><a href="#2-6-3、查看已学完课程" class="headerlink" title="2.6.3、查看已学完课程"></a>2.6.3、查看已学完课程</h4><p>改功能已在2.5获取证书描述过。</p><hr><h2 id="3、管理员系统操作说明"><a href="#3、管理员系统操作说明" class="headerlink" title="3、管理员系统操作说明"></a>3、管理员系统操作说明</h2><h3 id="3-1、讲师管理"><a href="#3-1、讲师管理" class="headerlink" title="3.1、讲师管理"></a>3.1、讲师管理</h3><p>【操作说明】</p><p>1）点击左侧菜单栏【讲师管理】-【讲师列表】，进入讲师列表，可根据【讲师名】和【讲师头衔】进行筛选。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420123855399.png" alt="图 3-1讲师列表"></p><p>2）点击左侧菜单栏【讲师管理】-【添加讲师】，进入讲师添加界面，输入讲师相关信息提交表单，完成讲师信息添加。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420124056388.png" alt="图 3-2添加讲师表单"></p><p>3）点击左侧菜单栏【讲师管理】-【讲师列表】，进入讲师列表，点击对应讲师的【修改】可对讲师信息修改。</p><p>4）点击左侧菜单栏【讲师管理】-【讲师列表】，进入讲师列表，点击对应讲师的【删除】可删除讲师信息。</p><h3 id="3-2、课程分类管理"><a href="#3-2、课程分类管理" class="headerlink" title="3.2、课程分类管理"></a>3.2、课程分类管理</h3><p>【操作说明】</p><p>1）点击左侧菜单栏【课程分类管理】-【课程分类列表】，进入课程分类列表，可根据【课程分类名】进行筛选。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420124620224.png" alt="图 3-3课程分类列表"></p><p>2）点击左侧菜单栏【课程分类管理】-【课程分类列表】，进入课程分类添加界面，输入课程分类相关信息提交表单，完成课程分类添加。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420124745417.png" alt="图 3-4课程分类添加"></p><p>3）点击左侧菜单栏【课程分类管理-【课程分类列表】，进入课程分类列表，点击对应课程分类的【修改】可对课程分类信息修改。</p><p>4）点击左侧菜单栏【课程分类管理】-【课程分类列表】，进课程分类列表，点击对应课程分类的【删除】可删除课程分类。</p><h3 id="3-3、课程管理"><a href="#3-3、课程管理" class="headerlink" title="3.3、课程管理"></a>3.3、课程管理</h3><p>【操作说明】</p><p>1）点击左侧菜单栏【课程管理】-【课程列表】，进入课程列表，可根据【课程名】和【发布状态】进行筛选。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420124930084.png" alt="图 3-5课程列表"></p><p>2）点击左侧菜单栏【课程管理】-【添加课程】，编辑课程基本信息，点击下一步<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420125052037.png" alt="图 3-6添加课程（1）"></p><p>3）继续上一步的操作编辑课程大纲信息，点击下一步<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420125216069.png" alt="图 3-7添加课程（2）"></p><p>4）点击【发布课程】，完成课程添加<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420125313443.png" alt="图 3-8添加课程（3）"></p><p>5）在课程列表，选择【编辑基本信息】【编辑大纲信息】对课程信息进行修改</p><p>6）在课程列表，点击【删除课程信息】删除课程信息</p><h3 id="3-4、评论管理"><a href="#3-4、评论管理" class="headerlink" title="3.4、评论管理"></a>3.4、评论管理</h3><p>【操作说明】</p><p>1）点击左侧菜单栏【评论管理】，进入评论列表，可根据【课程名】和【用户名】和【评论内容】进行筛选。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420125607573.png" alt="图 3-9评论列表"></p><p>2）评论列表，点击对应评论的【删除】可删除评论。</p><h3 id="3-5、用户管理"><a href="#3-5、用户管理" class="headerlink" title="3.5、用户管理"></a>3.5、用户管理</h3><p>【操作说明】</p><p>1）点击左侧菜单栏【用户管理】，进入用户列表，可根据【用户名】进行筛选。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420125752800.png" alt="图 3-10用户列表"></p><p>2）用户列表，点击对应用户的【删除】可删除用户。</p><h3 id="3-6、订阅管理"><a href="#3-6、订阅管理" class="headerlink" title="3.6、订阅管理"></a>3.6、订阅管理</h3><p>【操作说明】</p><p>1）点击左侧菜单栏【订阅管理】，进入订阅列表，可根据【订单号】【用户名】【支付类型】进行筛选。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420125903513.png" alt="图 3-11订阅列表"></p><p>2）订阅列表，点击对应订阅信息的【删除】可删除订阅信息。</p>]]></content>
      
      
      <categories>
          
          <category> 毕业设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>复试赌命</title>
      <link href="/article/41d3078d.html"/>
      <url>/article/41d3078d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p> <img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220320220818722.png"></p><p> 复试赌命，这**学校复试参考书都没有，只有收集一点然后赌命了。</p><p> 一个分类凑几道题</p><p> 参考文章：</p><p> <a href="https://blog.csdn.net/yinghui_yht/article/details/105443770">https://blog.csdn.net/yinghui_yht&#x2F;article&#x2F;details&#x2F;105443770</a></p><p> <a href="https://blog.csdn.net/weixin_40852935/article/details/104859524">https://blog.csdn.net/weixin_40852935&#x2F;article&#x2F;details&#x2F;104859524</a></p><p> <a href="https://www.cnblogs.com/xkf97/p/12742948.html">https://www.cnblogs.com/xkf97/p/12742948.html</a></p></blockquote><h2 id="一、数据库"><a href="#一、数据库" class="headerlink" title="一、数据库"></a>一、数据库</h2><h3 id="1、事务的四大特性"><a href="#1、事务的四大特性" class="headerlink" title="1、事务的四大特性"></a>1、事务的四大特性</h3><p>ACDI；<br>原子性：事务只能全部执行或者全部回滚。<br>一致性：事务执行前后数据库处于一致性的状态。<br>持久性：事务对数据库的操作对数据库数据的改变是永久性的。<br>隔离性：多个事务并发对数据库操作是隔离开的。</p><h3 id="2、事务隔离级别与脏读，幻读，不可重复读等"><a href="#2、事务隔离级别与脏读，幻读，不可重复读等" class="headerlink" title="2、事务隔离级别与脏读，幻读，不可重复读等"></a>2、事务隔离级别与脏读，幻读，不可重复读等</h3><p>脏读：事务A读取到未提交的数据（回滚的数据）<br>不可重复读：事务A读取两次数据，结果集不一样（事务B进行了数据修改）<br>幻读：事务A读取两次数据，结果集的数目不一样（如多或少了几条数据），事务B对数据进行了添加和删除</p><p>事务隔离级别（级别越高，并发性越低）：</p><p>read uncommit：读未提交<br>read commit：读已提交<br>repeatable read：可重复读<br>seizaltion：串行</p><p>Mysql默认级别：repeatable read,且使用一种xxxx技术解决幻读。</p><p>若开发需要高并发，将隔离级别设置为read uncommit，设置乐观锁&#x2F;悲观锁来解决。（追问就g）</p><h3 id="3、数据库范式"><a href="#3、数据库范式" class="headerlink" title="3、数据库范式"></a>3、数据库范式</h3><p>1NF：得是二维表（每一个表项都是不可分割的数据）<br>2NF：消除部分依赖（追问g）<br>3NF：消除传递依赖（追问g，那些什么候选键乱七八糟的看一次忘一次）</p><h3 id="4、索引"><a href="#4、索引" class="headerlink" title="4、索引"></a>4、索引</h3><p>索引可以加快查询的效率，但是降低其他操作的效率，因为每次插入删除或修改后需重新组织索引；</p><h3 id="5、Nosql"><a href="#5、Nosql" class="headerlink" title="5、Nosql"></a>5、Nosql</h3><p>key-value形式存储，如redis，特点为高性能，快。缺点为不能进行复杂查询。用于缓存热点数据或进行高并发开发。</p><h3 id="6、视图、触发器、存储过程、游标"><a href="#6、视图、触发器、存储过程、游标" class="headerlink" title="6、视图、触发器、存储过程、游标"></a>6、视图、触发器、存储过程、游标</h3><p>视图：把经常连接查询的表作为视图存储起来，方便使用。</p><p>触发器：满足某种条件时候执行触发器。</p><p>存储过程：写好具有特点功能的sql语句供上层函数调用。</p><p>游标：分别对每行元素处理的时候使用游标。</p><h3 id="7、sql语句"><a href="#7、sql语句" class="headerlink" title="7、sql语句"></a>7、sql语句</h3><p>太久没用，但是在开发中如果编写复杂的sql我会查阅之前记录的笔记，然后进行编写。</p><hr><h2 id="二、操作系统"><a href="#二、操作系统" class="headerlink" title="二、操作系统"></a>二、操作系统</h2><h3 id="1、操作系统四个特点"><a href="#1、操作系统四个特点" class="headerlink" title="1、操作系统四个特点"></a>1、操作系统四个特点</h3><ul><li>并发：操作系统中各个进程并发执行。</li><li>共享：操作系统并发执行的各个进程共享系统资源。</li><li>虚拟：物理实体映射为逻辑实体。</li><li>异步：各个进程以不可预知的速度，走走停停的推进。</li></ul><h3 id="2、操作系统主要功能"><a href="#2、操作系统主要功能" class="headerlink" title="2、操作系统主要功能"></a>2、操作系统主要功能</h3><ul><li><p>作为系统资源的管理者</p><ul><li>处理机管理</li><li>存储器管理</li><li>文件管理</li><li>设备管理</li></ul></li><li><p>作为向上提供接口</p><ul><li>GUI(图形界面)</li><li>系统调用</li><li>命令接口（联机&#x2F;脱机）</li></ul></li></ul><h3 id="3、进程与线程的区别"><a href="#3、进程与线程的区别" class="headerlink" title="3、进程与线程的区别"></a>3、进程与线程的区别</h3><p>进程：运行着的程序，由程序段，数据端，PCB三部分组成。</p><p>线程：轻量级的进程，进程中包含线程。</p><p>区别：<br>进程是资源分配的最小单位，线程是处理机调度的最小单位。<br>进程切换开销大，同一进程里的线程切换系统开销小。</p><h3 id="4、进程的状态"><a href="#4、进程的状态" class="headerlink" title="4、进程的状态"></a>4、进程的状态</h3><p>五状态模型：创建态，就绪态，运行态，阻塞态，终止态<br>七状态模型：内存空间不够需要换到外存，挂起态（阻塞挂起，就绪挂起）</p><h3 id="5、进程通信"><a href="#5、进程通信" class="headerlink" title="5、进程通信"></a>5、进程通信</h3><ul><li>管道通信</li><li>共享存储</li><li>消息传递</li></ul><h3 id="6、处理机调度的层次"><a href="#6、处理机调度的层次" class="headerlink" title="6、处理机调度的层次"></a>6、处理机调度的层次</h3><p>高级调度（作业调度）：作业中选择调入内存的作业<br>中级调度（内存调度）：将哪个挂起态的进程调入内存<br>低级调度（进程调度）：运行哪个就绪态的进程</p><h3 id="7、调度算法"><a href="#7、调度算法" class="headerlink" title="7、调度算法"></a>7、调度算法</h3><p>先来先服务<br>短作业优先<br>高响应比优先</p><p>时间片轮转<br>优先级<br>多级反馈队列</p><h3 id="8、死锁"><a href="#8、死锁" class="headerlink" title="8、死锁"></a>8、死锁</h3><p>死锁：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象</p><p>原因：信号量使用不当、进程推进的顺序不对。</p><p>必要条件：</p><ol><li>互斥条件：请求互斥资源。</li><li>请求和保持条件：拿到资源还可以请求资源。</li><li>非剥夺条件：已经分配的资源不能被剥夺</li><li>循环等待条件：系统中若干进程组成环路，该环路中每个进程都在等待相邻进程正占用的资源</li></ol><p>解决死锁：</p><ol><li>预防死锁：破坏必要条件</li><li>避免死锁：银行家算法</li><li>检测，解决死锁不会</li></ol><h3 id="9、页面置换算法"><a href="#9、页面置换算法" class="headerlink" title="9、页面置换算法"></a>9、页面置换算法</h3><p>1、最佳置换算法：每次选择淘汰的页面将是以后不再使用，或者在最长时间内不再被访问的页面（不知道后面要访问那个，理想状态）。</p><p>2、先进先出置换算法：每次淘汰的页面是最早进入内存的界面 。</p><p>3、最近最久未使用算法：每次淘汰的页面是最近最久未使用的页面。标志位T记录使用的时间</p><p>4、时钟置换算法（CLOCK）：（细问就g）</p><h3 id="10、虚拟内存"><a href="#10、虚拟内存" class="headerlink" title="10、虚拟内存"></a>10、虚拟内存</h3><p>结果：用户使用到的内存比实际内存大的多；</p><p>基于局部性原理，在程序装入时，可以将程序中很快会用到的部分装入内存，暂时用不到的部分留在外存，就可以让程序开始执行。允许一个作业分多次调入内存。</p><h3 id="11、分页与分段"><a href="#11、分页与分段" class="headerlink" title="11、分页与分段"></a>11、分页与分段</h3><p>页是信息的<strong>物理单位</strong>。分页的目的是为了实现离散分配，提高内存利用率。分页仅仅是系统管理上的需要，完全是系统行为，对用户是不可见的。</p><p>段是信息的<strong>逻辑单位</strong>。分段的目的是为了更好的满足用户的需求。一个段通常包含着一组逻辑模块的信息。分段对用户是可见的，用户编程时需要显式的给出段名</p><h3 id="12、磁盘调度算法"><a href="#12、磁盘调度算法" class="headerlink" title="12、磁盘调度算法"></a>12、磁盘调度算法</h3><p>1、先来先服务算法</p><p>2、最短寻找时间优先，找离磁盘头最近的</p><p>3、saca 算法：磁头移动到最外侧磁道的时候才能往内移动，移动到最内侧磁道的时候才能往外移动（电梯）</p><p>4、LOOK 调度算法：如果在磁 头移动方向上已经没有别的请求，就可以立即改变磁头移动方向</p><p>5、C-SCAN:</p><p>6、c-look</p><h3 id="14、i-x2F-o控制方式"><a href="#14、i-x2F-o控制方式" class="headerlink" title="14、i&#x2F;o控制方式"></a>14、i&#x2F;o控制方式</h3><ul><li>程序直接控制</li><li>中断</li><li>DMA</li><li>通道</li></ul><h3 id="15、Spooling技术"><a href="#15、Spooling技术" class="headerlink" title="15、Spooling技术"></a>15、Spooling技术</h3><p>假脱机技术，独占设备改为共享设备。输入井和输出井来模拟输入输出的磁带。</p><blockquote><p>就这些赌命吧</p></blockquote><hr><h2 id="三、计算机网络"><a href="#三、计算机网络" class="headerlink" title="三、计算机网络"></a>三、计算机网络</h2><h3 id="1、计算机网络的分层各层常见协议"><a href="#1、计算机网络的分层各层常见协议" class="headerlink" title="1、计算机网络的分层各层常见协议"></a>1、计算机网络的分层各层常见协议</h3><p>ois:物联网淑慧适用（物理层，数据链路层，网络层，传输层，会话层，表示层，应用层）。<br>tcp&#x2F;ip:网络接口层，网络层，传输层、应用层。<br>学习计网：物理层 数据链路层 网络层 传输层 应用层。</p><p>常见协议：<br>应用层：http ftp ssh dns fmtp..<br>传输层：tcp,ip<br>网络层：ip<br>数据链路层：ARP</p><h3 id="2、tcp三次握手与四次挥手"><a href="#2、tcp三次握手与四次挥手" class="headerlink" title="2、tcp三次握手与四次挥手"></a>2、tcp三次握手与四次挥手</h3><p><strong>根本原因：在不可靠的通信通道上建立可靠的连接</strong></p><p>握手：<br>client 发送 syn 请求到server,server 回复 syn ack,client再发送ack请求。</p><p>挥手：<br>client 发送 fin 请求到server，此时client不再发送数据，sever收到请求回复ack,此时server仍可以发送和处理数据，它处理完这些数据再给client发送fin请求，客户端收到后回复ack，server收到ack后立即断开连接，client经过2msl后断开连接</p><p><strong>为什么不是两次握手</strong><br>防止已失效的报文到达服务器端（比如是两次连接，client发送第一个syn请求由于某原因没有到达server，重新发送，server收到立马建立连接，过了会失效的那个到了，就又建立起一个连接，这样在client端是一个连接，在server端是两个连接就出错）</p><p><strong>为什么要等2msl</strong></p><p>确保最后一个ack server端收到，否则server端一直处于等待状态</p><p><strong>为什么四次挥手</strong></p><p>sever收到fin报文时还需要发送报文或者处理数据，不能立即断开连接</p><h3 id="3、TCP、UDP区别（何时使用TCP-何时使用UDP）"><a href="#3、TCP、UDP区别（何时使用TCP-何时使用UDP）" class="headerlink" title="3、TCP、UDP区别（何时使用TCP,何时使用UDP）"></a>3、TCP、UDP区别（何时使用TCP,何时使用UDP）</h3><ol><li>TCP面向连接，UDP无连接。</li><li>TCP可靠传输，不会发生顺序混乱，丢失这些情况。UDP不可靠</li><li>TCP一对一传输，UDPp可以一对一，一对多…</li><li>TCP传输基本单位是字节，UDP是数据报</li><li>UDP具有<strong>实时性和高效</strong>，如直播，视频通话等使用UDP</li></ol><h3 id="4、浏览器输入-www-baidu-com-发生了什么"><a href="#4、浏览器输入-www-baidu-com-发生了什么" class="headerlink" title="4、浏览器输入 www.baidu.com 发生了什么"></a>4、浏览器输入 <a href="http://www.baidu.com/">www.baidu.com</a> 发生了什么</h3><ol><li>DNS解析，首先会查本地的缓存有没有存储域名对应的ip地址，若没有则向DNS服务器发送请求获取域名对应的ip地址</li><li>得到ip地址后，三次握手建立tcp连接（https基于tcp）</li><li>get请求，http报文 -&gt; 加首部 tcp报文 -&gt; 加首部 ip报文 -&gt; 加首部尾部称为数据帧 -&gt; 比特流转为电信号 传输。</li><li>结果路由器跳转，不断修改帧的Mac地址到目标主机又拆数据报，然后相同的方式响应请求。</li></ol><h3 id="5、TCP流量控制与拥塞控制"><a href="#5、TCP流量控制与拥塞控制" class="headerlink" title="5、TCP流量控制与拥塞控制"></a>5、TCP流量控制与拥塞控制</h3><p>流量控制：接收方 -&gt; 发送方 慢点（端到端）， 流量控制只让发送方的发送速率不要太快，流量控制是使用<strong>滑动窗口</strong>来实现的。<br>拥塞控制：拥塞控制考虑整个网络，是全局性的考虑。可以通过慢启动算法，<strong>拥塞窗口</strong>实现</p><h3 id="6、HTTPS"><a href="#6、HTTPS" class="headerlink" title="6、HTTPS"></a>6、HTTPS</h3><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220322152017408.png"></p><hr><h2 id="四、计算机组成原理"><a href="#四、计算机组成原理" class="headerlink" title="四、计算机组成原理"></a>四、计算机组成原理</h2><blockquote><p>机组基本上就没学过，哎</p></blockquote><h3 id="1、冯诺依曼结构的特点"><a href="#1、冯诺依曼结构的特点" class="headerlink" title="1、冯诺依曼结构的特点"></a>1、冯诺依曼结构的特点</h3><ol><li>计算机由<strong>运算器</strong>，<strong>控制器</strong>，<strong>存储器</strong>，<strong>输入输出设备</strong>五部分组成</li><li>指令和数据以同等地位存储在存储器中，按地址访问</li><li>数据均用二进制表示</li></ol><h3 id="2、编译和解释的区别"><a href="#2、编译和解释的区别" class="headerlink" title="2、编译和解释的区别"></a>2、编译和解释的区别</h3><p>都是翻译的方式<br>编译：将源代码转化成<strong>目标文件</strong>，然后执行<br>解释：<strong>边翻译边执行</strong>，无目标文件</p><h3 id="3、机器字长、指令字长、存储字长区别"><a href="#3、机器字长、指令字长、存储字长区别" class="headerlink" title="3、机器字长、指令字长、存储字长区别"></a>3、机器字长、指令字长、存储字长区别</h3><p>机器字长：计算机可直接处理的二进制数据位数<br>指令字长：一个指令字包含的二进制代码位数<br>存储字长：一个存储单元存储的二进制代码长度</p><h3 id="4、CPI，MIPS"><a href="#4、CPI，MIPS" class="headerlink" title="4、CPI，MIPS"></a>4、CPI，MIPS</h3><p>CPI：执行一条指令所需时钟周期数<br>MIPS：每秒多少百万条指令&#x3D;主频&#x2F;CPI</p><h3 id="5、计算机中为什么采用二进制表示数据"><a href="#5、计算机中为什么采用二进制表示数据" class="headerlink" title="5、计算机中为什么采用二进制表示数据"></a>5、计算机中为什么采用二进制表示数据</h3><p>1、实现简单，可以电子元件高电位表示1，低电位表示0这样</p><p>2、二进制运算法则少，运算简单，有利于简化计算机硬件结构</p><h3 id="6、CISC和RISC的区别"><a href="#6、CISC和RISC的区别" class="headerlink" title="6、CISC和RISC的区别"></a>6、CISC和RISC的区别</h3><p>CISC复杂指令集，RISC是精简指令集。</p><h3 id="7、cache的作用"><a href="#7、cache的作用" class="headerlink" title="7、cache的作用"></a>7、cache的作用</h3><p>连接cpu和内存</p><h2 id="五、软件工程"><a href="#五、软件工程" class="headerlink" title="五、软件工程"></a>五、软件工程</h2><p><a href="http://taoblog421.cn/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/">http://taoblog421.cn/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</a></p><h2 id="六、数据结构与算法"><a href="#六、数据结构与算法" class="headerlink" title="六、数据结构与算法"></a>六、数据结构与算法</h2><p><a href="http://taoblog421.cn/categories/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/">http://taoblog421.cn/categories/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</a></p><h2 id="七、计算机前沿"><a href="#七、计算机前沿" class="headerlink" title="七、计算机前沿"></a>七、计算机前沿</h2><h3 id="1、人工智能、机器学习、深度学习"><a href="#1、人工智能、机器学习、深度学习" class="headerlink" title="1、人工智能、机器学习、深度学习"></a>1、人工智能、机器学习、深度学习</h3><blockquote><p>一、发展史</p><p>1、 1950年 图灵测试  问问题判断是否是真人<br>2、 1956年 “达特芬斯会议”  提出人工智能的词汇  “机器能否向人一样思考”<br>3、 1997 IBM 深蓝 </p><p>二、梯度下降算法 </p><p>三、神经网络</p><p>神经元：多输入，单输出（0,1）</p><p>M-P模型</p><p>四、人工智能框架</p><p>1、谷歌 Tensorflow ，微软，Facebook，…</p><p>2、华为 mindSpore </p></blockquote><h3 id="2、卷积神经网络"><a href="#2、卷积神经网络" class="headerlink" title="2、卷积神经网络"></a>2、卷积神经网络</h3><blockquote><p>一、视觉原理</p><p>1、 1981 猫 实验</p><ul><li>简单细胞：线条</li><li>复杂细胞：运动</li></ul><p>2、神经认知模型：几层皮层</p><p>像素点 - 边缘，方向 - 轮廓，细节 - 判断</p><p>3、杨立坤 - 卷积神经网络</p><p>卷积：数学方法提取图片特征 </p></blockquote><h3 id="3、…"><a href="#3、…" class="headerlink" title="3、…"></a>3、…</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的考研经验</title>
      <link href="/article/bc1a085d.html"/>
      <url>/article/bc1a085d.html</url>
      
        <content type="html"><![CDATA[<h1 id="成都信息工程大学软件工程上岸经验帖"><a href="#成都信息工程大学软件工程上岸经验帖" class="headerlink" title="成都信息工程大学软件工程上岸经验帖"></a>成都信息工程大学软件工程上岸经验帖</h1><blockquote><p>对于我个人而言，觉得经验贴这个玩意参考价值不大，因为<strong>人与人的个体差异可能比人与猪的还要大</strong>。但是也有人按照经验贴按部就班实现了自己的研究生梦。趁着对考研还有印象，以及在候车室候车没啥事干，也写一篇经验贴供大家参考吧。</p></blockquote><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220405140612894.png" style="zoom:67%;" /><h2 id="自我定位于院校选择"><a href="#自我定位于院校选择" class="headerlink" title="自我定位于院校选择"></a>自我定位于院校选择</h2><p>有句话说<strong>考研成功与否选择大于努力</strong>，很认同这句话。决定考研的人也是20+岁的人了，应该是对自己有着较为准确的定位（也有部分头铁冲清华北大当炮灰），不是否定不畏艰险的拼搏精神，只是大部分人都是普通人，平凡人。早点接受这个现实没什么不好。将自己定位为混子，不如就考本校或者双非院校，双非研究生也是研究生。将自己定位为可以静下心好好学，年如一日，不被各种事情干扰的卷王，就可以冲个985，211。</p><hr><h2 id="数学复习"><a href="#数学复习" class="headerlink" title="数学复习"></a>数学复习</h2><p>数学自然是痛苦，对于一个数二考了70分的人没什么资格写经验贴，只有写写<strong>反向经验</strong>贴了。回首我的数学学习经历，高一上的数学就是难度的极限了，以后就难的做不来题了，更不用说高数这玩意有多痛苦。而且，真的有必要这么难吗？如袁腾飞老师所说，<em>我们的学生学着全宇宙最难的数理化，也不见在拿过多少自然科学的诺贝尔奖，高中生的数学水平去美国都可以当数学老师</em>。但是<strong>优质教育的稀缺</strong>，只能通过考试这一种<strong>相对公平的方法来选拔人才</strong>，特殊国情还能咋办呢，总比抽签去读研究生好，那是西藏找转世灵童。</p><p>所以数学就硬着头皮学吧，我是全程看汤老师的课，自己的这点水平实在不敢对各位老师加以评论。然后做真题如果遇到不会的题就算了吧，有些题就是为考清华北大的同学设置的。</p><hr><h2 id="英语复习"><a href="#英语复习" class="headerlink" title="英语复习"></a>英语复习</h2><p>对于我这个专业（软件工程），英语还是很重要的。个人本身也对英语不怎么排斥，英语就考的还行，英一66分。英语还是比较看基础感觉，因为有一起备考的研友的例子。核心就是<strong>背单词</strong>吧，然后看看网课什么的。全球化趋势下学好英语必不可少，此外还可以学好英语润出国什么，当然这些都是后话了。</p><p>此外，我好朋友英语高分经验贴可供学习：<a href="http://hexo.lstf666.cn/2022/03/28/ying-er-83-fen-tu-xie-zheng-li-qian-zi-chang-wen/">http://hexo.lstf666.cn/2022/03/28/ying-er-83-fen-tu-xie-zheng-li-qian-zi-chang-wen/</a></p><hr><h2 id="政治复习"><a href="#政治复习" class="headerlink" title="政治复习"></a>政治复习</h2><p>写这一块内容就要谨言慎行了，最<strong>伟大光荣永远正确</strong>的学科，可惜我学的时候都是反着理解的。最终取得58的成绩，虽然不是很高，但是已经很满意了。对我来说最终的分数不是最重要，而是过程中学到不少<strong>额外的知识</strong>。就这样吧，<strong>谨言慎行</strong>。要知道<strong>研究生招生准则第一条就是拥护中国共产党的领导</strong>。</p><p>此外，我好朋友的政治高分经验贴可供学习：<a href="http://hexo.lstf666.cn/2022/03/28/he-nan-zheng-zhi-79-jing-yan-tie/">http://hexo.lstf666.cn/2022/03/28/he-nan-zheng-zhi-79-jing-yan-tie/</a></p><hr><h2 id="专业课复习"><a href="#专业课复习" class="headerlink" title="专业课复习"></a>专业课复习</h2><p>本校的专业课是今年才变的，由C语言变为软件工程导论。这一块我还比较行，取得了115的成绩。对于这门专业课的学习，其实就是大学许多课程的浓缩，比如UML统一建模语言，软件设计工程，软件制造工程，软件测试，工程实践等。对于本校考试优势较大。以前上课都没有认真听过这些课，现在有过一定软件开发的基础上，再次学习一遍，更加融会贯通。也是比较实用的一门课。</p><p>经验就是<strong>啃书</strong>吧，多理解，多背。</p><hr><h2 id="复试"><a href="#复试" class="headerlink" title="复试"></a>复试</h2><p>3月31号刚刚结束了研究生复试，复试前两周绝对是我人生中最焦虑的两个月。复试完又要马上进行毕设的中期检查，<strong>每天都在痛苦和焦虑中度过</strong>。但谁又能知道，复试远远没有想象的那么可怕。而且<strong>我准备的内容，80％都没问到</strong>，全靠以前的基础就答过去了。英语问题里边没听懂，就听到一个单词就背了一段相关的上去。专业课也回答的不是很好，可能是对自己要求太高哈哈。本来还计划是在纸上理清思路在作答，直接慌张的张口就来。复试更多细节也不易说，反正远没有想象的艰难。</p><p>再过一段时间更新个复试的详细经验贴供报考本校的同学来参考。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6、编码与测试</title>
      <link href="/article/26734cb9.html"/>
      <url>/article/26734cb9.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>考纲：熟悉编码规范，了解软件测试方法，能针对黑盒测试和白盒测试设计测试用例。包括编码、软件测试基础、单元测试、集成测试、确认测试、白盒测试技术、黑盒测试技术。</p></blockquote><span id="more"></span> <h2 id="1、编码"><a href="#1、编码" class="headerlink" title="1、编码"></a>1、编码</h2><h3 id="1-1、选择程序设计语言"><a href="#1-1、选择程序设计语言" class="headerlink" title="1.1、选择程序设计语言"></a>1.1、选择程序设计语言</h3><p>web应用 －－ java php go</p><p>桌面应用 －－ c#</p><p>嵌入式 －－ c ，c++</p><p>小程序 －－ 自带语法 ，后端同web</p><p>大数据 －－ python</p><h3 id="1-2、编码规范"><a href="#1-2、编码规范" class="headerlink" title="1.2、编码规范"></a>1.2、编码规范</h3><h2 id="2、软件测试"><a href="#2、软件测试" class="headerlink" title="2、软件测试"></a>2、软件测试</h2><h3 id="2-1、软件测试基础"><a href="#2-1、软件测试基础" class="headerlink" title="2.1、软件测试基础"></a>2.1、软件测试基础</h3><p>目的：发现错误并修正 －&gt; 高质量软件</p><p>分类：白盒测试 黑盒测试</p><p>流程：单元测试 － 集成测试 － 确认测试 － 系统测试</p><p>单元测试</p><p>着重五个方面：</p><ol><li>接口 （输入，输出）</li><li>重要执行路径（如对数据库操作）</li><li>错误路径 （能否正确处理异常）</li><li>数据结构</li><li>边界条件 （循环边界条件）</li></ol><p>此外单元测试还包含代码审查（静态测试），静态测试与动态测试相辅相成，互相补充。</p><p>以及编写驱动模块和桩模块</p><p>驱动模块 －－ 调用测试单元的模块</p><p>桩模块（存根模块）－－测试单元调用的模块</p><p>集成测试:主要发现接口之间的错误</p><p>分类</p><p>非渐增式：分别测各个模块，最后组装在一起。</p><p>渐增式：测一个就组装一个，最后成为整个程序。</p><blockquote><p>自顶向下：从主程序开始，按照深度优先或广度有限，把各个模块组装起来，使用桩模块代替未组装的模块。</p><p>自底向上：把几个底层模块组装为完成某个子功能的族，使用驱动程序测试这个族，去掉驱动模块，组装为更大的功能族，直到顶层。</p></blockquote><p>不同集成测试策略的比较：</p><p>渐进式 与 非渐进式：</p><p>显然渐进式组装导致出现问题不好定位，选取渐进式</p><p>自顶向下 与 自底向上：</p><table><thead><tr><th>策略</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>自顶向下</td><td>早期验证系统的主要功能（使用深度优先可测试整个子功能），                                     早期发现上层模块的接口错误（关键的抉择位于系统的较上层）</td><td>发现下层数据处理模块问题较晚（测试过程中并没有自下而上的数据流），需要编写桩模块测试</td></tr><tr><td>自底向上</td><td>早期发现底层模块的接口错误</td><td>需要编写驱动模块</td></tr></tbody></table><p>实际采用</p><p>1、改进的自顶向下：早期测试关键的数据处理模块</p><p>2、混合法：下层使用自底向上 上层使用自顶向下。模块较多时折中的方法</p><p>回归测试：在集成测试每加入一个新的模块，可能会导致程序发生变换，需再次进行测试；只需对关键功能进行回归测试</p><p>确认测试：用户参与 －－需求说明书</p><p>alpha测试 与 beta测试：</p><p>alpha测试是用户在开发者在场，测试环境中测试</p><p>beta测试，发布beta版软件，在生产环境中测试</p><p>均得到用户反馈的结果，进行必要的修改后发布最终软件</p><p>系统测试：对整个系统进行测试，系统包含软件，硬件，用户等。</p><h3 id="2-2、白盒测试技术"><a href="#2-2、白盒测试技术" class="headerlink" title="2.2、白盒测试技术"></a>2.2、白盒测试技术</h3><p>将程序视为白盒，内部的处理流程和算法是可见的，测试程序是否按照预期的通路执行。</p><h4 id="2-2-1、逻辑覆盖"><a href="#2-2-1、逻辑覆盖" class="headerlink" title="2.2.1、逻辑覆盖"></a>2.2.1、逻辑覆盖</h4><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20211204105912237.png"></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20211204105948891.png"></p><h4 id="2-2-2、基本路径测试"><a href="#2-2-2、基本路径测试" class="headerlink" title="2.2.2、基本路径测试"></a>2.2.2、基本路径测试</h4><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20211204110033374.png"></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20211204110107130.png"></p><h3 id="2-3、黑盒测试技术"><a href="#2-3、黑盒测试技术" class="headerlink" title="2.3、黑盒测试技术"></a>2.3、黑盒测试技术</h3><p>讲程序视为黑盒子，不知道内部的处理流程和算法，仅进行功能测试，测试程序接受输入并输出正确的数据，同时保证外部信息（如数据库）的完整性</p><blockquote><p>记到这里的时候已经快考试了，就去啃书了，再次打开这篇笔记已经是考研初试结束数月之久。<br>回顾专业课的初试，感觉难度不是很大，虽然我分也不怎么高。但还好专业课还行，统考的几科英语还行，政治没办法，谁让本人不信仰共产主义，再加上那些反动思想，右派言论，58都不错了。反向学习政治书也不错哈哈，有所收货的还是。也认识到数学那玩意是真的难学，还好理智的选择了数二和本校，可能是阶级局限性吧，数学是花的时间最多分最低哈哈。不过都已经过去了。</p><p>现在离复试约摸还有一周，这一周也要毕设的中期答辩（早知道早点搞毕设，谁知道它们时间在一起，***），压力还是有点大。搞得生活都再次没什么意义，熬过这几天就好了。还是放下读研执念，考上了，不见得以后就要飞黄腾达，考不上也不见得人生失去希望，总是要往前走的。 -2022.3.22</p></blockquote><blockquote><p>至于后面的内容（黑盒测试技术和面向对象）也不再记录了（早都忘了…）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享文章url优化</title>
      <link href="/article/3e7bbe1a.html"/>
      <url>/article/3e7bbe1a.html</url>
      
        <content type="html"><![CDATA[<p>今天在使用新的博客博客的时候发现一个问题，给别人分享链接的时候一长串</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220319111852944.png"></p><p>如分享这篇博客，就会变成这样：</p><p><a href="http://taoblog421.cn/2020/10/16/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E5%8E%9F%E7%A0%81%EF%BC%8C%E8%A1%A5%E7%A0%81%EF%BC%8C%E5%8F%8D%E7%A0%81/">http://taoblog421.cn/2020/10/16/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E5%8E%9F%E7%A0%81%EF%BC%8C%E8%A1%A5%E7%A0%81%EF%BC%8C%E5%8F%8D%E7%A0%81/</a></p><p>对url进行了编码，不是很美观，当博客的title长的时候更难受</p><p>解决方法：</p><blockquote><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/157995872">https://zhuanlan.zhihu.com/p/157995872</a></p><p>使用hexo-abbrlink + 修改配置</p></blockquote><p>安装插件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>修改hexo配置文件_config.yaml(<strong>不是主题配置文件</strong>)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">article/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>重新部署</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p><a href="http://taoblog421.cn/article/9b6873a3.html">http://taoblog421.cn/article/9b6873a3.html</a></p><p>这样就舒服很多</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言进阶</title>
      <link href="/article/83cfe2d8.html"/>
      <url>/article/83cfe2d8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>将6篇笔记整合到一起</p><p>学习课程为：<a href="https://www.bilibili.com/video/BV1vb411m7JV">https://www.bilibili.com/video/BV1vb411m7JV</a></p></blockquote><h1 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h1><blockquote><p>这个黑马八天的课，学一遍吧</p><p>day01</p><p>1、数组作为参数</p><p>2、数据类型本质：固定内存块大小的别名</p><p>3、内存模型</p><p>4、变量本质：连续内存块的别名</p><p>5、栈的生长方向和内存存放方向</p></blockquote><span id="more"></span><h2 id="一、数组作为参数"><a href="#一、数组作为参数" class="headerlink" title="一、数组作为参数"></a>一、数组作为参数</h2><p>简单的选择排序引出问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> length)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> length)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getLength</span><span class="params">(<span class="type">int</span> *a)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组作为形参传入函数，实际是传指针</p><p>将函数定义为如下三种均可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> a[任意数字],<span class="type">int</span> length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> length)</span>;</span><br></pre></td></tr></table></figure><h2 id="二、数据类型本质"><a href="#二、数据类型本质" class="headerlink" title="二、数据类型本质"></a>二、数据类型本质</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么</span></span><br><span class="line"><span class="comment">// 数据类型本质:固定内存大小的别名</span></span><br><span class="line"><span class="comment">// 变量本质:一段连续内存空间的别名</span></span><br><span class="line"><span class="comment">// b 数组首元素地址 int 4Byte </span></span><br><span class="line"><span class="comment">// &amp;b 数组元素的首地址 3*4 = 12Byte </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;b+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//putput</span></span><br><span class="line">G:\clion_project\retest\cmake-build-debug\nature_of_dataType.exe</span><br><span class="line"><span class="number">6422036</span></span><br><span class="line"><span class="number">6422036</span></span><br><span class="line"><span class="number">6422040</span></span><br><span class="line"><span class="number">6422048</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="三、数据类型起别名"><a href="#三、数据类型起别名" class="headerlink" title="三、数据类型起别名"></a>三、数据类型起别名</h2><p>typedef</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span>&#123;</span> <span class="comment">//结构体的名字，Cat就是自己构造的数据类型</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef一般结合结构体来使用</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Cat1</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125; Cat1;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//下面几种方式是等价的</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Cat</span> <span class="title">cat1</span>;</span></span><br><span class="line">    Cat1 cat2;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Cat1</span> <span class="title">cat2</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、void类型"><a href="#四、void类型" class="headerlink" title="四、void类型"></a>四、void类型</h2><p>使用</p><p>1、函数无参数，如：c语言中有区别，c++无区别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220317151718882.png"></p><p>一个警告一个报错；</p><p>2、函数无返回值，如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、万能指针</p><p>void * </p><p>不能定义void类型普通变量，因为不能确定分配内存空间大小</p><h2 id="五、内存模型"><a href="#五、内存模型" class="headerlink" title="五、内存模型"></a>五、内存模型</h2><ul><li>堆 heap</li><li>栈 stake</li><li>全局区 global</li><li>代码区 code</li></ul><h3 id="1、全局区"><a href="#1、全局区" class="headerlink" title="1、全局区"></a>1、全局区</h3><p>“cyfwlp”这样的字符串存储在<strong>全局区</strong>的<strong>文字常量区</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">getStr1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p = <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">getStr2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *q = <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *q = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    p = getStr1();</span><br><span class="line">    q = getStr2();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s,%d\n&quot;</span>,p,p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s,%d\n&quot;</span>,q,q);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//result:</span></span><br><span class="line">G:\clion_project\retest\cmake-build-debug\retest.exe</span><br><span class="line">cyfwlp,<span class="number">4214788</span></span><br><span class="line">cyfwlp,<span class="number">4214788</span></span><br></pre></td></tr></table></figure><p>内存布局图，脑海模拟</p><h3 id="2、栈区"><a href="#2、栈区" class="headerlink" title="2、栈区"></a>2、栈区</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = getStr();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出乱码&#x2F;或编译不能通过（返回局部变量）</p><h3 id="3、堆区"><a href="#3、堆区" class="headerlink" title="3、堆区"></a>3、堆区</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(str,<span class="string">&quot;abcdef&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = getStr();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存布局图，脑海模拟</p><h2 id="六、栈的生长方向和内存存放方向"><a href="#六、栈的生长方向和内存存放方向" class="headerlink" title="六、栈的生长方向和内存存放方向"></a>六、栈的生长方向和内存存放方向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">6422044</span> <span class="number">6422040</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>发现<strong>栈的地址方向</strong>是<strong>高地址向低地址</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* c = <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">int</span>* d = <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,c,d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">10556496</span> <span class="number">10556528</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>堆中的地址方向</strong>是<strong>低地址向高地址</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,buf,buf+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">6421616</span> <span class="number">6421620</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>内存存放是低地址到高地址</strong></p><hr><h1 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h1><blockquote><p>day02</p><ul><li>指针强化</li><li>字符串</li></ul></blockquote><!--more--><h2 id="一、指针强化"><a href="#一、指针强化" class="headerlink" title="一、指针强化"></a>一、指针强化</h2><h3 id="1、指针也是数据类型"><a href="#1、指针也是数据类型" class="headerlink" title="1、指针也是数据类型"></a>1、指针也是数据类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> *****q = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(q));</span><br><span class="line"></span><br><span class="line"><span class="comment">//output 指针类型大小与操作系统位数有关，64位为8byte，32位为4byte</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/86547F8DE3C2180D85D68F12C2152139.jpg"></p><h3 id="2、通过-号操作内存"><a href="#2、通过-号操作内存" class="headerlink" title="2、通过*号操作内存"></a>2、通过*号操作内存</h3><p>简单,pass</p><p>注意：指针的值和指针指向的内存是不同的概念</p><h3 id="3、迷途指针和野指针"><a href="#3、迷途指针和野指针" class="headerlink" title="3、迷途指针和野指针"></a>3、迷途指针和野指针</h3><blockquote><p>先来看看维基百科怎么说</p><p><strong>Dangling pointers</strong> and <strong>wild pointers</strong> in <a href="https://en.wikipedia.org/wiki/Computer_programming">computer programming</a> are <a href="https://en.wikipedia.org/wiki/Data_pointer">pointers</a> that do not point to a valid object of the appropriate type。</p><p><strong>Dangling pointers</strong> arise during <a href="https://en.wikipedia.org/wiki/Object_destruction">object destruction</a>, when an object that has an incoming reference is deleted or deallocated, without modifying the value of the pointer, so that the pointer still points to the memory location of the deallocated memory. </p><p><strong>Wild pointers</strong> arise when a pointer is used prior to initialization to some known state, which is possible in some programming languages.</p></blockquote><p>1、迷途指针和野指针都是不指向合法对象的指针</p><p>2、迷途指针：指针指向的内存被释放或回收，但指针变量存放任是那个地址</p><p>3、野指针：未初始化的指针</p><h3 id="4、通过指针遍历数组"><a href="#4、通过指针遍历数组" class="headerlink" title="4、通过指针遍历数组"></a>4、通过指针遍历数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> length = <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(arr+i));</span><br><span class="line">    <span class="comment">// *(arr+i) 等价与 arr[i]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、值传递与地址传递"><a href="#5、值传递与地址传递" class="headerlink" title="5、值传递与地址传递"></a>5、值传递与地址传递</h3><p>理解如下代码即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changeValue</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    a = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changeValue2</span><span class="params">(<span class="type">int</span> *a)</span> &#123;</span><br><span class="line">    *a = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changeAddress</span><span class="params">(<span class="type">char</span> *p)</span> &#123;</span><br><span class="line">    p = <span class="number">0x1122</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changeAddress2</span><span class="params">(<span class="type">char</span> **p)</span> &#123;</span><br><span class="line">    *p = <span class="number">0x1122</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//值传递没用</span></span><br><span class="line">    changeValue(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>,a);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按地址传递可以改变参数的值</span></span><br><span class="line">    changeValue2(&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>,a);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *p = <span class="number">0x1111</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实质还是按值传递</span></span><br><span class="line">    changeAddress(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p的地址%p\n&quot;</span>,p);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按地址传递</span></span><br><span class="line">    changeAddress2(&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p的地址%p\n&quot;</span>,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、指针作参数输入输出性质"><a href="#6、指针作参数输入输出性质" class="headerlink" title="6、指针作参数输入输出性质"></a>6、指针作参数输入输出性质</h3><p>指针作参数可以作为输入参数或输出参数</p><p>输入参数：由主函数分配内存块</p><p>输出参数：被调函数在堆中分配内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">showbuf</span><span class="params">(<span class="type">char</span> *p <span class="comment">/** in **/</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(p,<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span>** p,<span class="type">int</span>* length)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* tmp = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(tmp,<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line"></span><br><span class="line">    *p = tmp;</span><br><span class="line"></span><br><span class="line">    *length = <span class="built_in">strlen</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//指针作为输入参数</span></span><br><span class="line">    <span class="type">char</span> <span class="built_in">array</span>[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    showbuf(<span class="built_in">array</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指针作为输出参数</span></span><br><span class="line">    <span class="type">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    fun(&amp;p, &amp;len);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\np = %s, len = %d\n&quot;</span>, p, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/B1E5290033D9E1C8A978C2F498505E82.jpg"></p><h2 id="二、字符串"><a href="#二、字符串" class="headerlink" title="二、字符串"></a>二、字符串</h2><h3 id="1、字符串初始化"><a href="#1、字符串初始化" class="headerlink" title="1、字符串初始化"></a>1、字符串初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//c语言中没有String类型，使用字符数组代替字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//乱码，因为无结束符</span></span><br><span class="line">    <span class="type">char</span> str[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str = %s\n&quot;</span>,str);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不乱码，剩余元素自动补0</span></span><br><span class="line">    <span class="type">char</span> str1[<span class="number">10</span>] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1 = %s\n&quot;</span>,str1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一般这样使用</span></span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sizeof与length区别</span></span><br><span class="line">    <span class="comment">//length = 6 sizeof = 7 多一个0或‘\0’</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length = %d , sizeof = %d\n&quot;</span>,<span class="built_in">strlen</span>(str2), <span class="keyword">sizeof</span>(str2));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过[]或指针操作字符串</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过[]便于阅读</span></span><br><span class="line">    <span class="keyword">for</span>(; i &lt; <span class="built_in">strlen</span>(str2); i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过指针</span></span><br><span class="line">    p = str2;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str2); i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*(str2+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str2); i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//思考str2和p完全等价吗</span></span><br><span class="line">    <span class="comment">//str2++;报错，str2是常量，为了释放内存</span></span><br><span class="line">    <span class="comment">//p++;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、字符串拷贝"><a href="#2、字符串拷贝" class="headerlink" title="2、字符串拷贝"></a>2、字符串拷贝</h3><p>1、最基本实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> src[] = <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">    <span class="type">char</span> dst[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;src[i] != <span class="number">0</span>; i++) &#123;</span><br><span class="line">        dst[i] = src[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、封装函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">str_copy1</span><span class="params">(<span class="type">char</span>* dst,<span class="type">char</span>* src)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;src[i] != <span class="number">0</span>; i++) &#123;</span><br><span class="line">        dst[i] = src[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> src[] = <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">    <span class="type">char</span> dst[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    str_copy1(dst,src);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、函数[]换指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">str_copy2</span><span class="params">(<span class="type">char</span>* dst,<span class="type">char</span>* src)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;*(src+i) != <span class="number">0</span>; i++) &#123;</span><br><span class="line">        *(dst+i) = *(src+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> src[] = <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">    <span class="type">char</span> dst[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    str_copy2(dst,src);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、不使用for循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">str_copy3</span><span class="params">(<span class="type">char</span>* dst,<span class="type">char</span>* src)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*src != <span class="number">0</span>)&#123;</span><br><span class="line">        *dst = *src;</span><br><span class="line">        dst++;</span><br><span class="line">        src++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、极简版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span>* dst,<span class="type">char</span>* src)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*dst++ = *src++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、字符串常见问题"><a href="#3、字符串常见问题" class="headerlink" title="3、字符串常见问题"></a>3、字符串常见问题</h3><h4 id="（1）、子串出现次数"><a href="#（1）、子串出现次数" class="headerlink" title="（1）、子串出现次数"></a>（1）、子串出现次数</h4><p>需借助char* strstr(char* haystack,char* needle) 函数，作用为返回子串出现首元素的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_current_num</span><span class="params">(<span class="type">char</span>* str,<span class="type">char</span>* needle)</span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((str = <span class="built_in">strstr</span>(str,needle)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        num++;</span><br><span class="line">        str += <span class="built_in">strlen</span>(needle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* str = <span class="string">&quot;111abcd22222abcd33333abcd3abcd222abcd1111&quot;</span>;</span><br><span class="line">    <span class="type">int</span> num = get_current_num(str,<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %d&quot;</span>,num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）、两头堵模型"><a href="#（2）、两头堵模型" class="headerlink" title="（2）、两头堵模型"></a>（2）、两头堵模型</h4><p>两头含有空格的字符串中提取出有效字符串长度和有效字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span>*str,<span class="type">char</span>* rst)</span> &#123;</span><br><span class="line">    <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = <span class="built_in">strlen</span>(str) - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isspace</span>(str[begin])) &#123;</span><br><span class="line">        begin ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断全空</span></span><br><span class="line">    <span class="keyword">if</span> (begin == end + <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isspace</span>(str[end])) &#123;</span><br><span class="line">            end --;</span><br><span class="line">        &#125;</span><br><span class="line">        length = end - begin + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span>(rst,str+begin,length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* str = <span class="string">&quot;           cyfwlp                   &quot;</span>;</span><br><span class="line">    <span class="comment">//这里不能定义为char* str</span></span><br><span class="line">    <span class="type">char</span> rst[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> length = fun(str,rst);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length = %d\n&quot;</span>,length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,rst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）、反转字符串"><a href="#（3）、反转字符串" class="headerlink" title="（3）、反转字符串"></a>（3）、反转字符串</h4><p>个人解法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>* inStr, <span class="type">char</span>* outStr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(inStr); ++i) &#123;</span><br><span class="line">        outStr[i] = inStr[<span class="built_in">strlen</span>(inStr) - <span class="number">1</span> - i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* str = <span class="string">&quot;cyfwlp&quot;</span>;<span class="comment">//0 1 2 3 4 5</span></span><br><span class="line">    <span class="type">char</span> rst[<span class="number">100</span>]  = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    reverseString(str,rst);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rst = %s&quot;</span>,rst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、作业"><a href="#三、作业" class="headerlink" title="三、作业"></a>三、作业</h2><p>1、画出字符串一级指针内存四区模型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">20</span>]= <span class="string">&quot;aaaa&quot;</span>;</span><br><span class="line"><span class="type">char</span> buf2[] = <span class="string">&quot;bbbb&quot;</span>; </span><br><span class="line"><span class="type">char</span> *p1 = <span class="string">&quot;111111&quot;</span>; </span><br><span class="line"><span class="type">char</span> *p2 = <span class="built_in">malloc</span>(<span class="number">100</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;               </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/62B47229C5E645FA19433284157049BA.jpg"></p><p>2、有一个字符串开头或结尾含有n个空格 （”   abcdefgdddd    ”），欲去掉前后空格，返回一个新字符串。    ‘</p><p>要求1：请自己定义一个接口（函数），并实现功能；<br>要求2：编写测试用例。<br>int trimSpace(char *inbuf, char *outbuf);  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">trimSpace</span><span class="params">(<span class="type">char</span> *inbuf, <span class="type">char</span> *outbuf)</span>&#123;</span><br><span class="line">    <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = <span class="built_in">strlen</span>(inbuf);</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isspace</span>(inbuf[begin])) &#123;</span><br><span class="line">        begin ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isspace</span>(inbuf[end])) &#123;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(end == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    length = end - begin + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span>(outbuf,inbuf+begin,length);</span><br><span class="line">    outbuf[length] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* str = <span class="string">&quot;   abcdefgdddd    &quot;</span>;</span><br><span class="line">    <span class="type">char</span> result[] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    trimSpace(str,result);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、有一个字符串“1a2b3d4z”；</p><p>要求写一个函数实现如下功能：功能1：把偶数位字符挑选出来，组成一个字符串1。<br>    功能2：把奇数位字符挑选出来，组成一个字符串2。<br>    功能3：把字符串1和字符串2，通过函数参数，传送给main，并打印。<br>    功能4：主函数能测试通过。<br>    int getStr1Str2(char *source, char *buf1, char *buf2);</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getStr1Str2</span><span class="params">(<span class="type">char</span>* source, <span class="type">char</span>* buf1, <span class="type">char</span>* buf2)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> length1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> length2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; <span class="built_in">strlen</span>(source); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            buf1[length1] = source[i];</span><br><span class="line">            length1++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            buf2[length2] = source[i];</span><br><span class="line">            length2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buf1[length1+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    buf2[length2+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化版</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getStr1Str2</span><span class="params">(<span class="type">char</span>* source, <span class="type">char</span>* buf1, <span class="type">char</span>* buf2)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; <span class="built_in">strlen</span>(source); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            *buf1 = source[i];</span><br><span class="line">            buf1++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            *buf2 = source[i];</span><br><span class="line">            buf2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *buf1 = <span class="number">0</span>;</span><br><span class="line">    *buf2 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* str = <span class="string">&quot;1a2b3d4z&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> str2[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    getStr1Str2(str, str1, str2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1 = %s\n&quot;</span>,str1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str2 = %s\n&quot;</span>,str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、键值对（“key &#x3D; value”）字符串，在开发中经常使用</p><p>要求1：请自己定义一个接口，实现根据key获取.<br>要求2：编写测试用例。<br>要求3：键值对中间可能有n多空格，请去除空格</p><p>注意：键值对字符串格式可能如下：<br>“key1 &#x3D; value1”<br>“key2 &#x3D;       value2”<br>“key3  &#x3D; value3”<br>“key4        &#x3D; value4”<br>“key5   &#x3D;   “<br>“key6   &#x3D;”</p><p>int getKeyByValue(char *keyvaluebuf,  char *keybuf,  char *valuebuf, int * valuebuflen);</p><p>int main(void)<br>{<br>    &#x2F;&#x2F;…<br>    getKeyByValude(“key1 &#x3D;   valude1”, “key1”, buf, &amp;len);<br>    &#x2F;&#x2F;…</p><p>​    return 0;</p><p>}</p><blockquote><p>想不出来，听讲解吧</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">trimSpace</span><span class="params">(<span class="type">char</span>* inStr, <span class="type">char</span>* outStr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = <span class="built_in">strlen</span>(inStr) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isspace</span>(inStr[begin])) &#123;</span><br><span class="line">        begin ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isspace</span>(inStr[end])) &#123;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    length = end - begin + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span>(outStr,inStr+begin,length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getKeyByValue</span><span class="params">(<span class="type">char</span> *keyvaluebuf,  <span class="type">char</span> *keybuf,  <span class="type">char</span> *valuebuf, <span class="type">int</span> * valuebuflen)</span>&#123;</span><br><span class="line">    <span class="comment">//先判断有没有</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(keyvaluebuf,keybuf) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找等号然后去掉两边空格即可</span></span><br><span class="line">    <span class="type">char</span> *value = <span class="built_in">strstr</span>(keyvaluebuf, <span class="string">&quot;=&quot;</span>);</span><br><span class="line">    value += <span class="number">1</span>;</span><br><span class="line">    *valuebuflen = trimSpace(value,valuebuf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *keyvaluebuf = <span class="string">&quot;    key1    =   valude1   &quot;</span>;</span><br><span class="line">    <span class="type">char</span> *key = <span class="string">&quot;key1&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    getKeyByValue(keyvaluebuf, key, buf, &amp;len);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value = %s&quot;</span>,buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h1><blockquote><p>day03</p><p>1、const使用</p><p>2、二级指针三种模型</p><p>3、多级指针</p></blockquote><!-- more --><h2 id="一、const使用"><a href="#一、const使用" class="headerlink" title="一、const使用"></a>一、const使用</h2><p><strong>作用：修饰的变量为只读</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//a =20; err</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此处const修饰的是*str,是指针指向内存的值不能修改</span></span><br><span class="line"><span class="type">char</span> buf[] = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">char</span> <span class="type">const</span> *str = buf;</span><br><span class="line"></span><br><span class="line">str = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//str[0] = &#x27;2&#x27;; err</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处const修饰的是*str,是指针变量的值不能修改</span></span><br><span class="line"><span class="type">char</span> * <span class="type">const</span> str1 = buf;</span><br><span class="line"></span><br><span class="line"><span class="comment">//str1 = NULL; err</span></span><br><span class="line">str1[<span class="number">0</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量的值和指针指向内存的值都不能改变</span></span><br><span class="line"><span class="type">char</span> <span class="type">const</span> * <span class="type">const</span> str2 = buf;</span><br><span class="line"></span><br><span class="line"><span class="comment">//str2 = NULL; err</span></span><br><span class="line"><span class="comment">//str2[0] = &#x27;2&#x27;; err</span></span><br></pre></td></tr></table></figure><p><strong>但还是通过指针来间接修改值 – 冒牌货</strong>（c++中完善这个问题）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> b  = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p = &amp;b;</span><br><span class="line">*p = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h2 id="二、二级指针"><a href="#二、二级指针" class="headerlink" title="二、二级指针"></a>二、二级指针</h2><p>指向指针的指针</p><h3 id="1、二级指针作为输出参数"><a href="#1、二级指针作为输出参数" class="headerlink" title="1、二级指针作为输出参数"></a>1、二级指针作为输出参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getStr</span><span class="params">(<span class="type">char</span> *str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getStr1</span><span class="params">(<span class="type">char</span> **str)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    getStr1(&amp;str);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str = %s&quot;</span>,str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getStr</span><span class="params">(<span class="type">char</span> *str)</span> &#123;</span><br><span class="line">    str = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(str,<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getStr1</span><span class="params">(<span class="type">char</span>** str)</span> &#123;</span><br><span class="line">    *str = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(*str,<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/E04F490A037DAB7C27D8040043D770EF.jpg"></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/7A59D4B4073ECDA9992D07FCFB92DDB8.png"></p><h3 id="2、指针数组"><a href="#2、指针数组" class="headerlink" title="2、指针数组"></a>2、指针数组</h3><p>完成如下功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *myArray[] = &#123;<span class="string">&quot;aaaaaa&quot;</span>, <span class="string">&quot;ccccc&quot;</span>, <span class="string">&quot;bbbbbb&quot;</span>, <span class="string">&quot;111111&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printMyArray</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sortMyArray</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_print</span><span class="params">(<span class="type">char</span>* p[],<span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">char</span> **p, <span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* temp;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; length - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(p[i],p[j]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//需要交换</span></span><br><span class="line">                temp = p[i];</span><br><span class="line">                p[i] = p[j];</span><br><span class="line">                p[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* p0 = <span class="string">&quot;4444&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* p1 = <span class="string">&quot;3333&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* p2 = <span class="string">&quot;2222&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* p3 = <span class="string">&quot;1111&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* p[] = &#123;p0,p1,p2,p3&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> length = <span class="keyword">sizeof</span>(p)/ <span class="keyword">sizeof</span>(p[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;before sort\n&quot;</span>);</span><br><span class="line">    my_print(p,length);</span><br><span class="line"></span><br><span class="line">    sort(p,length);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;after sort\n&quot;</span>);</span><br><span class="line">    my_print(p,length);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、二维数组"><a href="#3、二维数组" class="headerlink" title="3、二维数组"></a>3、二维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> a0[<span class="number">30</span>] = <span class="string">&quot;111111&quot;</span>;</span><br><span class="line">    <span class="type">char</span> a1[<span class="number">30</span>] = <span class="string">&quot;222222&quot;</span>;</span><br><span class="line">    <span class="type">char</span> a2[<span class="number">30</span>] = <span class="string">&quot;333333&quot;</span>;</span><br><span class="line">    <span class="type">char</span> a3[<span class="number">30</span>] = <span class="string">&quot;444444&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> a[<span class="number">4</span>][<span class="number">30</span>] = &#123;<span class="string">&quot;111111&quot;</span>,<span class="string">&quot;222222&quot;</span>,<span class="string">&quot;333333&quot;</span>,<span class="string">&quot;444444&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//a? a是数组首行的地址(注意：首行的地址，数组首地址和数组首元素的地址相同，只是步长不同)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,a,a+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//output 6421776 6421806</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,&amp;a,&amp;a+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//output 6421776 6421896</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,*a,*a+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//output 6421776 6421777</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,*(a+i));</span><br><span class="line">        <span class="comment">//a+i 和 *(a+i) 一样</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成如下功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> myArray[][<span class="number">30</span>] = &#123;<span class="string">&quot;44444&quot;</span>, <span class="string">&quot;33333&quot;</span>, <span class="string">&quot;22222&quot;</span>, <span class="string">&quot;11111&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> printMyArray(<span class="type">char</span> myArray[][<span class="number">30</span>], <span class="type">int</span> num);</span><br><span class="line"><span class="type">void</span> <span class="title function_">sortMyArray</span><span class="params">(<span class="type">char</span> myArray[][<span class="number">30</span>], <span class="type">int</span> num)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printMyArray</span><span class="params">(<span class="type">char</span> myArray[][<span class="number">30</span>], <span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,myArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortMyArray</span><span class="params">(<span class="type">char</span> myArray[][<span class="number">30</span>], <span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">char</span> temp[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; num; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(myArray[i],myArray[j]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//交换</span></span><br><span class="line">                <span class="built_in">strcpy</span>(temp,myArray[i]);</span><br><span class="line">                <span class="built_in">strcpy</span>(myArray[i],myArray[j]);</span><br><span class="line">                <span class="built_in">strcpy</span>(myArray[j],temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> myArray[][<span class="number">30</span>] = &#123;<span class="string">&quot;44444&quot;</span>, <span class="string">&quot;33333&quot;</span>, <span class="string">&quot;22222&quot;</span>, <span class="string">&quot;11111&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> length = <span class="keyword">sizeof</span>(myArray)/ <span class="keyword">sizeof</span>(myArray[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;before sort\n&quot;</span>);</span><br><span class="line">    printMyArray(myArray,length);</span><br><span class="line"></span><br><span class="line">    sortMyArray(myArray,length);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;after sort\n&quot;</span>);</span><br><span class="line">    printMyArray(myArray,length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、动态生成二维内存"><a href="#4、动态生成二维内存" class="headerlink" title="4、动态生成二维内存"></a>4、动态生成二维内存</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>** p = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        *(p+i) = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">sprintf</span>(*(p+i),<span class="string">&quot;str%d%d&quot;</span>,i,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i= <span class="number">0</span>; i&lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,*(p+i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*(p+i) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(*(p+i));</span><br><span class="line">            *(p+i) = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/2F99012363E612F88AC4555A4FB9D2DA.jpg"></p><p>完成如下功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> **myArray = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> **<span class="title function_">getMem</span><span class="params">(<span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printMyArray</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sortMyArray</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">arrayFree</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> **<span class="title function_">getMem</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>** p = (<span class="type">char</span>**)<span class="built_in">malloc</span>(num * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        *(p+i) = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">sprintf</span>(*(p+i),<span class="string">&quot;str%d%d&quot;</span>,i,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printMyArray</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,*(myArray+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sortMyArray</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* tmp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; num; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(*(myArray+i),*(myArray+j)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                tmp = *(myArray+i);</span><br><span class="line">                *(myArray+i) = *(myArray+j);</span><br><span class="line">                *(myArray+j) = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">arrayFree</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*(myArray+i) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(*(myArray+i));</span><br><span class="line">            *(myArray+i) = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(myArray != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(myArray);</span><br><span class="line">        myArray = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> **myArray = <span class="literal">NULL</span>;</span><br><span class="line">    myArray = getMem(<span class="number">3</span>);</span><br><span class="line">    printMyArray(myArray,<span class="number">3</span>);</span><br><span class="line">    sortMyArray(myArray,<span class="number">3</span>);</span><br><span class="line">    printMyArray(myArray,<span class="number">3</span>);</span><br><span class="line">    arrayFree(myArray,<span class="number">3</span>);</span><br><span class="line">    myArray = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、作业-1"><a href="#三、作业-1" class="headerlink" title="三、作业"></a>三、作业</h2><p>1、</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="comment">//下面有啥区别？</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *p = buf; <span class="comment">//p指向内存不可修改</span></span><br><span class="line"><span class="type">char</span> <span class="type">const</span> *p = buf; <span class="comment">//和上面的一样</span></span><br><span class="line"><span class="type">char</span> * <span class="type">const</span> p = buf;<span class="comment">//p的值不可修改</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="type">const</span> *p = buf;<span class="comment">//p指向内存和p的值都不能修改</span></span><br></pre></td></tr></table></figure><p>2、</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *p1[] = &#123;<span class="string">&quot;1111&quot;</span>, <span class="string">&quot;2222&quot;</span>, <span class="string">&quot;3333&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">sizeof</span>(p1)/<span class="keyword">sizeof</span>(p1[<span class="number">0</span>]) = ? <span class="comment">// 12/4 = 3</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *p2[<span class="number">10</span>] = &#123;<span class="string">&quot;1111&quot;</span>, <span class="string">&quot;2222&quot;</span>, <span class="string">&quot;3333&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">sizeof</span>(p2)/<span class="keyword">sizeof</span>(p2[<span class="number">0</span>]) = ? <span class="comment">// 40/4 = 10</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> p3[][<span class="number">30</span>] = &#123;<span class="string">&quot;1111&quot;</span>, <span class="string">&quot;2222&quot;</span>, <span class="string">&quot;3333&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">sizeof</span>(p3)/<span class="keyword">sizeof</span>(p3[<span class="number">0</span>]) = ? <span class="comment">// 90/30 = 3</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> p4[<span class="number">10</span>][<span class="number">30</span>] = &#123;<span class="string">&quot;1111&quot;</span>, <span class="string">&quot;2222&quot;</span>, <span class="string">&quot;3333&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">sizeof</span>(p4)/<span class="keyword">sizeof</span>(p4[<span class="number">0</span>]) = ? <span class="comment">// 300/30 = 10</span></span><br></pre></td></tr></table></figure><p>3、char buf[][30] &#x3D; {“1111”, “2222”, “3333”};<br>二维数组做函数参数，为什么不能这么写？<br>void fun(char **buf);</p><p>步长不一样</p><p>void fun(char **buf) 和 void fun(char buf[ ]  [30]) 有什么区别？</p><p>void fun(char buf[ ]  [30]) 指定了步长为30</p><p>4、有字符串有以下特征（“abcd11111abcd2222abcdqqqqq”）,求写一个函数接口，输出以下结果。把字符串替换成（dcba11111dcba2222dcbaqqqqq），并把结果传出。</p><p>要求：<br>             1. 正确实现接口和功能</p><pre><code>         2. 编写测试用例</code></pre><p>tips:</p><p>可使用&lt;string.h&gt;中strncat和strcat函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">strncat</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src, <span class="type">size_t</span> n)</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">strcat</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">src:    原字符串</span></span><br><span class="line"><span class="comment">dst:    生成的或需要填充的字符串</span></span><br><span class="line"><span class="comment">sub:    需要查找的子字符串</span></span><br><span class="line"><span class="comment">new_sub:提换的新子字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return : 0 成功</span></span><br><span class="line"><span class="comment">-1 失败</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">replaceSubstr</span><span class="params">(<span class="comment">/* in */</span><span class="type">char</span> *src, <span class="comment">/* out */</span><span class="type">char</span>** dst, </span></span><br><span class="line"><span class="params">             <span class="comment">/* in */</span><span class="type">char</span> *sub,  <span class="comment">/* in */</span><span class="type">char</span> *new_sub)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">src:    原字符串</span></span><br><span class="line"><span class="comment">dst:    生成的或需要填充的字符串</span></span><br><span class="line"><span class="comment">sub:    需要查找的子字符串</span></span><br><span class="line"><span class="comment">new_sub:提换的新子字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return : 0 成功</span></span><br><span class="line"><span class="comment">      -1 失败</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">replaceSubstr</span><span class="params">(<span class="comment">/* in */</span><span class="type">char</span> *src, <span class="comment">/* out */</span><span class="type">char</span>** dst,</span></span><br><span class="line"><span class="params">        <span class="comment">/* in */</span><span class="type">char</span> *sub,  <span class="comment">/* in */</span><span class="type">char</span> *new_sub)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (src == <span class="literal">NULL</span> || dst == <span class="literal">NULL</span> || sub == <span class="literal">NULL</span> || new_sub == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> tmp[<span class="number">512</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span>* start = src;</span><br><span class="line">    <span class="type">char</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((p = <span class="built_in">strstr</span>(start,sub)) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">strncat</span>(tmp,start,p-start);</span><br><span class="line">        <span class="built_in">strncat</span>(tmp,new_sub,<span class="built_in">strlen</span>(new_sub));</span><br><span class="line">        start = p + <span class="built_in">strlen</span>(sub);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcat</span>(tmp,start);</span><br><span class="line"></span><br><span class="line">    *dst = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(tmp) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(*dst,tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* src = <span class="string">&quot;111111abcd11111abcd2222abcd11111&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *dst = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *sub = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *new_sub = <span class="string">&quot;dcbba&quot;</span>;</span><br><span class="line"></span><br><span class="line">    replaceSubstr(src, &amp;dst, sub, new_sub);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dst = %s&quot;</span>,dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、有一个字符串符合以下特征（“abcdef,acccd,eeee,aaaa,e3eeee,ssss,”）</p><p>写两个函数(API)，输出以下结果</p><p>第一个API(第二种内存模型： 二维数组)<br>1)以逗号分隔字符串，形成二维数组，并把结果传出<br>2)把二维数组行数运算结果也传出<br>int spitString(const char *str, char c, char buf[10][3] &#x2F;<em>in</em>&#x2F;, int *count);</p><p>第二个API(第三种内存模型：动态生成二维内存)<br>1)以逗号分隔字符串，形成一个二级指针。<br>2)把一共拆分多少行字符串个数传出<br>int spitString2(const char *str, char c, char **myp &#x2F;<em>in</em>&#x2F;, int *count);</p><p>要求：<br>1, 能正确表达功能的要求，定义出接口。<br>2, 正确实现接口和功能.<br>3, 编写正确的测试用例.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by admin on 2022/3/6.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1)以逗号分隔字符串，形成二维数组，并把结果传出</span></span><br><span class="line"><span class="comment">   2)把二维数组行数运算结果也传出</span></span><br><span class="line"><span class="comment"> * @param str</span></span><br><span class="line"><span class="comment"> * @param c</span></span><br><span class="line"><span class="comment"> * @param buf</span></span><br><span class="line"><span class="comment"> * @param count</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">spitString</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">char</span> c, <span class="type">char</span> buf[<span class="number">10</span>][<span class="number">30</span>]<span class="comment">/*in*/</span>, <span class="type">int</span> *count)</span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* start = str;</span><br><span class="line">    <span class="type">char</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((p = <span class="built_in">strchr</span>(start,c)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">strncpy</span>(buf[i],start,p - start);</span><br><span class="line">        buf[i][p-start]  = <span class="number">0</span>;</span><br><span class="line">        i++;</span><br><span class="line">        start = p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理最后一个字符串</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf[i],start);</span><br><span class="line">    *count = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">spitString2</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">char</span> c, <span class="type">char</span> **myp <span class="comment">/*in*/</span>, <span class="type">int</span> *count)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* start = str;</span><br><span class="line">    <span class="type">char</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((p = <span class="built_in">strchr</span>(start,c)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">strncpy</span>(myp[i],start,p - start);</span><br><span class="line">        myp[i][p-start] = <span class="number">0</span>;</span><br><span class="line">        i++;</span><br><span class="line">        start = p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理最后一个字符串</span></span><br><span class="line">    <span class="built_in">strcpy</span>(*(myp+i),start);</span><br><span class="line">    *count = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>** <span class="title function_">getMen</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">char</span>** tmp = (<span class="type">char</span>**)<span class="built_in">malloc</span>(num * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        *(tmp+i) = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getNum</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str,<span class="type">char</span> c)</span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* start = str;</span><br><span class="line">    <span class="type">char</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((p = <span class="built_in">strchr</span>(start,c)) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        start = p + <span class="number">1</span>;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeBuf</span><span class="params">(<span class="type">char</span> **buf,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(*(buf+i) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(*(buf+i));</span><br><span class="line">            *(buf+i) = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* src = <span class="string">&quot;abcdef,acccd,eeee,aaaa,e3eeee,ssss&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">10</span>][<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>** buf1 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    spitString(src,&#x27;,&#x27;,buf,&amp;count);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    for (int i = 0; i &lt; count; ++i) &#123;</span></span><br><span class="line"><span class="comment">//        printf(&quot;%s\n&quot;,buf[i]);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    count = getNum(src,<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    buf1 = getMen(count);</span><br><span class="line"></span><br><span class="line">    spitString2(src,<span class="string">&#x27;,&#x27;</span>,buf1,&amp;count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,buf1[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    freeBuf(buf1,count);</span><br><span class="line">    buf1 = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、多级指针"><a href="#四、多级指针" class="headerlink" title="四、多级指针"></a>四、多级指针</h2><p> 在作业基础上，将freeBuf函数和getMem函数修改为传入三级指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>** <span class="title function_">getMem</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">char</span>** tmp = (<span class="type">char</span>**)<span class="built_in">malloc</span>(num * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        *(tmp+i) = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getMem1</span><span class="params">(<span class="type">char</span>*** p, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="type">char</span>** tmp = (<span class="type">char</span>**)<span class="built_in">malloc</span>(num * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        *(tmp+i) = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    *p = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeBuf</span><span class="params">(<span class="type">char</span>** buf,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(buf[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(buf[i]);</span><br><span class="line">            buf[i]= <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (buf != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(buf);</span><br><span class="line">        buf = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeBuf1</span><span class="params">(<span class="type">char</span> ***tmp,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>** buf = *tmp;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(buf[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(buf[i]);</span><br><span class="line">            buf[i]= <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (buf != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(buf);</span><br><span class="line">        buf = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="day04"><a href="#day04" class="headerlink" title="day04"></a>day04</h1><blockquote><p>数组提升：</p><p>1、数组指针与指针数组</p></blockquote><!--more--><h2 id="一、数组提升"><a href="#一、数组提升" class="headerlink" title="一、数组提升"></a>一、数组提升</h2><h3 id="1、数组也是一种数据类型"><a href="#1、数组也是一种数据类型" class="headerlink" title="1、数组也是一种数据类型"></a>1、数组也是一种数据类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组也是数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Array[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Array a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> length = <span class="keyword">sizeof</span>(a)/ <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、指针数组与数组指针"><a href="#2、指针数组与数组指针" class="headerlink" title="2、指针数组与数组指针"></a>2、指针数组与数组指针</h3><p>main函数可以有参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param argc 参数个数</span></span><br><span class="line"><span class="comment"> * @param argv 参数（指针数组）</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; argc; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220307115254821.png" alt="命令行运行结果"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Array[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*P)</span>[10];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="comment">//三种定义数组指针的方式</span></span><br><span class="line">    Array* <span class="built_in">array</span> = &amp;a;<span class="comment">//这里写Array* array = a也行</span></span><br><span class="line">    P p = &amp;a;</span><br><span class="line">    <span class="type">int</span> (*q)[<span class="number">10</span>] = &amp;a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,(*p)[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">//1、a表示什么</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d,a+1 = %d\n&quot;</span>,a,a+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//a = 6422000,a+1 = 6422016 -&gt; a表示首行首地址</span></span><br><span class="line">    <span class="comment">//2、使用指针遍历二维数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;<span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(*(a+i)+j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * a -&gt; a[0] :首行首地址</span></span><br><span class="line"><span class="comment">     * a + i  :i行首地址</span></span><br><span class="line"><span class="comment">     * *(a+i) -&gt; a[i] :i行首元素地址</span></span><br><span class="line"><span class="comment">     * *(a+i)+j -&gt; &amp;a[i][j] :i行j列元素地址</span></span><br><span class="line"><span class="comment">     * *(*(a+i)+j) -&gt; a[i][j] :i行j列元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、二维数组在内存中还是按一维数组存放</span></span><br><span class="line">    printArray((<span class="type">int</span>*) a,<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、二维数组-1"><a href="#3、二维数组-1" class="headerlink" title="3、二维数组"></a>3、二维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">//1、a表示什么</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d,a+1 = %d\n&quot;</span>,a,a+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//a = 6422000,a+1 = 6422016 -&gt; a表示首行首地址</span></span><br><span class="line">    <span class="comment">//2、使用指针遍历二维数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;<span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(*(a+i)+j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * a  :首行首地址</span></span><br><span class="line"><span class="comment">     * a + i :i行首地址</span></span><br><span class="line"><span class="comment">     * *(a+i) -&gt; a[i] :i行首元素地址</span></span><br><span class="line"><span class="comment">     * *(a+i)+j -&gt; &amp;a[i][j] :i行j列元素地址</span></span><br><span class="line"><span class="comment">     * *(*(a+i)+j) -&gt; a[i][j] :i行j列元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、二维数组在内存中还是按一维数组存放</span></span><br><span class="line">    printArray((<span class="type">int</span>*) a,<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组指针指向二维数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> (*p)[<span class="number">4</span>] = a; <span class="comment">//此时p等价于a</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(*(p+i)+j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再理解<strong>首行首元素地址</strong>与<strong>首行首地址</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * a *a &amp;a **a;</span></span><br><span class="line"><span class="comment">     * a:首行首地址 步长16</span></span><br><span class="line"><span class="comment">     * *a:首行首元素的地址 步长4</span></span><br><span class="line"><span class="comment">     * **a:首行首元素的值</span></span><br><span class="line"><span class="comment">     * &amp;a:二维数组的首地址 步长48</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * sizeof(a) sizeof(*a) sizeof(&amp;a) sizeof(**a)</span></span><br><span class="line"><span class="comment">     * 48  16   8  4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> b[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, <span class="keyword">sizeof</span>(b), <span class="keyword">sizeof</span>(&amp;b));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, <span class="keyword">sizeof</span>(a[<span class="number">0</span>]), <span class="keyword">sizeof</span>(&amp;a[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, <span class="keyword">sizeof</span>(*(a+<span class="number">0</span>)), <span class="keyword">sizeof</span>(a+<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>, <span class="keyword">sizeof</span>(a), <span class="keyword">sizeof</span>(*a), <span class="keyword">sizeof</span>(&amp;a), <span class="keyword">sizeof</span>(**a));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、二维数组作形参"><a href="#4、二维数组作形参" class="headerlink" title="4、二维数组作形参"></a>4、二维数组作形参</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printfArray</span><span class="params">(<span class="type">int</span> (*a)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span> ,a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line">    printfArray(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、作业"><a href="#二、作业" class="headerlink" title="二、作业"></a>二、作业</h2><p>1、简述指针数组和数组指针的区别。</p><p>指针数组是数组，它存放多个指针类型的数据；</p><p>数组指针是指针，它指向数组的指针；</p><p>2、如何定义一个指向 int a[10] 类型的指针变量（数组指针）（使用3种方法）？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">int</span> A[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*P)</span>[10];</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    A* a = &amp;<span class="built_in">array</span>;</span><br><span class="line">    P p = &amp;<span class="built_in">array</span>;</span><br><span class="line">    <span class="type">int</span> (*q)[<span class="number">10</span>] = &amp;<span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> b[<span class="number">5</span>][<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> (*p)[<span class="number">10</span>];</span><br><span class="line">p = &amp;a;<span class="comment">//为何加 &amp;</span></span><br><span class="line">p = b;<span class="comment">//为何不用加 &amp; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//answer</span></span><br><span class="line"><span class="comment">//&amp;a才表示a[10]的地址</span></span><br><span class="line"><span class="comment">//b就表示行地址  </span></span><br></pre></td></tr></table></figure><p>4、如何在栈上开辟一个二维数组，如何在堆上开辟一个二维数组？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栈上</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//堆上</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>** p = <span class="literal">NULL</span>;</span><br><span class="line">*p = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * num);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">*p[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>;</span><br><span class="line"><span class="comment">//argc, argv分别代表什么？</span></span><br><span class="line"><span class="comment">//参数的数量</span></span><br><span class="line"><span class="comment">//参数</span></span><br></pre></td></tr></table></figure><p>6、找到数组中指定字符串的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NUM(a) (sizeof(a)/sizeof(*a))</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* keywords[] = &#123;</span><br><span class="line"><span class="string">&quot;while&quot;</span>, </span><br><span class="line"><span class="string">&quot;case&quot;</span>,</span><br><span class="line"><span class="string">&quot;static&quot;</span>,</span><br><span class="line"><span class="string">&quot;do&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searcheKeyTable</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* table[], <span class="type">const</span> <span class="type">int</span> size, </span></span><br><span class="line"><span class="params">  <span class="type">const</span> <span class="type">char</span>* key, <span class="type">int</span> *pos)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM(a) (sizeof(a)/sizeof(*a))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//找到数组中指定字符串的位置</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searcheKeyTable</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* table[], <span class="type">const</span> <span class="type">int</span> size,</span></span><br><span class="line"><span class="params">                    <span class="type">const</span> <span class="type">char</span>* key, <span class="type">int</span> *pos)</span>&#123;</span><br><span class="line"></span><br><span class="line">    *pos = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="built_in">strcmp</span>(key,table[i])) == <span class="number">0</span>)&#123;</span><br><span class="line">            *pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (*pos == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="comment">//没找到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* keywords[] = &#123;</span><br><span class="line">            <span class="string">&quot;while&quot;</span>,</span><br><span class="line">            <span class="string">&quot;case&quot;</span>,</span><br><span class="line">            <span class="string">&quot;static&quot;</span>,</span><br><span class="line">            <span class="string">&quot;do&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> length = NUM(keywords);</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* key = <span class="string">&quot;do&quot;</span>;</span><br><span class="line">    <span class="type">int</span> ret = searcheKeyTable(keywords, length, key, &amp;pos);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;searcheKeyTable() err %d&quot;</span>,ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span> ,pos);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、将字符串数组进行排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sort</span><span class="params">(<span class="type">char</span> **array1, <span class="type">int</span> num1,</span></span><br><span class="line"><span class="params">         <span class="type">char</span> (*array2)[<span class="number">30</span>], <span class="type">int</span> num2, </span></span><br><span class="line"><span class="params">         <span class="type">char</span> ***myp3 <span class="comment">/*out*/</span>, <span class="type">int</span> *num3)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>; </span><br><span class="line">    <span class="type">char</span> *p1[] = &#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;ccccccc&quot;</span>, <span class="string">&quot;bbbbbb&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> buf2[<span class="number">10</span>][<span class="number">30</span>] = &#123;<span class="string">&quot;111111&quot;</span>, <span class="string">&quot;3333333&quot;</span>, <span class="string">&quot;222222&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> **p3 = <span class="literal">NULL</span>;   </span><br><span class="line">    <span class="type">int</span> len1, len2, len3, i = <span class="number">0</span>;</span><br><span class="line">                            </span><br><span class="line">    len1 = <span class="keyword">sizeof</span>(p1)/<span class="keyword">sizeof</span>(*p1);</span><br><span class="line">    len2 = <span class="number">3</span>;</span><br><span class="line">                                    </span><br><span class="line">    ret = sort(p1, len1, buf2, len2, &amp;p3, &amp;len3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sort</span><span class="params">(<span class="type">char</span> **array1, <span class="type">int</span> num1,</span></span><br><span class="line"><span class="params">         <span class="type">char</span> (*array2)[<span class="number">30</span>], <span class="type">int</span> num2,</span></span><br><span class="line"><span class="params">         <span class="type">char</span> ***myp3 <span class="comment">/*out*/</span>, <span class="type">int</span> *num3)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义变量，别直接使用*myp3</span></span><br><span class="line">    <span class="type">char</span>** temp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num = num1 + num2;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* tmp= <span class="literal">NULL</span>;</span><br><span class="line">    temp = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * num);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num1; ++i) &#123;</span><br><span class="line">        temp[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(array1[i]) + <span class="number">1</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(temp[i],array1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = num1, j = <span class="number">0</span>; i &lt; num; ++i,++j) &#123;</span><br><span class="line">        temp[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(array2[j]) + <span class="number">1</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(temp[i],array2[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i+<span class="number">1</span>; j &lt; num; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">strcmp</span>(temp[i],temp[j])) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                tmp = temp[i];</span><br><span class="line">                temp[i] = temp[j];</span><br><span class="line">                temp[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *myp3 = temp;</span><br><span class="line">    *num3 = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeBuf</span><span class="params">(<span class="type">char</span>*** p,<span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="type">char</span> **tmp = *p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(tmp[i]);</span><br><span class="line">            tmp[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tmp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(tmp);</span><br><span class="line">        tmp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *p1[] = &#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;ccccccc&quot;</span>, <span class="string">&quot;bbbbbb&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> buf2[<span class="number">10</span>][<span class="number">30</span>] = &#123;<span class="string">&quot;111111&quot;</span>, <span class="string">&quot;3333333&quot;</span>, <span class="string">&quot;222222&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> **p3 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> len1, len2, len3, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    len1 = <span class="keyword">sizeof</span>(p1)/<span class="keyword">sizeof</span>(*p1);</span><br><span class="line">    len2 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    ret = sort(p1, len1, buf2, len2, &amp;p3, &amp;len3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (len1 + len2); ++j) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s \n&quot;</span>,p3[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    freeBuf(&amp;p3,len3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="day05"><a href="#day05" class="headerlink" title="day05"></a>day05</h1><blockquote><p>结构体</p></blockquote><!--more--><h2 id="一、结构体"><a href="#一、结构体" class="headerlink" title="一、结构体"></a>一、结构体</h2><h3 id="1、结构体基本操作"><a href="#1、结构体基本操作" class="headerlink" title="1、结构体基本操作"></a>1、结构体基本操作</h3><p><strong>结构体定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="comment">//1、普通定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student1</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、typedef定义（最为使用频繁）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student2</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; Teacher;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、在定义类型时定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student3</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;s1,s2;</span><br></pre></td></tr></table></figure><p>**结构体指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student teacher = &#123;<span class="string">&quot;liaotao&quot;</span>,<span class="number">22</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>,teacher.name,teacher.age);</span><br><span class="line">Student* p = &amp;teacher;</span><br><span class="line">p-&gt;age = <span class="number">35</span>; <span class="comment">//or (*p).age = 35;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>,teacher.name,teacher.age);</span><br></pre></td></tr></table></figure><h3 id="2、结构体数组"><a href="#2、结构体数组" class="headerlink" title="2、结构体数组"></a>2、结构体数组</h3><p><strong>静态结构体数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; Teacher ;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Teacher <span class="built_in">array</span>[<span class="number">3</span>] = &#123;&#123;<span class="string">&quot;liaotao&quot;</span>,<span class="number">12</span>&#125;,</span><br><span class="line">                        &#123;<span class="string">&quot;liaotao1&quot;</span>,<span class="number">13</span>&#125;,</span><br><span class="line">                        &#123;<span class="string">&quot;liaotao2&quot;</span>,<span class="number">14</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(<span class="built_in">array</span>)/ <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %d \n&quot;</span>,<span class="built_in">array</span>[i].name,<span class="built_in">array</span>[i].age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态结构体数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="comment">//此处若写成 char* name则不行</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; Teacher ;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Teacher* p = (Teacher*)<span class="built_in">malloc</span>(<span class="number">3</span> * <span class="keyword">sizeof</span>(Teacher));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        p[i].age = <span class="number">12</span>;</span><br><span class="line">        <span class="built_in">sprintf</span>(buf,<span class="string">&quot;name%d%d&quot;</span>,i,i);</span><br><span class="line">        <span class="built_in">strcpy</span>(p[i].name,buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %d \n&quot;</span>,p[i].name,p[i].age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、结构体嵌套指针"><a href="#3、结构体嵌套指针" class="headerlink" title="3、结构体嵌套指针"></a>3、结构体嵌套指针</h3><p><strong>结构体嵌套一级指针</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; Teacher ;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、</span></span><br><span class="line">    Teacher teacher1;</span><br><span class="line">    teacher1.name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span>);</span><br><span class="line">    teacher1.age = <span class="number">22</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(teacher1.name,<span class="string">&quot;liaotao&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>,teacher1.name,teacher1.age);</span><br><span class="line">    <span class="keyword">if</span> (teacher1.name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(teacher1.name);</span><br><span class="line">        teacher1.name = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、</span></span><br><span class="line">    Teacher* p = <span class="literal">NULL</span>;</span><br><span class="line">    p = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(teacher1));</span><br><span class="line">    p-&gt;name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">30</span>);</span><br><span class="line">    p-&gt;age = <span class="number">29</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(p-&gt;name,<span class="string">&quot;liaotao&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>,p-&gt;name,p-&gt;age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p-&gt;name);</span><br><span class="line">        p-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>((p));</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、</span></span><br><span class="line">    Teacher*q = <span class="literal">NULL</span>;</span><br><span class="line">    q = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(teacher1) * <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        q[i].name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">30</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(q[i].name,<span class="string">&quot;liaotao&quot;</span>);</span><br><span class="line">        q[i].age = <span class="number">29</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>,q[j].name,q[j].age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; ++k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[k].name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(q[k].name);</span><br><span class="line">            q[k].name = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (q != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完善上述代码（封装函数）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; Teacher ;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printfTeacher</span><span class="params">(Teacher* p,<span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; length; ++j) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>,p[j].name,p[j].age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getMem</span><span class="params">(Teacher** p,<span class="type">int</span> n)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Teacher* q = <span class="literal">NULL</span>;</span><br><span class="line">    q = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher) * n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        q[i].name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">30</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(q[i].name,<span class="string">&quot;liaotao&quot;</span>);</span><br><span class="line">        q[i].age = <span class="number">29</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *p = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeMem</span><span class="params">(Teacher** p,<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    Teacher* q = *p;</span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[k].name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(q[k].name);</span><br><span class="line">            q[k].name = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (q != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    Teacher* q = <span class="literal">NULL</span>;</span><br><span class="line">    getMem(&amp;q,<span class="number">3</span>);</span><br><span class="line">    printfTeacher(q,<span class="number">3</span>);</span><br><span class="line">    freeMem(&amp;q,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结构体嵌套二级指针</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>** stu;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//完善下面的功能</span></span><br><span class="line">    <span class="comment">//1、</span></span><br><span class="line">    Teacher teacher;</span><br><span class="line">    teacher.stu = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        teacher.stu[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">20</span>);</span><br><span class="line">        <span class="type">char</span> temp[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">sprintf</span>(temp,<span class="string">&quot;name%d%d&quot;</span>,i,i);</span><br><span class="line">        <span class="built_in">strcpy</span>(teacher.stu[i],temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,teacher.stu[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (teacher.stu[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(teacher.stu[i]);</span><br><span class="line">            teacher.stu[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (teacher.stu != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(teacher.stu);</span><br><span class="line">        teacher.stu = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、Teacher* q</span></span><br><span class="line">    Teacher* q = <span class="literal">NULL</span>;</span><br><span class="line">    q = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher));</span><br><span class="line">    q-&gt;stu = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        q-&gt;stu[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">20</span>);</span><br><span class="line">        <span class="type">char</span> temp[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">sprintf</span>(temp,<span class="string">&quot;name%d%d&quot;</span>,i,i);</span><br><span class="line">        <span class="built_in">strcpy</span>(q-&gt;stu[i],temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,q-&gt;stu[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q-&gt;stu[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(q-&gt;stu[i]);</span><br><span class="line">            q-&gt;stu[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (q-&gt;stu != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(q-&gt;stu);</span><br><span class="line">        q-&gt;stu = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (q != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3、Teacher* p[3]</span></span><br><span class="line">    Teacher *p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    p = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher) * <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        p[i].stu = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            p[i].stu[j] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">20</span>);</span><br><span class="line">            <span class="type">char</span> temp[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">sprintf</span>(temp,<span class="string">&quot;name%d%d&quot;</span>,i,j);</span><br><span class="line">            <span class="built_in">strcpy</span>((p+i)-&gt;stu[j],temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个教师的学生为:&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,p[i].stu[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[i].stu[j] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(p[i].stu[j]);</span><br><span class="line">                p[i].stu[j] = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i].stu != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(p[i].stu);</span><br><span class="line">            p[i].stu = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将3功能封装函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>** stu;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">createTeacher</span><span class="params">(Teacher** temp, <span class="type">int</span> t_num, <span class="type">int</span> s_num)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Teacher *p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    p = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher) * t_num);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; t_num; i++) &#123;</span><br><span class="line">        p[i].stu = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * s_num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; t_num; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; s_num; ++j) &#123;</span><br><span class="line">            p[i].stu[j] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">20</span>);</span><br><span class="line">            <span class="type">char</span> tmp[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">sprintf</span>(tmp,<span class="string">&quot;name%d%d&quot;</span>,i,j);</span><br><span class="line">            <span class="built_in">strcpy</span>((p+i)-&gt;stu[j],tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *temp = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printTeacher</span><span class="params">(Teacher* p, <span class="type">int</span> t_num, <span class="type">int</span> s_num)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; t_num; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个教师的学生为:&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; s_num; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,p[i].stu[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeTeacher</span><span class="params">(Teacher** temp, <span class="type">int</span> t_num, <span class="type">int</span> s_num)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    Teacher* p = *temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[i].stu[j] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(p[i].stu[j]);</span><br><span class="line">                p[i].stu[j] = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i].stu != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(p[i].stu);</span><br><span class="line">            p[i].stu = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">        *temp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    Teacher *p = <span class="literal">NULL</span>;</span><br><span class="line">    createTeacher(&amp;p,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    printTeacher(p,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    freeTeacher(&amp;p,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、结构体深拷贝与浅拷贝"><a href="#4、结构体深拷贝与浅拷贝" class="headerlink" title="4、结构体深拷贝与浅拷贝"></a>4、结构体深拷贝与浅拷贝</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;strings.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; Teacher;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Teacher t1;</span><br><span class="line">    t1.age = <span class="number">22</span>;</span><br><span class="line">    t1.name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">strcpy</span>(t1.name,<span class="string">&quot;lily&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浅拷贝</span></span><br><span class="line">    Teacher t2 = t1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,t1.name,t2.name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//深拷贝</span></span><br><span class="line">    Teacher t3 = t1;</span><br><span class="line">    t3.name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">strcpy</span>(t3.name,t1.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,t1.name,t3.name);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/1F0FC4124976FADD398224B84E5088FA.jpg"></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/A5F92810EEFEEB7CACC4F32AF92CCB02.jpg"></p><blockquote><p>结构体字节对齐直接跳吧，用不到的</p></blockquote><h2 id="二、作业-1"><a href="#二、作业-1" class="headerlink" title="二、作业"></a>二、作业</h2><p>1、列出定义结构体变量的几种方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher1</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">&#125;t1,t2;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">&#125;t3,t4;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher4</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">&#125; Teacher;</span><br></pre></td></tr></table></figure><p>2、同类型结构体变量是否可以相互赋值？会存在什么风险？</p><p>可以，风险为浅拷贝</p><p>3、练习结构体数组排序，从键盘输入3个学生的信息（姓名、学号、成绩），存入一个结构体数组中，计算平均分，并按成绩高低排序并输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Stu s[<span class="number">3</span>];</span><br><span class="line">    <span class="type">int</span> n = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从键盘输入学生信息</span></span><br><span class="line">    initStu(s, n); </span><br><span class="line"></span><br><span class="line">    <span class="comment">//aveStu(s, 3)：平均分</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n平均分为： %lf\n&quot;</span>,  aveStu(s, n) );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分数排序，降序</span></span><br><span class="line">    sortStu(s, n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印学生信息</span></span><br><span class="line">    showStu(s, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;strings.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStu</span><span class="params">(Stu* s,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %lf&quot;</span>,s[i].name,&amp;s[i].id,&amp;s[i].score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showStu</span><span class="params">(Stu* s,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %d %.2lf\n&quot;</span>,s[i].name,s[i].id,s[i].score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">aveStu</span><span class="params">(Stu* s,<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        sum += s[i].score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum/(<span class="type">double</span>)n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortStu</span><span class="params">(Stu* s,<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    Stu temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i].score &lt; s[j].score)&#123;</span><br><span class="line">                temp = s[i];</span><br><span class="line">                s[i] = s[j];</span><br><span class="line">                s[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Stu s[<span class="number">3</span>];</span><br><span class="line">    <span class="type">int</span> n = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从键盘输入学生信息</span></span><br><span class="line">    initStu(s, n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//aveStu(s, 3)：平均分</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n平均分为： %.2lf\n&quot;</span>,  aveStu(s, n) );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分数排序，降序</span></span><br><span class="line">    sortStu(s, n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印学生信息</span></span><br><span class="line">    showStu(s, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、 重写结构体嵌套一级指针老师和二级指针学生的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;strings.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体类型，每个导师有三个学生</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> *tName; <span class="comment">//导师</span></span><br><span class="line">    <span class="type">char</span> **stu;  <span class="comment">//三个学生</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在createTeacher中分配空间</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">createTeacher</span><span class="params">(Teacher **p<span class="comment">/*out*/</span>, <span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    Teacher* temp = (Teacher*)<span class="built_in">malloc</span>(n1 * <span class="keyword">sizeof</span>(Teacher));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">        temp[i].tName = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        temp[i].stu = (<span class="type">char</span>**)<span class="built_in">malloc</span>(n2 * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n2; j++) &#123;</span><br><span class="line">            temp[i].stu[j] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *p = temp;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员赋值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initTeacher</span><span class="params">(Teacher *p, <span class="type">int</span> n1, <span class="type">int</span> n2)</span>&#123;</span><br><span class="line">     <span class="type">int</span> i;</span><br><span class="line">     <span class="type">int</span> j;</span><br><span class="line">     <span class="type">char</span> temp[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">         <span class="built_in">sprintf</span>(temp,<span class="string">&quot;licy%d%d&quot;</span>,i,i);</span><br><span class="line">         <span class="built_in">strcpy</span>(p[i].tName,temp);</span><br><span class="line">         p[i].age = i + <span class="number">20</span>;</span><br><span class="line">         <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n2; j++) &#123;</span><br><span class="line">             <span class="built_in">sprintf</span>(temp,<span class="string">&quot;hello%d%d&quot;</span>,i,j);</span><br><span class="line">             <span class="built_in">strcpy</span>(p[i].stu[j],temp);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印结构体成员信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printTeacher</span><span class="params">(Teacher *p, <span class="type">int</span> n1, <span class="type">int</span> n2)</span>&#123;</span><br><span class="line">     <span class="type">int</span> i;</span><br><span class="line">     <span class="type">int</span> j;</span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;teacher:%s %d\n&quot;</span>,p[i].tName,p[i].age);</span><br><span class="line">         <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n2; j++) &#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,p[i].stu[j]);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据导师名字排序, 降序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortTeacher</span><span class="params">(Teacher *p, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    Teacher temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(p[i].tName,p[j].tName) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                temp = p[i];</span><br><span class="line">                p[i] = p[j];</span><br><span class="line">                p[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放空间，在函数内部把p赋值为NULL</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeTeacher</span><span class="params">(Teacher **p, <span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line">     Teacher *temp = *p;</span><br><span class="line">     <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">     <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span>(temp[i].tName != <span class="literal">NULL</span>) &#123;</span><br><span class="line">             <span class="built_in">free</span>(temp[i].tName);</span><br><span class="line">             temp[i].tName = <span class="literal">NULL</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n2 ; j++) &#123;</span><br><span class="line">             <span class="keyword">if</span> (temp[i].stu[j] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                 <span class="built_in">free</span>(temp[i].stu[j]);</span><br><span class="line">                 temp[i].stu[j] = <span class="literal">NULL</span>;</span><br><span class="line">             &#125;&#125;</span><br><span class="line">        <span class="keyword">if</span> (temp[i].stu != <span class="literal">NULL</span>) &#123;</span><br><span class="line">             <span class="built_in">free</span>(temp[i].stu);</span><br><span class="line">             temp[i].stu = <span class="literal">NULL</span>;</span><br><span class="line">         &#125;&#125;</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="keyword">if</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">         <span class="built_in">free</span>(temp);</span><br><span class="line">         temp = <span class="literal">NULL</span>;</span><br><span class="line">         *P =  <span class="literal">NULL</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n1 = <span class="number">3</span>; <span class="comment">//导师个数</span></span><br><span class="line">    <span class="type">int</span> n2 = <span class="number">3</span>; <span class="comment">//学生</span></span><br><span class="line">    Teacher *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    ret = createTeacher(&amp;p, n1, n2);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;createTeacher err:%d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initTeacher(p, n1, n2); <span class="comment">//给成员赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印成员，排序前</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前：\n&quot;</span>);</span><br><span class="line">    printTeacher(p, n1, n2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据导师名字排序, 降序</span></span><br><span class="line">    sortTeacher(p, n1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印成员，排序后</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n排序后：\n&quot;</span>);</span><br><span class="line">    printTeacher(p, n1, n2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放空间，在函数内部把p赋值为NULL</span></span><br><span class="line">    freeTeacher(&amp;p, n1, n2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、画一下第4题createTeacher()的内存四区图</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/890479C51FA3D138A63C653B23384281.jpg"></p><hr><h1 id="day06"><a href="#day06" class="headerlink" title="day06"></a>day06</h1><blockquote><p>链表</p><p>函数指针</p></blockquote><!--more--><h2 id="一、链表"><a href="#一、链表" class="headerlink" title="一、链表"></a>一、链表</h2><p>为什么使用链表？</p><p>数组缺点（对应链表优点）：</p><ul><li>插入和删除效率低</li><li>需要连续分配空间</li></ul><p>优点：</p><ul><li>随机访问效率高</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>链表分类：</p><ul><li>静态链表，动态链表</li><li>是否带头结点</li><li>单向链表，双向链表，循环链表</li></ul><h3 id="1、静态链表"><a href="#1、静态链表" class="headerlink" title="1、静态链表"></a>1、静态链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Stu s1 = &#123;<span class="number">1</span>,<span class="string">&quot;mike&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">    Stu s2 = &#123;<span class="number">2</span>,<span class="string">&quot;lily&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">    Stu s3 = &#123;<span class="number">3</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//穿起来 </span></span><br><span class="line">    s1.next = &amp;s2;</span><br><span class="line">    s2.next = &amp;s3;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    Stu* p = &amp;s1;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&#123;age = %d,name = %s&#125;\n&quot;</span>,p-&gt;age,p-&gt;name);</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、动态链表（单向）"><a href="#2、动态链表（单向）" class="headerlink" title="2、动态链表（单向）"></a>2、动态链表（单向）</h3><p><strong>(1)建立带有头结点的单向链表</strong></p><p>编写函数SList_Creat，建立带有头结点的单向链表。循环创建结点，结点数据域中的数值从键盘输入，以-1作为输入结束标志。链表的头结点地址由函数值返回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_Creat，建立带有头结点的单向链表。</span></span><br><span class="line"><span class="comment"> * 循环创建结点，结点数据域中的数值从键盘输入，</span></span><br><span class="line"><span class="comment"> * 以-1作为输入结束标志。链表的头结点地址由函数值返回。</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Node* <span class="title function_">SList_Creat</span><span class="params">()</span>&#123;</span><br><span class="line">    Node* head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Node* pCur = head;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* pNew = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        pCur-&gt;next = pNew;</span><br><span class="line">        pNew-&gt;num = num;</span><br><span class="line">        pNew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        pCur = pNew;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(2)顺序访问链表中各结点的数据域</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_Print，顺序输出单向链表各项结点数据域中的内容。</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SList_Print</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    Node* p = head.next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&#123;value = %d&#125;\n&quot;</span>,p-&gt;num);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(3)在单向链表中插入节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_NodeInsert，功能：在值为x的结点前，插入值为y的结点；</span></span><br><span class="line"><span class="comment"> * 若值为x的结点不存在，则插在表尾。</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> * @param y</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SList_NodeInsert</span><span class="params">(Node* head, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="comment">//若插入第一个</span></span><br><span class="line">    Node* pCur = (head-&gt;next-&gt;num == x)?head:head-&gt;next;</span><br><span class="line"></span><br><span class="line">    Node* pNew = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    pNew-&gt;num = y;</span><br><span class="line">    <span class="keyword">while</span> (pCur-&gt;next != <span class="literal">NULL</span> &amp;&amp; pCur-&gt;next-&gt;num != x) &#123;</span><br><span class="line">        pCur = pCur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    pNew-&gt;next = pCur-&gt;next;</span><br><span class="line">    pCur-&gt;next = pNew;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_NodeInsert，功能：在值为x的结点前，插入值为y的结点；</span></span><br><span class="line"><span class="comment"> * 这个版本容易理解</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> * @param y</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Slist_NodeInsert1</span><span class="params">(Node* head, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    Node* pCur = head-&gt;next;</span><br><span class="line">    Node* pNew = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    pNew-&gt;num = y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;num == x) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pPre-&gt;next = pNew;</span><br><span class="line">    pNew-&gt;next = pCur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(4)删除单向链表中的结点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_NodeDel，删除值为x的结点。</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SList_NodeDel</span><span class="params">(Node* head, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    Node* pCur = head-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;num == x) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pCur == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pPre-&gt;next = pCur-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(pCur);</span><br><span class="line">    pCur = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(5)释放单链表节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放所有节点</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SList_Free</span><span class="params">(Node* head)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Node* temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        temp = head-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(head);</span><br><span class="line">        head = temp;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;释放%d次&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、函数指针"><a href="#二、函数指针" class="headerlink" title="二、函数指针"></a>二、函数指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针函数</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">fun1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>* num = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    *num = <span class="number">67373</span>;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fun2</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//函数指针</span></span><br><span class="line">    <span class="type">int</span> (*p)() = fun2;</span><br><span class="line">    p(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数指针即指向函数的指针，可以通过指针变量来调用函数。</p><p>案例：使用函数指针简化如下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execute add()\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sub</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execute sub()\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">multiplied</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execute mutip()\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">divided</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execute div()\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myExit</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str,<span class="string">&quot;add&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            add();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str,<span class="string">&quot;sub&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            sub();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str,<span class="string">&quot;multiplied&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            multiplied();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str,<span class="string">&quot;divided&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            divided();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str,<span class="string">&quot;myExit&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            myExit(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;无匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> (*p[<span class="number">5</span>])() = &#123;add,sub,multiplied,divided,myExit&#125;;</span><br><span class="line"><span class="type">char</span>* fun[<span class="number">5</span>] = &#123;<span class="string">&quot;add&quot;</span>,<span class="string">&quot;sub&quot;</span>,<span class="string">&quot;multiplied&quot;</span>,<span class="string">&quot;divided&quot;</span>,<span class="string">&quot;myExit&quot;</span>&#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str,fun[i]) == <span class="number">0</span>) &#123;</span><br><span class="line">            p[i]();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>回调函数</strong></p><p>再完善上述代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">multiplied</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">divided</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error /0&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  (<span class="type">double</span>)a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getResult</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span>(*p)(<span class="type">int</span> a, <span class="type">int</span> b))</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//替换第三个参数即可完成不同的操作</span></span><br><span class="line">    <span class="type">int</span> result = getResult(<span class="number">1</span>, <span class="number">2</span>, sub);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、作业-2"><a href="#三、作业-2" class="headerlink" title="三、作业"></a>三、作业</h2><p><strong>1、</strong></p><p>struct teacher<br>  {<br>        int id;<br>        struct teacher t1;</p><p>  }; </p><p> 这种结构体类型能否够编译通过，为什么？</p><p>不能，数据类型本质：固定内存块大小的别名，像是模具来定义变量；结构体变量还没定义完，不知道占多少内存空间。</p><p><strong>2、简述链表和数组的区别</strong></p><p>都属于线性表；</p><p>顺序表：</p><p>优点：</p><ul><li>随机访问效率高</li></ul><p>缺点：</p><ul><li>占用连续的存储空间</li><li>插入和删除效率低</li></ul><p>线性表相反；</p><p><strong>3、. 把课堂上单向链表的基本操作重新敲一遍。</strong></p><p><strong>4、链表练习( 例子参考&lt;链表基本操作.exe&gt; )。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除值为x的所有结点</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">SListNodeDelPro</span><span class="params">(SLIST *pHead, <span class="type">int</span> x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表节点排序</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">SListNodeSort</span><span class="params">(SLIST *pHead)</span>;</span><br><span class="line"><span class="comment">//注意，排序，除了数据域需要交换，next指针还需要交换</span></span><br><span class="line"><span class="keyword">if</span> (pPre-&gt;id &gt; pCur-&gt;id) <span class="comment">//升序</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//交换数据域</span></span><br><span class="line">    tmp = *pCur;</span><br><span class="line">    *pCur = *pPre;</span><br><span class="line">    *pPre = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换指针域（重要）</span></span><br><span class="line">    tmp.next = pCur-&gt;next;</span><br><span class="line">    pCur-&gt;next = pPre-&gt;next;</span><br><span class="line">    pPre-&gt;next = tmp.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假如原来链表是升序的,升序插入新节点</span></span><br><span class="line"><span class="comment">//不能插入节点后再排序，是升序插入新节点x</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">SListNodeInsertPro</span><span class="params">(SLIST *pHead, <span class="type">int</span> x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//翻转链表的节点（不是排序，是翻转）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">SListNodeReverse</span><span class="params">(SLIST *pHead)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_Creat，建立带有头结点的单向链表。循环创建结点，</span></span><br><span class="line"><span class="comment"> * 结点数据域中的数值从键盘输入，以-1作为输入结束标志。链表的头结点地址由函数值返回。</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Node* <span class="title function_">listCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;value);</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        node-&gt;value = value;</span><br><span class="line">        pPre-&gt;next = node;</span><br><span class="line">        node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        pPre = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顺序打印链表</span></span><br><span class="line"><span class="comment"> * 打印格式为 head -&gt; 1 -&gt; 2 -&gt; 3 -&gt; NULL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listPrint</span><span class="params">(Node* head)</span> &#123;</span><br><span class="line">    Node* temp = head-&gt;next;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;head -&gt; &quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>,temp-&gt;value);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_NodeInsert，功能：在值为x的结点前，插入值为y的结点；</span></span><br><span class="line"><span class="comment"> * 若值为x的结点不存在，则插在表尾。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listInsert</span><span class="params">(Node* head, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    Node* pCur = head-&gt;next;</span><br><span class="line">    Node* pNew = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    pNew-&gt;value = y;</span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;value == x) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    pPre-&gt;next = pNew;</span><br><span class="line">    pNew-&gt;next = pCur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_NodeDel，删除值为x的结点。</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listDelete</span><span class="params">(Node* head, <span class="type">int</span> x)</span>&#123;</span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    Node* pCur = head-&gt;next;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;value == x) &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有这个节点\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pPre-&gt;next = pCur-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(pCur);</span><br><span class="line">    pCur = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放单链表节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listFree</span><span class="params">(Node* head)</span> &#123;</span><br><span class="line">    Node* temp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        temp = head-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(head);</span><br><span class="line">        head = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除值为x的所有节点</span></span><br><span class="line"><span class="comment"> * @param head </span></span><br><span class="line"><span class="comment"> * @param x </span></span><br><span class="line"><span class="comment"> * @return 删除节点个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">listDeletePro</span><span class="params">(Node* head, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    Node* pCur = head-&gt;next;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;value == x) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="comment">//执行删除操作</span></span><br><span class="line">            pPre-&gt;next = pCur-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(pCur);</span><br><span class="line">            pCur = pPre-&gt;next;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">//重要！！</span></span><br><span class="line">        &#125;</span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表排序（升序）</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listSort</span><span class="params">(Node* head)</span> &#123;</span><br><span class="line">    <span class="comment">//head为或只有一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* pPre = <span class="literal">NULL</span>;</span><br><span class="line">    Node* pCur = <span class="literal">NULL</span>;</span><br><span class="line">    Node temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(pPre = head-&gt;next; pPre-&gt;next != <span class="literal">NULL</span>; pPre = pPre-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">for</span>(pCur = pPre-&gt;next; pCur!= <span class="literal">NULL</span>; pCur = pCur-&gt;next) &#123;</span><br><span class="line">            <span class="comment">//如何交换两个结点。</span></span><br><span class="line">            <span class="keyword">if</span>(pPre-&gt;value &gt; pCur-&gt;value) &#123;</span><br><span class="line">                <span class="comment">//1、数据域只有一个</span></span><br><span class="line"><span class="comment">//                temp.value = pPre-&gt;value;</span></span><br><span class="line"><span class="comment">//                pPre-&gt;value = pCur-&gt;value;</span></span><br><span class="line"><span class="comment">//                pCur-&gt;value = temp.value;</span></span><br><span class="line">                <span class="comment">//2、数据域有多个</span></span><br><span class="line">                <span class="comment">//交换值域</span></span><br><span class="line">                temp = *pPre;</span><br><span class="line">                *pPre = *pCur;</span><br><span class="line">                *pCur = temp;</span><br><span class="line">                <span class="comment">//交换指针域</span></span><br><span class="line">                temp.next = pPre-&gt;next;</span><br><span class="line">                pPre-&gt;next = pCur-&gt;next;</span><br><span class="line">                pCur-&gt;next  =temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *假如原来链表是升序的,升序插入新节点</span></span><br><span class="line"><span class="comment"> *不能插入节点后再排序，是升序插入新节点x</span></span><br><span class="line"><span class="comment"> * @param node</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listInsertPro</span><span class="params">(Node* head, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    listSort(head);</span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    Node* pCur = head-&gt;next;</span><br><span class="line"></span><br><span class="line">    Node* pNew = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(head));</span><br><span class="line">    pNew-&gt;value = x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;value &gt; x) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pPre-&gt;next = pNew;</span><br><span class="line">    pNew-&gt;next = pCur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转链表的结点</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listReverse</span><span class="params">(Node* head)</span> &#123;</span><br><span class="line">    Node* pPre = head-&gt;next;</span><br><span class="line">    Node* pCur = pPre-&gt;next;</span><br><span class="line">    Node* pPost = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        pPost = pCur-&gt;next;</span><br><span class="line">        pCur-&gt;next = pPre;</span><br><span class="line"></span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    head-&gt;next-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head-&gt;next = pPre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 头插法</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> * @param num</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listInsertHead</span><span class="params">(Node* head,<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    Node* pNew = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    pNew-&gt;value = num;</span><br><span class="line"></span><br><span class="line">    Node* temp = head-&gt;next;</span><br><span class="line">    head-&gt;next = pNew;</span><br><span class="line">    pNew-&gt;next = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我的反转方法</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listReverseMy</span><span class="params">(Node** head)</span> &#123;</span><br><span class="line">    Node* newHead = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newHead-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    Node* pCur = (*head)-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        listInsertHead(newHead,pCur-&gt;value);</span><br><span class="line">        pCur = pCur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    *head = newHead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* head = listCreate();</span><br><span class="line">    listPrint(head);</span><br><span class="line"></span><br><span class="line">    listReverseMy(&amp;head);</span><br><span class="line"></span><br><span class="line">    listPrint(head);</span><br><span class="line"></span><br><span class="line">    listFree(head);</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>再度学了一遍c语言，好多东西还是学了忘了忘了学。计划二月底看完的课也到今天三月十四号才看完。冲吧继续。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/article/b8b0eacd.html"/>
      <url>/article/b8b0eacd.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>整合14篇java笔记</p><p>学习课程为b站韩顺平老师</p></blockquote><h1 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h1><blockquote><p>摘要</p><ul><li>内容介绍</li><li>java概述</li><li>变量</li><li>运算符</li></ul><p>通过一次面试发现对java基础的掌握远远不够，正如韩老师所说浅尝辄止，花点时间加强一下</p></blockquote><span id="more"></span><p><strong>学习任何技术遵循这个图</strong></p><p><img src="https://i.loli.net/2021/04/01/yZ12P3qjR7XHtu8.png" alt="111"></p><h2 id="一、java概述"><a href="#一、java概述" class="headerlink" title="一、java概述"></a>一、java概述</h2><h3 id="1-1、java诞生小故事"><a href="#1-1、java诞生小故事" class="headerlink" title="1.1、java诞生小故事"></a>1.1、java诞生小故事</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210401123247737.png" alt="image-20210401123245874"></p><h3 id="1-2、java技术体系平台"><a href="#1-2、java技术体系平台" class="headerlink" title="1.2、java技术体系平台"></a>1.2、java技术体系平台</h3><p><img src="https://i.loli.net/2021/04/01/RAuNsbPFQ4oGU1D.png" alt="image-20210401123334515"></p><h3 id="1-3、java特点"><a href="#1-3、java特点" class="headerlink" title="1.3、java特点"></a>1.3、java特点</h3><ol><li>opp（面向对象）</li><li>Java 语言是健壮的。Java 的强类型机制、异常处理、垃圾的自动回收</li><li>跨平台性，complie once , run anywhere</li><li>解释性语言（不能被机器直接运行） （解释性\编译性）</li></ol><h3 id="1-4、jdk、jre、jvm"><a href="#1-4、jdk、jre、jvm" class="headerlink" title="1.4、jdk、jre、jvm"></a>1.4、jdk、jre、jvm</h3><ul><li>jdk （java development kit）:  jre + java开发工具（java,javac,javadoc）</li><li>jre （ java run evrioment ） : jvm + 核心类库</li><li>jvm  （java vritual machine）:虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器 (还需深入研究日后)</li></ul><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><h3 id="2-1、数据类型"><a href="#2-1、数据类型" class="headerlink" title="2.1、数据类型"></a>2.1、数据类型</h3><p><img src="https://i.loli.net/2021/04/01/w6NSLKPOgpYn7jh.png"></p><h3 id="2-2、整型"><a href="#2-2、整型" class="headerlink" title="2.2、整型"></a>2.2、整型</h3><ul><li>java中整型常量默认为int型 （long后需加L或l）</li></ul><h3 id="2-3、浮点型"><a href="#2-3、浮点型" class="headerlink" title="2.3、浮点型"></a>2.3、浮点型</h3><ul><li>浮点数底层存放：符号位+指数位+尾数位 （尾数位可能丢失造成精度损失，小数都是近似值）</li><li>java中浮点型常量默认为double （float后需加f过F）</li><li>浮点数使用陷阱：<br>运算后的浮点数不能直接比较，应该用差的绝对值在误差范围内比较</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( num11 == num12) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;num11 == num12 相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Math.abs(num11 - num12) &lt; <span class="number">0.000001</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;差值非常小，到我的规定精度，认为相等...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4、字符型"><a href="#2-4、字符型" class="headerlink" title="2.4、字符型"></a>2.4、字符型</h3><ul><li>java 使用Unicode码（兼容ASSIC码）</li><li>本质是整数，可以运算</li></ul><h4 id="2-4-1、常用编码"><a href="#2-4-1、常用编码" class="headerlink" title="2.4.1、常用编码"></a>2.4.1、常用编码</h4><ol><li>ASSIC，128个字符（可以表示256但128已经够用）,一个字符用一个字节表示</li><li>Unicode，两个字节表示一个字符（字母和汉字都使用两个字节，导致浪费空间）</li><li>utf-8 ，字母用一个字节，汉字用三个字节</li><li>gbk，字母用一个字节，汉字用两个字节</li></ol><h3 id="2-5、基本数据类型转换"><a href="#2-5、基本数据类型转换" class="headerlink" title="2.5、基本数据类型转换"></a>2.5、基本数据类型转换</h3><h4 id="2-5-1、自动类型转换"><a href="#2-5-1、自动类型转换" class="headerlink" title="2.5.1、自动类型转换"></a>2.5.1、自动类型转换</h4><p>记住两条线：</p><p><strong>char - int - long - float - double</strong></p><p><strong>byte - short - int - long - float - double</strong></p><p>记住细节（非常重要）：</p><ol><li>多种数据混合运算，系统先都转为容量最大的再计算</li><li><strong>（byte,short）和 char 之间不会相互转换</strong></li><li><strong>byte,short,char三者可以进行计算，都转为int</strong></li><li>自动提示：表法式结果的类型自动提示为操作数中最大的类型</li></ol><h4 id="2-5-2、强制类型转换"><a href="#2-5-2、强制类型转换" class="headerlink" title="2.5.2、强制类型转换"></a>2.5.2、强制类型转换</h4><p><strong>强制转化符 （）</strong>，可能会造成<strong>精度丢失</strong>或<strong>溢出</strong></p><ul><li>char可以保存int类型的常量值，但是不能保存int类型的变量值（需强类型转换）</li><li><strong>byte,short,char</strong> 在运算时当做int处理</li></ul><h3 id="2-6、基本数据类型和String类型转换"><a href="#2-6、基本数据类型和String类型转换" class="headerlink" title="2.6、基本数据类型和String类型转换"></a>2.6、基本数据类型和String类型转换</h3><p>基本类型转String ：+ “”</p><p>String 转基本类型 ：调用 Xxx.parseXxx()</p><h2 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h2><h3 id="3-1、算数运算符"><a href="#3-1、算数运算符" class="headerlink" title="3.1、算数运算符"></a>3.1、算数运算符</h3><p>区分下 i++ 与 ++i</p><p>i++ ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br></pre></td></tr></table></figure><p>++i：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br></pre></td></tr></table></figure><p><strong>面试题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">i = i++; </span><br><span class="line">System.out.println(i); <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">i = ++i;</span><br><span class="line">System.out.println(i); <span class="number">2</span></span><br></pre></td></tr></table></figure><p>解析需学习字节码相关知识，后面单独写</p><h3 id="3-2、逻辑运算符"><a href="#3-2、逻辑运算符" class="headerlink" title="3.2、逻辑运算符"></a>3.2、逻辑运算符</h3><p>使用短路避免空指针异常（开发中常使用）</p><p>a^b 异或 ：  a 和 b 不同时，则结果为 true, 否则为 false</p><h3 id="3-6、进制"><a href="#3-6、进制" class="headerlink" title="3.6、进制"></a>3.6、进制</h3><p>参见：<a href="http://taoblog421.cn/posts/430980c3/">http://taoblog421.cn/posts/430980c3/</a></p><hr><h1 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h1><blockquote><p>摘要</p><ul><li>数组</li><li>面向对象（基础）</li><li>面向对象（高级）</li></ul></blockquote><!--more--><p>为什么一看就会，一做就废</p><p><img src="https://i.loli.net/2021/04/02/nB3SIxREwjhKOu2.png" alt="image-20210402132955837"></p><h2 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h2><h3 id="1-1、数组赋值机制"><a href="#1-1、数组赋值机制" class="headerlink" title="1.1、数组赋值机制"></a>1.1、数组赋值机制</h3><p><strong>值拷贝&#x2F;引用拷贝</strong></p><p><img src="https://i.loli.net/2021/04/02/bZzrkqfFDwQnTMx.png"></p><h3 id="1-2、数组的创建方式"><a href="#1-2、数组的创建方式" class="headerlink" title="1.2、数组的创建方式"></a>1.2、数组的创建方式</h3><ol><li>int[] arr &#x3D; new int[3]</li><li>int[] arr &#x3D; {1,2,3}</li><li>int[] arr &#x3D;new int[] {1,2,3} （这种方式括号不能带大小）</li></ol><h2 id="二、面向对象（基础）"><a href="#二、面向对象（基础）" class="headerlink" title="二、面向对象（基础）"></a>二、面向对象（基础）</h2><blockquote><p>谈谈自己理解 （借鉴大话设计模式）</p><p>什么是对象：万物皆对象，对象是一个自包含（组件不依赖其他组件,能够以独立的方式供外部使用）的实体，用一组行为（方法）和特性（属性）来标识</p><p>什么是类：具有相同属性和功能的对象的集合</p><p>面向对象的好处：</p></blockquote><h3 id="2-1、对象在内存中存在形式"><a href="#2-1、对象在内存中存在形式" class="headerlink" title="2.1、对象在内存中存在形式"></a>2.1、对象在内存中存在形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">cat.name = <span class="string">&quot;小白&quot;</span>;</span><br><span class="line">cat.age = <span class="string">&quot;12&quot;</span>;</span><br><span class="line">cat.color = <span class="string">&quot;白色&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/02/GfOsQVg1HYbPFua.png" alt="image-20210402165835952"></p><h3 id="2-2、类和对象的内存分配机制"><a href="#2-2、类和对象的内存分配机制" class="headerlink" title="2.2、类和对象的内存分配机制"></a>2.2、类和对象的内存分配机制</h3><p><img src="https://i.loli.net/2021/04/02/hzye2Pc64lsCVxF.png"></p><h3 id="2-3、方法调用机制"><a href="#2-3、方法调用机制" class="headerlink" title="2.3、方法调用机制"></a>2.3、方法调用机制</h3><p><img src="https://i.loli.net/2021/04/02/qbBdaUYtM5w37Ki.png"></p><h3 id="2-4、重载"><a href="#2-4、重载" class="headerlink" title="2.4、重载"></a>2.4、重载</h3><p>允许方法名相同</p><p>细节：</p><ol><li>不能仅通过返回类型区别两个重载方法</li></ol><h3 id="2-5、可变参数"><a href="#2-5、可变参数" class="headerlink" title="2.5、可变参数"></a>2.5、可变参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        res += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细节：</p><ol><li>多个参数时，可变参数放最后</li><li>一个形参列表中只能有一个可变参数</li><li>本质是数组（参数可以为数组）</li></ol><h3 id="2-6、作用域"><a href="#2-6、作用域" class="headerlink" title="2.6、作用域"></a>2.6、作用域</h3><p>全局变量：属性（成员变量）</p><p>局部变量：方法或者代码块定义的变量</p><h3 id="2-7、构造方法-x2F-构造器"><a href="#2-7、构造方法-x2F-构造器" class="headerlink" title="2.7、构造方法&#x2F;构造器"></a>2.7、构造方法&#x2F;构造器</h3><p>系统默认生成无参构造器（一旦定义构造器则不自动生成）</p><p><img src="https://i.loli.net/2021/04/03/PbmpxfRDzQ2I6nA.png" alt="image-20210403135619206"></p><h3 id="2-8、对象创建流程分析（面试）"><a href="#2-8、对象创建流程分析（面试）" class="headerlink" title="2.8、对象创建流程分析（面试）"></a>2.8、对象创建流程分析（面试）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Class Person &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">90</span>;</span><br><span class="line">    String name;</span><br><span class="line">    </span><br><span class="line">    Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小倩&quot;</span>，<span class="number">20</span>)；</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/03/RqiWgjyusSzDt3B.png" alt="image-20210403141541629"></p><ol><li>加载Person类信息（方法区）</li><li>堆开辟空间</li><li>对象初始化<br>默认初始化：age &#x3D; 0 ; name &#x3D; null<br>显式初始化：age &#x3D; 90; name &#x3D; null<br>构造器初始化：age &#x3D; 20 ;name &#x3D; ”小倩“（常量池）</li></ol><h3 id="2-8、this关键字"><a href="#2-8、this关键字" class="headerlink" title="2.8、this关键字"></a>2.8、this关键字</h3><p>简单说，哪个对象调用就是哪个对象引用</p><p><img src="https://i.loli.net/2021/04/03/9pUS5XsZIlKTCkR.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog1.info();</span><br><span class="line">        System.out.println(dog1.hashCode());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog2.info();</span><br><span class="line">        System.out.println(dog2.hashCode());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/03/uQVgwZpb694yHMX.png"></p><p>细节：</p><ul><li>构造器内使用this,只能调用其他构造器且必须放在第一行</li></ul><h2 id="三、面向对象（中级）"><a href="#三、面向对象（中级）" class="headerlink" title="三、面向对象（中级）"></a>三、面向对象（中级）</h2><h3 id="3-1、访问修饰符"><a href="#3-1、访问修饰符" class="headerlink" title="3.1、访问修饰符"></a>3.1、访问修饰符</h3><table><thead><tr><th>访问级别</th><th>修饰符</th><th>同类</th><th>同包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td>公开</td><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>受保护</td><td>protecrted</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>默认</td><td></td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>私有</td><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h3 id="3-2、封装"><a href="#3-2、封装" class="headerlink" title="3.2、封装"></a>3.2、封装</h3><p><strong>封装：把抽象出的数据和对数据操作的方法封装在一起，数据被保护在内部，程序的其他部分只能通过方法来对数据进行操作</strong></p><p>好处：</p><ol><li>隐藏细节</li><li>对数据进行验证，保证安全，合理</li></ol><p>实现封装：属性定义为private ，提供get set 方法</p><h3 id="3-3、继承"><a href="#3-3、继承" class="headerlink" title="3.3、继承"></a>3.3、继承</h3><p>好处：</p><ol><li>提高代码复用性</li><li>提高拓展性和维护性</li></ol><p>细节：</p><p>1、子类继承了所有属性和方法，私有属性和方法不能直接访问，使用supper</p><p>2、<strong>子类必须调用父类的构造器，完成父类的初始化</strong></p><p>3、创建子类对象时，不论使用子类的哪个构造器，都会调用父类的构造器，若父类没有默认无参构造器需使用super指定使用父类哪个构造器，负责不会通过编译。</p><p>4、super()使用必须放在构造器内第一句（不能和this()同时使用）</p><p>5、Object是所有类的基类（idea框架键 ctrl + h 可以看到类的基础关系）</p><p>6、父类构造器的调用将一直追溯到Object类</p><p>7、java单继承（多个？ – 接口&#x2F;抽象类）</p><p>8、不能滥用基础，需要满足“is - a”关系</p><h4 id="3-3-1、继承本质详解"><a href="#3-3-1、继承本质详解" class="headerlink" title="3.3.1、继承本质详解"></a>3.3.1、继承本质详解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/3 15:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendTheory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>(); <span class="comment">// 内存中发生了什么</span></span><br><span class="line">        <span class="comment">// (1)子类是否有这个属性</span></span><br><span class="line">        <span class="comment">// (2)若有且可以访问则返回</span></span><br><span class="line">        <span class="comment">// (3)若无则查找父类，有且可以访问则返回 (有但是不能访问则报错)</span></span><br><span class="line">        <span class="comment">// (4)若无则继续往上找，有且可以访问则返回 (有但是不能访问则报错)，无则报错</span></span><br><span class="line">        System.out.println(son.name);</span><br><span class="line">        System.out.println(son.age);</span><br><span class="line">        System.out.println(son.hobby);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrandPa</span> &#123; <span class="comment">//爷类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头爷爷&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hobby</span> <span class="operator">=</span> <span class="string">&quot;旅游&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">GrandPa</span> &#123;<span class="comment">//父类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头爸爸&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">39</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123; <span class="comment">//子类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头儿子&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/03/JqEjNYT1H9PMLFC.png"></p><h4 id="3-3-2、supper"><a href="#3-3-2、supper" class="headerlink" title="3.3.2、supper"></a>3.3.2、supper</h4><p>作用：</p><ol><li>访问父类方法获变量（当方法或变量重名）</li><li>分工明确，父类变量由父类初始化，子类变量自己初始化</li></ol><h4 id="3-3-3、方法重写-x2F-覆盖（override）"><a href="#3-3-3、方法重写-x2F-覆盖（override）" class="headerlink" title="3.3.3、方法重写&#x2F;覆盖（override）"></a>3.3.3、方法重写&#x2F;覆盖（override）</h4><p>细节：</p><ol><li>除返回类型（方法名，参数列表）都必须一样，返回类型可以为父类返回类型的子类</li><li>子类不能缩小父类的访问限制</li></ol><h3 id="3-4、多态"><a href="#3-4、多态" class="headerlink" title="3.4、多态"></a>3.4、多态</h3><p><strong>方法或对象拥有多种状态</strong></p><p>1、方法多态：方法的重写和重载</p><p>2、对象多态</p><ol><li>一个对象的编译类型和运行类型可以不一样</li><li>编译类型在定义对象时就确定了，不能改变</li><li>运行类型是可以变换的</li><li>编译类型在 &#x3D; 左边 ；运行类型在 &#x3D; 右边</li></ol><h4 id="3-4-1、细节"><a href="#3-4-1、细节" class="headerlink" title="3.4.1、细节"></a>3.4.1、细节</h4><p><strong>1、向上转型：父类的引用指向子类的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类类型 引用名 = <span class="keyword">new</span> 子类类型()</span><br></pre></td></tr></table></figure><ul><li>可以调用父类中所有成员</li><li>不能调用子类特有成员</li><li>最终运行结果看子类的具体实现</li></ul><p><strong>2、向下转型：子类的引用指向父类的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子类类型 引用名 = (子类类型) 父类引用</span><br></pre></td></tr></table></figure><ul><li><p>只能强转父类的引用，不能强转父类的对象</p></li><li><p>父类的引用必须指向当前目标类型的对象</p></li><li><p>可以调用子类中所有成员</p><p>++</p></li></ul><p>instanceof 判断的是<strong>运行类型</strong></p><h4 id="3-4-2、动态绑定机制（非常非常重要）"><a href="#3-4-2、动态绑定机制（非常非常重要）" class="headerlink" title="3.4.2、动态绑定机制（非常非常重要）"></a>3.4.2、动态绑定机制（非常非常重要）</h4><ol><li>调用对象方法时，会和<strong>运行类型</strong>动态绑定</li><li>调用方法属性时，<strong>没有动态绑定</strong>，哪里声明哪里使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/3 17:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicBinding</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();<span class="comment">//向上转型</span></span><br><span class="line">        System.out.println(a.sum());<span class="comment">//?40 -&gt; 30</span></span><br><span class="line">        System.out.println(a.sum1());<span class="comment">//?30-&gt; 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;<span class="comment">//父类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;<span class="comment">//子类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-3、多态应用"><a href="#3-4-3、多态应用" class="headerlink" title="3.4.3、多态应用"></a>3.4.3、多态应用</h4><p>多态数组：数组定义为父类型，存放子类对象</p><p>多态参数：形参类型为父类类型，允许实参为子类类型</p><h3 id="3-5、Object类"><a href="#3-5、Object类" class="headerlink" title="3.5、Object类"></a>3.5、Object类</h3><h4 id="3-5-1、equals-与-x3D-x3D"><a href="#3-5-1、equals-与-x3D-x3D" class="headerlink" title="3.5.1、equals 与 &#x3D;&#x3D;"></a>3.5.1、equals 与 &#x3D;&#x3D;</h4><p>&#x3D;&#x3D; 基本类型判断值是否相等，引用类型判断地址是否相等（引用的是一个对象）</p><p>equals 只能判断引用类型，但是往往重写此方法判断是否相等</p><p><strong>Object.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>String.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="type">char</span> v1[] = value;</span><br><span class="line">            <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;java</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-2、finalize"><a href="#3-5-2、finalize" class="headerlink" title="3.5.2、finalize"></a>3.5.2、finalize</h4><p>几乎不用，自动释放内存，应付面试</p><h4 id="3-5-3、hashCode"><a href="#3-5-3、hashCode" class="headerlink" title="3.5.3、hashCode"></a>3.5.3、hashCode</h4><ol><li>提高具有哈希结构的容器的效率！</li><li>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的！</li><li>两个引用，如果指向的是不同对象，则哈希值是不一样的</li><li>哈希值主要根据地址号来的！， 不能完全将哈希值等价于地址。</li><li>在集合时，重写 hashCode()</li></ol><h4 id="3-5-4、toString"><a href="#3-5-4、toString" class="headerlink" title="3.5.4、toString"></a>3.5.4、toString</h4><p>默认返回：全类名+@+哈希值的十六进制，【查看 Object 的 toString 方法】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类往往重写 toString 方法，用于返回对象的属性信息</p><p><img src="https://i.loli.net/2021/04/03/1l4vWCPBZ5HRkKj.png"></p><hr><h1 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h1><blockquote><p>摘要</p><ul><li>面向对象高级1</li></ul></blockquote><!--more--><h2 id="一、面向对象（高级）-1"><a href="#一、面向对象（高级）-1" class="headerlink" title="一、面向对象（高级）(1)"></a>一、面向对象（高级）(1)</h2><h3 id="1-1、类变量与类方法"><a href="#1-1、类变量与类方法" class="headerlink" title="1.1、类变量与类方法"></a>1.1、类变量与类方法</h3><h4 id="1-1-1、类变量（静态变量）"><a href="#1-1-1、类变量（静态变量）" class="headerlink" title="1.1.1、类变量（静态变量）"></a>1.1.1、类变量（静态变量）</h4><p>推荐使用 <strong>类名.属性名</strong> 进行访问</p><p><img src="https://i.loli.net/2021/04/11/7aGbF2giXJMDSL5.png" alt="image-20210411133629235"></p><ul><li>static 变量是同一个类的所有对象共享的</li><li>static 变量是在类加载的时候生成的</li></ul><h4 id="1-1-2、类方法（静态方法）"><a href="#1-1-2、类方法（静态方法）" class="headerlink" title="1.1.2、类方法（静态方法）"></a>1.1.2、类方法（静态方法）</h4><p>推荐使用 <strong>类名.方法名</strong> 进行访问</p><ul><li><p>当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率（比如工具类中方法）</p></li><li><p>开发自己工具类，将方法作为静态，方法调用（不需要创建对象）</p></li></ul><p>细节：</p><ol><li>类方法和普通方法都是随着类加载而加载，将结构信息存储在方法区</li><li>类方法（静态方法）只能访问类变量（静态变量）或类方法（静态方法）</li><li>类方法中不能使用this或super</li><li>普通成员（变量，方法）既可以访问普通成员，又可以访问静态方法</li></ol><h3 id="1-2、深入理解main方法"><a href="#1-2、深入理解main方法" class="headerlink" title="1.2、深入理解main方法"></a>1.2、深入理解main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>jvm需要调用类的main方法，所以方法的访问权限必须是public</li><li>jvm在执行main方法时不必创建对象，所以方法必须是static</li><li>该方法接收String类型数组参数，该数组保存执行java命令时传递给所运行类的参数</li><li>java 执行的程序 参数1 参数2 参数3 （举例）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//args 是如何传入的</span></span><br><span class="line">        <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">            System.out.println(arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Hello 1 2 3</span><br></pre></td></tr></table></figure><p>idea传递参数main方法</p><p><img src="https://i.loli.net/2021/04/11/9KFsS2Wbp7jH3Bl.png"></p><h3 id="1-3、代码块"><a href="#1-3、代码块" class="headerlink" title="1.3、代码块"></a>1.3、代码块</h3><p>代码块又叫初始化块，理解为只有方法体的方法，在<strong>加载类</strong>或<strong>创建对象</strong>时隐式调用</p><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符]&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>修饰符：可选static</li><li>静态代码块、非静态代码块</li><li>；可以省略</li></ol><p><strong>好处</strong></p><ol><li>另外一种形式的构造器（对构造器的补充机制），可以做初始化操作</li><li>多个构造器有重复的代码抽取</li></ol><p><strong>注意事项与细节讨论</strong></p><p>1）static 代码块作用是对类进行初始化，随着<strong>类加载</strong>而执行，并且<strong>只会执行一次</strong></p><p>如果是普通代码块，每创建一个对象，就执行一次</p><p>2）类什么时候被加载（重要）</p><ol><li>创建对象实例时（new）</li><li>创建子类对象实例，父类也会被加载（父类先被加载）</li><li>使用类的静态成员（静态属性，静态方法）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Detail1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AA 的静态代码块1被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Detail1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AA 的静态代码块1被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BB 的静态代码块1被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Detail1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Cat.n1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//静态属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat 的静态代码块1被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）普通代码块在<strong>创建对象</strong>实例是被隐式调用，被创建一次就会调用一次，如果只是使用类的静态成员，普通代码块并不会执行</p><p>4）创建一个对象时，在一个类 调用顺序是（重点、难点）</p><p>1、调用<strong>静态代码块</strong>和<strong>静态属性初始化</strong>（静态代码块和静态属性初始化调用的优先级一样，若有多个，<strong>按照定义的顺序</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Detail2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">// 静态属性初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> getN1();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A 静态代码块调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getN1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getN1()调用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">67373</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A 静态代码块调用</span><br><span class="line">getN1()调用</span><br></pre></td></tr></table></figure><p>2、调用<strong>普通代码块</strong>和<strong>普通属性初始化</strong>（普通代码块和普通属性初始化调用的优先级一样，若有多个，<strong>按照定义的顺序</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Detail2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="comment">// 普通代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 普通代码块调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 普通属性初始化</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> getN1();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getN1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getN1()调用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">67373</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、调用构造器</p><p>5）构造器的最前面其实隐含了super() 和调用普通代码块 （重要）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class AAA &#123;</span><br><span class="line">    public AAA() &#123;</span><br><span class="line">        // 1、super()</span><br><span class="line">        // 2、调用本类普通代码块</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6）创建一个子类对象时 调用顺序</p><ol><li>父类的静态代码块和静态属性初始化</li><li>子类的静态代码块和静态属性初始化</li><li>父类的普通代码块和普通属性初始化</li><li>父类构造器</li><li>子类的普通代码块和普通属性初始化</li><li>子类构造器</li></ol><p>7）静态代码块只能调用静态成员，普通代码块可以调用所有成员</p><h3 id="1-4、单例设计模式"><a href="#1-4、单例设计模式" class="headerlink" title="1.4、单例设计模式"></a>1.4、单例设计模式</h3><p>什么是设计模式</p><ol><li>静态方法和属性的经典使用</li><li>设计模式是大量的实践中总结和理论化之后优选的代码结构，编程风格以及解决问题的思考方式。就像是经典的棋谱，不同的棋局使用不同的棋谱，免去我们自己再思考和摸索</li></ol><p>单例模式：对某个类只能存在一个对象实例，并且该类提供一个取的其对象实例的方法</p><p><strong>饿汉式</strong>：（加载类就创建对象）</p><ol><li>构造器私有化</li><li>类的内部创建对象（需要修饰为static）</li><li>对外暴露一个静态的公共方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类的内部创建对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFriend</span> <span class="variable">gf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对外暴露一个静态的公共方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GirlFriend <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>懒汉式</strong>：（使用的时候创建对象）</p><ol><li>构造器私有化</li><li>类的内部定义对象</li><li>对外暴露一个静态的公共方法创建对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cat <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cat == <span class="literal">null</span>) &#123;</span><br><span class="line">            cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建对象时机不同</li><li>懒汉式存在线程安全问题，饿汉式不存在（后面完善）</li><li>饿汉式存在浪费资源问题，懒汉式不存在</li><li>Runtime经典单例模式</li></ol><h3 id="1-5、final"><a href="#1-5、final" class="headerlink" title="1.5、final"></a>1.5、final</h3><ol><li>不希望类被继承时</li><li>不希望父类的某个方法被子类覆盖&#x2F;重写</li><li>不希望类的某个属性被修改</li><li>不希望某个局部变量被修改</li></ol><p>细节</p><p>1）final修饰的属性一般又叫常量，定义为 XX_XX_XX</p><p>2）常量必须赋初始值，赋值位置可以在定义时、构造器、代码块</p><p>3）如果是静态的常量，赋值位置只能在定义时、代码块 （构造器在创建对象时才调用）</p><p>4）final类不能继承，但是可以实例化对象</p><p>5）如果类不是final类，但是含有final方法，仍可以继承</p><p>6）如果一个类是final类就没有必要将方法定义为final （画蛇添足）</p><p>7）final不能修饰构造器</p><p>8）final 与 static 搭配使用，底层编译器优化处理，不会导致类加载</p><hr><h1 id="day04"><a href="#day04" class="headerlink" title="day04"></a>day04</h1><blockquote><p>摘要</p><ul><li>面向对象高级2</li></ul></blockquote><!--more--><h2 id="一、面向对象（高级）-2"><a href="#一、面向对象（高级）-2" class="headerlink" title="一、面向对象（高级）(2)"></a>一、面向对象（高级）(2)</h2><h3 id="2-1、抽象类"><a href="#2-1、抽象类" class="headerlink" title="2.1、抽象类"></a>2.1、抽象类</h3><p><strong>引出 – 父类方法不确定</strong></p><ol><li>abstact修饰一个类，即为抽象类</li><li>abstact修饰一个方法，即为抽象方法</li><li>价值在于设计</li><li>面试爱问 + 框架，设计模式使用较多</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个方法实现没有意义 --》 父类方法不确定性</span></span><br><span class="line">    <span class="comment">// 抽象方法 --》 没有实现的方法（没有方法体）</span></span><br><span class="line">    <span class="comment">// 当一个类中存在抽象方法时，需要将该类声明为抽象类</span></span><br><span class="line">    <span class="comment">// 抽象类会被继承，子类实现抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节：</strong></p><p>1）抽象类不能被实例化</p><p>2）抽象类不一定包含抽象方法</p><p>3）有抽象方法的类一定是抽象类</p><p>4）abstract只能修饰类和方法</p><p>5）抽象类可以有任意成员（抽象类本质还是类）</p><p>6）抽象类不能有方法实体</p><p>7）如果一个类继承了抽象类，它必须实现所有抽象方法除非它也是抽象类</p><p>8）抽象方法不能使用private,final,static来修饰，因为这些关键字与重写违背</p><h3 id="2-2、模板设计模式"><a href="#2-2、模板设计模式" class="headerlink" title="2.2、模板设计模式"></a>2.2、模板设计模式</h3><ol><li>多个类，完成不同的任务（可能多个任务）</li><li>要求统计得到各自完成任务的时间</li><li>编程实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AA</span>().caculate();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BB</span>().caculate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Tempalte</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">caculate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// job方法动态绑定机制</span></span><br><span class="line">        job();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行时间 &quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> <span class="keyword">extends</span> <span class="title class_">Tempalte</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">            num +=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">Tempalte</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、接口"><a href="#2-3、接口" class="headerlink" title="2.3、接口"></a>2.3、接口</h3><p>快速入门</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/12 13:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Interface01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        computer.work(<span class="keyword">new</span> <span class="title class_">Phone</span>());</span><br><span class="line">        computer.work(<span class="keyword">new</span> <span class="title class_">Camera</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UsbInterface</span> &#123;</span><br><span class="line">    <span class="comment">//规定接口的相关方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">UsbInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机开始工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机停止工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Camera</span> <span class="keyword">implements</span> <span class="title class_">UsbInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;相机开始工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;相机停止工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(UsbInterface usbInterface)</span> &#123;</span><br><span class="line">        <span class="comment">//通过接口调用方法</span></span><br><span class="line">        usbInterface.start();</span><br><span class="line">        usbInterface.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本介绍：<strong>接口就是给出一些没有实现的方法，封装到一起，当某个类要使用的时候，在根据具体方法写出来</strong></p><ol><li>jdk7以前，接口里的所有方法都没有方法体</li><li>jdk8以后，接口类可以有静态方法，默认方法（使用default关键字），也就是接口可以有方法的具体实现</li></ol><h4 id="2-3-1、接口的应用场景"><a href="#2-3-1、接口的应用场景" class="headerlink" title="2.3.1、接口的应用场景"></a>2.3.1、接口的应用场景</h4><p>便于管理软件项目</p><p><img src="https://i.loli.net/2021/04/13/GHwVnoQgXKyfbz9.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">DbInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DbMysql</span> <span class="keyword">implements</span> <span class="title class_">DbInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mysql连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mysql断开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DbOracle</span> <span class="keyword">implements</span> <span class="title class_">DbInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;oracle连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;oracle断开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2、细节"><a href="#2-3-2、细节" class="headerlink" title="2.3.2、细节"></a>2.3.2、细节</h4><p>1）接口不能被实例化</p><p>2）接口中的所有方法都是public（默认public）方法，抽象方法不需要使用abstract修饰</p><p>3）一个普通类实现接口就必须实现所有方法</p><p>4）抽象类实现接口可以不实现方法</p><p>5）一个类可以实现多个接口</p><p>6）接口中的属性是能是final，而且是public static final修饰，默认（public static final）</p><p>7）接口不能继承类，但是可以继承<strong>多个</strong>别的接口</p><h4 id="2-3-3、实现接口-vs-继承"><a href="#2-3-3、实现接口-vs-继承" class="headerlink" title="2.3.3、实现接口 vs 继承"></a>2.3.3、实现接口 vs 继承</h4><p><strong>实现</strong>：对java单继承机制的补充</p><p><strong>解决问题不同：</strong></p><p>​    继承：提高代码的复用性和可维护性</p><p>​    接口：设计各种方法，让其他类实现</p><p><strong>接口比继承更加灵活</strong></p><p>​    is - a , like - a</p><p><strong>接口在一定程度上实现解耦</strong></p><p>接口规范性 + 动态绑定机制</p><h4 id="2-3-4、接口多态"><a href="#2-3-4、接口多态" class="headerlink" title="2.3.4、接口多态"></a>2.3.4、接口多态</h4><p>1）多态参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个参数可以传实现这个接口的所有对象实例</span></span><br><span class="line"><span class="comment">// 接口的引用可以指向实现接口的类的对象实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(UsbInterface usbInterface)</span> &#123;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>2）多态数组</p><p>接口数组可以存放实现这个接口的对象实例</p><p>3）多态传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Interface5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IG</span> <span class="variable">ig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">teacher</span>();</span><br><span class="line">        <span class="type">IH</span> <span class="variable">ih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">teacher</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IH</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IG</span> <span class="keyword">extends</span> <span class="title class_">IH</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">teacher</span> <span class="keyword">implements</span> <span class="title class_">IG</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4、内部类"><a href="#2-4、内部类" class="headerlink" title="2.4、内部类"></a>2.4、内部类</h3><p>一个类的内部又完整的嵌套了另一个类结构。被嵌套的类称为内部类（inner class），嵌套其他类的类称为外部类（outer class）。内部类最大的特点时可以直接<strong>访问私有属性</strong>，并且可以<strong>体现类与类之间的包含关系</strong> </p><p><strong>注意：内部类是学习的难点，同时也是重点，后面看底层源码时有大量的内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1、内部类分类"><a href="#2-4-1、内部类分类" class="headerlink" title="2.4.1、内部类分类"></a>2.4.1、内部类分类</h4><p>定义在外部类局部位置上（比如方法内）</p><ol><li>局部内部类（有类名）</li><li>匿名内部类（没有类名，重点！！！！！）</li></ol><p>定义在外部类的成员位置上</p><ol><li>成员内部类（没用static修饰）</li><li>静态内部类（使用static修饰）</li></ol><h4 id="2-4-2、局部内部类"><a href="#2-4-2、局部内部类" class="headerlink" title="2.4.2、局部内部类"></a>2.4.2、局部内部类</h4><p>局部外部类定义在外部类的局部位置（通常是方法）</p><ol><li>可以访问外部类的所有成员，包括私有变量</li><li>不能添加访问修饰符，相当于局部变量（类型是类的局部变量），但是可以用final修饰</li><li>作用域：只在定义类的<strong>方法</strong>或者<strong>代码块</strong>内</li><li>局部内部类可以直接访问外部类的成员(包括私有成员)</li><li>外部其他类不能使用局部内部类</li><li>如果外部类和局部内部类重名时，默认咨询就近原则，如果想访问外部类的成员，使用 <strong>外部类名.this.成员</strong> 去访问</li></ol><h4 id="2-4-3、匿名内部类"><a href="#2-4-3、匿名内部类" class="headerlink" title="2.4.3、匿名内部类 !!!!!!!"></a>2.4.3、匿名内部类 !!!!!!!</h4><ol><li>本质是类</li><li>内部类</li><li>该类没有名字</li><li>同时还是一个对象</li></ol><p>匿名类是定义在外部类的局部位置，比如方法中，并且没有类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类或接口(参数列表) &#123;</span><br><span class="line">    类体</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>只使用一次的类，简化开发 -&gt; 匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day03.inner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/14 15:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Anonymous</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Outer4</span>().method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// tiger的编译类型 A</span></span><br><span class="line">    <span class="comment">// tiger的运行类型 匿名内部类XXXX Outer04$1</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        我们看底层</span></span><br><span class="line"><span class="comment">        class XXXX implements A &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void cry() &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(111);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// jdk底层在创建了匿名内部类马上Outer04$1创建实例，并且把地址返回给tiger</span></span><br><span class="line">    <span class="comment">// 匿名内部类使用一次就不能再使用了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">A</span> <span class="variable">tiger</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">A</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       System.out.println(<span class="string">&quot;tiger的运行类型&quot;</span> + tiger.getClass());</span><br><span class="line">       tiger.cry();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 匿名内部类</span></span><br><span class="line">        <span class="comment">// father 编译类型 Father</span></span><br><span class="line">        <span class="comment">// father 运行类型 Outer4$2</span></span><br><span class="line">       <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;jack&quot;</span>) &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">               <span class="built_in">super</span>.test();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;father的运行类型&quot;</span> + father.getClass());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>细节：</strong></p><p>1）调用方法两种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person hi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>() &#123;&#125;;</span><br><span class="line">        p1.hi();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">        &#125;.hi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）可以访问外部类的所有成员，包括私有变量</p><p>3）如果外部类和局部内部类重名时，默认咨询就近原则，如果想访问外部类的成员，使用 <strong>外部类名.this.成员</strong> 去访问</p><h4 id="2-4-4、匿名类最佳实践"><a href="#2-4-4、匿名类最佳实践" class="headerlink" title="2.4.4、匿名类最佳实践"></a>2.4.4、匿名类最佳实践</h4><ul><li>当做实参直接传递，简介高效</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        f1(<span class="keyword">new</span> <span class="title class_">AA</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="number">111</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//形参是接口类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(AA aa)</span> &#123;</span><br><span class="line">        aa.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        phone.alarmClock(() -&gt; System.out.println(<span class="string">&quot;起床了&quot;</span>));</span><br><span class="line">        phone.alarmClock(() -&gt; System.out.println(<span class="string">&quot;上课了&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bell</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alarmClock</span><span class="params">(Bell bell)</span> &#123;</span><br><span class="line">        bell.ring();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-5、成员内部类"><a href="#2-4-5、成员内部类" class="headerlink" title="2.4.5、成员内部类"></a>2.4.5、成员内部类</h4><p>定义在外部类的成员位置上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Outer08</span>().f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer08</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n</span>  <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部其他类使用成员内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer08</span> <span class="variable">outer08</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer08</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过外部类的实例new</span></span><br><span class="line">        Outer08.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer08.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写一个方法</span></span><br><span class="line">        Outer08.<span class="type">Inner</span> <span class="variable">inner1</span> <span class="operator">=</span> outer08.getInner();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer08</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n</span>  <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">getInner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-6、静态内部类"><a href="#2-4-6、静态内部类" class="headerlink" title="2.4.6、静态内部类"></a>2.4.6、静态内部类</h4><p>定义在外部类成员位置，static修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer09</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n</span>  <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">getInner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/15/2UaLcIw4nXM5Seb.png"></p><p><strong>无他，但手熟尔</strong></p><p><strong>我亦无他，唯手熟尔</strong></p><p><strong>坚持重要性！</strong></p><hr><h1 id="day05"><a href="#day05" class="headerlink" title="day05"></a>day05</h1><blockquote><p>摘要</p><ul><li>枚举和注解</li></ul></blockquote><!--more--><h2 id="一、枚举"><a href="#一、枚举" class="headerlink" title="一、枚举"></a>一、枚举</h2><p>需求引出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">spring</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">        <span class="type">Season</span> <span class="variable">winter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">        <span class="type">Season</span> <span class="variable">summer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;凉爽&quot;</span>);</span><br><span class="line">        <span class="type">Season</span> <span class="variable">autumn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题：</strong></p><ol><li>Season类只能有四个对象</li><li>可以new不存在的季节或修改对应季节的属性</li></ol><p><strong>枚举：</strong></p><ul><li>enum （enumeration）</li><li>枚举一组常量对象的集合</li><li>可以理解为：枚举是一种特殊的类。里面包含一组<strong>有限</strong>的<strong>特定</strong>的对象</li></ul><h3 id="1-1、自定义枚举类"><a href="#1-1、自定义枚举类" class="headerlink" title="1.1、自定义枚举类"></a>1.1、自定义枚举类</h3><ol><li>构造器私有化</li><li>类的内部创建一组对象</li><li>不提供set方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season.SPRING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义枚举实现</span></span><br><span class="line"><span class="comment">// 构造器私有化</span></span><br><span class="line"><span class="comment">// 去掉set方法，防止属性被修改</span></span><br><span class="line"><span class="comment">// Season内部创建固定的对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">    <span class="comment">//省略。。。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2、enum关键字实现枚举"><a href="#1-2、enum关键字实现枚举" class="headerlink" title="1.2、enum关键字实现枚举"></a>1.2、enum关键字实现枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season.SPRING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用enum关键字实现枚举</span></span><br><span class="line"><span class="comment">// 关键字替代class</span></span><br><span class="line"><span class="comment">// 如果使用enum实现枚举，要求将常量对象写在最前面</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season</span> &#123;</span><br><span class="line"></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;炎热&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;凉爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Season(String name, String decs) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.decs = decs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String decs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, decs=&#x27;&quot;</span> + decs + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>1）enum开发一个枚举类时，默认会继承Enum类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">G:\idea_project\javaBasicHan\out\production\javaBasicHan\day04\enum_&gt;javap Season.class</span><br><span class="line">Compiled from &quot;Demo2.java&quot;</span><br><span class="line">final class day04.enum_.Season extends java.lang.Enum&lt;day04.enum_.Season&gt; &#123;</span><br><span class="line">  public static final day04.enum_.Season SPRING;</span><br><span class="line">  public static final day04.enum_.Season WINTER;</span><br><span class="line">  public static day04.enum_.Season[] values();</span><br><span class="line">  public static day04.enum_.Season valueOf(java.lang.String);</span><br><span class="line">  public void setName(java.lang.String);</span><br><span class="line">  public java.lang.String toString();</span><br><span class="line">  static &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）public final static Season SPRING &#x3D; new Season(“春天”,”温暖”); 简化为 SPRING(“春天”,”温暖”),</p><p>3）如果使用无参构造器，可以省略 （）</p><p>4）枚举对象必须放在枚举类的行首</p><h3 id="1-3、enum常用方法"><a href="#1-3、enum常用方法" class="headerlink" title="1.3、enum常用方法"></a>1.3、enum常用方法</h3><p><strong>Enum源码</strong></p><h4 id="1、name"><a href="#1、name" class="headerlink" title="1、name()"></a>1、<strong>name()</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the name of this enum constant, exactly as declared in its</span></span><br><span class="line"><span class="comment"> * enum declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;Most programmers should use the &#123;<span class="doctag">@link</span> #toString&#125; method in</span></span><br><span class="line"><span class="comment"> * preference to this one, as the toString method may return</span></span><br><span class="line"><span class="comment"> * a more user-friendly name.&lt;/b&gt;  This method is designed primarily for</span></span><br><span class="line"><span class="comment"> * use in specialized situations where correctness depends on getting the</span></span><br><span class="line"><span class="comment"> * exact name, which will not vary from release to release.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the name of this enum constant</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、ordinal"><a href="#2、ordinal" class="headerlink" title="2、ordinal()"></a>2、<strong>ordinal()</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> ordinal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the ordinal of this enumeration constant (its position</span></span><br><span class="line"><span class="comment"> * in its enum declaration, where the initial constant is assigned</span></span><br><span class="line"><span class="comment"> * an ordinal of zero).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Most programmers will have no use for this method.  It is</span></span><br><span class="line"><span class="comment"> * designed for use by sophisticated enum-based data structures, such</span></span><br><span class="line"><span class="comment"> * as &#123;<span class="doctag">@link</span> java.util.EnumSet&#125; and &#123;<span class="doctag">@link</span> java.util.EnumMap&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the ordinal of this enumeration constant</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">ordinal</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ordinal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、values"><a href="#3、values" class="headerlink" title="3、values()"></a>3、<strong>values()</strong></h4><p>影藏了源码里，离谱，反编译可以看到</p><p><img src="https://i.loli.net/2021/04/18/IJqnb6s4DSavZQu.png" alt="image-20210418101417618"></p><p>返回数组，定义的所有对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(Season.values()));</span><br><span class="line"></span><br><span class="line">[Season&#123;name=<span class="string">&#x27;春天&#x27;</span>, decs=<span class="string">&#x27;温暖&#x27;</span>&#125;, Season&#123;name=<span class="string">&#x27;夏天&#x27;</span>, decs=<span class="string">&#x27;炎热&#x27;</span>&#125;, Season&#123;name=<span class="string">&#x27;秋天&#x27;</span>, decs=<span class="string">&#x27;凉爽&#x27;</span>&#125;, Season&#123;name=<span class="string">&#x27;冬天&#x27;</span>, decs=<span class="string">&#x27;寒冷&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><h4 id="4、valueOf"><a href="#4、valueOf" class="headerlink" title="4、valueOf()"></a>4、<strong>valueOf()</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the enum constant of the specified enum type with the</span></span><br><span class="line"><span class="comment"> * specified name.  The name must match exactly an identifier used</span></span><br><span class="line"><span class="comment"> * to declare an enum constant in this type.  (Extraneous whitespace</span></span><br><span class="line"><span class="comment"> * characters are not permitted.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that for a particular enum type &#123;<span class="doctag">@code</span> T&#125;, the</span></span><br><span class="line"><span class="comment"> * implicitly declared &#123;<span class="doctag">@code</span> public static T valueOf(String)&#125;</span></span><br><span class="line"><span class="comment"> * method on that enum may be used instead of this method to map</span></span><br><span class="line"><span class="comment"> * from a name to the corresponding enum constant.  All the</span></span><br><span class="line"><span class="comment"> * constants of an enum type can be obtained by calling the</span></span><br><span class="line"><span class="comment"> * implicit &#123;<span class="doctag">@code</span> public static T[] values()&#125; method of that</span></span><br><span class="line"><span class="comment"> * type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; The enum type whose constant is to be returned</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> enumType the &#123;<span class="doctag">@code</span> Class&#125; object of the enum type from which</span></span><br><span class="line"><span class="comment"> *      to return a constant</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name the name of the constant to return</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the enum constant of the specified enum type with the</span></span><br><span class="line"><span class="comment"> *      specified name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the specified enum type has</span></span><br><span class="line"><span class="comment"> *         no constant with the specified name, or the specified</span></span><br><span class="line"><span class="comment"> *         class object does not represent an enum type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> enumType&#125; or &#123;<span class="doctag">@code</span> name&#125;</span></span><br><span class="line"><span class="comment"> *         is null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;T&gt;&gt; T <span class="title function_">valueOf</span><span class="params">(Class&lt;T&gt; enumType,</span></span><br><span class="line"><span class="params">                                            String name)</span> &#123;</span><br><span class="line">    <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> enumType.enumConstantDirectory().get(name);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;Name is null&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">        <span class="string">&quot;No enum constant &quot;</span> + enumType.getCanonicalName() + <span class="string">&quot;.&quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、compareTo"><a href="#5、compareTo" class="headerlink" title="5、compareTo()"></a>5、<strong>compareTo()</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compares this enum with the specified object for order.  Returns a</span></span><br><span class="line"><span class="comment"> * negative integer, zero, or a positive integer as this object is less</span></span><br><span class="line"><span class="comment"> * than, equal to, or greater than the specified object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Enum constants are only comparable to other enum constants of the</span></span><br><span class="line"><span class="comment"> * same enum type.  The natural order implemented by this</span></span><br><span class="line"><span class="comment"> * method is the order in which the constants are declared.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(E o)</span> &#123;</span><br><span class="line">    Enum&lt;?&gt; other = (Enum&lt;?&gt;)o;</span><br><span class="line">    Enum&lt;E&gt; self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (self.getClass() != other.getClass() &amp;&amp; <span class="comment">// optimization</span></span><br><span class="line">        self.getDeclaringClass() != other.getDeclaringClass())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">    <span class="keyword">return</span> self.ordinal - other.ordinal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4、细节"><a href="#1-4、细节" class="headerlink" title="1.4、细节"></a>1.4、细节</h3><ul><li>使用enum就不能继承其他类（默认继承Enum）</li><li>enum类可以实现接口</li></ul><h2 id="二、注解"><a href="#二、注解" class="headerlink" title="二、注解"></a>二、注解</h2><p><strong>注解：</strong></p><ul><li>注解（Annotation）也被称为元数据（Metadata），用于修饰包、类、方法、属性、构造器、局部变量等数据信息</li><li>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</li><li>在javase中，注解的使用目的比较简单，如标记过时的功能忽略警告等，在javaEE中使用较多，配置应用程序的任何切面，代替旧版本复杂的代码和xml配置等</li></ul><p>@Override ：限定某个方法，是重写父类的方法，只能用于方法</p><p>@Deprecated: 用于表示某个方法以过时</p><p>@SuppressWarining:抑制编译器警告</p><h3 id="2-1、-Override"><a href="#2-1、-Override" class="headerlink" title="2.1、@Override"></a>2.1、@Override</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that a method declaration is intended to override a</span></span><br><span class="line"><span class="comment"> * method declaration in a supertype. If a method is annotated with</span></span><br><span class="line"><span class="comment"> * this annotation type compilers are required to generate an error</span></span><br><span class="line"><span class="comment"> * message unless at least one of the following conditions hold:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;&lt;li&gt;</span></span><br><span class="line"><span class="comment"> * The method does override or implement a method declared in a</span></span><br><span class="line"><span class="comment"> * supertype.</span></span><br><span class="line"><span class="comment"> * &lt;/li&gt;&lt;li&gt;</span></span><br><span class="line"><span class="comment"> * The method has a signature that is override-equivalent to that of</span></span><br><span class="line"><span class="comment"> * any public method declared in &#123;<span class="doctag">@linkplain</span> Object&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;/li&gt;&lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Peter von der Ah&amp;eacute;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Joshua Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.1.4 <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Target 修饰注解的注解 – 元注解</p><h3 id="2-2、-Deprecated"><a href="#2-2、-Deprecated" class="headerlink" title="2.2、@Deprecated"></a>2.2、@Deprecated</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A program element annotated &amp;#64;Deprecated is one that programmers</span></span><br><span class="line"><span class="comment"> * are discouraged from using, typically because it is dangerous,</span></span><br><span class="line"><span class="comment"> * or because a better alternative exists.  Compilers warn when a</span></span><br><span class="line"><span class="comment"> * deprecated program element is used or overridden in non-deprecated code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Neal Gafter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.3.6 <span class="doctag">@Deprecated</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>版本升级过渡使用</p><h3 id="2-3、-SuppressWarning"><a href="#2-3、-SuppressWarning" class="headerlink" title="2.3、@SuppressWarning"></a>2.3、@SuppressWarning</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that the named compiler warnings should be suppressed in the</span></span><br><span class="line"><span class="comment"> * annotated element (and in all program elements contained in the annotated</span></span><br><span class="line"><span class="comment"> * element).  Note that the set of warnings suppressed in a given element is</span></span><br><span class="line"><span class="comment"> * a superset of the warnings suppressed in all containing elements.  For</span></span><br><span class="line"><span class="comment"> * example, if you annotate a class to suppress one warning and annotate a</span></span><br><span class="line"><span class="comment"> * method to suppress another, both warnings will be suppressed in the method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As a matter of style, programmers should always use this annotation</span></span><br><span class="line"><span class="comment"> * on the most deeply nested element where it is effective.  If you want to</span></span><br><span class="line"><span class="comment"> * suppress a warning in a particular method, you should annotate that</span></span><br><span class="line"><span class="comment"> * method rather than its class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 4.8 Raw Types</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 4.12.2 Variables of Reference Type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 5.1.9 Unchecked Conversion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 5.5.2 Checked Casts and Unchecked Casts</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.3.5 <span class="doctag">@SuppressWarnings</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The set of warnings that are to be suppressed by the compiler in the</span></span><br><span class="line"><span class="comment">     * annotated element.  Duplicate names are permitted.  The second and</span></span><br><span class="line"><span class="comment">     * successive occurrences of a name are ignored.  The presence of</span></span><br><span class="line"><span class="comment">     * unrecognized warning names is &lt;i&gt;not&lt;/i&gt; an error: Compilers must</span></span><br><span class="line"><span class="comment">     * ignore any warning names they do not recognize.  They are, however,</span></span><br><span class="line"><span class="comment">     * free to emit a warning if an annotation contains an unrecognized</span></span><br><span class="line"><span class="comment">     * warning name.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; The string &#123;<span class="doctag">@code</span> &quot;unchecked&quot;&#125; is used to suppress</span></span><br><span class="line"><span class="comment">     * unchecked warnings. Compiler vendors should document the</span></span><br><span class="line"><span class="comment">     * additional warning names they support in conjunction with this</span></span><br><span class="line"><span class="comment">     * annotation type. They are encouraged to cooperate to ensure</span></span><br><span class="line"><span class="comment">     * that the same names work across multiple compilers.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the set of warnings to be suppressed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4、四种元注解"><a href="#2-4、四种元注解" class="headerlink" title="2.4、四种元注解"></a>2.4、四种元注解</h3><h4 id="2-4-1、Retention"><a href="#2-4-1、Retention" class="headerlink" title="2.4.1、Retention"></a>2.4.1、Retention</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates how long annotations with the annotated type are to</span></span><br><span class="line"><span class="comment"> * be retained.  If no Retention annotation is present on</span></span><br><span class="line"><span class="comment"> * an annotation type declaration, the retention policy defaults to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> RetentionPolicy.CLASS&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A Retention meta-annotation has effect only if the</span></span><br><span class="line"><span class="comment"> * meta-annotated type is used directly for annotation.  It has no</span></span><br><span class="line"><span class="comment"> * effect if the meta-annotated type is used as a member type in</span></span><br><span class="line"><span class="comment"> * another annotation type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Joshua Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.3.2 <span class="doctag">@Retention</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the retention policy.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the retention policy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RetentionPolicy <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation retention policy.  The constants of this enumerated type</span></span><br><span class="line"><span class="comment"> * describe the various policies for retaining annotations.  They are used</span></span><br><span class="line"><span class="comment"> * in conjunction with the &#123;<span class="doctag">@link</span> Retention&#125; meta-annotation type to specify</span></span><br><span class="line"><span class="comment"> * how long annotations are to be retained.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Joshua Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RetentionPolicy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be discarded by the compiler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SOURCE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler</span></span><br><span class="line"><span class="comment">     * but need not be retained by the VM at run time.  This is the default</span></span><br><span class="line"><span class="comment">     * behavior.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLASS,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler and</span></span><br><span class="line"><span class="comment">     * retained by the VM at run time, so they may be read reflectively.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2、Target"><a href="#2-4-2、Target" class="headerlink" title="2.4.2、Target"></a>2.4.2、Target</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates the contexts in which an annotation type is applicable. The</span></span><br><span class="line"><span class="comment"> * declaration contexts and type contexts in which an annotation type may be</span></span><br><span class="line"><span class="comment"> * applicable are specified in JLS 9.6.4.1, and denoted in source code by enum</span></span><br><span class="line"><span class="comment"> * constants of &#123;<span class="doctag">@link</span> ElementType java.lang.annotation.ElementType&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If an &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>&#125; meta-annotation is not present on an annotation type</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> T&#125; , then an annotation of type &#123;<span class="doctag">@code</span> T&#125; may be written as a</span></span><br><span class="line"><span class="comment"> * modifier for any declaration except a type parameter declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If an &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>&#125; meta-annotation is present, the compiler will enforce</span></span><br><span class="line"><span class="comment"> * the usage restrictions indicated by &#123;<span class="doctag">@code</span> ElementType&#125;</span></span><br><span class="line"><span class="comment"> * enum constants, in line with JLS 9.7.4.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For example, this &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>&#125; meta-annotation indicates that the</span></span><br><span class="line"><span class="comment"> * declared type is itself a meta-annotation type.  It can only be used on</span></span><br><span class="line"><span class="comment"> * annotation type declarations:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *    &amp;#064;Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="comment"> *    public &amp;#064;interface MetaAnnotationType &#123;</span></span><br><span class="line"><span class="comment"> *        ...</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>&#125; meta-annotation indicates that the declared type is</span></span><br><span class="line"><span class="comment"> * intended solely for use as a member type in complex annotation type</span></span><br><span class="line"><span class="comment"> * declarations.  It cannot be used to annotate anything directly:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *    &amp;#064;Target(&#123;&#125;)</span></span><br><span class="line"><span class="comment"> *    public &amp;#064;interface MemberType &#123;</span></span><br><span class="line"><span class="comment"> *        ...</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;It is a compile-time error for a single &#123;<span class="doctag">@code</span> ElementType&#125; constant to</span></span><br><span class="line"><span class="comment"> * appear more than once in an &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>&#125; annotation.  For example, the</span></span><br><span class="line"><span class="comment"> * following &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>&#125; meta-annotation is illegal:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *    &amp;#064;Target(&#123;ElementType.FIELD, ElementType.METHOD, ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="comment"> *    public &amp;#064;interface Bogus &#123;</span></span><br><span class="line"><span class="comment"> *        ...</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.4.1 <span class="doctag">@Target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.7.4 Where Annotations May Appear</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The constants of this enumerated type provide a simple classification of the</span></span><br><span class="line"><span class="comment"> * syntactic locations where annotations may appear in a Java program. These</span></span><br><span class="line"><span class="comment"> * constants are used in &#123;<span class="doctag">@link</span> Target java.lang.annotation.Target&#125;</span></span><br><span class="line"><span class="comment"> * meta-annotations to specify where it is legal to write annotations of a</span></span><br><span class="line"><span class="comment"> * given type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The syntactic locations where annotations may appear are split into</span></span><br><span class="line"><span class="comment"> * &lt;em&gt;declaration contexts&lt;/em&gt; , where annotations apply to declarations, and</span></span><br><span class="line"><span class="comment"> * &lt;em&gt;type contexts&lt;/em&gt; , where annotations apply to types used in</span></span><br><span class="line"><span class="comment"> * declarations and expressions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The constants &#123;<span class="doctag">@link</span> #ANNOTATION_TYPE&#125; , &#123;<span class="doctag">@link</span> #CONSTRUCTOR&#125; , &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * #FIELD&#125; , &#123;<span class="doctag">@link</span> #LOCAL_VARIABLE&#125; , &#123;<span class="doctag">@link</span> #METHOD&#125; , &#123;<span class="doctag">@link</span> #PACKAGE&#125; ,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #PARAMETER&#125; , &#123;<span class="doctag">@link</span> #TYPE&#125; , and &#123;<span class="doctag">@link</span> #TYPE_PARAMETER&#125; correspond</span></span><br><span class="line"><span class="comment"> * to the declaration contexts in JLS 9.6.4.1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For example, an annotation whose type is meta-annotated with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>(ElementType.FIELD)&#125; may only be written as a modifier for a</span></span><br><span class="line"><span class="comment"> * field declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The constant &#123;<span class="doctag">@link</span> #TYPE_USE&#125; corresponds to the 15 type contexts in JLS</span></span><br><span class="line"><span class="comment"> * 4.11, as well as to two declaration contexts: type declarations (including</span></span><br><span class="line"><span class="comment"> * annotation type declarations) and type parameter declarations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For example, an annotation whose type is meta-annotated with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>(ElementType.TYPE_USE)&#125; may be written on the type of a field</span></span><br><span class="line"><span class="comment"> * (or within the type of the field, if it is a nested, parameterized, or array</span></span><br><span class="line"><span class="comment"> * type), and may also appear as a modifier for, say, a class declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The &#123;<span class="doctag">@code</span> TYPE_USE&#125; constant includes type declarations and type</span></span><br><span class="line"><span class="comment"> * parameter declarations as a convenience for designers of type checkers which</span></span><br><span class="line"><span class="comment"> * give semantics to annotation types. For example, if the annotation type</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> NonNull&#125; is meta-annotated with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>(ElementType.TYPE_USE)&#125;, then &#123;<span class="doctag">@code</span> <span class="doctag">@NonNull</span>&#125;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> class C &#123;...&#125;&#125; could be treated by a type checker as indicating that</span></span><br><span class="line"><span class="comment"> * all variables of class &#123;<span class="doctag">@code</span> C&#125; are non-null, while still allowing</span></span><br><span class="line"><span class="comment"> * variables of other classes to be non-null or not non-null based on whether</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@NonNull</span>&#125; appears at the variable&#x27;s declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Joshua Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.4.1 <span class="doctag">@Target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 4.1 The Kinds of Types and Values</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ElementType</span> &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-3、Documented"><a href="#2-4-3、Documented" class="headerlink" title="2.4.3、Documented"></a>2.4.3、Documented</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that annotations with a type are to be documented by javadoc</span></span><br><span class="line"><span class="comment"> * and similar tools by default.  This type should be used to annotate the</span></span><br><span class="line"><span class="comment"> * declarations of types whose annotations affect the use of annotated</span></span><br><span class="line"><span class="comment"> * elements by their clients.  If a type declaration is annotated with</span></span><br><span class="line"><span class="comment"> * Documented, its annotations become part of the public API</span></span><br><span class="line"><span class="comment"> * of the annotated elements.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joshua Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Documented &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-4、Inherited"><a href="#2-4-4、Inherited" class="headerlink" title="2.4.4、Inherited"></a>2.4.4、Inherited</h4><p>实际中，使用较少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotation type is automatically inherited.  If</span></span><br><span class="line"><span class="comment"> * an Inherited meta-annotation is present on an annotation type</span></span><br><span class="line"><span class="comment"> * declaration, and the user queries the annotation type on a class</span></span><br><span class="line"><span class="comment"> * declaration, and the class declaration has no annotation for this type,</span></span><br><span class="line"><span class="comment"> * then the class&#x27;s superclass will automatically be queried for the</span></span><br><span class="line"><span class="comment"> * annotation type.  This process will be repeated until an annotation for this</span></span><br><span class="line"><span class="comment"> * type is found, or the top of the class hierarchy (Object)</span></span><br><span class="line"><span class="comment"> * is reached.  If no superclass has an annotation for this type, then</span></span><br><span class="line"><span class="comment"> * the query will indicate that the class in question has no such annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that this meta-annotation type has no effect if the annotated</span></span><br><span class="line"><span class="comment"> * type is used to annotate anything other than a class.  Note also</span></span><br><span class="line"><span class="comment"> * that this meta-annotation only causes annotations to be inherited</span></span><br><span class="line"><span class="comment"> * from superclasses; annotations on implemented interfaces have no</span></span><br><span class="line"><span class="comment"> * effect.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Joshua Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.3.3 <span class="doctag">@Inherited</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inherited &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="day06"><a href="#day06" class="headerlink" title="day06"></a>day06</h1><blockquote><p>摘要</p><ul><li>异常</li><li>常用类（一）</li></ul></blockquote><!--more--><h2 id="一、Exception"><a href="#一、Exception" class="headerlink" title="一、Exception"></a>一、Exception</h2><p>引出：不应该出现不至于致命的错误就导致整个系统崩溃</p><p>java设计者提供异常处理机制解决该问题</p><h3 id="1-1、异常"><a href="#1-1、异常" class="headerlink" title="1.1、异常"></a>1.1、异常</h3><p>异常可分为</p><ol><li>Error：jvm虚拟机无法解决的严重问题，如栈溢出</li><li>Exception：可以使用针对性的代码进行处理，Exception分为<strong>运行时异常</strong>和<strong>编译时异常</strong></li></ol><h3 id="1-2、异常体系图"><a href="#1-2、异常体系图" class="headerlink" title="1.2、异常体系图"></a>1.2、异常体系图</h3><p><img src="https://i.loli.net/2021/04/19/4KId5hZje3AbyOU.png"></p><ul><li>编译时异常编译器检测出，必须处理负责无法通过编译</li></ul><h3 id="1-3、常见的运行时异常"><a href="#1-3、常见的运行时异常" class="headerlink" title="1.3、常见的运行时异常"></a>1.3、常见的运行时异常</h3><h4 id="1-3-1、NullPointerException"><a href="#1-3-1、NullPointerException" class="headerlink" title="1.3.1、NullPointerException"></a>1.3.1、NullPointerException</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown when an application attempts to use &#123;<span class="doctag">@code</span> null&#125; in a</span></span><br><span class="line"><span class="comment"> * case where an object is required. These include:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Calling the instance method of a &#123;<span class="doctag">@code</span> null&#125; object.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Accessing or modifying the field of a &#123;<span class="doctag">@code</span> null&#125; object.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Taking the length of &#123;<span class="doctag">@code</span> null&#125; as if it were an array.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Accessing or modifying the slots of &#123;<span class="doctag">@code</span> null&#125; as if it</span></span><br><span class="line"><span class="comment"> *     were an array.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Throwing &#123;<span class="doctag">@code</span> null&#125; as if it were a &#123;<span class="doctag">@code</span> Throwable&#125;</span></span><br><span class="line"><span class="comment"> *     value.</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Applications should throw instances of this class to indicate</span></span><br><span class="line"><span class="comment"> * other illegal uses of the &#123;<span class="doctag">@code</span> null&#125; object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> NullPointerException&#125; objects may be constructed by the</span></span><br><span class="line"><span class="comment"> * virtual machine as if &#123;<span class="doctag">@linkplain</span> Throwable#Throwable(String,</span></span><br><span class="line"><span class="comment"> * Throwable, boolean, boolean) suppression were disabled and/or the</span></span><br><span class="line"><span class="comment"> * stack trace was not writable&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NullPointerException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">5162710183389028792L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a &#123;<span class="doctag">@code</span> NullPointerException&#125; with no detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NullPointerException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a &#123;<span class="doctag">@code</span> NullPointerException&#125; with the specified</span></span><br><span class="line"><span class="comment">     * detail message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   s   the detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NullPointerException</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2、ArithmeticException"><a href="#1-3-2、ArithmeticException" class="headerlink" title="1.3.2、ArithmeticException"></a>1.3.2、ArithmeticException</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown when an exceptional arithmetic condition has occurred. For</span></span><br><span class="line"><span class="comment"> * example, an integer &quot;divide by zero&quot; throws an</span></span><br><span class="line"><span class="comment"> * instance of this class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> ArithmeticException&#125; objects may be constructed by the</span></span><br><span class="line"><span class="comment"> * virtual machine as if &#123;<span class="doctag">@linkplain</span> Throwable#Throwable(String,</span></span><br><span class="line"><span class="comment"> * Throwable, boolean, boolean) suppression were disabled and/or the</span></span><br><span class="line"><span class="comment"> * stack trace was not writable&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2256477558314496007L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an &#123;<span class="doctag">@code</span> ArithmeticException&#125; with no detail</span></span><br><span class="line"><span class="comment">     * message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArithmeticException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an &#123;<span class="doctag">@code</span> ArithmeticException&#125; with the specified</span></span><br><span class="line"><span class="comment">     * detail message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   s   the detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArithmeticException</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-3、ArrayIndexOutOfBoundsException"><a href="#1-3-3、ArrayIndexOutOfBoundsException" class="headerlink" title="1.3.3、ArrayIndexOutOfBoundsException"></a>1.3.3、ArrayIndexOutOfBoundsException</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown to indicate that an array has been accessed with an</span></span><br><span class="line"><span class="comment"> * illegal index. The index is either negative or greater than or</span></span><br><span class="line"><span class="comment"> * equal to the size of the array.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayIndexOutOfBoundsException</span> <span class="keyword">extends</span> <span class="title class_">IndexOutOfBoundsException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5116101128118950844L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; with no</span></span><br><span class="line"><span class="comment">     * detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayIndexOutOfBoundsException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * class with an argument indicating the illegal index.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   index   the illegal index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayIndexOutOfBoundsException</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;Array index out of range: &quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; class</span></span><br><span class="line"><span class="comment">     * with the specified detail message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   s   the detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayIndexOutOfBoundsException</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-4、ClassCastException"><a href="#1-3-4、ClassCastException" class="headerlink" title="1.3.4、ClassCastException"></a>1.3.4、ClassCastException</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown to indicate that the code has attempted to cast an object</span></span><br><span class="line"><span class="comment"> * to a subclass of which it is not an instance. For example, the</span></span><br><span class="line"><span class="comment"> * following code generates a &lt;code&gt;ClassCastException&lt;/code&gt;:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     Object x = new Integer(0);</span></span><br><span class="line"><span class="comment"> *     System.out.println((String)x);</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassCastException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">9223365651070458532L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a &lt;code&gt;ClassCastException&lt;/code&gt; with no detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassCastException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a &lt;code&gt;ClassCastException&lt;/code&gt; with the specified</span></span><br><span class="line"><span class="comment">     * detail message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   s   the detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassCastException</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-5NumberFormatException"><a href="#1-3-5NumberFormatException" class="headerlink" title="1.3.5NumberFormatException"></a>1.3.5NumberFormatException</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown to indicate that the application has attempted to convert</span></span><br><span class="line"><span class="comment"> * a string to one of the numeric types, but that the string does not</span></span><br><span class="line"><span class="comment"> * have the appropriate format.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.Integer#parseInt(String)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberFormatException</span> <span class="keyword">extends</span> <span class="title class_">IllegalArgumentException</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2848938806368998894L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a &lt;code&gt;NumberFormatException&lt;/code&gt; with no detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumberFormatException</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a &lt;code&gt;NumberFormatException&lt;/code&gt; with the</span></span><br><span class="line"><span class="comment">     * specified detail message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   s   the detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumberFormatException</span> <span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span> (s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Factory method for making a &lt;code&gt;NumberFormatException&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * given the specified input which caused the error.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   s   the input causing the error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> NumberFormatException <span class="title function_">forInputString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NumberFormatException</span>(<span class="string">&quot;For input string: \&quot;&quot;</span> + s + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4、常见的编译异常"><a href="#1-4、常见的编译异常" class="headerlink" title="1.4、常见的编译异常"></a>1.4、常见的编译异常</h3><p>数据库、文件、IO等操作时的异常</p><h3 id="1-5、异常处理机制"><a href="#1-5、异常处理机制" class="headerlink" title="1.5、异常处理机制"></a>1.5、异常处理机制</h3><p>try - catch</p><p>throws      一直抛到jvm jvm直接输出异常，中断程序</p><h3 id="1-6、try-catch"><a href="#1-6、try-catch" class="headerlink" title="1.6、try-catch"></a>1.6、try-catch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(f1()); <span class="comment">// 4</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            a.length();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ++i; <span class="comment">//会执行但是不返回</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7、throws"><a href="#1-7、throws" class="headerlink" title="1.7、throws"></a>1.7、throws</h3><p>1）如果一个方法可能产生异常但是不知道如何处理，方法可以抛出异常交给调用者处理</p><h3 id="1-8、自定义异常"><a href="#1-8、自定义异常" class="headerlink" title="1.8、自定义异常"></a>1.8、自定义异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">150</span>;</span><br><span class="line">        <span class="keyword">if</span> (age &lt;= <span class="number">18</span> || age &gt;= <span class="number">120</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span>(<span class="string">&quot;年龄错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一般基础RunTimeException</span></span><br><span class="line"><span class="comment">// 可以使用默认的处理机制</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、常用类（一）"><a href="#二、常用类（一）" class="headerlink" title="二、常用类（一）"></a>二、常用类（一）</h2><h3 id="1、包装类"><a href="#1、包装类" class="headerlink" title="1、包装类"></a>1、包装类</h3><p>八中基本类型对应的引用类型</p><p><img src="https://i.loli.net/2021/04/20/ZPrApSQLHUyDf65.png"></p><p><img src="https://i.loli.net/2021/04/20/hL8ab6wxMZ9nszy.png"></p><p><img src="https://i.loli.net/2021/04/20/dWK6haOQIvsigjq.png"></p><p><strong>基本数据类型 和 包装类的转换</strong></p><p>1）jdk5 前的手动装箱和拆箱方式</p><p>2）jdk5以后自动装箱和拆箱</p><p><strong>练习</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">true</span> ? <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>) : <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);</span><br><span class="line">System.out.println(obj); <span class="comment">//1 三元运算符会提升精度</span></span><br></pre></td></tr></table></figure><p><strong>包装类和String类转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a string representation of the first argument in the</span></span><br><span class="line"><span class="comment"> * radix specified by the second argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If the radix is smaller than &#123;<span class="doctag">@code</span> Character.MIN_RADIX&#125;</span></span><br><span class="line"><span class="comment"> * or larger than &#123;<span class="doctag">@code</span> Character.MAX_RADIX&#125;, then the radix</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> 10&#125; is used instead.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If the first argument is negative, the first element of the</span></span><br><span class="line"><span class="comment"> * result is the ASCII minus character &#123;<span class="doctag">@code</span> &#x27;-&#x27;&#125;</span></span><br><span class="line"><span class="comment"> * (&#123;<span class="doctag">@code</span> &#x27;\u005Cu002D&#x27;&#125;). If the first argument is not</span></span><br><span class="line"><span class="comment"> * negative, no sign character appears in the result.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The remaining characters of the result represent the magnitude</span></span><br><span class="line"><span class="comment"> * of the first argument. If the magnitude is zero, it is</span></span><br><span class="line"><span class="comment"> * represented by a single zero character &#123;<span class="doctag">@code</span> &#x27;0&#x27;&#125;</span></span><br><span class="line"><span class="comment"> * (&#123;<span class="doctag">@code</span> &#x27;\u005Cu0030&#x27;&#125;); otherwise, the first character of</span></span><br><span class="line"><span class="comment"> * the representation of the magnitude will not be the zero</span></span><br><span class="line"><span class="comment"> * character.  The following ASCII characters are used as digits:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;</span></span><br><span class="line"><span class="comment"> *   &#123;<span class="doctag">@code</span> 0123456789abcdefghijklmnopqrstuvwxyz&#125;</span></span><br><span class="line"><span class="comment"> * &lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * These are &#123;<span class="doctag">@code</span> &#x27;\u005Cu0030&#x27;&#125; through</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> &#x27;\u005Cu0039&#x27;&#125; and &#123;<span class="doctag">@code</span> &#x27;\u005Cu0061&#x27;&#125; through</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> &#x27;\u005Cu007A&#x27;&#125;. If &#123;<span class="doctag">@code</span> radix&#125; is</span></span><br><span class="line"><span class="comment"> * &lt;var&gt;N&lt;/var&gt;, then the first &lt;var&gt;N&lt;/var&gt; of these characters</span></span><br><span class="line"><span class="comment"> * are used as radix-&lt;var&gt;N&lt;/var&gt; digits in the order shown. Thus,</span></span><br><span class="line"><span class="comment"> * the digits for hexadecimal (radix 16) are</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> 0123456789abcdef&#125;. If uppercase letters are</span></span><br><span class="line"><span class="comment"> * desired, the &#123;<span class="doctag">@link</span> java.lang.String#toUpperCase()&#125; method may</span></span><br><span class="line"><span class="comment"> * be called on the result:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;</span></span><br><span class="line"><span class="comment"> *  &#123;<span class="doctag">@code</span> Integer.toString(n, 16).toUpperCase()&#125;</span></span><br><span class="line"><span class="comment"> * &lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   i       an integer to be converted to a string.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   radix   the radix to use in the string representation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a string representation of the argument in the specified radix.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.Character#MAX_RADIX</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.Character#MIN_RADIX</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> radix)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (radix &lt; Character.MIN_RADIX || radix &gt; Character.MAX_RADIX)</span><br><span class="line">        radix = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Use the faster version */</span></span><br><span class="line">    <span class="keyword">if</span> (radix == <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> toString(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[] = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">33</span>];</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">negative</span> <span class="operator">=</span> (i &lt; <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">charPos</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!negative) &#123;</span><br><span class="line">        i = -i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= -radix) &#123;</span><br><span class="line">        buf[charPos--] = digits[-(i % radix)];</span><br><span class="line">        i = i / radix;</span><br><span class="line">    &#125;</span><br><span class="line">    buf[charPos] = digits[-i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (negative) &#123;</span><br><span class="line">        buf[--charPos] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf, charPos, (<span class="number">33</span> - charPos));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parses the string argument as a signed decimal integer. The</span></span><br><span class="line"><span class="comment"> * characters in the string must all be decimal digits, except</span></span><br><span class="line"><span class="comment"> * that the first character may be an ASCII minus sign &#123;<span class="doctag">@code</span> &#x27;-&#x27;&#125;</span></span><br><span class="line"><span class="comment"> * (&#123;<span class="doctag">@code</span> &#x27;\u005Cu002D&#x27;&#125;) to indicate a negative value or an</span></span><br><span class="line"><span class="comment"> * ASCII plus sign &#123;<span class="doctag">@code</span> &#x27;+&#x27;&#125; (&#123;<span class="doctag">@code</span> &#x27;\u005Cu002B&#x27;&#125;) to</span></span><br><span class="line"><span class="comment"> * indicate a positive value. The resulting integer value is</span></span><br><span class="line"><span class="comment"> * returned, exactly as if the argument and the radix 10 were</span></span><br><span class="line"><span class="comment"> * given as arguments to the &#123;<span class="doctag">@link</span> #parseInt(java.lang.String,</span></span><br><span class="line"><span class="comment"> * int)&#125; method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s    a &#123;<span class="doctag">@code</span> String&#125; containing the &#123;<span class="doctag">@code</span> int&#125;</span></span><br><span class="line"><span class="comment"> *             representation to be parsed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>     the integer value represented by the argument in decimal.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  NumberFormatException  if the string does not contain a</span></span><br><span class="line"><span class="comment"> *               parsable integer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">parseInt</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException &#123;</span><br><span class="line">    <span class="keyword">return</span> parseInt(s,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>常用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A constant holding the minimum value an &#123;<span class="doctag">@code</span> int&#125; can</span></span><br><span class="line"><span class="comment"> * have, -2&lt;sup&gt;31&lt;/sup&gt;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Native</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>   <span class="variable">MIN_VALUE</span> <span class="operator">=</span> <span class="number">0x80000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A constant holding the maximum value an &#123;<span class="doctag">@code</span> int&#125; can</span></span><br><span class="line"><span class="comment"> * have, 2&lt;sup&gt;31&lt;/sup&gt;-1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Native</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>   <span class="variable">MAX_VALUE</span> <span class="operator">=</span> <span class="number">0x7fffffff</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isDigit</span><span class="params">(<span class="type">int</span> codePoint)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getType(codePoint) == Character.DECIMAL_DIGIT_NUMBER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isLetter</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> isLetter((<span class="type">int</span>)ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用的时候查就行</p><p><strong>integer面试题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(n1 == n2);</span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">System.out.println(n3 == n4);</span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">n5</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n6</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(n5 == n6);</span><br></pre></td></tr></table></figure><p><strong>追源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) <span class="comment">// -128 - 127</span></span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cache to support the object identity semantics of autoboxing for values between</span></span><br><span class="line"><span class="comment"> * -128 and 127 (inclusive) as required by JLS.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The cache is initialized on first usage.  The size of the cache</span></span><br><span class="line"><span class="comment"> * may be controlled by the &#123;<span class="doctag">@code</span> -XX:AutoBoxCacheMax=&lt;size&gt;&#125; option.</span></span><br><span class="line"><span class="comment"> * During VM initialization, java.lang.Integer.IntegerCache.high property</span></span><br><span class="line"><span class="comment"> * may be set and saved in the private system properties in the</span></span><br><span class="line"><span class="comment"> * sun.misc.VM class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、String"><a href="#2、String" class="headerlink" title="2、String"></a>2、String</h3><p>底层还是char数组（真正存放字符串的地方）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[]; <span class="comment">//final不能修改</span></span><br></pre></td></tr></table></figure><h4 id="1、常用构造器"><a href="#1、常用构造器" class="headerlink" title="1、常用构造器"></a>1、常用构造器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="string">&quot;&quot;</span>.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(String original)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = original.value;</span><br><span class="line">    <span class="built_in">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(<span class="type">char</span> value[])</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(<span class="type">char</span> value[], <span class="type">int</span> offset, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (offset &lt;= value.length) &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = <span class="string">&quot;&quot;</span>.value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt; value.length - count) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(offset + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(<span class="type">byte</span> bytes[])</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、创建对象的两种方式"><a href="#2、创建对象的两种方式" class="headerlink" title="2、创建对象的两种方式"></a>2、创建对象的两种方式</h4><ol><li>String str &#x3D; “hsp”</li><li>String str &#x3D; new String(“hsp”)</li></ol><p>方式1：先从常量池查看是否有“hsp”的数据空间，如果有，直接指向；如果没有则重新创建，然后指向</p><p>方法2：现在堆里创建对象，维护value属性，再让value指向常量池地址（没有则创建）</p><p><img src="https://i.loli.net/2021/04/21/IYQ81dgjp9xrVOe.png"></p><p><strong>练习：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(str1.equals(str2));</span><br><span class="line">System.out.println(str1 == str2);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">System.out.println(a.equals(b));</span><br><span class="line">System.out.println(a == b);</span><br><span class="line">System.out.println(a == b.intern()); <span class="comment">//T</span></span><br><span class="line">System.out.println(b == b.intern()); <span class="comment">//F</span></span><br></pre></td></tr></table></figure><p><strong>intern()方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a canonical representation for the string object.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * A pool of strings, initially empty, is maintained privately by the</span></span><br><span class="line"><span class="comment"> * class &#123;<span class="doctag">@code</span> String&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * When the intern method is invoked, if the pool already contains a</span></span><br><span class="line"><span class="comment"> * string equal to this &#123;<span class="doctag">@code</span> String&#125; object as determined by</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> #equals(Object)&#125; method, then the string from the pool is</span></span><br><span class="line"><span class="comment"> * returned. Otherwise, this &#123;<span class="doctag">@code</span> String&#125; object is added to the</span></span><br><span class="line"><span class="comment"> * pool and a reference to this &#123;<span class="doctag">@code</span> String&#125; object is returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * It follows that for any two strings &#123;<span class="doctag">@code</span> s&#125; and &#123;<span class="doctag">@code</span> t&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> s.intern() == t.intern()&#125; is &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment"> * if and only if &#123;<span class="doctag">@code</span> s.equals(t)&#125; is &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * All literal strings and string-valued constant expressions are</span></span><br><span class="line"><span class="comment"> * interned. String literals are defined in section 3.10.5 of the</span></span><br><span class="line"><span class="comment"> * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a string that has the same contents as this string, but is</span></span><br><span class="line"><span class="comment"> *          guaranteed to be from a pool of unique strings.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">intern</span><span class="params">()</span>; <span class="comment">//说了一大堆，其实就是返回常量池的地址</span></span><br></pre></td></tr></table></figure><h4 id="3、对象特性"><a href="#3、对象特性" class="headerlink" title="3、对象特性"></a>3、对象特性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">s1 = <span class="string">&quot;haha&quot;</span></span><br></pre></td></tr></table></figure><p>创建两个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure><p>编译器底层优化，直接 “helloabc” 一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> b + c;</span><br></pre></td></tr></table></figure><p>创建<strong>三个对象</strong></p><p>追源码</p><p><img src="https://i.loli.net/2021/04/21/k2O6mTl8YrsQuwz.png"></p><p><img src="https://i.loli.net/2021/04/21/ixdrCRhAjos3BVz.png" alt="image-20210421175958265"></p><p><img src="https://i.loli.net/2021/04/21/kdMh479cGmWz2qR.png"></p><p><img src="https://i.loli.net/2021/04/21/21suWXBg4mw9Oyp.png"></p><p>底层执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">stringBuilder.append(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">stringBuilder.append(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> stringBuilder.toString();</span><br></pre></td></tr></table></figure><p><strong>String str &#x3D; “abc” + “hello” 常量相加，看池</strong></p><p><strong>String str &#x3D; a + b 对象相加，看堆</strong></p><p><strong>练习：</strong></p><p>判断输出结果，画出内存布局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        test.change(test.str,test.ch);</span><br><span class="line">        System.out.println(test.str);</span><br><span class="line">        System.out.println(test.ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hsp&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">char</span>[] ch = &#123;<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String str,<span class="type">char</span> ch[])</span> &#123;</span><br><span class="line">        str = <span class="string">&quot;java&quot;</span>;</span><br><span class="line">        ch[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/21/Jw4GZqOF8su6SWN.png"></p><h4 id="4、String类常用方法"><a href="#4、String类常用方法" class="headerlink" title="4、String类常用方法"></a>4、String类常用方法</h4><p>String类用来保存字符串常量，每次更新都要重新开辟空间，<strong>效率较低</strong>；java开发者设计了<strong>StringBuilder</strong>和<strong>StringBuffer</strong>来增加效率</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    str += <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125; <span class="comment">//会在常量池不断开辟100个空间并不断修改引用</span></span><br></pre></td></tr></table></figure><h5 id="1、equals"><a href="#1、equals" class="headerlink" title="1、equals"></a>1、equals</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compares this string to the specified object.  The result is &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * true&#125; if and only if the argument is not &#123;<span class="doctag">@code</span> null&#125; and is a &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * String&#125; object that represents the same sequence of characters as this</span></span><br><span class="line"><span class="comment"> * object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  anObject</span></span><br><span class="line"><span class="comment"> *         The object to compare this &#123;<span class="doctag">@code</span> String&#125; against</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the given object represents a &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment"> *          equivalent to this string, &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  #compareTo(String)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  #equalsIgnoreCase(String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="type">char</span> v1[] = value;</span><br><span class="line">            <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、equalsIgnoreCase"><a href="#2、equalsIgnoreCase" class="headerlink" title="2、equalsIgnoreCase"></a>2、equalsIgnoreCase</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compares this &#123;<span class="doctag">@code</span> String&#125; to another &#123;<span class="doctag">@code</span> String&#125;, ignoring case</span></span><br><span class="line"><span class="comment"> * considerations.  Two strings are considered equal ignoring case if they</span></span><br><span class="line"><span class="comment"> * are of the same length and corresponding characters in the two strings</span></span><br><span class="line"><span class="comment"> * are equal ignoring case.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Two characters &#123;<span class="doctag">@code</span> c1&#125; and &#123;<span class="doctag">@code</span> c2&#125; are considered the same</span></span><br><span class="line"><span class="comment"> * ignoring case if at least one of the following is true:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt; The two characters are the same (as compared by the</span></span><br><span class="line"><span class="comment"> *        &#123;<span class="doctag">@code</span> ==&#125; operator)</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt; Applying the method &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> *        java.lang.Character#toUpperCase(char)&#125; to each character</span></span><br><span class="line"><span class="comment"> *        produces the same result</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt; Applying the method &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> *        java.lang.Character#toLowerCase(char)&#125; to each character</span></span><br><span class="line"><span class="comment"> *        produces the same result</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  anotherString</span></span><br><span class="line"><span class="comment"> *         The &#123;<span class="doctag">@code</span> String&#125; to compare this &#123;<span class="doctag">@code</span> String&#125; against</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the argument is not &#123;<span class="doctag">@code</span> null&#125; and it</span></span><br><span class="line"><span class="comment"> *          represents an equivalent &#123;<span class="doctag">@code</span> String&#125; ignoring case; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> *          false&#125; otherwise</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  #equals(Object)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equalsIgnoreCase</span><span class="params">(String anotherString)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == anotherString) ? <span class="literal">true</span></span><br><span class="line">            : (anotherString != <span class="literal">null</span>)</span><br><span class="line">            &amp;&amp; (anotherString.value.length == value.length)</span><br><span class="line">            &amp;&amp; regionMatches(<span class="literal">true</span>, <span class="number">0</span>, anotherString, <span class="number">0</span>, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、length"><a href="#3、length" class="headerlink" title="3、length"></a>3、length</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the length of this string.</span></span><br><span class="line"><span class="comment"> * The length is equal to the number of &lt;a href=&quot;Character.html#unicode&quot;&gt;Unicode</span></span><br><span class="line"><span class="comment"> * code units&lt;/a&gt; in the string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  the length of the sequence of characters represented by this</span></span><br><span class="line"><span class="comment"> *          object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、indexOf"><a href="#4、indexOf" class="headerlink" title="4、indexOf"></a>4、indexOf</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the index within this string of the first occurrence of the</span></span><br><span class="line"><span class="comment"> * specified character, starting the search at the specified index.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If a character with value &#123;<span class="doctag">@code</span> ch&#125; occurs in the</span></span><br><span class="line"><span class="comment"> * character sequence represented by this &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment"> * object at an index no smaller than &#123;<span class="doctag">@code</span> fromIndex&#125;, then</span></span><br><span class="line"><span class="comment"> * the index of the first such occurrence is returned. For values</span></span><br><span class="line"><span class="comment"> * of &#123;<span class="doctag">@code</span> ch&#125; in the range from 0 to 0xFFFF (inclusive),</span></span><br><span class="line"><span class="comment"> * this is the smallest value &lt;i&gt;k&lt;/i&gt; such that:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * (this.charAt(&lt;i&gt;k&lt;/i&gt;) == ch) &#123;<span class="doctag">@code</span> &amp;&amp;&#125; (&lt;i&gt;k&lt;/i&gt; &amp;gt;= fromIndex)</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * is true. For other values of &#123;<span class="doctag">@code</span> ch&#125;, it is the</span></span><br><span class="line"><span class="comment"> * smallest value &lt;i&gt;k&lt;/i&gt; such that:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * (this.codePointAt(&lt;i&gt;k&lt;/i&gt;) == ch) &#123;<span class="doctag">@code</span> &amp;&amp;&#125; (&lt;i&gt;k&lt;/i&gt; &amp;gt;= fromIndex)</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * is true. In either case, if no such character occurs in this</span></span><br><span class="line"><span class="comment"> * string at or after position &#123;<span class="doctag">@code</span> fromIndex&#125;, then</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> -1&#125; is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * There is no restriction on the value of &#123;<span class="doctag">@code</span> fromIndex&#125;. If it</span></span><br><span class="line"><span class="comment"> * is negative, it has the same effect as if it were zero: this entire</span></span><br><span class="line"><span class="comment"> * string may be searched. If it is greater than the length of this</span></span><br><span class="line"><span class="comment"> * string, it has the same effect as if it were equal to the length of</span></span><br><span class="line"><span class="comment"> * this string: &#123;<span class="doctag">@code</span> -1&#125; is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;All indices are specified in &#123;<span class="doctag">@code</span> char&#125; values</span></span><br><span class="line"><span class="comment"> * (Unicode code units).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   ch          a character (Unicode code point).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   fromIndex   the index to start the search from.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  the index of the first occurrence of the character in the</span></span><br><span class="line"><span class="comment"> *          character sequence represented by this object that is greater</span></span><br><span class="line"><span class="comment"> *          than or equal to &#123;<span class="doctag">@code</span> fromIndex&#125;, or &#123;<span class="doctag">@code</span> -1&#125;</span></span><br><span class="line"><span class="comment"> *          if the character does not occur.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(<span class="type">int</span> ch, <span class="type">int</span> fromIndex)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> value.length;</span><br><span class="line">    <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        fromIndex = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fromIndex &gt;= max) &#123;</span><br><span class="line">        <span class="comment">// Note: fromIndex might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ch &lt; Character.MIN_SUPPLEMENTARY_CODE_POINT) &#123;</span><br><span class="line">        <span class="comment">// handle most cases here (ch is a BMP code point or a</span></span><br><span class="line">        <span class="comment">// negative value (invalid code point))</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">char</span>[] value = <span class="built_in">this</span>.value;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> fromIndex; i &lt; max; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value[i] == ch) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> indexOfSupplementary(ch, fromIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有一个重载方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(<span class="type">int</span> ch)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(ch, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、lastIndexOf"><a href="#5、lastIndexOf" class="headerlink" title="5、lastIndexOf"></a>5、lastIndexOf</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the index within this string of the last occurrence of</span></span><br><span class="line"><span class="comment"> * the specified character, searching backward starting at the</span></span><br><span class="line"><span class="comment"> * specified index. For values of &#123;<span class="doctag">@code</span> ch&#125; in the range</span></span><br><span class="line"><span class="comment"> * from 0 to 0xFFFF (inclusive), the index returned is the largest</span></span><br><span class="line"><span class="comment"> * value &lt;i&gt;k&lt;/i&gt; such that:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * (this.charAt(&lt;i&gt;k&lt;/i&gt;) == ch) &#123;<span class="doctag">@code</span> &amp;&amp;&#125; (&lt;i&gt;k&lt;/i&gt; &amp;lt;= fromIndex)</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * is true. For other values of &#123;<span class="doctag">@code</span> ch&#125;, it is the</span></span><br><span class="line"><span class="comment"> * largest value &lt;i&gt;k&lt;/i&gt; such that:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * (this.codePointAt(&lt;i&gt;k&lt;/i&gt;) == ch) &#123;<span class="doctag">@code</span> &amp;&amp;&#125; (&lt;i&gt;k&lt;/i&gt; &amp;lt;= fromIndex)</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * is true. In either case, if no such character occurs in this</span></span><br><span class="line"><span class="comment"> * string at or before position &#123;<span class="doctag">@code</span> fromIndex&#125;, then</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> -1&#125; is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;All indices are specified in &#123;<span class="doctag">@code</span> char&#125; values</span></span><br><span class="line"><span class="comment"> * (Unicode code units).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   ch          a character (Unicode code point).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   fromIndex   the index to start the search from. There is no</span></span><br><span class="line"><span class="comment"> *          restriction on the value of &#123;<span class="doctag">@code</span> fromIndex&#125;. If it is</span></span><br><span class="line"><span class="comment"> *          greater than or equal to the length of this string, it has</span></span><br><span class="line"><span class="comment"> *          the same effect as if it were equal to one less than the</span></span><br><span class="line"><span class="comment"> *          length of this string: this entire string may be searched.</span></span><br><span class="line"><span class="comment"> *          If it is negative, it has the same effect as if it were -1:</span></span><br><span class="line"><span class="comment"> *          -1 is returned.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  the index of the last occurrence of the character in the</span></span><br><span class="line"><span class="comment"> *          character sequence represented by this object that is less</span></span><br><span class="line"><span class="comment"> *          than or equal to &#123;<span class="doctag">@code</span> fromIndex&#125;, or &#123;<span class="doctag">@code</span> -1&#125;</span></span><br><span class="line"><span class="comment"> *          if the character does not occur before that point.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(<span class="type">int</span> ch, <span class="type">int</span> fromIndex)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ch &lt; Character.MIN_SUPPLEMENTARY_CODE_POINT) &#123;</span><br><span class="line">        <span class="comment">// handle most cases here (ch is a BMP code point or a</span></span><br><span class="line">        <span class="comment">// negative value (invalid code point))</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">char</span>[] value = <span class="built_in">this</span>.value;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Math.min(fromIndex, value.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value[i] == ch) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastIndexOfSupplementary(ch, fromIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(<span class="type">int</span> ch)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lastIndexOf(ch, value.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6、substring"><a href="#6、substring" class="headerlink" title="6、substring"></a>6、substring</h5><p>关键：区间是<strong>左闭右开</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a string that is a substring of this string. The</span></span><br><span class="line"><span class="comment"> * substring begins at the specified &#123;<span class="doctag">@code</span> beginIndex&#125; and</span></span><br><span class="line"><span class="comment"> * extends to the character at index &#123;<span class="doctag">@code</span> endIndex - 1&#125;.</span></span><br><span class="line"><span class="comment"> * Thus the length of the substring is &#123;<span class="doctag">@code</span> endIndex-beginIndex&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Examples:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * &quot;hamburger&quot;.substring(4, 8) returns &quot;urge&quot;</span></span><br><span class="line"><span class="comment"> * &quot;smiles&quot;.substring(1, 5) returns &quot;mile&quot;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>      beginIndex   the beginning index, inclusive.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>      endIndex     the ending index, exclusive.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>     the specified substring.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  IndexOutOfBoundsException  if the</span></span><br><span class="line"><span class="comment"> *             &#123;<span class="doctag">@code</span> beginIndex&#125; is negative, or</span></span><br><span class="line"><span class="comment"> *             &#123;<span class="doctag">@code</span> endIndex&#125; is larger than the length of</span></span><br><span class="line"><span class="comment"> *             this &#123;<span class="doctag">@code</span> String&#125; object, or</span></span><br><span class="line"><span class="comment"> *             &#123;<span class="doctag">@code</span> beginIndex&#125; is larger than</span></span><br><span class="line"><span class="comment"> *             &#123;<span class="doctag">@code</span> endIndex&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">substring</span><span class="params">(<span class="type">int</span> beginIndex, <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (endIndex &gt; value.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">subLen</span> <span class="operator">=</span> endIndex - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((beginIndex == <span class="number">0</span>) &amp;&amp; (endIndex == value.length)) ? <span class="built_in">this</span></span><br><span class="line">            : <span class="keyword">new</span> <span class="title class_">String</span>(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、trim"><a href="#7、trim" class="headerlink" title="7、trim"></a>7、trim</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a string whose value is this string, with any leading and trailing</span></span><br><span class="line"><span class="comment"> * whitespace removed.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If this &#123;<span class="doctag">@code</span> String&#125; object represents an empty character</span></span><br><span class="line"><span class="comment"> * sequence, or the first and last characters of character sequence</span></span><br><span class="line"><span class="comment"> * represented by this &#123;<span class="doctag">@code</span> String&#125; object both have codes</span></span><br><span class="line"><span class="comment"> * greater than &#123;<span class="doctag">@code</span> &#x27;\u005Cu0020&#x27;&#125; (the space character), then a</span></span><br><span class="line"><span class="comment"> * reference to this &#123;<span class="doctag">@code</span> String&#125; object is returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Otherwise, if there is no character with a code greater than</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> &#x27;\u005Cu0020&#x27;&#125; in the string, then a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object representing an empty string is</span></span><br><span class="line"><span class="comment"> * returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Otherwise, let &lt;i&gt;k&lt;/i&gt; be the index of the first character in the</span></span><br><span class="line"><span class="comment"> * string whose code is greater than &#123;<span class="doctag">@code</span> &#x27;\u005Cu0020&#x27;&#125;, and let</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;m&lt;/i&gt; be the index of the last character in the string whose code</span></span><br><span class="line"><span class="comment"> * is greater than &#123;<span class="doctag">@code</span> &#x27;\u005Cu0020&#x27;&#125;. A &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment"> * object is returned, representing the substring of this string that</span></span><br><span class="line"><span class="comment"> * begins with the character at index &lt;i&gt;k&lt;/i&gt; and ends with the</span></span><br><span class="line"><span class="comment"> * character at index &lt;i&gt;m&lt;/i&gt;-that is, the result of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> this.substring(k, m + 1)&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This method may be used to trim whitespace (as defined above) from</span></span><br><span class="line"><span class="comment"> * the beginning and end of a string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  A string whose value is this string, with any leading and trailing white</span></span><br><span class="line"><span class="comment"> *          space removed, or this string if it has no leading or</span></span><br><span class="line"><span class="comment"> *          trailing white space.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">trim</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> value.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">st</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>[] val = value;    <span class="comment">/* avoid getfield opcode */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[st] &lt;= <span class="string">&#x27; &#x27;</span>)) &#123;</span><br><span class="line">        st++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[len - <span class="number">1</span>] &lt;= <span class="string">&#x27; &#x27;</span>)) &#123;</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((st &gt; <span class="number">0</span>) || (len &lt; value.length)) ? substring(st, len) : <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8、charAt"><a href="#8、charAt" class="headerlink" title="8、charAt()"></a>8、charAt()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the &#123;<span class="doctag">@code</span> char&#125; value at the</span></span><br><span class="line"><span class="comment"> * specified index. An index ranges from &#123;<span class="doctag">@code</span> 0&#125; to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> length() - 1&#125;. The first &#123;<span class="doctag">@code</span> char&#125; value of the sequence</span></span><br><span class="line"><span class="comment"> * is at index &#123;<span class="doctag">@code</span> 0&#125;, the next at index &#123;<span class="doctag">@code</span> 1&#125;,</span></span><br><span class="line"><span class="comment"> * and so on, as for array indexing.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If the &#123;<span class="doctag">@code</span> char&#125; value specified by the index is a</span></span><br><span class="line"><span class="comment"> * &lt;a href=&quot;Character.html#unicode&quot;&gt;surrogate&lt;/a&gt;, the surrogate</span></span><br><span class="line"><span class="comment"> * value is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>      index   the index of the &#123;<span class="doctag">@code</span> char&#125; value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>     the &#123;<span class="doctag">@code</span> char&#125; value at the specified index of this string.</span></span><br><span class="line"><span class="comment"> *             The first &#123;<span class="doctag">@code</span> char&#125; value is at index &#123;<span class="doctag">@code</span> 0&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  IndexOutOfBoundsException  if the &#123;<span class="doctag">@code</span> index&#125;</span></span><br><span class="line"><span class="comment"> *             argument is negative or not less than the length of this</span></span><br><span class="line"><span class="comment"> *             string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">charAt</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((index &lt; <span class="number">0</span>) || (index &gt;= value.length)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9、toLowerCase"><a href="#9、toLowerCase" class="headerlink" title="9、toLowerCase"></a>9、toLowerCase</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts all of the characters in this &#123;<span class="doctag">@code</span> String&#125; to lower</span></span><br><span class="line"><span class="comment"> * case using the rules of the default locale. This is equivalent to calling</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> toLowerCase(Locale.getDefault())&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;Note:&lt;/b&gt; This method is locale sensitive, and may produce unexpected</span></span><br><span class="line"><span class="comment"> * results if used for strings that are intended to be interpreted locale</span></span><br><span class="line"><span class="comment"> * independently.</span></span><br><span class="line"><span class="comment"> * Examples are programming language identifiers, protocol keys, and HTML</span></span><br><span class="line"><span class="comment"> * tags.</span></span><br><span class="line"><span class="comment"> * For instance, &#123;<span class="doctag">@code</span> &quot;TITLE&quot;.toLowerCase()&#125; in a Turkish locale</span></span><br><span class="line"><span class="comment"> * returns &#123;<span class="doctag">@code</span> &quot;t\u005Cu0131tle&quot;&#125;, where &#x27;\u005Cu0131&#x27; is the</span></span><br><span class="line"><span class="comment"> * LATIN SMALL LETTER DOTLESS I character.</span></span><br><span class="line"><span class="comment"> * To obtain correct results for locale insensitive strings, use</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> toLowerCase(Locale.ROOT)&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  the &#123;<span class="doctag">@code</span> String&#125;, converted to lowercase.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.String#toLowerCase(Locale)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toLowerCase</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> toLowerCase(Locale.getDefault());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10、concat"><a href="#10、concat" class="headerlink" title="10、concat"></a>10、concat</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concatenates the specified string to the end of this string.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If the length of the argument string is &#123;<span class="doctag">@code</span> 0&#125;, then this</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object is returned. Otherwise, a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object is returned that represents a character</span></span><br><span class="line"><span class="comment"> * sequence that is the concatenation of the character sequence</span></span><br><span class="line"><span class="comment"> * represented by this &#123;<span class="doctag">@code</span> String&#125; object and the character</span></span><br><span class="line"><span class="comment"> * sequence represented by the argument string.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Examples:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * &quot;cares&quot;.concat(&quot;s&quot;) returns &quot;caress&quot;</span></span><br><span class="line"><span class="comment"> * &quot;to&quot;.concat(&quot;get&quot;).concat(&quot;her&quot;) returns &quot;together&quot;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   str   the &#123;<span class="doctag">@code</span> String&#125; that is concatenated to the end</span></span><br><span class="line"><span class="comment"> *                of this &#123;<span class="doctag">@code</span> String&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a string that represents the concatenation of this object&#x27;s</span></span><br><span class="line"><span class="comment"> *          characters followed by the string argument&#x27;s characters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">concat</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">otherLen</span> <span class="operator">=</span> str.length();</span><br><span class="line">    <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> value.length;</span><br><span class="line">    <span class="type">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class="line">    str.getChars(buf, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11、compareTo"><a href="#11、compareTo" class="headerlink" title="11、compareTo"></a>11、compareTo</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compares two strings lexicographically.</span></span><br><span class="line"><span class="comment"> * The comparison is based on the Unicode value of each character in</span></span><br><span class="line"><span class="comment"> * the strings. The character sequence represented by this</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object is compared lexicographically to the</span></span><br><span class="line"><span class="comment"> * character sequence represented by the argument string. The result is</span></span><br><span class="line"><span class="comment"> * a negative integer if this &#123;<span class="doctag">@code</span> String&#125; object</span></span><br><span class="line"><span class="comment"> * lexicographically precedes the argument string. The result is a</span></span><br><span class="line"><span class="comment"> * positive integer if this &#123;<span class="doctag">@code</span> String&#125; object lexicographically</span></span><br><span class="line"><span class="comment"> * follows the argument string. The result is zero if the strings</span></span><br><span class="line"><span class="comment"> * are equal; &#123;<span class="doctag">@code</span> compareTo&#125; returns &#123;<span class="doctag">@code</span> 0&#125; exactly when</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> #equals(Object)&#125; method would return &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This is the definition of lexicographic ordering. If two strings are</span></span><br><span class="line"><span class="comment"> * different, then either they have different characters at some index</span></span><br><span class="line"><span class="comment"> * that is a valid index for both strings, or their lengths are different,</span></span><br><span class="line"><span class="comment"> * or both. If they have different characters at one or more index</span></span><br><span class="line"><span class="comment"> * positions, let &lt;i&gt;k&lt;/i&gt; be the smallest such index; then the string</span></span><br><span class="line"><span class="comment"> * whose character at position &lt;i&gt;k&lt;/i&gt; has the smaller value, as</span></span><br><span class="line"><span class="comment"> * determined by using the &amp;lt; operator, lexicographically precedes the</span></span><br><span class="line"><span class="comment"> * other string. In this case, &#123;<span class="doctag">@code</span> compareTo&#125; returns the</span></span><br><span class="line"><span class="comment"> * difference of the two character values at position &#123;<span class="doctag">@code</span> k&#125; in</span></span><br><span class="line"><span class="comment"> * the two string -- that is, the value:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * this.charAt(k)-anotherString.charAt(k)</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * If there is no index position at which they differ, then the shorter</span></span><br><span class="line"><span class="comment"> * string lexicographically precedes the longer string. In this case,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> compareTo&#125; returns the difference of the lengths of the</span></span><br><span class="line"><span class="comment"> * strings -- that is, the value:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * this.length()-anotherString.length()</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   anotherString   the &#123;<span class="doctag">@code</span> String&#125; to be compared.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  the value &#123;<span class="doctag">@code</span> 0&#125; if the argument string is equal to</span></span><br><span class="line"><span class="comment"> *          this string; a value less than &#123;<span class="doctag">@code</span> 0&#125; if this string</span></span><br><span class="line"><span class="comment"> *          is lexicographically less than the string argument; and a</span></span><br><span class="line"><span class="comment"> *          value greater than &#123;<span class="doctag">@code</span> 0&#125; if this string is</span></span><br><span class="line"><span class="comment"> *          lexicographically greater than the string argument.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(String anotherString)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> value.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> anotherString.value.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lim</span> <span class="operator">=</span> Math.min(len1, len2);</span><br><span class="line">    <span class="type">char</span> v1[] = value;</span><br><span class="line">    <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; lim) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> v1[k];</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> v2[k];</span><br><span class="line">        <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">            <span class="keyword">return</span> c1 - c2;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len1 - len2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12、toCharArray"><a href="#12、toCharArray" class="headerlink" title="12、toCharArray"></a>12、toCharArray</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts this string to a new character array.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a newly allocated character array whose length is the length</span></span><br><span class="line"><span class="comment"> *          of this string and whose contents are initialized to contain</span></span><br><span class="line"><span class="comment"> *          the character sequence represented by this string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">char</span>[] toCharArray() &#123;</span><br><span class="line">    <span class="comment">// Cannot use Arrays.copyOf because of class initialization order issues</span></span><br><span class="line">    <span class="type">char</span> result[] = <span class="keyword">new</span> <span class="title class_">char</span>[value.length];</span><br><span class="line">    System.arraycopy(value, <span class="number">0</span>, result, <span class="number">0</span>, value.length);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13、format"><a href="#13、format" class="headerlink" title="13、format"></a>13、format</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a formatted string using the specified format string and</span></span><br><span class="line"><span class="comment"> * arguments.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The locale always used is the one returned by &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.util.Locale#getDefault() Locale.getDefault()&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  format</span></span><br><span class="line"><span class="comment"> *         A &lt;a href=&quot;../util/Formatter.html#syntax&quot;&gt;format string&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  args</span></span><br><span class="line"><span class="comment"> *         Arguments referenced by the format specifiers in the format</span></span><br><span class="line"><span class="comment"> *         string.  If there are more arguments than format specifiers, the</span></span><br><span class="line"><span class="comment"> *         extra arguments are ignored.  The number of arguments is</span></span><br><span class="line"><span class="comment"> *         variable and may be zero.  The maximum number of arguments is</span></span><br><span class="line"><span class="comment"> *         limited by the maximum dimension of a Java array as defined by</span></span><br><span class="line"><span class="comment"> *         &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.</span></span><br><span class="line"><span class="comment"> *         The behaviour on a</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> null&#125; argument depends on the &lt;a</span></span><br><span class="line"><span class="comment"> *         href=&quot;../util/Formatter.html#syntax&quot;&gt;conversion&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  java.util.IllegalFormatException</span></span><br><span class="line"><span class="comment"> *          If a format string contains an illegal syntax, a format</span></span><br><span class="line"><span class="comment"> *          specifier that is incompatible with the given arguments,</span></span><br><span class="line"><span class="comment"> *          insufficient arguments given the format string, or other</span></span><br><span class="line"><span class="comment"> *          illegal conditions.  For specification of all possible</span></span><br><span class="line"><span class="comment"> *          formatting errors, see the &lt;a</span></span><br><span class="line"><span class="comment"> *          href=&quot;../util/Formatter.html#detail&quot;&gt;Details&lt;/a&gt; section of the</span></span><br><span class="line"><span class="comment"> *          formatter class specification.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  A formatted string</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  java.util.Formatter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(String format, Object... args)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Formatter</span>().format(format, args).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>……………</p><h3 id="3、StringBuffer"><a href="#3、StringBuffer" class="headerlink" title="3、StringBuffer"></a>3、StringBuffer</h3><ul><li>可以对字符串进行增删</li><li>可字符序列</li><li>是容器</li></ul><p><img src="https://i.loli.net/2021/04/21/zL2eOPskBCMmgIV.png"></p><p>真正存放字符串的地方:父类的value属性，<strong>存放在堆</strong>中（final则存放在常量池）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title class_">Appendable</span>, CharSequence &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value is used for character storage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">char</span>[] value;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a string buffer with no characters in it and an</span></span><br><span class="line"><span class="comment"> * initial capacity of 16 characters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StringBuffer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a string buffer with no characters in it and</span></span><br><span class="line"><span class="comment"> * the specified initial capacity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>      capacity  the initial capacity.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  NegativeArraySizeException  if the &#123;<span class="doctag">@code</span> capacity&#125;</span></span><br><span class="line"><span class="comment"> *               argument is less than &#123;<span class="doctag">@code</span> 0&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StringBuffer</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a string buffer initialized to the contents of the</span></span><br><span class="line"><span class="comment"> * specified string. The initial capacity of the string buffer is</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> 16&#125; plus the length of the string argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   str   the initial contents of the buffer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StringBuffer</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">    append(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><p>增删改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    toStringCache = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">super</span>.append(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">delete</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    toStringCache = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">super</span>.delete(start, end);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">replace</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, String str)</span> &#123;</span><br><span class="line">    toStringCache = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">super</span>.replace(start, end, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">insert</span><span class="params">(<span class="type">int</span> offset, String str)</span> &#123;</span><br><span class="line">    toStringCache = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">super</span>.insert(offset, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以及他们的重载方法</strong></p><h3 id="4、StringBuilder"><a href="#4、StringBuilder" class="headerlink" title="4、StringBuilder"></a>4、StringBuilder</h3><ul><li><p>可变的字符序列，提供一个与StringBuffer兼容的API，但不保证同步（StringBuilder不是线程安全）。该类被设计用作StringBuffer的一个简易替换。用来字符串缓冲区被单个线程使用的时候，尽可能的使用该类，比StringBuffer快</p></li><li><p>字符序列任然存放在父类的value属性（存在在堆中）</p></li></ul><h3 id="5、比较"><a href="#5、比较" class="headerlink" title="5、比较"></a>5、比较</h3><ul><li>String ：不可变字符序列，效率低，复用率高</li><li>StringBuffer： 可变字符序列，效率较高，线程安全</li><li>StringBuilder： 可变字符序列，效率最高，线程不安全</li></ul><p><strong>效率测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day06.StringBuilder_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/22 10:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> countTime(() -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">                str += <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">long</span> <span class="variable">time2</span> <span class="operator">=</span> countTime(() -&gt; &#123;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">                str.append(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">long</span> <span class="variable">time3</span> <span class="operator">=</span> countTime(() -&gt; &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">                str.append(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(time1);</span><br><span class="line">        System.out.println(time2);</span><br><span class="line">        System.out.println(time3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">countTime</span><span class="params">(function function)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        function.run();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> end-start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">function</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/22/nYGdXrgkl43eWKS.png"></p><p><strong>结论</strong></p><ol><li>大量修改操作，单线程，StringBuilder</li><li>大量修改操作，多线程，StringBuffer</li><li>被多个对象引用，如配置信息等，String</li></ol><blockquote><p>果然再学一遍截然不同的感觉，加油吧！</p></blockquote><hr><h1 id="day07"><a href="#day07" class="headerlink" title="day07"></a>day07</h1><blockquote><p>摘要</p><ul><li>常用类（二）</li></ul></blockquote><!--more--><h2 id="一、常用类（二）"><a href="#一、常用类（二）" class="headerlink" title="一、常用类（二）"></a>一、常用类（二）</h2><h3 id="1、Math类"><a href="#1、Math类" class="headerlink" title="1、Math类"></a>1、Math类</h3><p>使用时看源码或者查jdk文档即可</p><h3 id="2、Arrays类"><a href="#2、Arrays类" class="headerlink" title="2、Arrays类"></a>2、Arrays类</h3><h4 id="1、toString"><a href="#1、toString" class="headerlink" title="1、toString()"></a>1、toString()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a string representation of the contents of the specified array.</span></span><br><span class="line"><span class="comment"> * If the array contains other arrays as elements, they are converted to</span></span><br><span class="line"><span class="comment"> * strings by the &#123;<span class="doctag">@link</span> Object#toString&#125; method inherited from</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;Object&lt;/tt&gt;, which describes their &lt;i&gt;identities&lt;/i&gt; rather than</span></span><br><span class="line"><span class="comment"> * their contents.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The value returned by this method is equal to the value that would</span></span><br><span class="line"><span class="comment"> * be returned by &lt;tt&gt;Arrays.asList(a).toString()&lt;/tt&gt;, unless &lt;tt&gt;a&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * is &lt;tt&gt;null&lt;/tt&gt;, in which case &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a the array whose string representation to return</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a string representation of &lt;tt&gt;a&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #deepToString(Object[])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(Object[] a)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">iMax</span> <span class="operator">=</span> a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (iMax == -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    b.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">        b.append(String.valueOf(a[i]));</span><br><span class="line">        <span class="keyword">if</span> (i == iMax)</span><br><span class="line">            <span class="keyword">return</span> b.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">        b.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、sort-自然排序和定制排序"><a href="#2、sort-自然排序和定制排序" class="headerlink" title="2、sort (自然排序和定制排序)"></a>2、sort (自然排序和定制排序)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sorts the specified array of objects according to the order induced by</span></span><br><span class="line"><span class="comment"> * the specified comparator.  All elements in the array must be</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator (that is,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> c.compare(e1, e2)&#125; must not throw a &#123;<span class="doctag">@code</span> ClassCastException&#125;</span></span><br><span class="line"><span class="comment"> * for any elements &#123;<span class="doctag">@code</span> e1&#125; and &#123;<span class="doctag">@code</span> e2&#125; in the array).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will</span></span><br><span class="line"><span class="comment"> * not be reordered as a result of the sort.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Implementation note: This implementation is a stable, adaptive,</span></span><br><span class="line"><span class="comment"> * iterative mergesort that requires far fewer than n lg(n) comparisons</span></span><br><span class="line"><span class="comment"> * when the input array is partially sorted, while offering the</span></span><br><span class="line"><span class="comment"> * performance of a traditional mergesort when the input array is</span></span><br><span class="line"><span class="comment"> * randomly ordered.  If the input array is nearly sorted, the</span></span><br><span class="line"><span class="comment"> * implementation requires approximately n comparisons.  Temporary</span></span><br><span class="line"><span class="comment"> * storage requirements vary from a small constant for nearly sorted</span></span><br><span class="line"><span class="comment"> * input arrays to n/2 object references for randomly ordered input</span></span><br><span class="line"><span class="comment"> * arrays.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The implementation takes equal advantage of ascending and</span></span><br><span class="line"><span class="comment"> * descending order in its input array, and can take advantage of</span></span><br><span class="line"><span class="comment"> * ascending and descending order in different parts of the the same</span></span><br><span class="line"><span class="comment"> * input array.  It is well-suited to merging two or more sorted arrays:</span></span><br><span class="line"><span class="comment"> * simply concatenate the arrays and sort the resulting array.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The implementation was adapted from Tim Peters&#x27;s list sort for Python</span></span><br><span class="line"><span class="comment"> * (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt;</span></span><br><span class="line"><span class="comment"> * TimSort&lt;/a&gt;).  It uses techniques from Peter McIlroy&#x27;s &quot;Optimistic</span></span><br><span class="line"><span class="comment"> * Sorting and Information Theoretic Complexity&quot;, in Proceedings of the</span></span><br><span class="line"><span class="comment"> * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,</span></span><br><span class="line"><span class="comment"> * January 1993.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the class of the objects to be sorted</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a the array to be sorted</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c the comparator to determine the order of the array.  A</span></span><br><span class="line"><span class="comment"> *        &#123;<span class="doctag">@code</span> null&#125; value indicates that the elements&#x27;</span></span><br><span class="line"><span class="comment"> *        &#123;<span class="doctag">@linkplain</span> Comparable natural ordering&#125; should be used.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassCastException if the array contains elements that are</span></span><br><span class="line"><span class="comment"> *         not &lt;i&gt;mutually comparable&lt;/i&gt; using the specified comparator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException (optional) if the comparator is</span></span><br><span class="line"><span class="comment"> *         found to violate the &#123;<span class="doctag">@link</span> Comparator&#125; contract</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">        sort(a);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">            legacyMergeSort(a, c);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模拟排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/22 12:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line">        bubbleSort(arr, (o1, o2) -&gt; o2 - o1);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr, Comparator&lt;Integer&gt; comparable)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (comparable.compare(arr[j],arr[j+<span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、binarSearch"><a href="#3、binarSearch" class="headerlink" title="3、binarSearch()"></a>3、binarSearch()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> binarySearch0(a, <span class="number">0</span>, a.length, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Like public version, but without range checks.</span></span><br><span class="line"><span class="comment">// jdk底层使用循环而非递归</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch0</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> fromIndex, <span class="type">int</span> toIndex,</span></span><br><span class="line"><span class="params">                                 <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> fromIndex;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> toIndex - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">midVal</span> <span class="operator">=</span> a[mid];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (midVal &lt; key)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; key)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// key found</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -(low + 1)</span></span><br><span class="line">    <span class="comment">//返回负的应该在的位置+1</span></span><br><span class="line">    <span class="keyword">return</span> -(low + <span class="number">1</span>);  <span class="comment">// key not found.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、copyOf"><a href="#4、copyOf" class="headerlink" title="4、copyOf"></a>4、copyOf</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] copyOf(<span class="type">int</span>[] original, <span class="type">int</span> newLength) &#123;</span><br><span class="line">    <span class="type">int</span>[] copy = <span class="keyword">new</span> <span class="title class_">int</span>[newLength];</span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、fill"><a href="#5、fill" class="headerlink" title="5、fill"></a>5、fill</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Assigns the specified int value to each element of the specified array</span></span><br><span class="line"><span class="comment"> * of ints.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a the array to be filled</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> val the value to be stored in all elements of the array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = a.length; i &lt; len; i++)</span><br><span class="line">        a[i] = val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、asList"><a href="#6、asList" class="headerlink" title="6、asList"></a>6、asList</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a fixed-size list backed by the specified array.  (Changes to</span></span><br><span class="line"><span class="comment"> * the returned list &quot;write through&quot; to the array.)  This method acts</span></span><br><span class="line"><span class="comment"> * as bridge between array-based and collection-based APIs, in</span></span><br><span class="line"><span class="comment"> * combination with &#123;<span class="doctag">@link</span> Collection#toArray&#125;.  The returned list is</span></span><br><span class="line"><span class="comment"> * serializable and implements &#123;<span class="doctag">@link</span> RandomAccess&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method also provides a convenient way to create a fixed-size</span></span><br><span class="line"><span class="comment"> * list initialized to contain several elements:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     List&amp;lt;String&amp;gt; stooges = Arrays.asList(&quot;Larry&quot;, &quot;Moe&quot;, &quot;Curly&quot;);</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the class of the objects in the array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a the array by which the list will be backed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a list view of the specified array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;varargs&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">asList</span><span class="params">(T... a)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习：</strong></p><p><img src="https://i.loli.net/2021/04/22/eyIbKh7StQnVl34.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/22 12:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Book[] books = <span class="keyword">new</span> <span class="title class_">Book</span>[<span class="number">4</span>];</span><br><span class="line">        books[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;book1&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        books[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;book1&quot;</span>,<span class="number">90</span>);</span><br><span class="line">        books[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;book1&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        books[<span class="number">3</span>]= <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;book1&quot;</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        sort(books);</span><br><span class="line">        System.out.println(Arrays.toString(books));</span><br><span class="line"></span><br><span class="line">        sort(books, (o1, o2) -&gt; (<span class="type">int</span>) (o2.getPrice() - o1.getPrice()));</span><br><span class="line">        System.out.println(Arrays.toString(books));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Book[] books)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; books.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; books.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(books[j].getPrice() &gt; books[j+<span class="number">1</span>].getPrice()) &#123;</span><br><span class="line">                    <span class="type">Book</span> <span class="variable">temp</span> <span class="operator">=</span> books[j];</span><br><span class="line">                    books[j] = books[j+<span class="number">1</span>];</span><br><span class="line">                    books[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Book[] books, Comparator&lt;Book&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; books.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; books.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(comparator.compare(books[j],books[j+<span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">Book</span> <span class="variable">temp</span> <span class="operator">=</span> books[j];</span><br><span class="line">                    books[j] = books[j+<span class="number">1</span>];</span><br><span class="line">                    books[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、System"><a href="#3、System" class="headerlink" title="3、System"></a>3、System</h3><h4 id="1、exit"><a href="#1、exit" class="headerlink" title="1、exit()"></a>1、exit()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Terminates the currently running Java Virtual Machine. The</span></span><br><span class="line"><span class="comment"> * argument serves as a status code; by convention, a nonzero status</span></span><br><span class="line"><span class="comment"> * code indicates abnormal termination.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This method calls the &lt;code&gt;exit&lt;/code&gt; method in class</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;Runtime&lt;/code&gt;. This method never returns normally.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The call &lt;code&gt;System.exit(n)&lt;/code&gt; is effectively equivalent to</span></span><br><span class="line"><span class="comment"> * the call:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * Runtime.getRuntime().exit(n)</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>      status   exit status.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment"> *        if a security manager exists and its &lt;code&gt;checkExit&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> *        method doesn&#x27;t allow exit with the specified status.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        java.lang.Runtime#exit(int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span> &#123;</span><br><span class="line">    Runtime.getRuntime().exit(status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、arraycopy（）"><a href="#2、arraycopy（）" class="headerlink" title="2、arraycopy（）"></a>2、arraycopy（）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">* <span class="meta">@param</span>      src      the source array.</span><br><span class="line"> * <span class="meta">@param</span>      srcPos   starting position in the source array.</span><br><span class="line"> * <span class="meta">@param</span>      dest     the destination array.</span><br><span class="line"> * <span class="meta">@param</span>      destPos  starting position in the destination data.</span><br><span class="line"> * <span class="meta">@param</span>      length   the number of array elements to be copied.</span><br><span class="line"> * <span class="meta">@exception</span>  IndexOutOfBoundsException  <span class="keyword">if</span> copying would cause</span><br><span class="line"> *               access of data outside array bounds.</span><br><span class="line"> * <span class="meta">@exception</span>  ArrayStoreException  <span class="keyword">if</span> an element in the &lt;code&gt;src&lt;/code&gt;</span><br><span class="line"> *               array could not be stored into the &lt;code&gt;dest&lt;/code&gt; array</span><br><span class="line"> *               because of a type mismatch.</span><br><span class="line"> * <span class="meta">@exception</span>  NullPointerException <span class="keyword">if</span> either &lt;code&gt;src&lt;/code&gt; or</span><br><span class="line"> *               &lt;code&gt;dest&lt;/code&gt; is &lt;code&gt;<span class="literal">null</span>&lt;/code&gt;.</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src,  <span class="type">int</span>  srcPos,</span></span><br><span class="line"><span class="params">                                    Object dest, <span class="type">int</span> destPos,</span></span><br><span class="line"><span class="params">                                    <span class="type">int</span> length)</span>;</span><br></pre></td></tr></table></figure><h4 id="3、currentTimeMillis"><a href="#3、currentTimeMillis" class="headerlink" title="3、currentTimeMillis"></a>3、currentTimeMillis</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the current time in milliseconds.  Note that</span></span><br><span class="line"><span class="comment"> * while the unit of time of the return value is a millisecond,</span></span><br><span class="line"><span class="comment"> * the granularity of the value depends on the underlying</span></span><br><span class="line"><span class="comment"> * operating system and may be larger.  For example, many</span></span><br><span class="line"><span class="comment"> * operating systems measure time in units of tens of</span></span><br><span class="line"><span class="comment"> * milliseconds.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; See the description of the class &lt;code&gt;Date&lt;/code&gt; for</span></span><br><span class="line"><span class="comment"> * a discussion of slight discrepancies that may arise between</span></span><br><span class="line"><span class="comment"> * &quot;computer time&quot; and coordinated universal time (UTC).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  the difference, measured in milliseconds, between</span></span><br><span class="line"><span class="comment"> *          the current time and midnight, January 1, 1970 UTC.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.util.Date</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">currentTimeMillis</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="4、gc"><a href="#4、gc" class="headerlink" title="4、gc()"></a>4、gc()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runs the garbage collector.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Calling the &lt;code&gt;gc&lt;/code&gt; method suggests that the Java Virtual</span></span><br><span class="line"><span class="comment"> * Machine expend effort toward recycling unused objects in order to</span></span><br><span class="line"><span class="comment"> * make the memory they currently occupy available for quick reuse.</span></span><br><span class="line"><span class="comment"> * When control returns from the method call, the Java Virtual</span></span><br><span class="line"><span class="comment"> * Machine has made a best effort to reclaim space from all discarded</span></span><br><span class="line"><span class="comment"> * objects.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The call &lt;code&gt;System.gc()&lt;/code&gt; is effectively equivalent to the</span></span><br><span class="line"><span class="comment"> * call:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * Runtime.getRuntime().gc()</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.Runtime#gc()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gc</span><span class="params">()</span> &#123;</span><br><span class="line">    Runtime.getRuntime().gc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、BigInteger和BigDecimal"><a href="#4、BigInteger和BigDecimal" class="headerlink" title="4、BigInteger和BigDecimal"></a>4、BigInteger和BigDecimal</h3><p>BigInteger：表示很大的整数</p><p>BigDecimal：表示精度很高的小数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1111111111111111111111111111111111111111111111111111&quot;</span>);</span><br><span class="line">System.out.println(integer.add(integer));</span><br></pre></td></tr></table></figure><p>算数运算使用BigInteger类里的方法</p><p><strong>底层：对字符串进行处理再转会对应的类型</strong></p><h3 id="5、日期类"><a href="#5、日期类" class="headerlink" title="5、日期类"></a>5、日期类</h3><h4 id="1、第一代日期类"><a href="#1、第一代日期类" class="headerlink" title="1、第一代日期类"></a>1、第一代日期类</h4><p><strong>Date</strong></p><p>默认输出方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public <span class="title class_">String</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// &quot;EEE MMM dd HH:mm:ss zzz yyyy&quot;;</span></span><br><span class="line">    <span class="title class_">BaseCalendar</span>.<span class="property">Date</span> date = <span class="title function_">normalize</span>();</span><br><span class="line">    <span class="title class_">StringBuilder</span> sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">28</span>);</span><br><span class="line">    int index = date.<span class="title function_">getDayOfWeek</span>();</span><br><span class="line">    <span class="keyword">if</span> (index == <span class="title class_">BaseCalendar</span>.<span class="property">SUNDAY</span>) &#123;</span><br><span class="line">        index = <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">convertToAbbr</span>(sb, wtb[index]).<span class="title function_">append</span>(<span class="string">&#x27; &#x27;</span>);                        <span class="comment">// EEE</span></span><br><span class="line">    <span class="title function_">convertToAbbr</span>(sb, wtb[date.<span class="title function_">getMonth</span>() - <span class="number">1</span> + <span class="number">2</span> + <span class="number">7</span>]).<span class="title function_">append</span>(<span class="string">&#x27; &#x27;</span>);  <span class="comment">// MMM</span></span><br><span class="line">    <span class="title class_">CalendarUtils</span>.<span class="title function_">sprintf0d</span>(sb, date.<span class="title function_">getDayOfMonth</span>(), <span class="number">2</span>).<span class="title function_">append</span>(<span class="string">&#x27; &#x27;</span>); <span class="comment">// dd</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">CalendarUtils</span>.<span class="title function_">sprintf0d</span>(sb, date.<span class="title function_">getHours</span>(), <span class="number">2</span>).<span class="title function_">append</span>(<span class="string">&#x27;:&#x27;</span>);   <span class="comment">// HH</span></span><br><span class="line">    <span class="title class_">CalendarUtils</span>.<span class="title function_">sprintf0d</span>(sb, date.<span class="title function_">getMinutes</span>(), <span class="number">2</span>).<span class="title function_">append</span>(<span class="string">&#x27;:&#x27;</span>); <span class="comment">// mm</span></span><br><span class="line">    <span class="title class_">CalendarUtils</span>.<span class="title function_">sprintf0d</span>(sb, date.<span class="title function_">getSeconds</span>(), <span class="number">2</span>).<span class="title function_">append</span>(<span class="string">&#x27; &#x27;</span>); <span class="comment">// ss</span></span><br><span class="line">    <span class="title class_">TimeZone</span> zi = date.<span class="title function_">getZone</span>();</span><br><span class="line">    <span class="keyword">if</span> (zi != <span class="literal">null</span>) &#123;</span><br><span class="line">        sb.<span class="title function_">append</span>(zi.<span class="title function_">getDisplayName</span>(date.<span class="title function_">isDaylightTime</span>(), <span class="title class_">TimeZone</span>.<span class="property">SHORT</span>, <span class="title class_">Locale</span>.<span class="property">US</span>)); <span class="comment">// zzz</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sb.<span class="title function_">append</span>(<span class="string">&quot;GMT&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.<span class="title function_">append</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">append</span>(date.<span class="title function_">getYear</span>());  <span class="comment">// yyyy</span></span><br><span class="line">    <span class="keyword">return</span> sb.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配套使用: <strong>SimpleDateFormat</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">System.out.println(sdf.format(date));</span><br></pre></td></tr></table></figure><h4 id="2、第二代日期类"><a href="#2、第二代日期类" class="headerlink" title="2、第二代日期类"></a>2、第二代日期类</h4><p><strong>Calendar</strong></p><p>没有输出模板，只能自己组合输出</p><h4 id="3、第三代日期类"><a href="#3、第三代日期类" class="headerlink" title="3、第三代日期类"></a>3、第三代日期类</h4><p><img src="https://i.loli.net/2021/04/22/h8y7AQncFXwx6IC.png"></p><p>jkd8 引出 第三代日期类</p><p><strong>LocalDate、LocalTime、LocalDateTime</strong></p><p><img src="https://i.loli.net/2021/04/22/YPMBcdLZ26tsHDk.png"></p><img src="https://i.loli.net/2021/04/22/AWx6P3BNqUQEvlT.jpg" style="zoom: 25%;" /><p>格式类 ： <strong>DateTimeFormatter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> dateTimeFormatter.format(localDateTime);</span><br><span class="line">System.out.println(format);</span><br></pre></td></tr></table></figure><p>时间戳<strong>Instant</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转为Date</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> Date.from(instant);</span><br><span class="line"></span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure><p><strong>练习：</strong></p><p><img src="https://i.loli.net/2021/04/23/3gJy9ptxskUuWdO.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start,j = end; i &lt; j;i++, j--) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chars[i];</span><br><span class="line">        chars[i] = chars[j];</span><br><span class="line">        chars[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/23/YzVCdOB6sGLH4wb.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>(s1);</span><br><span class="line"><span class="type">Animal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>(s1);</span><br><span class="line"></span><br><span class="line">System.out.println(a == b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a.equals(b)); <span class="comment">//false</span></span><br><span class="line">System.out.println(a.getName() == b.getName()); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s4); <span class="comment">//false</span></span><br><span class="line">System.out.println(s1 == s5); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span> + s1;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="string">&quot;hellocyfwlp&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(t1 == t2); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">System.out.println(t1.intern() == t2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h1 id="day08"><a href="#day08" class="headerlink" title="day08"></a>day08</h1><blockquote><p>摘要</p><ul><li>集合</li><li>List接口</li></ul></blockquote><!--more--><p>难点：</p><ol><li>底层机制</li><li>源码实现</li><li>什么情况下使用哪一种集合</li></ol><h2 id="一、集合理解"><a href="#一、集合理解" class="headerlink" title="一、集合理解"></a>一、集合理解</h2><p>数组不足：</p><p>1、长度固定</p><p>2、保存数据为用一类型</p><p>3、增加&#x2F;删除元素比较复杂</p><p><strong>集合</strong></p><p>1、动态的保存任意对象，使用比较方便</p><p>2、提供了一系列方便操作对象的方法</p><p>3、代码简介明了</p><h2 id="二、集合框架体系"><a href="#二、集合框架体系" class="headerlink" title="二、集合框架体系"></a>二、集合框架体系</h2><p><img src="https://i.loli.net/2021/04/23/IoeXqGjwBNtCHDu.png"></p><p><img src="https://i.loli.net/2021/04/23/43mlN65hjCP1bzJ.png"></p><p>1、集合主要是两组（单列集合，双列集合）</p><p>2、Collection有两个主要的子接口，List，Set</p><p>3、Map接口的实现子类 是双列集合，存放k-v</p><h2 id="三、Iterable"><a href="#三、Iterable" class="headerlink" title="三、Iterable"></a>三、Iterable</h2><ul><li>Iterator对象成为迭代器，主要用于遍历Collection集合中的元素</li><li>用于遍历集合，本身并不存放对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line"><span class="comment">// 编译器提示使用增强for循环（底层任然是迭代器）</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当退出while循环后，这时迭代器执行最后一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object next = iterator.next();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要再次遍历，需要重置迭代器</span></span><br><span class="line">iterator = list.iterator();</span><br><span class="line"><span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br></pre></td></tr></table></figure><h2 id="四、List接口"><a href="#四、List接口" class="headerlink" title="四、List接口"></a>四、List接口</h2><ul><li>添加、取出数据顺序一致</li><li>元素可以重复</li><li>有索引，可以根据索引取出对应的元素</li><li>实现List接口的类很多</li></ul><p>方法看源码或者查jdk文档即可</p><p>ArrayList基本等同于Vector,但是ArrayList是线程不安全(执行效率高)的，在多线程环境下，不建议使用ArrayList。</p><p>对比源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this Vector.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this Vector</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、ArrayList-底层源码分析"><a href="#五、ArrayList-底层源码分析" class="headerlink" title="五、ArrayList 底层源码分析"></a>五、ArrayList 底层源码分析</h2><p>补充细节：idea debug显示阉割版数据解决</p><p><img src="https://i.loli.net/2021/04/24/3dI1cQOB56RjmXu.png"></p><p><strong>1、ArrayList只维护了一个Object类型的数组elementData.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment"> * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line"><span class="comment"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"><span class="comment">// transient 这个属性不会被序列化</span></span><br></pre></td></tr></table></figure><p><strong>2、当创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0，第一次添加，则扩容element对象为10，如需要再次扩容，则扩容elementData为1.5倍</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shared empty array instance used for default sized empty instances. We</span></span><br><span class="line"><span class="comment"> * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span></span><br><span class="line"><span class="comment"> * first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default initial capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// 记录集合被修改的次数</span></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Increases the capacity to ensure that it can hold at least the</span></span><br><span class="line"><span class="comment"> * number of elements specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length; </span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">// 1.5倍</span></span><br><span class="line">    <span class="comment">// 解决第一次扩容</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">// 超过最大容量(一般进不到这个方法)</span></span><br><span class="line">    MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span> </span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、使用有参构造器，大小为所传参数，扩容直接扩容elementData1.5倍</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with the specified initial capacity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  initialCapacity  the initial capacity of the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the specified initial capacity</span></span><br><span class="line"><span class="comment"> *         is negative</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>追add()方法和上面一样</p><p>（回头自己追一把）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">11</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.add(<span class="number">100</span>);</span><br><span class="line">list.add(<span class="number">200</span>);</span><br></pre></td></tr></table></figure><h2 id="六、Vector-底层源码分析"><a href="#六、Vector-底层源码分析" class="headerlink" title="六、Vector 底层源码分析"></a>六、Vector 底层源码分析</h2><p>1、底层维护 Object[] elementData </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The array buffer into which the components of the vector are</span></span><br><span class="line"><span class="comment"> * stored. The capacity of the vector is the length of this array buffer,</span></span><br><span class="line"><span class="comment"> * and is at least large enough to contain all the vector&#x27;s elements.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Any array elements following the last element in the Vector are null.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Object[] elementData;</span><br></pre></td></tr></table></figure><p>2、线程安全</p><p><strong>3、无参，默认10，按二倍扩容；有参，直接二倍扩容或指定扩容大小</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty vector so that its internal data array</span></span><br><span class="line"><span class="comment"> * has size &#123;<span class="doctag">@code</span> 10&#125; and its standard capacity increment is</span></span><br><span class="line"><span class="comment"> * zero.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityHelper</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">// 发现可以指定每次扩容的大小，默认两倍</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="comment">// 处理第一次扩容</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">int</span> capacityIncrement)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    <span class="built_in">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、LinkedList-底层源码分析"><a href="#七、LinkedList-底层源码分析" class="headerlink" title="七、LinkedList 底层源码分析"></a>七、LinkedList 底层源码分析</h2><ol><li>LinkedList底层实现了<strong>双向链表</strong>和<strong>双端队列</strong></li><li>线程不安全</li></ol><p>1、底层维护双向队列链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pointer to last node.</span></span><br><span class="line"><span class="comment"> * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment"> *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、模拟双向链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cyf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;cyf&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 串起来</span></span><br><span class="line">        jack.next = tom;</span><br><span class="line">        tom.next = cyf;</span><br><span class="line">        cyf.pre = tom;</span><br><span class="line">        tom.pre = jack;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> jack;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">last</span> <span class="operator">=</span> cyf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">while</span> (last != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(last);</span><br><span class="line">            last = last.pre;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加对象</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">smith</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line"></span><br><span class="line">        tom.next = smith;</span><br><span class="line">        smith.next = cyf;</span><br><span class="line"></span><br><span class="line">        cyf.pre = smith;</span><br><span class="line">        smith.pre = tom;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//顺序遍历</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(head);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object item;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line">    <span class="keyword">public</span> Node pre;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object item)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;item=&quot;</span> + item +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3、增删改查追源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as last element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">// 添加第一个数据</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unlinks non-null first node f.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> E <span class="title function_">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> &#123;</span><br><span class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = <span class="literal">null</span>;</span><br><span class="line">    f.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    first = next;</span><br><span class="line">    <span class="keyword">if</span> (next == <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">//只有一个元素链表</span></span><br><span class="line">        last = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        next.prev = <span class="literal">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/26/6QG31KeBOHIoLYD.png"></p><hr><h1 id="day09"><a href="#day09" class="headerlink" title="day09"></a>day09</h1><blockquote><p>摘要</p><ul><li>Set接口</li><li>Map接口</li><li>终于学完集合，面试高频</li></ul></blockquote><!--more--><h2 id="一、Set接口"><a href="#一、Set接口" class="headerlink" title="一、Set接口"></a>一、Set接口</h2><ol><li>无序，不能通过索引取</li><li>元素不能重复</li></ol><p><strong>add:</strong></p><ul><li>取到元素顺序与添加不一致，但是每次取到的顺序都一样</li></ul><p><strong>其他方法：</strong></p><p><img src="https://i.loli.net/2021/05/10/p7zPFVqNfZSmIvg.png"></p><h2 id="二、HashSet"><a href="#二、HashSet" class="headerlink" title="二、HashSet"></a>二、HashSet</h2><p>1、实际上是HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span></span><br><span class="line"><span class="comment"> * default initial capacity (16) and load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、可以放空值，但是只能有一个空（存放相同元素不会报错）</p><p>3、不能保证存放元素顺序与取出元素顺序一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 经典面试题</span></span><br><span class="line"><span class="comment">// 看源码及add方法到底发生了什么</span></span><br><span class="line"><span class="comment">// 什么机制去判断元素是否重复（填坑，后面补）</span></span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;cyfwlp&quot;</span>)); <span class="comment">//ok</span></span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;cyfwlp&quot;</span>)); <span class="comment">//加入不了</span></span><br><span class="line"></span><br><span class="line">System.out.println(hashSet);</span><br></pre></td></tr></table></figure><h3 id="1、模拟简单的数组-链表结构（散列表）"><a href="#1、模拟简单的数组-链表结构（散列表）" class="headerlink" title="1、模拟简单的数组 + 链表结构（散列表）"></a>1、模拟简单的数组 + 链表结构（散列表）</h3><p>散列表（链表解决散列冲突）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/26 15:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Node[] table = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">16</span>];</span><br><span class="line">        System.out.println(table);</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;john&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        table[<span class="number">2</span>] = node;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jack&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        node.next = jack;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">rose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;rose&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        jack.next = rose;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">lucy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;lucy&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        table[<span class="number">3</span>] = lucy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点，存放数据，可以指向下一个节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    Object item;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object item, Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = item;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、add源码"><a href="#2、add源码" class="headerlink" title="2、add源码"></a>2、add源码</h3><p><strong>结论：</strong></p><ol><li>HashSet的底层是HashMap</li><li>添加元素时先得到hash值 -&gt; 索引值</li><li>找到存储数据table，看这这个索引位置是否已经存放的有元素</li><li>如果有，调用equals比较，相同则不添加，不同则添加到最后</li><li>在java8中，若一条链表的元素个数超过8，并且table的大小等于64就会进行树话（红黑树）</li></ol><p><strong>debug:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="comment">// 占位作用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Computes key.hashCode() and spreads (XORs) higher bits of hash</span></span><br><span class="line"><span class="comment"> * to lower.  Because the table uses power-of-two masking, sets of</span></span><br><span class="line"><span class="comment"> * hashes that vary only in bits above the current mask will</span></span><br><span class="line"><span class="comment"> * always collide. (Among known examples are sets of Float keys</span></span><br><span class="line"><span class="comment"> * holding consecutive whole numbers in small tables.)  So we</span></span><br><span class="line"><span class="comment"> * apply a transform that spreads the impact of higher bits</span></span><br><span class="line"><span class="comment"> * downward. There is a tradeoff between speed, utility, and</span></span><br><span class="line"><span class="comment"> * quality of bit-spreading. Because many common sets of hashes</span></span><br><span class="line"><span class="comment"> * are already reasonably distributed (so don&#x27;t benefit from</span></span><br><span class="line"><span class="comment"> * spreading), and because we use trees to handle large sets of</span></span><br><span class="line"><span class="comment"> * collisions in bins, we just XOR some shifted bits in the</span></span><br><span class="line"><span class="comment"> * cheapest possible way to reduce systematic lossage, as well as</span></span><br><span class="line"><span class="comment"> * to incorporate impact of the highest bits that would otherwise</span></span><br><span class="line"><span class="comment"> * never be used in index calculations because of table bounds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义辅助变量</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// table</span></span><br><span class="line">    <span class="comment">// HashMap属性 transient Node&lt;K,V&gt;[] table; </span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 第一次扩容</span></span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// i = (n - 1) &amp; hash ：根据key计算哈希值在table那个位置</span></span><br><span class="line">    <span class="comment">// 把位置的值赋值给辅助变量p</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">// p为空，创建Node</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 比较是否相同</span></span><br><span class="line">        <span class="comment">// 开发技巧提示：定义变量的时候，在需要的局部变量（辅助工作），再创建</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="comment">// 如果当前索引位置对应链表的第一个元素和准备要添加的元素的hash值相同 且 （准备加入的key和指向Node节点的key是同一个对象 或 equals方法返回true）</span></span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// p是不是一颗红黑树</span></span><br><span class="line">            <span class="comment">// 按照红黑树的方法添加</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 索引位置是链表，进行循环比较</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//找到最后没找到，直接挂到后面</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 判断添加后是否达到八个节点</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        <span class="comment">//达到则对当前链表进行树化（转成红黑树）</span></span><br><span class="line">                        <span class="comment">//这个方法还会进一步判断 (n = tab.length) &lt; MIN_TREEIFY_CAPACITY</span></span><br><span class="line">                        <span class="comment">//数组大小 &lt; 64 通过扩容解决，并不会树化</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 一旦比较到相同就退出</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 空方法</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="comment">//表示成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、扩容和树化机制"><a href="#3、扩容和树化机制" class="headerlink" title="3、扩容和树化机制"></a>3、扩容和树化机制</h3><ul><li>HashSet底层是HashMap,初始化大小为16（DEFAULT_INITIAL_CAPACITY &#x3D; 1 &lt;&lt; 4; &#x2F;&#x2F; aka 16），临界值（threshold）是 16 * 加载因子（DEFAULT_LOAD_FACTOR）是0.75 &#x3D; 12</li><li>如果table数组使用到了临界值12，就会扩容到 16 * 2  &#x3D; 32，新的临界值变为24，以此类推</li><li>java8中，一条链表长度到了8（TREEIFY_THRESHOLD）且table的大小大于64（static final int MIN_TREEIFY_CAPACITY &#x3D; 64;）就会进行树化(红黑树),否则仍然使用扩容机制</li></ul><p><strong>追源码</strong></p><p>第一次添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure><p>临界值增加到两倍：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span> oldTab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">             oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">        <span class="comment">// 临界值 * 2</span></span><br><span class="line">        newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、LinkedHashSet"><a href="#三、LinkedHashSet" class="headerlink" title="三、LinkedHashSet"></a>三、LinkedHashSet</h2><ol><li>LinkedHashSet是HashSet的子类</li><li>LinkedHashSet底层维护一个LinkedHashMap，数组 + 双向链表</li><li>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，同时使用链表维护元素的次序，这使得元素看起来是以插入顺序保存的</li><li>LinkedHashSet 不允许添加重复元素</li></ol><h3 id="1、追源码"><a href="#1、追源码" class="headerlink" title="1、追源码"></a>1、追源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;liu&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="string">&quot;HSP&quot;</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        <span class="comment">// 加入顺序和遍历顺序一致</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、Map接口"><a href="#四、Map接口" class="headerlink" title="四、Map接口"></a>四、Map接口</h2><h3 id="1、Map接口实现类的特点"><a href="#1、Map接口实现类的特点" class="headerlink" title="1、Map接口实现类的特点"></a>1、Map接口实现类的特点</h3><p><strong>1、Map与Collection并列存在，用于保存具有映射关系的数据：Key - Value</strong></p><p><strong>2、Map中的key和vlaue可以是任何引用类型的数据，会封装到HashMap$Node</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.hash = hash;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>        &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>      &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">        <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、Map中的key不能重复，原因同HashSet</strong></p><p>当有相同的key等价于替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">&quot;no1&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;no1&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure><p><strong>4、key,vlaue都可以为空，但key为空只能有一个</strong></p><p><strong>5、常用字符串作key</strong></p><p><strong>6、Map存放数据的key-value示意图，一对k-v是放在一个HashMap$Node中的，因为Node实现了Entry接口，有些书上也说一对k-v就是一个Entry</strong></p><p><img src="https://i.loli.net/2021/05/10/2n1GCE7PawyORFr.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(<span class="string">&quot;no1&quot;</span>,<span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;no2&quot;</span>,<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Object o : set) &#123;</span><br><span class="line">    Map.Entry entry= (Map.Entry)o;</span><br><span class="line">    System.out.println(entry.getKey());</span><br><span class="line">    System.out.println(entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Set</span> <span class="variable">keySet</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">System.out.println(map.keySet().getClass());</span><br><span class="line"><span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line">System.out.println(map.values().getClass());</span><br></pre></td></tr></table></figure><h3 id="2、Map接口的常用方法"><a href="#2、Map接口的常用方法" class="headerlink" title="2、Map接口的常用方法"></a>2、Map接口的常用方法</h3><h4 id="1、put"><a href="#1、put" class="headerlink" title="1、put"></a>1、put</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment"> * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment"> * value is replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、remove"><a href="#2、remove" class="headerlink" title="2、remove"></a>2、remove</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the mapping for the specified key from this map if present.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  key key whose mapping is to be removed from the map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>)) == <span class="literal">null</span> ?</span><br><span class="line">        <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、get"><a href="#3、get" class="headerlink" title="3、get"></a>3、get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the value to which the specified key is mapped,</span></span><br><span class="line"><span class="comment"> * or &#123;<span class="doctag">@code</span> null&#125; if this map contains no mapping for the key.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;More formally, if this map contains a mapping from a key</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> k&#125; to a value &#123;<span class="doctag">@code</span> v&#125; such that &#123;<span class="doctag">@code</span> (key==null ? k==null :</span></span><br><span class="line"><span class="comment"> * key.equals(k))&#125;, then this method returns &#123;<span class="doctag">@code</span> v&#125;; otherwise</span></span><br><span class="line"><span class="comment"> * it returns &#123;<span class="doctag">@code</span> null&#125;.  (There can be at most one such mapping.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A return value of &#123;<span class="doctag">@code</span> null&#125; does not &lt;i&gt;necessarily&lt;/i&gt;</span></span><br><span class="line"><span class="comment"> * indicate that the map contains no mapping for the key; it&#x27;s also</span></span><br><span class="line"><span class="comment"> * possible that the map explicitly maps the key to &#123;<span class="doctag">@code</span> null&#125;.</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@link</span> #containsKey containsKey&#125; operation may be used to</span></span><br><span class="line"><span class="comment"> * distinguish these two cases.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #put(Object, Object)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、size"><a href="#4、size" class="headerlink" title="4、size"></a>4、size</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the number of key-value mappings in this map.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of key-value mappings in this map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、isEmpty"><a href="#5、isEmpty" class="headerlink" title="5、isEmpty"></a>5、isEmpty</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains no key-value mappings.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this map contains no key-value mappings</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">size</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、clear"><a href="#6、clear" class="headerlink" title="6、clear"></a>6、clear</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes all of the mappings from this map.</span></span><br><span class="line"><span class="comment"> * The map will be empty after this call returns.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tab.length; ++i)</span><br><span class="line">            tab[i] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、containsKey"><a href="#7、containsKey" class="headerlink" title="7、containsKey"></a>7、containsKey</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the</span></span><br><span class="line"><span class="comment"> * specified key.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   key   The key whose presence in this map is to be tested</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the specified</span></span><br><span class="line"><span class="comment"> * key.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getNode(hash(key), key) != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、HashMap"><a href="#五、HashMap" class="headerlink" title="五、HashMap"></a>五、HashMap</h2><h3 id="1、扩容机制同HashSet"><a href="#1、扩容机制同HashSet" class="headerlink" title="1、扩容机制同HashSet"></a>1、扩容机制同HashSet</h3><p>尝试下自己总结：</p><ul><li><p>维护table数组存储key - value 节点 HashMap$Node implements Map$Entry  (HashMap$Node [] table)</p></li><li><p>默认大小(DEFAULT_INITIAL_CAPACITY)为16，默认扩容因子(DEFAULT_LOAD_FACTOR)为0.75</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure></li><li><p>添加时根据key - value的<strong>key</strong>计算hash值得到索引位置，若位置没有则直接添加，若有则判断key是否相同，相同则覆盖，不同则判断是否需要树然后进行对应的处理</p></li><li><p>树化条件 <strong>链表长度 &gt; 8 &amp;&amp; table.length &gt; 64</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment"> * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment"> * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment"> * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment"> * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment"> * shrinkage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment"> * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment"> * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment"> * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br></pre></td></tr></table></figure></li><li><p>当容量达到临界值时，容量扩为原来两倍，临界值变为原来两倍（即 16-&gt;32,12-&gt;24）</p></li></ul><h3 id="2、源码解读"><a href="#2、源码解读" class="headerlink" title="2、源码解读"></a>2、源码解读</h3><p>尝试下自己解读：</p><p>1、resize 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment"> * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment"> * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment"> * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment"> * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 原来有数据需要扩容</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 超过最大容量</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 进行扩容</span></span><br><span class="line">        <span class="comment">// newCap = oldCap &lt;&lt; 1 (newCap = 2 * oldCap)</span></span><br><span class="line">        <span class="comment">// newThr = oldThr &lt;&lt; 1 (newThr = 2 * oldThr)</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始容量已经设置为阈值 ??不是很明白何时调用这个方法，先放一放</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">// 使用默认</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY; <span class="comment">// 16</span></span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); <span class="comment">//  12</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、putVal方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// 数组为空或length为0，初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 索引位置没有元素，直接挂</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 索引位置有元素</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// hash值相同，key值相同</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这条链表已经为红黑树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 逐个比较链表元素</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 没有一个相同，就挂到最后</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 加入后判断是否树化，是否到达8个</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        <span class="comment">// 这个方法会再判断容量是否到64，若不到不会进行树化，而是扩容解决</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 发现相同</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 已经存在key</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                <span class="comment">// 替换</span></span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// size大于临界值，进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    </span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、扩容、树化"><a href="#3、扩容、树化" class="headerlink" title="3、扩容、树化"></a>3、扩容、树化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> <span class="title class_">A</span>(i),<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有A对象的hash值都为100</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>debug这段代码</p><p>链表长度为8时</p><p><img src="https://i.loli.net/2021/05/11/9KHDVXBvqNQY2J4.png" alt="image-20210511165337487"></p><p>再添加一个，扩容而非树化：</p><p><img src="https://i.loli.net/2021/05/11/CgHdcJYm36QplZX.png"></p><p>再添加，扩容而非树化</p><p><img src="https://i.loli.net/2021/05/11/64qGbzhRSMT9ypC.png"></p><p>再添加，达到树化条件</p><p><img src="https://i.loli.net/2021/05/11/XAgwrvEutT1cOqR.png"></p><h2 id="六、HashTable"><a href="#六、HashTable" class="headerlink" title="六、HashTable"></a>六、HashTable</h2><p>不同：</p><ul><li>键和值都不能为null</li><li>线程安全</li><li>默认大小为11，加载因子0.75</li><li>按照<strong>自己的扩容机制</strong>扩容    （*2 + 1）</li></ul><h3 id="1、扩容"><a href="#1、扩容" class="headerlink" title="1、扩容"></a>1、扩容</h3><p>默认，调用无参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a new, empty hashtable with a default initial capacity (11)</span></span><br><span class="line"><span class="comment"> * and load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Increases the capacity of and internally reorganizes this</span></span><br><span class="line"><span class="comment"> * hashtable, in order to accommodate and access its entries more</span></span><br><span class="line"><span class="comment"> * efficiently.  This method is called automatically when the</span></span><br><span class="line"><span class="comment"> * number of keys in the hashtable exceeds this hashtable&#x27;s capacity</span></span><br><span class="line"><span class="comment"> * and load factor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> table.length;</span><br><span class="line">    Entry&lt;?,?&gt;[] oldMap = table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)</span><br><span class="line">            <span class="comment">// Keep running with MAX_ARRAY_SIZE buckets</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        newCapacity = MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    Entry&lt;?,?&gt;[] newMap = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[newCapacity];</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    threshold = (<span class="type">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">    table = newMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="literal">null</span> ; ) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = old;</span><br><span class="line">            old = old.next;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;</span><br><span class="line">            e.next = (Entry&lt;K,V&gt;)newMap[index];</span><br><span class="line">            newMap[index] = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、Properties"><a href="#七、Properties" class="headerlink" title="七、Properties"></a>七、Properties</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties</span> <span class="keyword">extends</span> <span class="title class_">Hashtable</span>&lt;Object,Object&gt; &#123;</span><br></pre></td></tr></table></figure><p>多用于读取配置文件 .propreties</p><h2 id="八、集合选型"><a href="#八、集合选型" class="headerlink" title="八、集合选型"></a>八、集合选型</h2><p><img src="https://i.loli.net/2021/05/11/w26TsfOME4uKhp7.png"></p><h2 id="九、TreeSet、TreeMap"><a href="#九、TreeSet、TreeMap" class="headerlink" title="九、TreeSet、TreeMap"></a>九、TreeSet、TreeMap</h2><p>TreeSet底层就是TreeMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;E,Object&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以排序的set</p><p>若使用无参构造器仍无序</p><p>有参构造器，传入比较器进行比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a new, empty tree set, sorted according to the specified</span></span><br><span class="line"><span class="comment"> * comparator.  All elements inserted into the set must be &lt;i&gt;mutually</span></span><br><span class="line"><span class="comment"> * comparable&lt;/i&gt; by the specified comparator: &#123;<span class="doctag">@code</span> comparator.compare(e1,</span></span><br><span class="line"><span class="comment"> * e2)&#125; must not throw a &#123;<span class="doctag">@code</span> ClassCastException&#125; for any elements</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> e1&#125; and &#123;<span class="doctag">@code</span> e2&#125; in the set.  If the user attempts to add</span></span><br><span class="line"><span class="comment"> * an element to the set that violates this constraint, the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> add&#125; call will throw a &#123;<span class="doctag">@code</span> ClassCastException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> comparator the comparator that will be used to order this set.</span></span><br><span class="line"><span class="comment"> *        If &#123;<span class="doctag">@code</span> null&#125;, the &#123;<span class="doctag">@linkplain</span> Comparable natural</span></span><br><span class="line"><span class="comment"> *        ordering&#125; of the elements will be used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(comparator));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用匿名内部类</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ((String)o1).compareTo((String)o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">set.add(<span class="string">&quot;gfds&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;zzz&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;fff&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure><p>追下实现排序的源码</p><p>底层维护root根节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Node in the Tree.  Doubles as a means to pass key-value pairs back to</span></span><br><span class="line"><span class="comment"> * user (see Map.Entry).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; left;</span><br><span class="line">    Entry&lt;K,V&gt; right;</span><br><span class="line">    Entry&lt;K,V&gt; parent;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">color</span> <span class="operator">=</span> BLACK;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment"> * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment"> * value is replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &#123;<span class="doctag">@code</span> key&#125;, or</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> null&#125; if there was no mapping for &#123;<span class="doctag">@code</span> key&#125;.</span></span><br><span class="line"><span class="comment"> *         (A &#123;<span class="doctag">@code</span> null&#125; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &#123;<span class="doctag">@code</span> null&#125; with &#123;<span class="doctag">@code</span> key&#125;.)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassCastException if the specified key cannot be compared</span></span><br><span class="line"><span class="comment"> *         with the keys currently in the map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment"> *         and this map uses natural ordering, or its comparator</span></span><br><span class="line"><span class="comment"> *         does not permit null keys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; t = root;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断key是否为空</span></span><br><span class="line">        compare(key, key); <span class="comment">// type (and possibly null) check</span></span><br><span class="line"></span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, <span class="literal">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cmp;</span><br><span class="line">    Entry&lt;K,V&gt; parent;</span><br><span class="line">    <span class="comment">// split comparator and comparable paths</span></span><br><span class="line">    Comparator&lt;? <span class="built_in">super</span> K&gt; cpr = comparator;</span><br><span class="line">    <span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = cpr.compare(key, t.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                t = t.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                t = t.right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = k.compareTo(t.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                t = t.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                t = t.right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, parent);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">        parent.left = e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        parent.right = e;</span><br><span class="line">    fixAfterInsertion(e);</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、Collections工具类"><a href="#十、Collections工具类" class="headerlink" title="十、Collections工具类"></a>十、Collections工具类</h2><p>常用方法：</p><h3 id="1、reverse"><a href="#1、reverse" class="headerlink" title="1、reverse"></a>1、reverse</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reverses the order of the elements in the specified list.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method runs in linear time.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  list the list whose elements are to be reversed.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if the specified list or</span></span><br><span class="line"><span class="comment"> *         its list-iterator does not support the &lt;tt&gt;set&lt;/tt&gt; operation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(List&lt;?&gt; list)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">    <span class="keyword">if</span> (size &lt; REVERSE_THRESHOLD || list <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>, mid=size&gt;&gt;<span class="number">1</span>, j=size-<span class="number">1</span>; i&lt;mid; i++, j--)</span><br><span class="line">            swap(list, i, j);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// instead of using a raw type here, it&#x27;s possible to capture</span></span><br><span class="line">        <span class="comment">// the wildcard but it will require a call to a supplementary</span></span><br><span class="line">        <span class="comment">// private method</span></span><br><span class="line">        <span class="type">ListIterator</span> <span class="variable">fwd</span> <span class="operator">=</span> list.listIterator();</span><br><span class="line">        <span class="type">ListIterator</span> <span class="variable">rev</span> <span class="operator">=</span> list.listIterator(size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>, mid=list.size()&gt;&gt;<span class="number">1</span>; i&lt;mid; i++) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">tmp</span> <span class="operator">=</span> fwd.next();</span><br><span class="line">            fwd.set(rev.previous());</span><br><span class="line">            rev.set(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、shuffle"><a href="#2、shuffle" class="headerlink" title="2、shuffle"></a>2、shuffle</h3><p>洗牌算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Randomly permute the specified list using the specified source of</span></span><br><span class="line"><span class="comment"> * randomness.  All permutations occur with equal likelihood</span></span><br><span class="line"><span class="comment"> * assuming that the source of randomness is fair.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This implementation traverses the list backwards, from the last element</span></span><br><span class="line"><span class="comment"> * up to the second, repeatedly swapping a randomly selected element into</span></span><br><span class="line"><span class="comment"> * the &quot;current position&quot;.  Elements are randomly selected from the</span></span><br><span class="line"><span class="comment"> * portion of the list that runs from the first element to the current</span></span><br><span class="line"><span class="comment"> * position, inclusive.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method runs in linear time.  If the specified list does not</span></span><br><span class="line"><span class="comment"> * implement the &#123;<span class="doctag">@link</span> RandomAccess&#125; interface and is large, this</span></span><br><span class="line"><span class="comment"> * implementation dumps the specified list into an array before shuffling</span></span><br><span class="line"><span class="comment"> * it, and dumps the shuffled array back into the list.  This avoids the</span></span><br><span class="line"><span class="comment"> * quadratic behavior that would result from shuffling a &quot;sequential</span></span><br><span class="line"><span class="comment"> * access&quot; list in place.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  list the list to be shuffled.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  rnd the source of randomness to use to shuffle the list.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if the specified list or its</span></span><br><span class="line"><span class="comment"> *         list-iterator does not support the &lt;tt&gt;set&lt;/tt&gt; operation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shuffle</span><span class="params">(List&lt;?&gt; list, Random rnd)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">    <span class="keyword">if</span> (size &lt; SHUFFLE_THRESHOLD || list <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=size; i&gt;<span class="number">1</span>; i--)</span><br><span class="line">            swap(list, i-<span class="number">1</span>, rnd.nextInt(i));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Object arr[] = list.toArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Shuffle array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=size; i&gt;<span class="number">1</span>; i--)</span><br><span class="line">            swap(arr, i-<span class="number">1</span>, rnd.nextInt(i));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dump array back into list</span></span><br><span class="line">        <span class="comment">// instead of using a raw type here, it&#x27;s possible to capture</span></span><br><span class="line">        <span class="comment">// the wildcard but it will require a call to a supplementary</span></span><br><span class="line">        <span class="comment">// private method</span></span><br><span class="line">        <span class="type">ListIterator</span> <span class="variable">it</span> <span class="operator">=</span> list.listIterator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">            it.next();</span><br><span class="line">            it.set(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、sort"><a href="#3、sort" class="headerlink" title="3、sort"></a>3、sort</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sorts the specified list according to the order induced by the</span></span><br><span class="line"><span class="comment"> * specified comparator.  All elements in the list must be &lt;i&gt;mutually</span></span><br><span class="line"><span class="comment"> * comparable&lt;/i&gt; using the specified comparator (that is,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> c.compare(e1, e2)&#125; must not throw a &#123;<span class="doctag">@code</span> ClassCastException&#125;</span></span><br><span class="line"><span class="comment"> * for any elements &#123;<span class="doctag">@code</span> e1&#125; and &#123;<span class="doctag">@code</span> e2&#125; in the list).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will</span></span><br><span class="line"><span class="comment"> * not be reordered as a result of the sort.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The specified list must be modifiable, but need not be resizable.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@implNote</span></span></span><br><span class="line"><span class="comment"> * This implementation defers to the &#123;<span class="doctag">@link</span> List#sort(Comparator)&#125;</span></span><br><span class="line"><span class="comment"> * method using the specified list and comparator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &lt;T&gt; the class of the objects in the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  list the list to be sorted.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  c the comparator to determine the order of the list.  A</span></span><br><span class="line"><span class="comment"> *        &#123;<span class="doctag">@code</span> null&#125; value indicates that the elements&#x27; &lt;i&gt;natural</span></span><br><span class="line"><span class="comment"> *        ordering&lt;/i&gt; should be used.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassCastException if the list contains elements that are not</span></span><br><span class="line"><span class="comment"> *         &lt;i&gt;mutually comparable&lt;/i&gt; using the specified comparator.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if the specified list&#x27;s</span></span><br><span class="line"><span class="comment"> *         list-iterator does not support the &#123;<span class="doctag">@code</span> set&#125; operation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException (optional) if the comparator is</span></span><br><span class="line"><span class="comment"> *         found to violate the &#123;<span class="doctag">@link</span> Comparator&#125; contract</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> List#sort(Comparator)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(List&lt;T&gt; list, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line">    list.sort(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、swap"><a href="#4、swap" class="headerlink" title="4、swap"></a>4、swap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swaps the elements at the specified positions in the specified list.</span></span><br><span class="line"><span class="comment"> * (If the specified positions are equal, invoking this method leaves</span></span><br><span class="line"><span class="comment"> * the list unchanged.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list The list in which to swap elements.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i the index of one element to be swapped.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j the index of the other element to be swapped.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException if either &lt;tt&gt;i&lt;/tt&gt; or &lt;tt&gt;j&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> *         is out of range (i &amp;lt; 0 || i &amp;gt;= list.size()</span></span><br><span class="line"><span class="comment"> *         || j &amp;lt; 0 || j &amp;gt;= list.size()).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(List&lt;?&gt; list, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="comment">// instead of using a raw type here, it&#x27;s possible to capture</span></span><br><span class="line">    <span class="comment">// the wildcard but it will require a call to a supplementary</span></span><br><span class="line">    <span class="comment">// private method</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> list;</span><br><span class="line">    l.set(i, l.set(j, l.get(i)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、max"><a href="#5、max" class="headerlink" title="5、max"></a>5、max</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the maximum element of the given collection, according to the</span></span><br><span class="line"><span class="comment"> * order induced by the specified comparator.  All elements in the</span></span><br><span class="line"><span class="comment"> * collection must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified</span></span><br><span class="line"><span class="comment"> * comparator (that is, &lt;tt&gt;comp.compare(e1, e2)&lt;/tt&gt; must not throw a</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;e2&lt;/tt&gt; in the collection).&lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method iterates over the entire collection, hence it requires</span></span><br><span class="line"><span class="comment"> * time proportional to the size of the collection.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &lt;T&gt; the class of the objects in the collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  coll the collection whose maximum element is to be determined.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  comp the comparator with which to determine the maximum element.</span></span><br><span class="line"><span class="comment"> *         A &lt;tt&gt;null&lt;/tt&gt; value indicates that the elements&#x27; &lt;i&gt;natural</span></span><br><span class="line"><span class="comment"> *        ordering&lt;/i&gt; should be used.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the maximum element of the given collection, according</span></span><br><span class="line"><span class="comment"> *         to the specified comparator.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassCastException if the collection contains elements that are</span></span><br><span class="line"><span class="comment"> *         not &lt;i&gt;mutually comparable&lt;/i&gt; using the specified comparator.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if the collection is empty.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Comparable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">max</span><span class="params">(Collection&lt;? extends T&gt; coll, Comparator&lt;? <span class="built_in">super</span> T&gt; comp)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comp==<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> (T)max((Collection) coll);</span><br><span class="line"></span><br><span class="line">    Iterator&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>&gt; i = coll.iterator();</span><br><span class="line">    <span class="type">T</span> <span class="variable">candidate</span> <span class="operator">=</span> i.next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">next</span> <span class="operator">=</span> i.next();</span><br><span class="line">        <span class="keyword">if</span> (comp.compare(next, candidate) &gt; <span class="number">0</span>)</span><br><span class="line">            candidate = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、frequency"><a href="#6、frequency" class="headerlink" title="6、frequency"></a>6、frequency</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the number of elements in the specified collection equal to the</span></span><br><span class="line"><span class="comment"> * specified object.  More formally, returns the number of elements</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;e&lt;/tt&gt; in the collection such that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;(o == null ? e == null : o.equals(e))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c the collection in which to determine the frequency</span></span><br><span class="line"><span class="comment"> *     of &lt;tt&gt;o&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o the object whose frequency is to be determined</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of elements in &#123;<span class="doctag">@code</span> c&#125; equal to &#123;<span class="doctag">@code</span> o&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if &lt;tt&gt;c&lt;/tt&gt; is null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">frequency</span><span class="params">(Collection&lt;?&gt; c, Object o)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object e : c)</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">                result++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object e : c)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(e))</span><br><span class="line">                result++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、copy"><a href="#7、copy" class="headerlink" title="7、copy"></a>7、copy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copies all of the elements from one list into another.  After the</span></span><br><span class="line"><span class="comment"> * operation, the index of each copied element in the destination list</span></span><br><span class="line"><span class="comment"> * will be identical to its index in the source list.  The destination</span></span><br><span class="line"><span class="comment"> * list must be at least as long as the source list.  If it is longer, the</span></span><br><span class="line"><span class="comment"> * remaining elements in the destination list are unaffected. &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method runs in linear time.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &lt;T&gt; the class of the objects in the lists</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  dest The destination list.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  src The source list.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException if the destination list is too small</span></span><br><span class="line"><span class="comment"> *         to contain the entire source List.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if the destination list&#x27;s</span></span><br><span class="line"><span class="comment"> *         list-iterator does not support the &lt;tt&gt;set&lt;/tt&gt; operation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(List&lt;? <span class="built_in">super</span> T&gt; dest, List&lt;? extends T&gt; src)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">srcSize</span> <span class="operator">=</span> src.size();</span><br><span class="line">    <span class="keyword">if</span> (srcSize &gt; dest.size())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Source does not fit in dest&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (srcSize &lt; COPY_THRESHOLD ||</span><br><span class="line">        (src <span class="keyword">instanceof</span> RandomAccess &amp;&amp; dest <span class="keyword">instanceof</span> RandomAccess)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;srcSize; i++)</span><br><span class="line">            dest.set(i, src.get(i));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ListIterator&lt;? <span class="built_in">super</span> T&gt; di=dest.listIterator();</span><br><span class="line">        ListIterator&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>&gt; si=src.listIterator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;srcSize; i++) &#123;</span><br><span class="line">            di.next();</span><br><span class="line">            di.set(si.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、replaceAll"><a href="#8、replaceAll" class="headerlink" title="8、replaceAll"></a>8、replaceAll</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces all occurrences of one specified value in a list with another.</span></span><br><span class="line"><span class="comment"> * More formally, replaces with &lt;tt&gt;newVal&lt;/tt&gt; each element &lt;tt&gt;e&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * in &lt;tt&gt;list&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;(oldVal==null ? e==null : oldVal.equals(e))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> * (This method has no effect on the size of the list.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &lt;T&gt; the class of the objects in the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list the list in which replacement is to occur.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> oldVal the old value to be replaced.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newVal the new value with which &lt;tt&gt;oldVal&lt;/tt&gt; is to be</span></span><br><span class="line"><span class="comment"> *        replaced.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if &lt;tt&gt;list&lt;/tt&gt; contained one or more elements</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;e&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;(oldVal==null ?  e==null : oldVal.equals(e))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if the specified list or</span></span><br><span class="line"><span class="comment"> *         its list-iterator does not support the &lt;tt&gt;set&lt;/tt&gt; operation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  1.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">replaceAll</span><span class="params">(List&lt;T&gt; list, T oldVal, T newVal)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">    <span class="keyword">if</span> (size &lt; REPLACEALL_THRESHOLD || list <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldVal==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (list.get(i)==<span class="literal">null</span>) &#123;</span><br><span class="line">                    list.set(i, newVal);</span><br><span class="line">                    result = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (oldVal.equals(list.get(i))) &#123;</span><br><span class="line">                    list.set(i, newVal);</span><br><span class="line">                    result = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ListIterator&lt;T&gt; itr=list.listIterator();</span><br><span class="line">        <span class="keyword">if</span> (oldVal==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (itr.next()==<span class="literal">null</span>) &#123;</span><br><span class="line">                    itr.set(newVal);</span><br><span class="line">                    result = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (oldVal.equals(itr.next())) &#123;</span><br><span class="line">                    itr.set(newVal);</span><br><span class="line">                    result = <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>面试：试分析 TreeSet 和 HashSet 是如何实现去重的</strong></p><p>HashSet : hashCode() + equals() ，根据传入的key由hash()方法得到table表的索引位置，若索引位置为空则直接添加。若索引位置已有元素，则遍历索引位置所在的链根据equals()比较是否相同，若不同则添加，相同则放弃添加</p><p>TreeSet:如果传入了Comparator比较对象，就调用compareTo方法比较，相同则不添加；若没有传入，则根据key实现Comparable接口的compareTo方法比较</p><p>代码分析：分析set中元素个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1002</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        p1.setName(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        set.remove(p1);</span><br><span class="line">        </span><br><span class="line">        System.out.println(set);</span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;CC&quot;</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line">        <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line">        <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Person)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="keyword">return</span> getId() == person.getId() &amp;&amp;</span><br><span class="line">                Objects.equals(getName(), person.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(getId(), getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="day10"><a href="#day10" class="headerlink" title="day10"></a>day10</h1><blockquote><p>摘要</p><ul><li>泛型</li></ul></blockquote><!--more--><h2 id="一、引出泛型"><a href="#一、引出泛型" class="headerlink" title="一、引出泛型"></a>一、引出泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">generic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传统方法</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺旺&quot;</span>,<span class="number">2</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.不能约束数据类型，不安全</span></span><br><span class="line">        <span class="comment">//2.需要进行数据类型转换，数据量大时影响效率</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            <span class="comment">//向下转型</span></span><br><span class="line">            <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) o;</span><br><span class="line">            System.out.println(dog.getName());</span><br><span class="line">            System.out.println(dog.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Dog&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>,<span class="number">1</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺旺&quot;</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Dog dog : list) &#123;</span><br><span class="line">    System.out.println(dog.getAge());</span><br><span class="line">    System.out.println(dog.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处：</p><ol><li>编译时检查元素类型</li><li>不在进行类型抓换，提升效率</li></ol><h2 id="二、泛型"><a href="#二、泛型" class="headerlink" title="二、泛型"></a>二、泛型</h2><p>泛 ：广泛；型：类型</p><ol><li>泛型又称为参数化类型，解决数据类型的安全性问题</li><li>在类声明或实例化时只需要指定具体的类型即可</li><li>java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生ClassCastException异常</li><li>泛型的作用：可以在类声明时通过一个标识<strong>表示类中某个属性的类型</strong>；或者<strong>某个方法返回值的类型</strong>，或是<strong>参数类型</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    Person&lt;String&gt; person = <span class="keyword">new</span> <span class="title class_">Person</span>&lt;&gt;(<span class="string">&quot;java编程思想&quot;</span>);</span><br><span class="line">    Person&lt;Integer&gt; person2 = <span class="keyword">new</span> <span class="title class_">Person</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">// 数据类型在定义Person对象的时候指定，在编译期间就确定E是什么类型</span></span><br><span class="line">    E s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(E s)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细节：</p><p><strong>1、T,E只能是引用数据类型</strong></p><p><strong>2、在给泛型指定了类型，可以传入该类型或该类的子类型</strong></p><p><strong>3、推荐使用这种写法 ArrayList<Dog> list &#x3D; new ArrayList&lt;&gt;();</strong></p><p><strong>4、默认使用Object类</strong></p><h2 id="三、自定义泛型"><a href="#三、自定义泛型" class="headerlink" title="三、自定义泛型"></a>三、自定义泛型</h2><h3 id="1、自定义泛型类"><a href="#1、自定义泛型类" class="headerlink" title="1、自定义泛型类"></a>1、自定义泛型类</h3><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class 类名&lt;T,R...&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意细节：</p><p>1、普通成员可以使用泛型（属性、方法）</p><p>2、使用泛型的数组，不能初始化（不知道什么类型，不知道分配多少空间）</p><p>3、静态方法中不能使用类的泛型（静态方法和对象无关，类加载时，对象还没有创建）</p><p>4、泛型类的类型，实在创建对象时确定的</p><p>5、如果在创建对象时没有指定类型，默认为Object类</p><h3 id="2、自定义泛型接口"><a href="#2、自定义泛型接口" class="headerlink" title="2、自定义泛型接口"></a>2、自定义泛型接口</h3><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface 类名&lt;T,R...&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意细节：</p><p>1、接口中，静态资源不能使用泛型</p><p>2、泛型接口的类型，在<strong>继承接口</strong>或者<strong>实现接口</strong>时确定的</p><p>3、默认Object</p><h3 id="3、自定义泛型方法"><a href="#3、自定义泛型方法" class="headerlink" title="3、自定义泛型方法"></a>3、自定义泛型方法</h3><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;T,R..&gt; 返回类型 方法名 (参数列表) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意细节：</p><p>1、泛型方法可以定义在普通类，也可以定义在泛型类</p><p>2、泛型方法被调用的时候，类型必须确定</p><h3 id="4、泛型的继承和通配符"><a href="#4、泛型的继承和通配符" class="headerlink" title="4、泛型的继承和通配符"></a>4、泛型的继承和通配符</h3><p>1、泛型不具备继承性</p><p>2、&lt;?&gt;:支持任意泛型类型</p><p>3、&lt;? extends A&gt; 支持A类以及A类的子类，规定了泛型的上限</p><p>4、&lt;? super A&gt; 支持A类以及A类的父类，不限于直接父类，规定了泛型的下线</p><h2 id="四、Junit"><a href="#四、Junit" class="headerlink" title="四、Junit"></a>四、Junit</h2><p>单元测试</p><hr><h1 id="day11"><a href="#day11" class="headerlink" title="day11"></a>day11</h1><blockquote><p>线程基础</p></blockquote><!--more--><h2 id="一、线程（基础）"><a href="#一、线程（基础）" class="headerlink" title="一、线程（基础）"></a>一、线程（基础）</h2><h3 id="1、相关概念"><a href="#1、相关概念" class="headerlink" title="1、相关概念"></a>1、相关概念</h3><p><strong>程序</strong>：指令即集合；</p><p><strong>指令</strong>：cpu能识别并执行的最基本命令</p><p><strong>进程</strong>：<strong>运行中的程序</strong>；<strong>程序的一次执行过程;</strong></p><p><strong>线程</strong>：线程是由进程创建的，是进程的一个实体</p><p>一个进程可以拥有多个线程</p><p><strong>单线程</strong>：同一个时刻，只允许执行一个线程</p><p><strong>多线程</strong>：用一个时刻，可以执行多个线程</p><p><strong>并发</strong>：宏观上同时，微观上交替执行（单核cpu多任务）</p><p><strong>并行</strong>：多个任务同时执行（多核cpu）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cpu核数</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="type">int</span> <span class="variable">cpuNumber</span> <span class="operator">=</span> runtime.availableProcessors();</span><br><span class="line">System.out.println(cpuNumber);</span><br></pre></td></tr></table></figure><h3 id="2、线程的基本使用"><a href="#2、线程的基本使用" class="headerlink" title="2、线程的基本使用"></a>2、线程的基本使用</h3><ol><li>继承Thread类，重写run方法</li><li>实现Runable接口，</li></ol><h4 id="1、继承Thread类"><a href="#1、继承Thread类" class="headerlink" title="1、继承Thread类"></a>1、继承Thread类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="comment">// 为什么是start方法然后执行run方法</span></span><br><span class="line">        cat.start();<span class="comment">// 启动线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 说明：当main线程启动了一个子线程 Thread-0 主线程不会阻塞，会继续执行</span></span><br><span class="line">        <span class="comment">// 这时，主线程和子线程交替执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程继续执行&quot;</span> + Thread.currentThread().getName()); <span class="comment">// main</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程 i= &quot;</span> + i);</span><br><span class="line">            <span class="comment">//主线程休眠</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当一个类继承了Thread类，这个类就可以当做线程类使用</span></span><br><span class="line"><span class="comment">// 重写run方法，写上自己的业务代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;喵喵，我是小猫咪&quot;</span> + times ++ + <span class="string">&quot;线程名&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (times == <span class="number">8</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//退出while循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 为什么是start方法然后执行run方法<br>cat.start();&#x2F;&#x2F; 启动线程</p><p>cat.run()，并没有启动一个线程，而是主线程调用run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class="line"><span class="comment">     * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">     * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">     * so that it can be added to the group&#x27;s list of threads</span></span><br><span class="line"><span class="comment">     * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class="line">    group.add(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        start0(); <span class="comment">//关键这个方法</span></span><br><span class="line">        started = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">              it will be passed up the call stack */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// native方法，是由jvm调用，底层是c/c++实现</span></span><br><span class="line"><span class="comment">// 真正实现多线程的效果，是start0()</span></span><br><span class="line"><span class="comment">// jvm调用start0() 线程变为就绪态，不一定立即执行，由cpu进行调度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="2、实现Runnable接口"><a href="#2、实现Runnable接口" class="headerlink" title="2、实现Runnable接口"></a>2、实现Runnable接口</h4><ul><li>java是单继承，某种情况下一个类可能已经继承了某个父类，java设计者提供Runnable接口创建进程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.com.thread_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/24 13:29</span></span><br><span class="line"><span class="comment"> * 实现Runnable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">        <span class="comment">// 设计模式 -- 静态代理 == 模拟实现机制</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;wangwang&quot;</span> + count++ +Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟Thread静态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="keyword">new</span> <span class="title class_">Tiger</span>());</span><br><span class="line">        proxy.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;aowu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟极简的Thread</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        start0(); <span class="comment">//真正实现多线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span> &#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、基本使用"><a href="#3、基本使用" class="headerlink" title="3、基本使用"></a>3、基本使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T1</span>();</span><br><span class="line">        <span class="type">T2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T2</span>();</span><br><span class="line">        Thread thread1= <span class="keyword">new</span> <span class="title class_">Thread</span>(t1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t2);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span> + count++);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hi&quot;</span> + count++);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、继承Thread-与-实现Runnable的区别"><a href="#4、继承Thread-与-实现Runnable的区别" class="headerlink" title="4、继承Thread 与 实现Runnable的区别"></a>4、继承Thread 与 实现Runnable的区别</h4><ol><li>从java的设计来看，通过继承Thread或者实现Runnable接口创建线程本质上没有区别</li><li>实现Runnable接口方式更加适合多个线程共享一个资源的情况，并且避免了单继承的限制</li></ol><p>建议使用Runnable接口 </p><h4 id="5、售票系统模拟"><a href="#5、售票系统模拟" class="headerlink" title="5、售票系统模拟"></a>5、售票系统模拟</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SellTicket01</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket01</span>();</span><br><span class="line">        <span class="type">SellTicket01</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket01</span>();</span><br><span class="line">        <span class="type">SellTicket01</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket01</span>();</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Thread</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicket01</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 三个进程都同时运行到这里</span></span><br><span class="line">            <span class="keyword">if</span> (num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;售出一张票，剩下&quot;</span> + (--num) );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">1</span>售出一张票，剩下<span class="number">1</span></span><br><span class="line">Thread-<span class="number">2</span>售出一张票，剩下<span class="number">2</span></span><br><span class="line">Thread-<span class="number">0</span>售出一张票，剩下<span class="number">0</span></span><br><span class="line">Thread-<span class="number">1</span>售出一张票，剩下-<span class="number">1</span></span><br><span class="line">售票结束</span><br><span class="line">Thread-<span class="number">2</span>售出一张票，剩下-<span class="number">1</span></span><br><span class="line">售票结束</span><br><span class="line">售票结束</span><br></pre></td></tr></table></figure><p>使用继承Thread仍存在这个问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Thread-2售出一张票，剩下1</span><br><span class="line">Thread-0售出一张票，剩下-1</span><br><span class="line">Thread-1售出一张票，剩下0</span><br><span class="line">售票结束</span><br><span class="line">售票结束</span><br><span class="line">售票结束</span><br></pre></td></tr></table></figure><p><strong>如何解决这个问题？</strong></p><h4 id="6、线程终止"><a href="#6、线程终止" class="headerlink" title="6、线程终止"></a>6、线程终止</h4><ol><li>线程完成任务自动退出</li><li>使用变量控制run方法退出停止线程，即通知方式</li></ol><h3 id="3、常用方法（一）"><a href="#3、常用方法（一）" class="headerlink" title="3、常用方法（一）"></a>3、常用方法（一）</h3><h4 id="1、setName"><a href="#1、setName" class="headerlink" title="1、setName"></a>1、setName</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Changes the name of this thread to be equal to the argument</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;name&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * First the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread is called</span></span><br><span class="line"><span class="comment"> * with no arguments. This may result in throwing a</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;SecurityException&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>      name   the new name for this thread.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  SecurityException  if the current thread cannot modify this</span></span><br><span class="line"><span class="comment"> *               thread.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #getName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #checkAccess()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;name cannot be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>) &#123;</span><br><span class="line">        setNativeName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、getName"><a href="#2、getName" class="headerlink" title="2、getName"></a>2、getName</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns this thread&#x27;s name.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  this thread&#x27;s name.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     #setName(String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、start"><a href="#3、start" class="headerlink" title="3、start"></a>3、start</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Causes this thread to begin execution; the Java Virtual Machine</span></span><br><span class="line"><span class="comment"> * calls the &lt;code&gt;run&lt;/code&gt; method of this thread.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The result is that two threads are running concurrently: the</span></span><br><span class="line"><span class="comment"> * current thread (which returns from the call to the</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;start&lt;/code&gt; method) and the other thread (which executes its</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;run&lt;/code&gt; method).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * It is never legal to start a thread more than once.</span></span><br><span class="line"><span class="comment"> * In particular, a thread may not be restarted once it has completed</span></span><br><span class="line"><span class="comment"> * execution.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  IllegalThreadStateException  if the thread was already</span></span><br><span class="line"><span class="comment"> *               started.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #run()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #stop()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class="line"><span class="comment">     * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">     * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">     * so that it can be added to the group&#x27;s list of threads</span></span><br><span class="line"><span class="comment">     * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class="line">    group.add(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        start0();</span><br><span class="line">        started = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">              it will be passed up the call stack */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、run"><a href="#4、run" class="headerlink" title="4、run"></a>4、run</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If this thread was constructed using a separate</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;Runnable&lt;/code&gt; run object, then that</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;Runnable&lt;/code&gt; object&#x27;s &lt;code&gt;run&lt;/code&gt; method is called;</span></span><br><span class="line"><span class="comment"> * otherwise, this method does nothing and returns.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Subclasses of &lt;code&gt;Thread&lt;/code&gt; should override this method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     #start()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     #stop()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     #Thread(ThreadGroup, Runnable, String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、setPriority"><a href="#5、setPriority" class="headerlink" title="5、setPriority"></a>5、setPriority</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Changes the priority of this thread.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * First the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread is called</span></span><br><span class="line"><span class="comment"> * with no arguments. This may result in throwing a</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;SecurityException&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Otherwise, the priority of this thread is set to the smaller of</span></span><br><span class="line"><span class="comment"> * the specified &lt;code&gt;newPriority&lt;/code&gt; and the maximum permitted</span></span><br><span class="line"><span class="comment"> * priority of the thread&#x27;s thread group.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newPriority priority to set this thread to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  IllegalArgumentException  If the priority is not in the</span></span><br><span class="line"><span class="comment"> *               range &lt;code&gt;MIN_PRIORITY&lt;/code&gt; to</span></span><br><span class="line"><span class="comment"> *               &lt;code&gt;MAX_PRIORITY&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  SecurityException  if the current thread cannot modify</span></span><br><span class="line"><span class="comment"> *               this thread.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #getPriority</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #checkAccess()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #getThreadGroup()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #MAX_PRIORITY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #MIN_PRIORITY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        ThreadGroup#getMaxPriority()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setPriority</span><span class="params">(<span class="type">int</span> newPriority)</span> &#123;</span><br><span class="line">    ThreadGroup g;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((g = getThreadGroup()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class="line">            newPriority = g.getMaxPriority();</span><br><span class="line">        &#125;</span><br><span class="line">        setPriority0(priority = newPriority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、getPriority"><a href="#6、getPriority" class="headerlink" title="6、getPriority"></a>6、getPriority</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns this thread&#x27;s priority.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  this thread&#x27;s priority.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     #setPriority</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> priority;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、sleep"><a href="#7、sleep" class="headerlink" title="7、sleep"></a>7、sleep</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Causes the currently executing thread to sleep (temporarily cease</span></span><br><span class="line"><span class="comment"> * execution) for the specified number of milliseconds, subject to</span></span><br><span class="line"><span class="comment"> * the precision and accuracy of system timers and schedulers. The thread</span></span><br><span class="line"><span class="comment"> * does not lose ownership of any monitors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  millis</span></span><br><span class="line"><span class="comment"> *         the length of time to sleep in milliseconds</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment"> *          if the value of &#123;<span class="doctag">@code</span> millis&#125; is negative</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  InterruptedException</span></span><br><span class="line"><span class="comment"> *          if any thread has interrupted the current thread. The</span></span><br><span class="line"><span class="comment"> *          &lt;i&gt;interrupted status&lt;/i&gt; of the current thread is</span></span><br><span class="line"><span class="comment"> *          cleared when this exception is thrown.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException;</span><br></pre></td></tr></table></figure><h4 id="8、interrupt"><a href="#8、interrupt" class="headerlink" title="8、interrupt"></a>8、interrupt</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interrupts this thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Unless the current thread is interrupting itself, which is</span></span><br><span class="line"><span class="comment"> * always permitted, the &#123;<span class="doctag">@link</span> #checkAccess() checkAccess&#125; method</span></span><br><span class="line"><span class="comment"> * of this thread is invoked, which may cause a &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * SecurityException&#125; to be thrown.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If this thread is blocked in an invocation of the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * Object#wait() wait()&#125;, &#123;<span class="doctag">@link</span> Object#wait(long) wait(long)&#125;, or &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * Object#wait(long, int) wait(long, int)&#125; methods of the &#123;<span class="doctag">@link</span> Object&#125;</span></span><br><span class="line"><span class="comment"> * class, or of the &#123;<span class="doctag">@link</span> #join()&#125;, &#123;<span class="doctag">@link</span> #join(long)&#125;, &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * #join(long, int)&#125;, &#123;<span class="doctag">@link</span> #sleep(long)&#125;, or &#123;<span class="doctag">@link</span> #sleep(long, int)&#125;,</span></span><br><span class="line"><span class="comment"> * methods of this class, then its interrupt status will be cleared and it</span></span><br><span class="line"><span class="comment"> * will receive an &#123;<span class="doctag">@link</span> InterruptedException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If this thread is blocked in an I/O operation upon an &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.nio.channels.InterruptibleChannel InterruptibleChannel&#125;</span></span><br><span class="line"><span class="comment"> * then the channel will be closed, the thread&#x27;s interrupt</span></span><br><span class="line"><span class="comment"> * status will be set, and the thread will receive a &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.nio.channels.ClosedByInterruptException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If this thread is blocked in a &#123;<span class="doctag">@link</span> java.nio.channels.Selector&#125;</span></span><br><span class="line"><span class="comment"> * then the thread&#x27;s interrupt status will be set and it will return</span></span><br><span class="line"><span class="comment"> * immediately from the selection operation, possibly with a non-zero</span></span><br><span class="line"><span class="comment"> * value, just as if the selector&#x27;s &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.nio.channels.Selector#wakeup wakeup&#125; method were invoked.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If none of the previous conditions hold then this thread&#x27;s interrupt</span></span><br><span class="line"><span class="comment"> * status will be set. &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Interrupting a thread that is not alive need not have any effect.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment"> *          if the current thread cannot modify this thread</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@revised</span> 6.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@spec</span> JSR-51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interrupt</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> != Thread.currentThread())</span><br><span class="line">        checkAccess();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (blockerLock) &#123;</span><br><span class="line">        <span class="type">Interruptible</span> <span class="variable">b</span> <span class="operator">=</span> blocker;</span><br><span class="line">        <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</span><br><span class="line">            interrupt0();           <span class="comment">// Just to set the interrupt flag</span></span><br><span class="line">            b.interrupt(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    interrupt0();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、常用方法（二）"><a href="#4、常用方法（二）" class="headerlink" title="4、常用方法（二）"></a>4、常用方法（二）</h3><h4 id="1、yield"><a href="#1、yield" class="headerlink" title="1、yield"></a>1、yield</h4><p>线程的礼让，让出cpu，让其他线程执行，但礼让的时间不确定，所以也不一定礼让成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A hint to the scheduler that the current thread is willing to yield</span></span><br><span class="line"><span class="comment"> * its current use of a processor. The scheduler is free to ignore this</span></span><br><span class="line"><span class="comment"> * hint.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Yield is a heuristic attempt to improve relative progression</span></span><br><span class="line"><span class="comment"> * between threads that would otherwise over-utilise a CPU. Its use</span></span><br><span class="line"><span class="comment"> * should be combined with detailed profiling and benchmarking to</span></span><br><span class="line"><span class="comment"> * ensure that it actually has the desired effect.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; It is rarely appropriate to use this method. It may be useful</span></span><br><span class="line"><span class="comment"> * for debugging or testing purposes, where it may help to reproduce</span></span><br><span class="line"><span class="comment"> * bugs due to race conditions. It may also be useful when designing</span></span><br><span class="line"><span class="comment"> * concurrency control constructs such as the ones in the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.util.concurrent.locks&#125; package.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">yield</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="2、join"><a href="#2、join" class="headerlink" title="2、join"></a>2、join</h4><p>线程的插队。插队的线程一旦插队成功，则肯定先执行插入的线程的所有的任务</p><blockquote><p>案例：创建一个子线程，每个一秒输出hello。输出20次，主线程每隔一秒输出hi，输出20次；要求：两个线程同时执行，当主线程输出5次后，就让子线程运行完毕，主线程再继续</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T1</span>();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程吃了&quot;</span> + i + <span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    t1.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程吃了&quot;</span> + i + <span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、常用方法（三）"><a href="#5、常用方法（三）" class="headerlink" title="5、常用方法（三）"></a>5、常用方法（三）</h3><p>用户线程和守护进程</p><ul><li>用户线程：也叫工作线程，当线程的任务执行完成或通知方式结束</li><li>守护线程：一般是为工作线程服务，当所有的用户线程结束时，守护线程自动结束</li><li>常见的守护进程：辣鸡回收机制</li></ul><blockquote><p>将一个线程设置为守护线程</p></blockquote><h3 id="6、线程的生命周期"><a href="#6、线程的生命周期" class="headerlink" title="6、线程的生命周期"></a>6、线程的生命周期</h3><p>线程的状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread which has not yet started.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NEW,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a runnable thread.  A thread in the runnable</span></span><br><span class="line"><span class="comment">     * state is executing in the Java virtual machine but it may</span></span><br><span class="line"><span class="comment">     * be waiting for other resources from the operating system</span></span><br><span class="line"><span class="comment">     * such as processor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNNABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread blocked waiting for a monitor lock.</span></span><br><span class="line"><span class="comment">     * A thread in the blocked state is waiting for a monitor lock</span></span><br><span class="line"><span class="comment">     * to enter a synchronized block/method or</span></span><br><span class="line"><span class="comment">     * reenter a synchronized block/method after calling</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BLOCKED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread.</span></span><br><span class="line"><span class="comment">     * A thread is in the waiting state due to calling one of the</span></span><br><span class="line"><span class="comment">     * following methods:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join() Thread.join&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#park() LockSupport.park&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span></span><br><span class="line"><span class="comment">     * perform a particular action.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * on an object is waiting for another thread to call</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span></span><br><span class="line"><span class="comment">     * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * is waiting for a specified thread to terminate.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread with a specified waiting time.</span></span><br><span class="line"><span class="comment">     * A thread is in the timed waiting state due to calling one of</span></span><br><span class="line"><span class="comment">     * the following methods with a specified positive waiting time:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #sleep Thread.sleep&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait(long) Object.wait&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join(long) Thread.join&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a terminated thread.</span></span><br><span class="line"><span class="comment">     * The thread has completed execution.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/24/rOKwNWqtizoP1lL.png"></p><h3 id="7、线程同步"><a href="#7、线程同步" class="headerlink" title="7、线程同步"></a>7、线程同步</h3><p>线程同步机制：在多线程编程中，一些敏感数据不允许被多个线程同时访问，此时使用同步访问技术，<strong>保证数据在任何同一时刻，最多有一个线程访问</strong>，以保证数据的完整性</p><p>1、同步代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (对象) &#123; <span class="comment">//得到对象的锁，才能操作同步代码</span></span><br><span class="line">    <span class="comment">// 需要同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、声明方法，表示整个方法为同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pulic <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">// 需要同步的代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似于锁门排队上厕所</p><p><strong>synchronized 解决售票问题：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicket01</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 同步方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;售出一张票，剩下&quot;</span> + (--num) );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>互斥锁：</strong></p><ol><li>java语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性</li><li>每个对象都对应一个可称为”互斥锁“的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象</li><li>关键字synchronized 来与对象的互斥锁联系。当某个对象用synchronized修饰时，表明该对象在任一时刻只能有一个线程访问</li><li>同步的局限性：导致程序的执行效率要降低</li><li>同步方法（非静态）的锁可以是this，也可以是其他对象（要求是同一个对象）</li><li>同步方法（静态）的锁为当前类（类名.class）</li></ol><p><strong>细节：</strong></p><ol><li>普通方法使用synchronized，默认锁对象为this</li><li>静态方法使用synchronized，默认锁对象为类名.class</li><li>实现步骤：<br>1、分析上锁代码<br>2、尽量使用代码块<br>3、要求多个线程的锁为同一个对象</li></ol><h3 id="8、线程死锁"><a href="#8、线程死锁" class="headerlink" title="8、线程死锁"></a>8、线程死锁</h3><p>基本介绍：多个线程都占用了对方的锁资源，但不肯想让，导致了死锁</p><blockquote><p>模拟一个死锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">true</span>);</span><br><span class="line">        a.setName(<span class="string">&quot;线程A&quot;</span>);</span><br><span class="line">        a.start();</span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">false</span>);</span><br><span class="line">        b.setName(<span class="string">&quot;线程B&quot;</span>);</span><br><span class="line">        b.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">object1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">object2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeadLockDemo</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object1) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;进入1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (object2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;进入2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;进入3&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (object1) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;进入4&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线程B进入3</span><br><span class="line">线程A进入1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9、释放锁"><a href="#9、释放锁" class="headerlink" title="9、释放锁"></a>9、释放锁</h3><p><img src="https://i.loli.net/2021/05/24/JOGBVKfU2ZdvecY.png"></p><p><img src="https://i.loli.net/2021/05/24/2TnDFhRl5W9ks7C.png"></p><p>作业：两个进程同时存钱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.com.homework;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/24 22:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (money &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                money -= <span class="number">1000</span>;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;取出了1000&quot;</span> + <span class="string">&quot;当前余额&quot;</span> + money);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="day12"><a href="#day12" class="headerlink" title="day12"></a>day12</h1><blockquote><p>IO流</p><p>当初写爬虫的时候发现文件基础十分薄弱</p></blockquote><!--more--><h2 id="一、文件的基本使用"><a href="#一、文件的基本使用" class="headerlink" title="一、文件的基本使用"></a>一、文件的基本使用</h2><h3 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><p><strong>文件</strong>：保存数据的地方</p><p><strong>文件流</strong>：文件在程序中是以流的形式来操作的</p><p><strong>流（输入流&#x2F;输出流）</strong>：数据在文件和程序之间经历的路径</p><h3 id="2、常用文件操作"><a href="#2、常用文件操作" class="headerlink" title="2、常用文件操作"></a>2、常用文件操作</h3><h4 id="1、创建文件"><a href="#1、创建文件" class="headerlink" title="1、创建文件"></a>1、创建文件</h4><p>常用构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new &lt;code&gt;File&lt;/code&gt; instance by converting the given</span></span><br><span class="line"><span class="comment"> * pathname string into an abstract pathname.  If the given string is</span></span><br><span class="line"><span class="comment"> * the empty string, then the result is the empty abstract pathname.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   pathname  A pathname string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  NullPointerException</span></span><br><span class="line"><span class="comment"> *          If the &lt;code&gt;pathname&lt;/code&gt; argument is &lt;code&gt;null&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String pathname)</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new &lt;code&gt;File&lt;/code&gt; instance from a parent abstract</span></span><br><span class="line"><span class="comment"> * pathname and a child pathname string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   parent  The parent abstract pathname</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   child   The child pathname string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  NullPointerException</span></span><br><span class="line"><span class="comment"> *          If &lt;code&gt;child&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">File</span><span class="params">(File parent, String child)</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new &lt;code&gt;File&lt;/code&gt; instance from a parent pathname string</span></span><br><span class="line"><span class="comment"> * and a child pathname string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   parent  The parent pathname string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   child   The child pathname string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  NullPointerException</span></span><br><span class="line"><span class="comment"> *          If &lt;code&gt;child&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String parent, String child)</span> &#123;</span><br></pre></td></tr></table></figure><p>创建文件方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Atomically creates a new, empty file named by this abstract pathname if</span></span><br><span class="line"><span class="comment"> * and only if a file with this name does not yet exist.  The check for the</span></span><br><span class="line"><span class="comment"> * existence of the file and the creation of the file if it does not exist</span></span><br><span class="line"><span class="comment"> * are a single operation that is atomic with respect to all other</span></span><br><span class="line"><span class="comment"> * filesystem activities that might affect the file.</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;</span></span><br><span class="line"><span class="comment"> * Note: this method should &lt;i&gt;not&lt;/i&gt; be used for file-locking, as</span></span><br><span class="line"><span class="comment"> * the resulting protocol cannot be made to work reliably. The</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.nio.channels.FileLock FileLock&#125;</span></span><br><span class="line"><span class="comment"> * facility should be used instead.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &lt;code&gt;true&lt;/code&gt; if the named file does not exist and was</span></span><br><span class="line"><span class="comment"> *          successfully created; &lt;code&gt;false&lt;/code&gt; if the named file</span></span><br><span class="line"><span class="comment"> *          already exists</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IOException</span></span><br><span class="line"><span class="comment"> *          If an I/O error occurred</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment"> *          If a security manager exists and its &lt;code&gt;&#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> *          java.lang.SecurityManager#checkWrite(java.lang.String)&#125;&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> *          method denies write access to the file</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">createNewFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">security</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (security != <span class="literal">null</span>) security.checkWrite(path);</span><br><span class="line">    <span class="keyword">if</span> (isInvalid()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Invalid file path&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2、获取文件信息"><a href="#2、获取文件信息" class="headerlink" title="2、获取文件信息"></a>2、获取文件信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the name of the file or directory denoted by this abstract</span></span><br><span class="line"><span class="comment"> * pathname.  This is just the last name in the pathname&#x27;s name</span></span><br><span class="line"><span class="comment"> * sequence.  If the pathname&#x27;s name sequence is empty, then the empty</span></span><br><span class="line"><span class="comment"> * string is returned.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the absolute pathname string of this abstract pathname.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAbsolutePath</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the pathname string of this abstract pathname&#x27;s parent, or</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;null&lt;/code&gt; if this pathname does not name a parent directory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getParent</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests whether the file or directory denoted by this abstract pathname</span></span><br><span class="line"><span class="comment"> * exists.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests whether the file denoted by this abstract pathname is a</span></span><br><span class="line"><span class="comment"> * directory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDirectory</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests whether the file denoted by this abstract pathname is a normal</span></span><br><span class="line"><span class="comment"> * file.  A file is &lt;em&gt;normal&lt;/em&gt; if it is not a directory and, in</span></span><br><span class="line"><span class="comment"> * addition, satisfies other system-dependent criteria.  Any non-directory</span></span><br><span class="line"><span class="comment"> * file created by a Java application is guaranteed to be a normal file.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFile</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the length of the file denoted by this abstract pathname.</span></span><br><span class="line"><span class="comment"> * The return value is unspecified if this pathname denotes a directory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">length</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><h4 id="3、目录的操作和文件的删除"><a href="#3、目录的操作和文件的删除" class="headerlink" title="3、目录的操作和文件的删除"></a>3、目录的操作和文件的删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates the directory named by this abstract pathname.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mkdir</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates the directory named by this abstract pathname, including any</span></span><br><span class="line"><span class="comment"> * necessary but nonexistent parent directories.  Note that if this</span></span><br><span class="line"><span class="comment"> * operation fails it may have succeeded in creating some of the necessary</span></span><br><span class="line"><span class="comment"> * parent directories.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mkdirs</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Deletes the file or directory denoted by this abstract pathname.  If</span></span><br><span class="line"><span class="comment"> * this pathname denotes a directory, then the directory must be empty in</span></span><br><span class="line"><span class="comment"> * order to be deleted.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><h2 id="二、IO流原理及流的分类"><a href="#二、IO流原理及流的分类" class="headerlink" title="二、IO流原理及流的分类"></a>二、IO流原理及流的分类</h2><p>流的分类：</p><ul><li>按操作数据单位不同分为：字节流（8 bit），字符流</li><li>按数据的流向不同分为：输入流、输出流</li><li>按流的角色不同分为：节点流、处理流&#x2F;包装流</li></ul><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><p>java的Io流设计40多个类，掌握常用即可</p><h2 id="三、FileInputStream-x2F-OutputStream"><a href="#三、FileInputStream-x2F-OutputStream" class="headerlink" title="三、FileInputStream&#x2F;OutputStream"></a>三、FileInputStream&#x2F;OutputStream</h2><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2021/05/25/W3TgFMqBL8P1cbr.png"></h3><p>输入案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileInputStream= <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;f:\\hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((read = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)read);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileInputStream= <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;f:\\hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,readLen));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/25/kYqnQxEp6INTz9h.png"></p><p>输出案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入内容时会覆盖原来的内容</span></span><br><span class="line">        fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;f:\\a.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入一个字节</span></span><br><span class="line">        fileOutputStream.write(<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line">        fileOutputStream.write(bytes,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例：文件拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> <span class="string">&quot;f:\\b.jpg&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> <span class="string">&quot;f:\\a.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]; <span class="comment">// 1m</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(source);</span><br><span class="line">        fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(target);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fileOutputStream.write(buf,<span class="number">0</span>,readLen);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="四、FileReader-x2F-Writer"><a href="#四、FileReader-x2F-Writer" class="headerlink" title="四、FileReader&#x2F;Writer"></a>四、FileReader&#x2F;Writer</h2><blockquote><p>发现方法差不多，注意细节就行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;f:\\story.txt&quot;</span>);</span><br><span class="line">    <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">8</span>];</span><br><span class="line">    <span class="type">int</span> readLen;</span><br><span class="line">    <span class="keyword">while</span> ((readLen = fileReader.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        java.lang.<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.lang.String(buf,<span class="number">0</span>,readLen);</span><br><span class="line">        System.out.print(str);</span><br><span class="line">    &#125;</span><br><span class="line">    fileReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;f:\\aaa.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">fileWriter.write(<span class="string">&#x27;h&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须关闭或刷新才能写入成功</span></span><br><span class="line"><span class="comment">// 追源码可发现</span></span><br><span class="line">fileWriter.close();</span><br></pre></td></tr></table></figure><h2 id="五、节点流和处理流"><a href="#五、节点流和处理流" class="headerlink" title="五、节点流和处理流"></a>五、节点流和处理流</h2><p>节点流：从一个特定的数据源<strong>读写数据</strong>，如FileReader,FileWriter</p><p>处理流（也叫<strong>包装流</strong>）：连接在已存在的流（节点流或处理流）之上，为程序提供更强大的读写功能，也更加灵活、如BufferedReader、BufferecdWriter</p><p><img src="https://i.loli.net/2021/05/25/uUkFhveoWr6RKE1.png" alt="image-20210525161606501"></p><p>BufferedReader有属性Reader，可以封装一个节点流，该节点流可以是任何Reader的子类</p><p><strong>区别：</strong></p><ol><li>节点流是低级流&#x2F;底层流，直接与数据源相连</li><li>处理流（包装流）包装节点流，可以消除不同节点流的实现差异，提供更方便的方法实现输入和输出</li><li>处理流使用<strong>修饰器设计模式Decorator（也译为装饰模式）</strong></li></ol><p><strong>处理流优势：</strong></p><ol><li>性能的提高：增加缓冲的方式提高输入输出效率</li><li>操作的便捷：消除不同节点流的差异，调用相同方法即可</li></ol><p><strong>修饰器模式（Decorator）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readString</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/25 16:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReader_</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读文件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringReader_</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readString</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读取字符串&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferReader_</span> <span class="keyword">extends</span> <span class="title class_">Reader</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Reader reader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferReader_</span><span class="params">(Reader reader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.reader = reader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拓展方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFiles</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            reader.readFile();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readStrings</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            reader.readString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、Buffer-InputStream-x2F-OutputStream"><a href="#六、Buffer-InputStream-x2F-OutputStream" class="headerlink" title="六、Buffer InputStream&#x2F;OutputStream"></a>六、Buffer InputStream&#x2F;OutputStream</h2><ol><li>属于字节流</li><li>关闭时关闭外层流即可</li></ol><p><strong>拷贝案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;f:\\a.jpg&quot;</span>));</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;f:\\b.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((readLen = bufferedInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    bufferedOutputStream.write(buf,<span class="number">0</span>,readLen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bufferedInputStream.close();</span><br><span class="line">bufferedOutputStream.close();</span><br></pre></td></tr></table></figure><h2 id="七、Buffer-Reader-x2F-Writer"><a href="#七、Buffer-Reader-x2F-Writer" class="headerlink" title="七、Buffer Reader&#x2F;Writer"></a>七、Buffer Reader&#x2F;Writer</h2><ol><li>属于字符流</li><li>关闭时关闭外层流即可（追源码）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭包装的节点流</span></span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            in = <span class="literal">null</span>;</span><br><span class="line">            cb = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;f:\\story.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">String line;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按行读取</span></span><br><span class="line"><span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bufferedReader.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;f:\\a.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">bufferedWriter.write(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line"><span class="comment">// 插入和系统相关的换行符</span></span><br><span class="line">bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">bufferedWriter.write(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">bufferedWriter.write(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">bufferedWriter.close();</span><br></pre></td></tr></table></figure><p><strong>拷贝文本文件案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;f:\\a.txt&quot;</span>));</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;f:\\story.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    bufferedWriter.write(line);</span><br><span class="line">    bufferedWriter.newLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bufferedReader.close();</span><br><span class="line">bufferedWriter.close();</span><br></pre></td></tr></table></figure><h2 id="八、对象流-Object-InputStream-x2F-OutputStream"><a href="#八、对象流-Object-InputStream-x2F-OutputStream" class="headerlink" title="八、对象流-Object InputStream&#x2F;OutputStream"></a>八、对象流-Object InputStream&#x2F;OutputStream</h2><p>需求：需要保存对象到文件 – 保存值和数据类型</p><p>序列化和反序列化：</p><p>序列化：保存数据时，保存<strong>数据的值</strong>和<strong>数据类型</strong></p><p>反序列化：取出数据时，取出<strong>值</strong>和<strong>数据类型</strong>，恢复为对象</p><p>写入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 序列化后保存的文件格式不是纯文本</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;f:\\aa.dat&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">objectOutputStream.writeInt(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">objectOutputStream.writeBoolean(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">objectOutputStream.writeDouble(<span class="number">9.5</span>);</span><br><span class="line"></span><br><span class="line">objectOutputStream.writeUTF(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line"></span><br><span class="line">objectOutputStream.writeObject(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;xiaowang&quot;</span>,<span class="number">11</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">objectOutputStream.close();</span><br></pre></td></tr></table></figure><p>读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;f:\\aa.dat&quot;</span>;</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line"></span><br><span class="line">System.out.println(objectInputStream.readInt());</span><br><span class="line">System.out.println(objectInputStream.readBoolean());</span><br><span class="line">System.out.println(objectInputStream.readDouble());</span><br><span class="line">System.out.println(objectInputStream.readUTF());</span><br><span class="line">System.out.println(objectInputStream.readObject());</span><br></pre></td></tr></table></figure><p><strong>细节：</strong></p><ol><li>读写顺序一致</li><li>要求序列化或反序列化的对象，需要实现Serializeble接口</li><li>序列化的类中建议添加SerialVersionUID，为了提高版本的兼容性</li><li>序列化时，默认将所有属性序列化，除了<strong>static</strong>属性和<strong>transient</strong>属性</li><li>序列化时，要求属性也实现序列化接口</li></ol><p><strong>标准输入、输出流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &quot;standard&quot; input stream. This stream is already</span></span><br><span class="line"><span class="comment"> * open and ready to supply input data. Typically this stream</span></span><br><span class="line"><span class="comment"> * corresponds to keyboard input or another input source specified by</span></span><br><span class="line"><span class="comment"> * the host environment or user.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 键盘</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &quot;standard&quot; output stream. This stream is already</span></span><br><span class="line"><span class="comment"> * open and ready to accept output data. Typically this stream</span></span><br><span class="line"><span class="comment"> * corresponds to display output or another output destination</span></span><br><span class="line"><span class="comment"> * specified by the host environment or user.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//显示器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="九、转换流-InputStreamReader-x2F-OutputStreamWriter"><a href="#九、转换流-InputStreamReader-x2F-OutputStreamWriter" class="headerlink" title="九、转换流-InputStreamReader&#x2F;OutputStreamWriter"></a>九、转换流-InputStreamReader&#x2F;OutputStreamWriter</h2><p>乱码问题 引出 转换流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;f:\\a.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 默认情况下按照utf-8编码读取</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">System.out.println(s);</span><br><span class="line">br.close();</span><br></pre></td></tr></table></figure><p>若a.txt编码不为utf-8则乱码</p><p><strong>字节流 -&gt; 字符流 （指定编码）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an InputStreamReader that uses the given charset.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  in       An InputStream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  cs       A charset</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@spec</span> JSR-51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputStreamReader</span><span class="params">(InputStream in, Charset cs)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(in);</span><br><span class="line">    <span class="keyword">if</span> (cs == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;charset&quot;</span>);</span><br><span class="line">    sd = StreamDecoder.forInputStreamReader(in, <span class="built_in">this</span>, cs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字符流 -&gt; 字节流 （指定编码）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an OutputStreamWriter that uses the given charset.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  out</span></span><br><span class="line"><span class="comment"> *         An OutputStream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  cs</span></span><br><span class="line"><span class="comment"> *         A charset</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@spec</span> JSR-51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">OutputStreamWriter</span><span class="params">(OutputStream out, Charset cs)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(out);</span><br><span class="line">    <span class="keyword">if</span> (cs == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;charset&quot;</span>);</span><br><span class="line">    se = StreamEncoder.forOutputStreamWriter(out, <span class="built_in">this</span>, cs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理文本数据，字符流效率更高，且解决中文乱码问题，建议将字节流转为字符流</p><p>解决乱码问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;f:\\a.txt&quot;</span>);</span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fr,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line">bufferedReader.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;f:\\a.txt&quot;</span>);</span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">outputStreamWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fileOutputStream,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(outputStreamWriter);</span><br><span class="line">bw.write(<span class="string">&quot;廖涛&quot;</span>);</span><br><span class="line">bw.close();</span><br></pre></td></tr></table></figure><h2 id="十、打印流-PrintStream-x2F-PrintWriter"><a href="#十、打印流-PrintStream-x2F-PrintWriter" class="headerlink" title="十、打印流 PrintStream&#x2F;PrintWriter"></a><strong>十、打印流 PrintStream&#x2F;PrintWriter</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规使用</span></span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// print底层调用write方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span>) &#123;</span><br><span class="line">        s = <span class="string">&quot;null&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    write(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出到文件</span></span><br><span class="line">System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;e:\\aaa.txt&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;111&quot;</span>);</span><br></pre></td></tr></table></figure><p>PrintWriter差不多</p><h2 id="十一、Properties类"><a href="#十一、Properties类" class="headerlink" title="十一、Properties类"></a>十一、Properties类</h2><p><strong>常用于读取配置文件或写入配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ip</span>=<span class="string">192.168.12.12</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>传统方法实现较为麻烦 -&gt; 引出 Properties类</p><p>配置文件格式：</p><p>键&#x3D;值</p><p>键&#x3D;值</p><p>若含有中文，存为unicode码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;G:\\idea_project\\javaBasicHan\\src\\day14\\properties_\\mysql.properties&quot;</span>));</span><br><span class="line">properties.list(System.out);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">System.out.println(username);</span><br><span class="line"></span><br><span class="line">properties.setProperty(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;汤姆&quot;</span>);</span><br><span class="line"></span><br><span class="line">properties.store(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;G:\\idea_project\\javaBasicHan\\src\\day14\\properties_\\mysql.properties&quot;</span>),<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/25/MQO1fLd2KeWoJSv.png"></p><hr><h1 id="day13"><a href="#day13" class="headerlink" title="day13"></a>day13</h1><blockquote><p>网络编程</p></blockquote><!--more--><h2 id="一、网络相关概念"><a href="#一、网络相关概念" class="headerlink" title="一、网络相关概念"></a>一、网络相关概念</h2><p>学过计网，不再讨论</p><h2 id="二、InetAddress类"><a href="#二、InetAddress类" class="headerlink" title="二、InetAddress类"></a>二、InetAddress类</h2><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">System.out.println(localHost);</span><br><span class="line"></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">host1</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;DESKTOP-P6D5FT4&quot;</span>);</span><br><span class="line">System.out.println(host1);</span><br><span class="line"></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">host2</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;taoblog421.cn&quot;</span>);</span><br><span class="line">System.out.println(host2);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">ipAddress</span> <span class="operator">=</span> host2.getHostAddress();</span><br><span class="line">System.out.println(ipAddress);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">hostName</span> <span class="operator">=</span> host2.getHostName(); <span class="comment">//返回主机名或域名</span></span><br><span class="line">System.out.println(hostName);</span><br></pre></td></tr></table></figure><h2 id="三、Soket（一）"><a href="#三、Soket（一）" class="headerlink" title="三、Soket（一）"></a>三、Soket（一）</h2><ol><li>套接字（Socket）开发网络应用程序被广泛采用</li><li>通信的两端都有Socket，是两台机器间通信的端点</li><li>网络通信其实就是Socket间的通信</li><li>Socket允许把网络连接当成一个流，数据在两个Socket之间通过IO传输</li><li>一般吧主动发起通信的应用程序称为客户端，等待通信请求的为服务端</li></ol><p><img src="https://i.loli.net/2021/05/27/TmM4sc6XQEoq8Ax.png"></p><h3 id="1、tcp网络通信编程-一"><a href="#1、tcp网络通信编程-一" class="headerlink" title="1、tcp网络通信编程(一)"></a>1、tcp网络通信编程(一)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端启动&quot;</span>);</span><br><span class="line">        <span class="comment">// 在本机9999端口监听，等待连接</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有客户端连接则返回socket连接对象，程序继续</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> readLen;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,readLen));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器退出&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 连接指定主机的9999端口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接成功返回socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(),<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;hello,server&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端启动&quot;</span>);</span><br><span class="line">        <span class="comment">// 在本机9999端口监听，等待连接</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有客户端连接则返回socket连接对象，程序继续</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> readLen;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,readLen));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;hello,client&quot;</span>.getBytes());</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器退出&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 连接指定主机的9999端口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接成功返回socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(),<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 结束标志</span></span><br><span class="line">        outputStream.write(<span class="string">&quot;hello,server&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 结束输出</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> readLen;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,readLen));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.0 字符流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若使用newline结束标志，另一端需要是用readline读取</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line"></span><br><span class="line">        String str;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((str = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        bufferedWriter.flush(); <span class="comment">//需要手动刷新</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">outputStreamWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(outputStreamWriter);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;你好啊&quot;</span>);</span><br><span class="line">        bufferedWriter.flush(); <span class="comment">//需要手动刷新</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        String str;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((str = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、tcp网络通信编程-二）"><a href="#2、tcp网络通信编程-二）" class="headerlink" title="2、tcp网络通信编程(二）"></a>2、tcp网络通信编程(二）</h3><p><img src="https://i.loli.net/2021/05/27/fEaDAR9M2PlbKnI.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端启动.......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.InputStreamTOByte(bufferedInputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将得到的字节数组写入到指定的文件</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:\\aa.jpg&quot;</span>));</span><br><span class="line">        bufferedOutputStream.write(bytes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//向客户端回复收到图片</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;收到图片&quot;</span>);</span><br><span class="line">        bufferedWriter.flush();</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(),<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:\\a.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件的内容</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.InputStreamTOByte(bufferedInputStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        bufferedOutputStream.write(bytes);</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收回复的消息</span></span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> StreamUtils.InputStreamTOString(inputStream);</span><br><span class="line">        System.out.println(string);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、netstat"><a href="#3、netstat" class="headerlink" title="3、netstat"></a>3、netstat</h3><p>netstat -an 可以查看当前主机的网络情况，包括<strong>监听端口</strong>和<strong>网络连接</strong>情况</p><p><img src="https://i.loli.net/2021/05/27/HUhGCgWlYSiKtV7.png"></p><h3 id="4、tcp秘密"><a href="#4、tcp秘密" class="headerlink" title="4、tcp秘密"></a>4、tcp秘密</h3><ul><li>当客户端连接到服务器端后，实际上客户端也是通过一个端口和服务器进行通讯的，这个端口是TCP&#x2F;IP来分配的，是不确定的，随机的</li></ul><h2 id="四、Soket（二）"><a href="#四、Soket（二）" class="headerlink" title="四、Soket（二）"></a>四、Soket（二）</h2><ul><li>类DaragramSocket和DatagramPacket，实现了基于UDP协议的网络程序</li></ul><h3 id="1、udp网络通信编程（了解）"><a href="#1、udp网络通信编程（了解）" class="headerlink" title="1、udp网络通信编程（了解）"></a>1、udp网络通信编程（了解）</h3><p><img src="https://i.loli.net/2021/05/27/hqzodvx2cyMF1UD.png"></p><p><img src="https://i.loli.net/2021/05/27/OQt4xU6LR3WbAo9.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 9998接口接收数据</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="string">&quot;明天吃火锅去吗&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>],<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        socket.receive(packet1);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet1.getLength();</span><br><span class="line">        <span class="type">byte</span>[] respond = packet1.getData();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(respond,<span class="number">0</span>,length));</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">datagramSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">datagramPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf,buf.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用接收方法，没接收到则阻塞</span></span><br><span class="line">        datagramSocket.receive(datagramPacket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拆包，取出数据并显示</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> datagramPacket.getLength();</span><br><span class="line">        <span class="type">byte</span>[] data = datagramPacket.getData();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,length));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] replay = <span class="string">&quot;有事，你自己去吧&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(replay, replay.length, InetAddress.getLocalHost(), <span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        datagramSocket.send(packet);</span><br><span class="line"></span><br><span class="line">        datagramSocket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、多用户通讯系统"><a href="#五、多用户通讯系统" class="headerlink" title="五、多用户通讯系统"></a>五、多用户通讯系统</h2><h3 id="1、软件开发流程"><a href="#1、软件开发流程" class="headerlink" title="1、软件开发流程"></a>1、软件开发流程</h3><p><img src="https://i.loli.net/2021/05/27/CaMt2BZeLoSOQvN.png"></p><h3 id="2、需求分析"><a href="#2、需求分析" class="headerlink" title="2、需求分析"></a>2、需求分析</h3><ol><li>用户登录</li><li>拉取在线用户列表</li><li>无异常退出</li><li>私聊</li><li>群聊</li><li>发文件</li><li>服务器推送新闻</li></ol><h3 id="3、功能实现-整体分析"><a href="#3、功能实现-整体分析" class="headerlink" title="3、功能实现 - 整体分析"></a>3、功能实现 - 整体分析</h3><p><img src="https://i.loli.net/2021/05/27/2dvI1ixWzJsLoKT.png"></p><h4 id="1、功能实现-用户登录"><a href="#1、功能实现-用户登录" class="headerlink" title="1、功能实现 - 用户登录"></a>1、功能实现 - 用户登录</h4><p>实现上图所示的各条线</p><h4 id="2、功能实现-拉取在线用户"><a href="#2、功能实现-拉取在线用户" class="headerlink" title="2、功能实现 - 拉取在线用户"></a>2、功能实现 - 拉取在线用户</h4><h4 id="3、功能实现-正常退出"><a href="#3、功能实现-正常退出" class="headerlink" title="3、功能实现 - 正常退出"></a>3、功能实现 - 正常退出</h4><p><img src="https://i.loli.net/2021/05/28/G5RL3qrIDJy4xzA.png"></p><h4 id="4、功能实现-私聊"><a href="#4、功能实现-私聊" class="headerlink" title="4、功能实现 - 私聊"></a>4、功能实现 - 私聊</h4><p><img src="https://i.loli.net/2021/05/29/SeqiMHfvkTnE9hF.png"></p><h4 id="5、功能实现-群聊"><a href="#5、功能实现-群聊" class="headerlink" title="5、功能实现 - 群聊"></a>5、功能实现 - 群聊</h4><p>和私聊差不多</p><h4 id="6、功能实现-发文件"><a href="#6、功能实现-发文件" class="headerlink" title="6、功能实现 - 发文件"></a>6、功能实现 - 发文件</h4><p><img src="https://i.loli.net/2021/05/29/vXIZSn9OJjQ1Hht.png"></p><h4 id="7、功能实现-服务器推送"><a href="#7、功能实现-服务器推送" class="headerlink" title="7、功能实现-服务器推送"></a>7、功能实现-服务器推送</h4><p>其实和群发差不多</p><p><img src="https://i.loli.net/2021/05/29/i2HI5yp1xXchsUJ.png"></p><h4 id="8、功能实现-离线发送留言和文件"><a href="#8、功能实现-离线发送留言和文件" class="headerlink" title="8、功能实现-离线发送留言和文件"></a>8、功能实现-离线发送留言和文件</h4><p>拓展功能 独自实现</p><p><img src="https://i.loli.net/2021/05/29/YJNG9y2jiAQ6RSW.png"></p><blockquote><p>确实通过这个项目学到不少</p></blockquote><hr><h1 id="day14"><a href="#day14" class="headerlink" title="day14"></a>day14</h1><blockquote><p>反射</p></blockquote><!--more--><h2 id="一、反射机制"><a href="#一、反射机制" class="headerlink" title="一、反射机制"></a>一、反射机制</h2><h3 id="1、需求引出反射"><a href="#1、需求引出反射" class="headerlink" title="1、需求引出反射"></a>1、需求引出反射</h3><blockquote><p>从配置文件读取类的全限定类名和方法名，在程序中调用这个方法</p></blockquote><p>传统方法无法实现 – 反射</p><p><em>这样的需求在学习框架时比价多，即通过外部文件配置，在不修改源码的情况下来控制程序，也符合设计模式的ocp原则（开闭原则）</em></p><p>反射快速入门：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">classpath</span> <span class="operator">=</span> <span class="string">&quot;basic.day16.reflect1.Cat&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;f2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射快速入门</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(classpath);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(methodName);</span><br><span class="line">method.invoke(o);</span><br></pre></td></tr></table></figure><h3 id="2、反射机制"><a href="#2、反射机制" class="headerlink" title="2、反射机制"></a>2、反射机制</h3><p><strong>加载完类</strong>之后，在<strong>堆</strong>中会产生一个<strong>Class类型</strong>的<strong>对象</strong>（一个类只有一个Class对象），这个对象包含了类的额完整结构信息。通过这个对象得到类的结构。这个对象就像一面镜子，通过这个镜子看到类的结构，故称为 - 反射。</p><p>反射机制原理图</p><p><img src="https://i.loli.net/2021/05/31/2fYNODIBsXv45iU.png"></p><h3 id="3、反射优化"><a href="#3、反射优化" class="headerlink" title="3、反射优化"></a>3、反射优化</h3><p>优点：动态的创建和使用对象（框架底层核心）</p><p>缺点：效率低，解释执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    f1();</span><br><span class="line">    f2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">90000000</span>; i++) &#123;</span><br><span class="line">        cat.f1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(end - start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">classpath</span> <span class="operator">=</span> <span class="string">&quot;basic.day16.reflect1.Cat&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;f1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; aClass = Class.forName(classpath);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> aClass.getMethod(methodName);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">90000000</span>; i++) &#123;</span><br><span class="line">        method.invoke(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化：</strong></p><p>关闭访问检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用方法是取消访问检测</span></span><br><span class="line">method.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="二、Class类"><a href="#二、Class类" class="headerlink" title="二、Class类"></a>二、Class类</h2><ul><li>Class对象不是new出来的，而是系统创建的</li></ul><p>new对象的时候：</p><p><img src="https://i.loli.net/2021/05/31/usrQDH1AvZ3PBcm.png"></p><p>反射创建对象：</p><p><img src="https://i.loli.net/2021/05/31/6145Wx7Tp2cewQn.png"></p><p>都会进到<strong>ClassLoader</strong>的<strong>loadClass</strong>方法</p><p>loadClass方法就是创建类的Class对象</p><ul><li><p>每个对象都会记得自己是由哪一个Class对象生成的</p></li><li><p>通过Class对象可以获得一个类的完整结构</p></li><li><p>类的字节码二进制数据，是放在方法区的</p></li></ul><h3 id="1、常用方法"><a href="#1、常用方法" class="headerlink" title="1、常用方法"></a>1、常用方法</h3><p>常用方法都是见面知其意</p><h3 id="2、获取Class对象的方式"><a href="#2、获取Class对象的方式" class="headerlink" title="2、获取Class对象的方式"></a>2、获取Class对象的方式</h3><h4 id="1、Class-forName"><a href="#1、Class-forName" class="headerlink" title="1、Class.forName()"></a>1、Class.forName()</h4><p>多用于从配置文件读取（回忆以前写xml文件，有好多全限定类名）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;basic.day16.reflect1.Cat&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="2、类名-class"><a href="#2、类名-class" class="headerlink" title="2、类名.class"></a>2、类名.class</h4><p>参数的传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Cat&gt; aClass = Cat.class;</span><br></pre></td></tr></table></figure><h4 id="3、对象-class"><a href="#3、对象-class" class="headerlink" title="3、对象.class"></a>3、对象.class</h4><p>创建好对象，得到Classd对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">cat.getClass();</span><br></pre></td></tr></table></figure><h4 id="4、类加载器得到"><a href="#4、类加载器得到" class="headerlink" title="4、类加载器得到"></a>4、类加载器得到</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> cat.getClass().getClassLoader();</span><br><span class="line">Class&lt;?&gt; cls3 = classLoader.loadClass(<span class="string">&quot;basic.day16.reflect1.Cat&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="3、哪些类有Class对象"><a href="#3、哪些类有Class对象" class="headerlink" title="3、哪些类有Class对象"></a>3、哪些类有Class对象</h3><ol><li>外部类，内部类（成员内部类、静态内部类、局部内部类、匿名内部类）</li><li>接口</li><li>数组</li><li>枚举</li><li>注解</li><li>基本数据类型</li><li>void</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; stringClass = String.class;</span><br><span class="line"></span><br><span class="line">Class&lt;Serializable&gt; serializableClass = Serializable.class;</span><br><span class="line"></span><br><span class="line">Class&lt;Integer[]&gt; aClass = Integer[].class;</span><br><span class="line"></span><br><span class="line">Class&lt;Enum&gt; enumClass = Enum.class;</span><br><span class="line"></span><br><span class="line">Class&lt;Deprecated&gt; deprecatedClass = Deprecated.class;</span><br><span class="line"></span><br><span class="line">Class&lt;Integer&gt; integerClass = <span class="type">int</span>.class;</span><br><span class="line"></span><br><span class="line">Class&lt;Void&gt; voidClass = <span class="keyword">void</span>.class;</span><br><span class="line"></span><br><span class="line">Class&lt;Class&gt; classClass = Class.class;</span><br></pre></td></tr></table></figure><h2 id="三、类加载"><a href="#三、类加载" class="headerlink" title="三、类加载"></a>三、类加载</h2><p><strong>基本说明：</strong></p><p>反射机制是java实现动态语言的关键，也就是通过反射实现类动态加载</p><p><strong>静态加载</strong>：编译时加载相关的类，如果没有则报错，依赖性太强</p><p><strong>动态加载</strong>：运行时加载需要的类，如果运行时不用该类，则不报错，降低依赖</p><p><strong>类加载时机：</strong></p><ul><li>new 对象时</li><li>子类被加载时，父类被加载</li><li>调用类中的静态成员</li><li>通过反射</li></ul><p><img src="https://i.loli.net/2021/05/31/GDoJyYOx2mE9QBe.png"></p><p><img src="https://i.loli.net/2021/05/31/hmiSNQMj3KxBrIA.png"></p><p><strong>加载（Loading）</strong>:将字节码从不同数据源（可能是.class文件，也可能是jar包，甚至网络）转化为二级制流加载到内存中，并生成一个该类的java.lang.Class对象</p><p><strong>连接（Linging）</strong>:</p><p>​    <strong>验证（verification）：</strong></p><p>​    确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的安全，包括：文件格式验证（是否以魔数oxcafebabe开头）等。</p><p>​    可以考虑使用-Xverify:none参数来关闭大部分类验证措施，缩短虚拟机类加载的时间</p><p>​    <strong>准备（preparration）：</strong></p><p>​    静态变量分配内存并默认初始化，这些变量使用的内存在堆中分配</p><p>​    <strong>解析（resolution）：</strong></p><p>​    虚拟机将常量池的<strong>符号引用</strong>替换为<strong>直接引用</strong>的过程</p><p><strong>初始化（initialization）：</strong></p><p>执行<clinit>()方法的过程</p><p><clinit>()方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中所有的<strong>静态变量</strong>的赋值动作和<strong>静态代码块</strong>中的语句，并进行合并</p><p>虚拟机会保证一个类的<clinit>()方法在多线程环境中正确的被加锁，同步；如果多个线程同时去初始化一个类，那么只会有一个线程去执行类的<clinit>()方法，其他线性将阻塞等待</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//1 加载b类，生成class对象</span></span><br><span class="line">        <span class="comment">//2 连接 num = 0</span></span><br><span class="line">        <span class="comment">//3 初始化</span></span><br><span class="line">        <span class="comment">// clinit() &#123;</span></span><br><span class="line">        <span class="comment">//    num = 300;</span></span><br><span class="line">        <span class="comment">//    System.out.println(&quot;b的静态代码块被执行&quot;);</span></span><br><span class="line">        <span class="comment">//    num = 100;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        System.out.println(B.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;b的静态代码块被执行&quot;</span>);</span><br><span class="line">        num = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/02/AqVPupyRsHZbLMI.png" alt="image-20210602122828296"></p><p>jvm底层再深入研究</p><h2 id="四、反射获取类的结构信息"><a href="#四、反射获取类的结构信息" class="headerlink" title="四、反射获取类的结构信息"></a>四、反射获取类的结构信息</h2><p>方法都是所见即所得，无需专门记录，使用查询文档即可</p><p><a href="https://tool.oschina.net/apidocs/apidoc?api=jdk-zh">在线文档</a></p><h2 id="五、通过反射创建对象"><a href="#五、通过反射创建对象" class="headerlink" title="五、通过反射创建对象"></a>五、通过反射创建对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/2 12:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectCreateInstance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;basic.day16.reflect_.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user1</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; constructor = cls.getConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user2</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; constructor1 = cls.getDeclaredConstructor(<span class="type">int</span>.class, String.class);</span><br><span class="line">        <span class="comment">//爆破</span></span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user3</span> <span class="operator">=</span> constructor1.newInstance(<span class="number">12</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(user3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/2 13:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectUseField</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;basic.day16.reflect_.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">student</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        age.set(student,<span class="number">88</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//静态变量可以传null</span></span><br><span class="line">        name.set(<span class="literal">null</span>,<span class="string">&quot;小王&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(name.get(<span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;name=&quot;</span> + name +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/2 13:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectUseMethods</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;basic.day16.reflect_.AA&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">f1</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;f1&quot;</span>, String.class, <span class="type">int</span>.class);</span><br><span class="line">        f1.invoke(<span class="literal">null</span>,<span class="string">&quot;123&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">aa</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">f2</span> <span class="operator">=</span> cls.getDeclaredMethod(<span class="string">&quot;f2&quot;</span>);</span><br><span class="line">        f2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f2.invoke(aa);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(String a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法大同小异</p><blockquote><p>墙上芦苇，头重脚轻根底浅</p><p>山间竹笋，嘴尖皮厚腹中空</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言基础</title>
      <link href="/article/2dbe2370.html"/>
      <url>/article/2dbe2370.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>将7篇笔记整合到一起，完整的c语言基础</p><p>学习课程为：<a href="https://www.bilibili.com/video/BV1kh411d7Dq">https://www.bilibili.com/video/BV1kh411d7Dq</a></p></blockquote><span id="more"></span><h1 id="c语言简介、基本数据类型"><a href="#c语言简介、基本数据类型" class="headerlink" title="c语言简介、基本数据类型"></a>c语言简介、基本数据类型</h1><h2 id="一、C语言发展"><a href="#一、C语言发展" class="headerlink" title="一、C语言发展"></a>一、C语言发展</h2><p>与UNIX 密不可分，汇编语言编写的UNIX，UNIX使用c语言改写，从此编写操作系统的主要语言</p><p>至今仍是排名靠前语言</p><p><img src="https://i.loli.net/2021/01/30/v54VmLOI7yBdNCE.png"></p><p>主流版本： c89(标准c)，c99</p><p><strong>c语言特点：</strong></p><ul><li>代码级别的跨平台</li><li>允许直接访问物理地址，对硬件进行操作：（操作系统，数据库，杀毒软件，C语言，驱动…）</li><li>传值方式：按值&#x2F;按指针</li><li>没有对象 - 结构体</li></ul><hr><h2 id="二、C程序运机制"><a href="#二、C程序运机制" class="headerlink" title="二、C程序运机制"></a>二、C程序运机制</h2><ol><li>编辑：编写.c文件，就是源代码</li><li>编译：将.c文件翻译成目标文件(.obj)  &#x2F;&#x2F;计算机底层</li><li>链接：将目标文件.obj  + 库文件 生成可执行文件(.exe)  &#x2F;&#x2F;计算机底层</li><li>运行：执行.exe文件，得到运行结果</li></ol><p><img src="https://i.loli.net/2021/01/31/LMPrk8G4OWBb9iQ.png"></p><p><strong>编译：</strong></p><p>有了c源文件(xxx.c)，通过<strong>编译器</strong>将其编译成obj文件(目标文件)。<br>如果程序没有错误，没有任何提示，但在Debug目录下会出现一个（程序名）.obj文件，该文件称为目标文件。</p><p><strong>链接：</strong></p><p>有了目标文件（.obj文件）,通过<strong>链接程序</strong>将其和运行所需要的<strong>C库文件</strong>链接成exe文件（可执行文件）。<br>如果程序没有错误，没有任何提示，但在Debug目录下会出现一个项目名.exe文件，该文件称为可执行文件。</p><p>为什么需要链接库文件？ 使用printf等函数是c程序库中提供，并不是自己写的（一个printf函数有上千行代码）。<br>链接后的.exe比.obj大很多（还包含了库文件）。</p><p><strong>运行：</strong></p><p>链接后生成的.exe文件（二进制文件）。<br>可以在控制台直接运行。</p><hr><h2 id="三、常用转义符"><a href="#三、常用转义符" class="headerlink" title="三、常用转义符"></a>三、常用转义符</h2><p>知道的不再赘述</p><p><strong>\r 表示回车</strong> 不是换行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;张无忌赵敏周\r芷若小昭&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为 芷若小昭敏周</p><hr><h2 id="四、变量"><a href="#四、变量" class="headerlink" title="四、变量"></a>四、变量</h2><p>变量：变量相当于内存中一个存储空间的表示</p><p>输出格式：%d ,%f,%c,%s %ld,%lld,%lf</p><blockquote><p>%ld用于输出long int</p><p>%lld用于输出long long int</p><p>%lf用于输出double</p></blockquote><h3 id="4-1、变量的数据类型"><a href="#4-1、变量的数据类型" class="headerlink" title="4.1、变量的数据类型"></a>4.1、变量的数据类型</h3><p><img src="https://i.loli.net/2021/01/31/tGPJoS2q8WL6UzH.png"></p><p><strong>操作系统</strong>，<strong>系统位数</strong>，<strong>编译器</strong>都会导致部分数据类型字节长度不一样，使用sizeof()得到的字节长度。</p><p>实际工作中，c程序通常在linux&#x2F;unix中运行</p><p><img src="https://i.loli.net/2021/01/31/1pPReXNLrBuD75i.png"></p><h4 id="4-1-1、整型"><a href="#4-1-1、整型" class="headerlink" title="4.1.1、整型"></a>4.1.1、整型</h4><p>表示整数的数据类型</p><table><thead><tr><th>数据类型</th><th>存储大小(字节)</th><th>范围(最高位表示符号位)</th></tr></thead><tbody><tr><td>char &#x2F; signed char</td><td>1</td><td>-128  到 127</td></tr><tr><td>unsigned char</td><td>1</td><td>0 到 255</td></tr><tr><td>int &#x2F; signed int</td><td>2 或 4</td><td>-2^15 到 2^15 - 1 或 -2^31 到 2^31 - 1</td></tr><tr><td>unsigned int</td><td>2 或 4</td><td>0 到 65535（2^15 -1） 或 0 到 2^31 -1</td></tr><tr><td>short &#x2F; signed short</td><td>2</td><td>-2^15 到 2^15 - 1</td></tr><tr><td>unsigned short</td><td>2</td><td>0 到 65535（2^15 -1）</td></tr><tr><td>long &#x2F; signed long</td><td>4</td><td>-2^31 到 2^31 - 1</td></tr><tr><td>unsigned long</td><td>4</td><td>0 到 2^31 -1</td></tr></tbody></table><blockquote><p><strong>提出问题：以 signed char类型为例子，为何范围是 -128 - 127 而不是 -127 - 127</strong></p><p>关于二进制补码,反码,源码见：<a href="http://taoblog421.cn/article/9b6873a3.html">http://taoblog421.cn/article/9b6873a3.html</a></p><p>参考：<a href="https://blog.csdn.net/yty19970212/article/details/81592398">https://blog.csdn.net/yty19970212/article/details/81592398</a></p><p>之前困扰许久的问题，先看正数，我们找到<strong>内存中存的都是补码</strong>，而对于正数：原码&#x3D;反码&#x3D;补码<br>最小范围为 0000 0001 -&gt; 1<br>最大范围为1111 1111 -&gt; 2^0 + 2^1 + 2^2 + … + 2^7（回忆初中知识<strong>等比数列</strong>公式 s &#x3D; a1(1-q^n)&#x2F;(1-q)） &#x3D; 1*(1-2^8) &#x2F; (1 - 2) &#x3D; 2^8 - 1 &#x3D; 127</p><p>对于负数，首先<strong>引出反码</strong>：<br>若负数也按照原码存储，则计算1-1使，计算机只能将减法转换为加法即1+(-1)<br>0000 0001 + 1000 0001 &#x3D; 1000 0010 &#x3D; -2显然错误，引出反码解决这个问题；</p><p>若负数按照反码存储，计算1+(-1)<br>0000 0001 + 1111 1110 &#x3D; 1111 1111 -&gt;1000 0000 &#x3D; -0</p><p>虽然反码解决了减法问题，但是-0是什么玩意，我们都知道<strong>0既不是正数也不是负数</strong>。</p><p><strong>引出补码：负数的补码为反码+1</strong>，计算1+(-1)<br>0000 0001 + 1111 1111 &#x3D; 1 0000 0000 &#x3D; 0<br>因此多出来一个1000 0000 那么1000 000 表示什么呢，不用说自然是表示 -128了。</p><p>int型同理可得</p></blockquote><h4 id="4-1-2、浮点型"><a href="#4-1-2、浮点型" class="headerlink" title="4.1.2、浮点型"></a>4.1.2、浮点型</h4><p>表示小数的数据类型</p><ul><li>浮点数是近似值（要是细究的话和高数的拉格朗日级数有关系，最烦高数了，不管他）</li><li>尾数部分可能丢失，造成精度损失</li><li>通常使用double(默认为double)</li><li>printf 默认保留后六位</li></ul><table><thead><tr><th>数据类型</th><th>存储大小(字节)</th><th>范围（符号位+指数位+尾数为）</th><th>精度</th></tr></thead><tbody><tr><td>float 单精度</td><td>4</td><td>1.2E-38 到 3.4E+38</td><td>6位小数</td></tr><tr><td>double 双精度</td><td>8</td><td>2.3E-308 到 1.7E+308</td><td>15位小数</td></tr></tbody></table><p>科学计数法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> b = <span class="number">1.1e2</span>; <span class="comment">//1.1 * (10^2)</span></span><br><span class="line"><span class="type">double</span> c = <span class="number">1.1e-2</span>; <span class="comment">//1.1 * (10^-2)</span></span><br></pre></td></tr></table></figure><h4 id="4-1-3、字符型"><a href="#4-1-3、字符型" class="headerlink" title="4.1.3、字符型"></a>4.1.3、字符型</h4><p>char 表示字母或数字  ‘A’ , ‘1’ </p><p>char的底层是整数:</p><ul><li>存储：字符’a’ –&gt; acsii值(97) –&gt; 二进制(01100001) –&gt; 存储</li><li>读取反之</li></ul><p>ASSIC:</p><ul><li>128个字符，只使用了7位，第一位始终为0</li></ul><h4 id="4-1-4、布尔型"><a href="#4-1-4、布尔型" class="headerlink" title="4.1.4、布尔型"></a>4.1.4、布尔型</h4><p>c89没有定义布尔类型</p><p>表达不直观，使用宏定义解决如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOOL int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    BOOL isOk = TRUE;</span><br><span class="line">    <span class="keyword">if</span>(isOk) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>c99提供_Bool型</strong>,_Bool仍然是整数型，但只能赋值为0或1，非零的值会被存储为1</p><p>头文件stdbool.h 可以方便的操作布尔类型变量 （int flag &#x3D; true&#x2F;false）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-2、基本数据类型转换"><a href="#4-2、基本数据类型转换" class="headerlink" title="4.2、基本数据类型转换"></a>4.2、基本数据类型转换</h3><h4 id="4-2-1、自动类型转换"><a href="#4-2-1、自动类型转换" class="headerlink" title="4.2.1、自动类型转换"></a>4.2.1、自动类型转换</h4><p><img src="https://i.loli.net/2021/02/01/WQqPzBD7JlExeFX.png" alt="数据类型自动转换表"></p><p><img src="https://i.loli.net/2021/02/01/eqLxJg3F25kDz49.png" alt="数据类型自动转换表"></p><ul><li>多种类型数据混合运算时，系统将都转为精度最大的类型</li><li>赋值运算中可能发送降低精度，如 float -&gt; double</li></ul><h4 id="4-2-2、强制类型转换"><a href="#4-2-2、强制类型转换" class="headerlink" title="4.2.2、强制类型转换"></a>4.2.2、强制类型转换</h4><p>将高精度或转为精度小的数据类型，使用强制转换符（）,可能会造成精度降低或溢出，需要格外注意</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> d1 = <span class="number">1.63321</span>;</span><br><span class="line"><span class="type">int</span> num = (<span class="type">int</span>)d1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br></pre></td></tr></table></figure><hr><blockquote><p>先扎扎实实把C语言基础过一遍，暂定就靠本校了，求稳没什么不好的，冲吧，一直说的一句话，不要看不起本校，考的起再说。</p></blockquote><h1 id="运算符与指针"><a href="#运算符与指针" class="headerlink" title="运算符与指针"></a>运算符与指针</h1><blockquote><p>运算符与指针入门（再一次学习c语言果然和初学不一样哈哈）</p></blockquote><!--more--><h2 id="一、指针入门"><a href="#一、指针入门" class="headerlink" title="一、指针入门"></a>一、指针入门</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num的地址%p&quot;</span>,&amp;num); <span class="comment">//point &amp;表示取地址</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/02/1wzvxBZKDMTGUAd.png"></p><blockquote><p>发现在我的编译器里地址类型为8Byte</p></blockquote><h3 id="1-1、指针应用案例"><a href="#1-1、指针应用案例" class="headerlink" title="1.1、指针应用案例"></a>1.1、指针应用案例</h3><ol><li>写一个程序，获取一个int变量num的地址，并显示到终端</li><li>将num的地址赋值给指针ptr，并通过ptr去修改num的值</li><li>画出案例的内存布局图</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">88</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num的值%d，num的地址%p\n&quot;</span>,num,&amp;num);</span><br><span class="line">    <span class="type">int</span> *ptr = &amp;num;</span><br><span class="line">    *ptr = <span class="number">99</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num的值%d，num的地址%p&quot;</span>,num,&amp;num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/02/1jdNuRbzBsg9Eit.png"></p><blockquote><p>我喜欢将指针类型这样定义，更容易理解 int* a。</p><p>但是注意：若定义 int* a,b;  a为指针类型，b为int类型。</p></blockquote><h3 id="1-2、指针细节"><a href="#1-2、指针细节" class="headerlink" title="1.2、指针细节"></a>1.2、指针细节</h3><ul><li>基本数据类型，都有对应的指针类型</li><li>此外还是<strong>指向数组的指针</strong>，<strong>指向结构体的指针</strong>，<strong>指向共用体的指针</strong>，（二级指针，多级指针）后续学习</li></ul><h3 id="1-3、值传递和地址传递"><a href="#1-3、值传递和地址传递" class="headerlink" title="1.3、值传递和地址传递"></a>1.3、值传递和地址传递</h3><p><strong>1、值传递</strong></p><p>将变量指向的存储内容，在传值&#x2F;赋值时，<strong>拷贝</strong>一份给接收变量（将实参拷贝给形参）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> num2 = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/02/fV4nd1QUDKWsYJl.png"></p><p><strong>2、地址传递</strong></p><p>如果是<strong>指针</strong>或者<strong>数组</strong>在传值&#x2F;赋值时，指针传递存储地址，数组传递首地址</p><p>分别分析以下两种情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;num;</span><br><span class="line"><span class="type">int</span> *p2 = p;</span><br><span class="line">*p2 = <span class="number">55</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;num;</span><br><span class="line"><span class="type">int</span> *p2 = &amp;p; <span class="comment">//编译器给出警告：Incompatible pointer types initializing &#x27;int *&#x27; with an expression of type &#x27;int ** ; remove &amp;(fix available)Cast expression to int* </span></span><br><span class="line"><span class="comment">//int** p2 = &amp;p;</span></span><br><span class="line">*p2 = <span class="number">55</span></span><br></pre></td></tr></table></figure><h2 id="二、-常量"><a href="#二、-常量" class="headerlink" title="二、 常量"></a>二、 常量</h2><ol><li>固定值，不能修改</li><li>可以是任何基本数据类型</li></ol><ul><li><strong>整数常量</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">85</span>         <span class="comment">// 十进制</span></span><br><span class="line"><span class="number">0213</span>       <span class="comment">// 八进制</span></span><br><span class="line"><span class="number">0x4b</span>/<span class="number">0X4b</span> <span class="comment">// 十六进制</span></span><br><span class="line"><span class="number">30</span>        <span class="comment">// 整数</span></span><br><span class="line"><span class="number">30u</span>/<span class="number">30U</span>   <span class="comment">// 无符号整数</span></span><br><span class="line"><span class="number">30l</span>/<span class="number">30L</span>  <span class="comment">// 长整数</span></span><br><span class="line"><span class="number">30ul</span>     <span class="comment">// 长无符号整数</span></span><br></pre></td></tr></table></figure><ul><li><strong>浮点常量</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.13</span> <span class="comment">//float</span></span><br><span class="line"><span class="number">3.12e2</span> <span class="comment">//科学计数法</span></span><br><span class="line"><span class="number">3.14f</span> <span class="comment">//double</span></span><br></pre></td></tr></table></figure><ul><li><strong>字符常量</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="string">&#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><strong>字符串常量</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;cyfwlp&quot;</span></span><br><span class="line"><span class="string">&quot;cyf \</span></span><br><span class="line"><span class="string">wlp&quot;</span> <span class="comment">// \表示换行</span></span><br></pre></td></tr></table></figure><blockquote><p>字符串常量会存储在<strong>全局区</strong>的<strong>文字常量区</strong></p></blockquote><h3 id="2-1、常量的定义"><a href="#2-1、常量的定义" class="headerlink" title="2.1、常量的定义"></a>2.1、常量的定义</h3><p>一般使用<strong>大写+下划线</strong>定义常量</p><ul><li><p>使用#define 预处理器 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 常量名 常量值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br></pre></td></tr></table></figure></li><li><p>使用const关键字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> 数据类型 常量名 = 常量值</span><br><span class="line">    </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14</span></span><br></pre></td></tr></table></figure></li></ul><p>区别：</p><ol><li><p>const带类型，define不带类型</p></li><li><p>const在编译，运行时才起作用，define在编译的预处理阶段起作用</p></li><li><p>define只是<strong>简单的替换</strong>，没有类型检查，简单的字符串替换会导致<strong>边界效应</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> A 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B A+3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C A/B*3 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//分析</span></span><br><span class="line">    <span class="comment">//define就是简单的替换</span></span><br><span class="line">    <span class="comment">//C = A/A+3*3 = 10 </span></span><br><span class="line">    <span class="comment">//而不是预想的0.75</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%d&quot;</span>,C);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>const可以进行调试，而define不行，预编译阶段以及替换，调试的时候就没有了</p></li><li><p>const不能重复定义，而define可以通过undef取消某个符号的定义，再重新定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> PI</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.15</span></span><br></pre></td></tr></table></figure></li><li><p>define还可以配合#ifdef,#ifndef,#endif 来使用，使代码更加灵活。比如通过#define来启动或关闭调试信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define DEBUG</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ok,调试信息&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello，另外的信息&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h2><h3 id="3-1、算数运算符"><a href="#3-1、算数运算符" class="headerlink" title="3.1、算数运算符"></a>3.1、算数运算符</h3><blockquote><p>+ - * &#x2F; % ++ –</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> d1 = <span class="number">10</span>/<span class="number">4</span> = <span class="number">2</span>;</span><br><span class="line"><span class="type">double</span> d2 = <span class="number">10.0</span>/<span class="number">4</span> = <span class="number">2.500000</span>;</span><br><span class="line"><span class="type">double</span> d2 = <span class="number">10</span>/<span class="number">4.0</span> = <span class="number">2.500000</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> res1 = <span class="number">10</span>%<span class="number">3</span>  = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> res2 = <span class="number">-10</span>%<span class="number">3</span> = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> res3 = <span class="number">10</span>%<span class="number">-3</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取模运算底层： a%b = a - a/b * b</span></span><br></pre></td></tr></table></figure><blockquote><p>取模可以理解为限制范围防止溢出 %x就是把范围限制在(0,x)</p><p>如小时候使用的闹钟需要从九点调到六点，有两种方法：<br>1、9 - 3 &#x3D; 6 （逆时针转三个小时）<br>2、(9 + 9) % 12 &#x3D; 6 (顺时针转九个小时)</p></blockquote><blockquote><p>% 要求操作数为整数</p></blockquote><p><strong>i++ 与 ++i</strong></p><blockquote><p>i++ 先使用i的值，再i的值++。<br>++i i的值先++，再使用i的值。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> j = i++;</span><br><span class="line"><span class="comment">//等阶：</span></span><br><span class="line"><span class="comment">// int j = i; i = i + 1;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;j = %d,i = %d\n&quot;</span>,j,i); <span class="comment">// 10,11</span></span><br><span class="line"><span class="type">int</span> k = ++i;</span><br><span class="line"><span class="comment">//等阶：</span></span><br><span class="line"><span class="comment">// i = i + 1 ; int k = i + 1;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;k = %d,i = %d\n&quot;</span>,k,i); <span class="comment">// 12,12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//独立使用是等阶的</span></span><br><span class="line">k++;</span><br><span class="line">++k;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;k = %d&quot;</span>,k); <span class="comment">//14</span></span><br></pre></td></tr></table></figure><h3 id="3-2、关系运算符"><a href="#3-2、关系运算符" class="headerlink" title="3.2、关系运算符"></a>3.2、关系运算符</h3><table><thead><tr><th>算数运算符</th><th>优先级</th></tr></thead><tbody><tr><td>&gt;   &lt;   &gt;&#x3D;   &lt;&#x3D;</td><td>1</td></tr><tr><td>&#x3D;&#x3D;   !&#x3D;</td><td>2</td></tr></tbody></table><p>false:0</p><p>true:<strong>非零</strong>，默认1</p><blockquote><p>a &#x3D;&#x3D; b &lt; c    等价于  a &#x3D;&#x3D; (b &lt; c)</p></blockquote><h3 id="3-3、逻辑运算符"><a href="#3-3、逻辑运算符" class="headerlink" title="3.3、逻辑运算符"></a>3.3、逻辑运算符</h3><p>短路现象：</p><p>&amp;&amp; 第一个条件为false，后面的条件不再判断 （可以用来避免空指针异常）</p><p>|| 第一个条件为true，后面的条件不再判断</p><h3 id="3-4、赋值运算符"><a href="#3-4、赋值运算符" class="headerlink" title="3.4、赋值运算符"></a>3.4、赋值运算符</h3><p>赋值运算符的顺序为从右到左</p><h3 id="3-5、位运算符"><a href="#3-5、位运算符" class="headerlink" title="3.5、位运算符"></a>3.5、位运算符</h3><h4 id="1、进制转换"><a href="#1、进制转换" class="headerlink" title="1、进制转换"></a>1、进制转换</h4><blockquote><p>我的总结：n进制转2进制，就用模n取余法</p><p>n进制转十进制：n^0 + n^1 + … + n^m</p></blockquote><p><strong>1.1、其他进制转十进制</strong></p><p>1011 &#x3D; 1 * 2^0 + 1 *  2^1 + 0 * 2^2 + 1 * 2^3 &#x3D; 1 + 2 + 8 &#x3D; 11 (我的做法：记住这个：256 128 64 32 16 8 4 2 1，然后对应二进制位，1的话就加，0就不加，得到结果就是十进制)</p><p>0123 &#x3D; 3 * 8^0 + 2 * 8^1  + 1 * 8^2 + 0 * 8^3 &#x3D; 83</p><p>0X34A &#x3D; A(10) * 16^0 + 4 * 16^1 + 3 * 16^2 &#x3D; 10 + 64 + 768 &#x3D; 842</p><p><strong>1.2、十进制转其他进制</strong></p><p>十进制转二进制：模2取余</p><p>八进制转二进制：模8取余</p><p>十六进制转二进制：模16取余</p><p> <strong>1.3、二进制转其他进制</strong></p><p>二进制转八进制：三位一组转为十进制再拼接</p><p>二进制转十六进制：四位一组转十进制再拼接</p><p><strong>1.4、其他进制转二进制</strong></p><p>八进制转二进制：每一位转为对应的三位的二进制数</p><p>0237 &#x3D;&gt; (000 0)10 011 111</p><p>十六进制转二进制：每一位转为对应的四位的二进制数</p><p>0x23B &#x3D;&gt; (00)10 0011 1011</p><h4 id="2、位运算"><a href="#2、位运算" class="headerlink" title="2、位运算"></a>2、位运算</h4><p><strong>原码，反码，补码：</strong></p><ol><li>二进制的最高位是符号位，0表示正数，1表示负数</li><li>正数的原码，反码，补码都一样</li><li>负数：<br>反码 &#x3D; 原码取反（符号位不变）<br>补码 &#x3D; 反码 + 1</li><li>0的反码，补码都是0</li><li>计算机是按照<strong>反码</strong>运算的</li></ol><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与 (1,x -&gt; 1)</td></tr><tr><td>|</td><td>按位或 (0,x -&gt; 0)</td></tr><tr><td>^</td><td>按位异或（1,0 -&gt; 1）</td></tr><tr><td>~</td><td>按位取反</td></tr><tr><td>&lt;&lt;</td><td>左移 （左边丢弃，右边补0）</td></tr><tr><td>&gt;&gt;</td><td>右移  （正数左补0，负数左补1，右边丢弃）</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移（左边补0，右边丢弃）</td></tr></tbody></table><blockquote><p>正数左补0，负数左补1是保证正数右移完还是正数，负数右移完还是负数</p><p>&lt;&lt;1 相当于 *2</p><p>&gt;&gt;1 相当于 &#x2F;2</p></blockquote><p>真值表</p><table><thead><tr><th>A</th><th>B</th><th>A&amp;B</th><th>A|B</th><th>A^B</th><th>~A</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td></tr></tbody></table><h3 id="3-6、三元运算符"><a href="#3-6、三元运算符" class="headerlink" title="3.6、三元运算符"></a>3.6、三元运算符</h3><p>if(条件)?表达式1：表达式2</p><p>细节：表达式1和表法式2要为可以赋给接收变量的类型（或者可以自动转换），否则可能会有精度损失</p><hr><h2 id="四、标识符"><a href="#四、标识符" class="headerlink" title="四、标识符"></a>四、标识符</h2><p>变量，函数命名：数字，字母，_和$，数字不能打头</p><blockquote><p>可以用$符吗？</p><p>在我的编译器里用来通过编译且正确执行。</p></blockquote><hr><h1 id="枚举、函数、static、常用系统函数"><a href="#枚举、函数、static、常用系统函数" class="headerlink" title="枚举、函数、static、常用系统函数"></a>枚举、函数、static、常用系统函数</h1><h2 id="一、程序流程控制"><a href="#一、程序流程控制" class="headerlink" title="一、程序流程控制"></a>一、程序流程控制</h2><h3 id="1-1、顺序控制"><a href="#1-1、顺序控制" class="headerlink" title="1.1、顺序控制"></a>1.1、顺序控制</h3><p>略</p><h3 id="1-2、选择控制"><a href="#1-2、选择控制" class="headerlink" title="1.2、选择控制"></a>1.2、选择控制</h3><p><strong>1、if</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">   ...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、switch</strong></p><p>表达式需为整型（包括字符型）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">switch (表达式) &#123;</span><br><span class="line">    case 1:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">    case 2:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">    case 3:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3、循环控制"><a href="#1-3、循环控制" class="headerlink" title="1.3、循环控制"></a>1.3、循环控制</h3><p><strong>1、for循环</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、while循环</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、do-while循环</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int i = 0;</span><br><span class="line">do &#123;</span><br><span class="line">    printf(&quot;%d&quot;,i);</span><br><span class="line">    ++i;</span><br><span class="line">&#125; while (i &lt; 5);</span><br></pre></td></tr></table></figure><p><strong>4、多重循环</strong></p><p>break 和 continue</p><blockquote><p>break 退出整个循环<br>continue 退出当前轮循环，开始下一轮循环</p></blockquote><p><strong>5、goto语句</strong></p><p>所有语言中都不主张使用，造成程序流程混乱</p><hr><h2 id="二、枚举"><a href="#二、枚举" class="headerlink" title="二、枚举"></a>二、枚举</h2><ol><li>枚举是一种<strong>构造数据类型</strong>，只有几个有限的特定数据时使用</li><li>enum (enumeration)</li></ol><p>快速入门:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span></span><br><span class="line">    MON = <span class="number">1</span>,</span><br><span class="line">    TUE = <span class="number">2</span>,</span><br><span class="line">    WED = <span class="number">3</span>,</span><br><span class="line">    THU = <span class="number">4</span>,</span><br><span class="line">    FRI = <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">day</span>;</span></span><br><span class="line">day = WED;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,day);</span><br></pre></td></tr></table></figure><h3 id="2-1、枚举的遍历"><a href="#2-1、枚举的遍历" class="headerlink" title="2.1、枚举的遍历"></a>2.1、枚举的遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span></span><br><span class="line">    MON = <span class="number">1</span>,TUE,WED,THU,FRI,SAT,SUN <span class="comment">//没有赋值，就会按顺序赋值</span></span><br><span class="line">&#125; day;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( day = MON; day &lt;= SUN ; ++day) &#123; <span class="comment">//要求枚举元素连续赋值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、switch使用枚举"><a href="#2-2、switch使用枚举" class="headerlink" title="2.2、switch使用枚举"></a>2.2、switch使用枚举</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span></span><br><span class="line">    MON = <span class="number">1</span>,TUE,WED,THU,FRI,SAT,SUN </span><br><span class="line">&#125; day;</span><br><span class="line"></span><br><span class="line">day = WED;</span><br><span class="line"><span class="keyword">switch</span> (day)&#123;</span><br><span class="line">    <span class="keyword">case</span> MON:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,day);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WED:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,day);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> THU:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,day);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>第一个枚举类型的默认值为0，然后按顺序赋值（前一个+1）</p></li><li><p>定义枚举类型同时定义枚举变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span></span><br><span class="line">    MON = <span class="number">1</span>,TUE,WED,THU,FRI,SAT,SUN </span><br><span class="line">&#125; day ;</span><br></pre></td></tr></table></figure></li><li><p>先定义枚举类型再定义枚举变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span></span><br><span class="line">    MON = <span class="number">1</span>,TUE,WED,THU,FRI,SAT,SUN </span><br><span class="line">&#125; ;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">day</span>;</span></span><br></pre></td></tr></table></figure></li><li><p>省略枚举名的定义（枚举变量只有一个）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    MON = <span class="number">1</span>,TUE,WED,THU,FRI,SAT,SUN </span><br><span class="line">&#125; day ;</span><br></pre></td></tr></table></figure></li></ol><p>很像结构体</p><hr><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><ul><li>完成某一功能的程序指令（语句）的集合</li><li>c语言中函数分为自定义函数、系统函数</li></ul><h3 id="3-1、头文件"><a href="#3-1、头文件" class="headerlink" title="3.1、头文件"></a>3.1、头文件</h3><p>在一个文件中调用另一个文件中的函数 &#x3D;&gt; 头文件</p><ul><li>拓展名为.h的文件，包含了c函数的<strong>定义和声明</strong>，被多个源文件引用共享</li><li>#include 文件包含命令 ，用来引入头文件 ，#include 属于<strong>预处理指令</strong></li><li>#include 处理的过程就是<strong>将头文件的内容插入到该命令所在的位置</strong>，从而把头文件和源文件连接成一个文件（等同于<strong>复制粘贴</strong>）</li><li>建议把所有的<strong>常量，宏，系统全局变量和函数原型</strong>写在头文件中，需要时引用</li></ul><p>快速入门：</p><p>function.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myfun.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>myfun.h:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>myfun.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> <span class="comment">//系统函数 &lt;&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myfun.h&quot;</span> <span class="comment">//自定义函数 &quot;&quot;</span></span></span><br><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Notes:</p><ol><li>引用头文件相当于<strong>复制</strong></li><li>源文件的名字可以和头文件不同</li><li>&lt;&gt; 引用系统头文件 （也可以引用自定义头文件）<br>“ ” 引用自定义头文件</li><li>引用多次和引用一次作用一样，代码层面有<strong>防止重复引入机制</strong></li><li>头文件中只能包含变量和函数的声明，<strong>不能包含定义</strong></li></ol></blockquote><h3 id="3-2、函数调用机制"><a href="#3-2、函数调用机制" class="headerlink" title="3.2、函数调用机制"></a>3.2、函数调用机制</h3><p><img src="https://i.loli.net/2021/02/04/gToU1vdwXsI598i.png"></p><h3 id="3-3、函数递归调用"><a href="#3-3、函数递归调用" class="headerlink" title="3.3、函数递归调用"></a>3.3、函数递归调用</h3><p>在函数体内又调用了自身</p><p><img src="https://i.loli.net/2021/02/04/Fycmk8gJBia1nvS.png"></p><h3 id="3-4、按值传递与按指针传递"><a href="#3-4、按值传递与按指针传递" class="headerlink" title="3.4、按值传递与按指针传递"></a>3.4、按值传递与按指针传递</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">f3</span><span class="params">(<span class="type">int</span> *p)</span> &#123;</span><br><span class="line">    (*p)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">6</span>;</span><br><span class="line">    f2(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n);</span><br><span class="line">    f3(&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>默认按指针传递：指针和数组</strong></p><h3 id="3-5、c语言支持可变参数"><a href="#3-5、c语言支持可变参数" class="headerlink" title="3.5、c语言支持可变参数"></a>3.5、c语言支持可变参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// num表示参数个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fun</span> <span class="params">(<span class="type">int</span> num,...)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、变量的作用域"><a href="#四、变量的作用域" class="headerlink" title="四、变量的作用域"></a>四、变量的作用域</h2><ol><li>函数内部声明&#x2F;定义的局部变量，作用域仅限函数内部</li><li>代码块声明&#x2F;定义的局部变量，作用域代码块</li><li>局部变量和全局变量重名，优先使用局部变量</li><li>函数外部定义即为全局变量（通常放在头文件中）</li></ol><p><strong>初始化问题：</strong></p><ul><li><p>局部变量需要初始化后使用，否则可能异常退出</p></li><li><p><strong>全局变量系统自动初始化</strong></p><table><thead><tr><th>数据类型</th><th>默认化初始值</th></tr></thead><tbody><tr><td>int</td><td>0</td></tr><tr><td>char</td><td>‘\0’</td></tr><tr><td>float</td><td>0.0</td></tr><tr><td>double</td><td>0.0</td></tr><tr><td>pointer 指针</td><td>null</td></tr></tbody></table></li></ul><blockquote><p>Notes</p><ol><li>全集变量（Global Variable）保存在内存的全局存储区（Global）中，占用静态的存储单元，它的作用域是整个程序，也就是所有的代码文件</li><li>局部变量（Local Variable）保存在栈(Stack)中，函数被调用时候才分配存储单元</li><li>C语言规定，只能从小的作用域向大额作用去寻找变量，而不能反过来，使用更小的作用域的变量</li></ol></blockquote><p><img src="https://i.loli.net/2021/02/06/ns2trHS17LIiDoO.png" alt="C语言内存布局图"></p><h3 id="4-1、static关键字"><a href="#4-1、static关键字" class="headerlink" title="4.1、static关键字"></a>4.1、static关键字</h3><p>static关键字在c语言中比较常用，使用恰当能够大大提高程序的模块化特性，有利于拓展和维护</p><p><strong>局部变量使用static修饰：</strong></p><ol><li>称为静态局部变量</li><li>自动初始化</li><li>存储于内存的静态存储区，只会初始一次，即使函数返回，它的值也保持不变</li></ol><p><strong>全局变量使用static修饰：</strong></p><ol><li>普通全局变量对整个工程可见，其他文件可以使用extern外部声明后直接使用，也就是其他文件不能再定义一个相同名字的变量了（否则编译器会认为他们是一个变量），静态全局变量仅对当前文件可见，其他文件不可访问。<br><strong>报错：</strong><br>CMakeFiles\day01.dir&#x2F;objects.a(static.c.obj):G:&#x2F;clion_project&#x2F;basic&#x2F;day01&#x2F;static.c:9: multiple definition of &#96;n’<br>CMakeFiles\day01.dir&#x2F;objects.a(function.c.obj):G:&#x2F;clion_project&#x2F;basic&#x2F;day01&#x2F;head&#x2F;function.c:39: first defined here<br><strong>若要使用：</strong><br>extern int n; </li><li>定义不需要与其他文件共享的全局变量时，加上static关键字能够有效的降低程序之间的耦合，避免不同变量的冲突，且不会误用</li></ol><p><strong>函数使用static:</strong></p><ol><li>非静态函数可以在另一个文件中通过extern引用</li><li>静态函数只能在声明它的文件中可见，其他文件不能引用该函数</li></ol><hr><h2 id="五、常用系统函数"><a href="#五、常用系统函数" class="headerlink" title="五、常用系统函数"></a>五、常用系统函数</h2><h3 id="5-1、字符串常用的系统函数"><a href="#5-1、字符串常用的系统函数" class="headerlink" title="5.1、字符串常用的系统函数"></a>5.1、字符串常用的系统函数</h3><p>头文件：&lt;string.h&gt;</p><table><thead><tr><th>功能</th><th>函数</th><th>备注</th></tr></thead><tbody><tr><td><strong>得到字符串长度</strong></td><td>size_t strlen(const char *str)</td><td></td></tr><tr><td><strong>拷贝字符串</strong></td><td>char *strcpy(char *dest,const char *src)</td><td>src 指向的字符串复制到dest</td></tr><tr><td><strong>连接字符串</strong></td><td>char *strcat(char *dest,const char *src)</td><td>src 指向的字符串复制到dest</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> src[<span class="number">50</span>],dest[<span class="number">50</span>];</span><br><span class="line"><span class="type">char</span> *str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str.len = %llu\n&quot;</span>,<span class="built_in">strlen</span>(str));</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(src,<span class="string">&quot;cyf&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(dest,<span class="string">&quot;wlp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;src = %s\n&quot;</span>,src);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;dest = %s\n&quot;</span>,dest);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcat</span>(dest,src);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;dest = %s\n&quot;</span>,dest);</span><br></pre></td></tr></table></figure><h3 id="5-2、日期常用的系统函数"><a href="#5-2、日期常用的系统函数" class="headerlink" title="5.2、日期常用的系统函数"></a>5.2、日期常用的系统函数</h3><p>头文件：&lt;time.h&gt;</p><table><thead><tr><th>功能</th><th>函数</th><th>备注</th></tr></thead><tbody><tr><td><strong>获取当前时间</strong></td><td>char *ctime(const time_t *timer)</td><td>返回一个表示当前时间的字符串，当前时间是基于参数timer</td></tr><tr><td><strong>编写一段代码来统计函数test执行的时间</strong></td><td>double difftime(time_t time1,time_t time2)</td><td>time1 - time2</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">time_t</span> curtime; <span class="comment">// time_t 结构体</span></span><br><span class="line">time(&amp;curtime); <span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前时间 = %s&quot;</span>,ctime(&amp;curtime));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">time_t</span> start,end;</span><br><span class="line"><span class="type">double</span> diff;</span><br><span class="line">time(&amp;start);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;程序启动时间：%s\n&quot;</span>,ctime(&amp;start));</span><br><span class="line">test();</span><br><span class="line">time(&amp;end);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;程序结束时间：%s\n&quot;</span>,ctime(&amp;end));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">diff = difftime(end,start);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,diff);</span><br></pre></td></tr></table></figure><h3 id="5-3、数学常用的系统函数"><a href="#5-3、数学常用的系统函数" class="headerlink" title="5.3、数学常用的系统函数"></a>5.3、数学常用的系统函数</h3><table><thead><tr><th>功能</th><th>函数</th><th>备注</th></tr></thead><tbody><tr><td>返回e的x次幂值</td><td>double exp(double x)</td><td></td></tr><tr><td>返回x的自然对数（基数为e）</td><td>double log(double x)</td><td></td></tr><tr><td>返回x的y次幂</td><td>double power(double x,double y)</td><td></td></tr><tr><td>返回x的平方根</td><td>double sqrt(double x)</td><td></td></tr><tr><td>返回x的绝对值</td><td>double fabs(double x)</td><td></td></tr></tbody></table><hr><h1 id="类型转换、数组"><a href="#类型转换、数组" class="headerlink" title="类型转换、数组"></a>类型转换、数组</h1><h2 id="一、基本数据类型和字符串类型的转换"><a href="#一、基本数据类型和字符串类型的转换" class="headerlink" title="一、基本数据类型和字符串类型的转换"></a>一、基本数据类型和字符串类型的转换</h2><h3 id="1-1、基本数据类型-gt-字符串类型"><a href="#1-1、基本数据类型-gt-字符串类型" class="headerlink" title="1.1、基本数据类型 -&gt; 字符串类型"></a>1.1、基本数据类型 -&gt; 字符串类型</h3><p><strong>sprintf函数：</strong></p><p>sprintf函数打印到字符串中，相似printf函数，在其他数据类型转字符串时应用广泛</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(str1,<span class="string">&quot;%d %d&quot;</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(str1,<span class="string">&quot;%8.2f&quot;</span>,<span class="number">3.15</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str1);</span><br></pre></td></tr></table></figure><h3 id="1-2、字符串类型-gt-基本数据类型"><a href="#1-2、字符串类型-gt-基本数据类型" class="headerlink" title="1.2、字符串类型 -&gt; 基本数据类型"></a>1.2、字符串类型 -&gt; 基本数据类型</h3><p><strong>通过 &lt;stdlib.h&gt; 调用 atoi atof 即可</strong></p><p><strong>如果格式不正确，会默认转为0或0.0</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[<span class="number">10</span>] = <span class="string">&quot;1234567&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[<span class="number">10</span>] = <span class="string">&quot;12.67423&quot;</span>;</span><br><span class="line"><span class="type">char</span> str3[<span class="number">10</span>] = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="type">char</span> str4[<span class="number">10</span>] = <span class="string">&quot;111&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num1 = atoi(str1);</span><br><span class="line"><span class="type">short</span> s1 = atoi(str4);</span><br><span class="line"><span class="type">double</span> d = atof(str2);</span><br><span class="line"><span class="type">char</span> c = str3[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num1 = %d,s1=%d,d=%f,c=%c&quot;</span>,num1,s1,d,c);</span><br></pre></td></tr></table></figure><hr><h2 id="二、预处理命令和宏定义"><a href="#二、预处理命令和宏定义" class="headerlink" title="二、预处理命令和宏定义"></a>二、预处理命令和宏定义</h2><h3 id="2-1、预处理命令基本介绍"><a href="#2-1、预处理命令基本介绍" class="headerlink" title="2.1、预处理命令基本介绍"></a>2.1、预处理命令基本介绍</h3><ol><li><strong>以#开头的命令</strong>称为预处理</li><li>编译之前对源文件进行简单加工的过程</li><li>预处理是C语言的一个重要功能，由<strong>预处理程序</strong>完成，当一个源文件进行编译时，系统自动调用预处理程序对源程序中的预处理部分作处理，处理后自动进行编译</li><li>C语言提供了多种预处理功能，如<strong>宏定义、文件包含，条件编译…</strong></li></ol><blockquote><p>开发一个C语言程序，让它暂停五秒后再输出“cyfwlp”，并且要求跨平台，在Windows和linux下都能运行</p><p>提示：</p><ol><li>Windows 暂停函数的原型 void Slepp(DWORD dwMillsecounds)，参数的单位是毫秒，位于&lt;windows.h&gt;头文件</li><li>linux 暂停函数 unsigned int sleep (unsigned int secound)，参数的单位值秒位于&lt;unistd.h&gt;</li><li>#if #elif #endif 都是预处理命令，它们都是在编译前由预处理程序来执行的</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> _linux_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __WIN64</span></span><br><span class="line">    Sleep(<span class="number">5000</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> _linux_</span></span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、宏定义"><a href="#2-2、宏定义" class="headerlink" title="2.2、宏定义"></a>2.2、宏定义</h3><p>#define叫做宏定义命令，用一个标识符标识一个<strong>字符串</strong>，源文件出现标识符进行<strong>简单的替换</strong></p><p><strong>宏定义的形式：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 宏名 字符串</span></span><br></pre></td></tr></table></figure><ol><li>宏名命名与变量相同；字符串可以是数字，表法式，if语句，函数等</li><li>程序中反复使用的表达式就可以使用宏定义</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M (n*n+3*n)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    sum = <span class="number">3</span> * M + <span class="number">4</span> * M + <span class="number">5</span> * M;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %d&quot;</span>,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Notes</p><ol><li><strong>预处理程序</strong>对表达式不作任何检查，若有错误，只能在编译已被宏展开的的源程序时发现</li><li>宏定义不需要加；（若加了会把;也一起替换）</li><li>作用域为源程序结束，终止可以使用#undef命令</li><li>习惯使用大写（也可以使用小写）</li><li>可以使用宏定义表示数据类型，书写方便<br>#define UINT unsigned int</li><li>与typedef区别：宏定义只是简单的字符串代替，而typedef是在编译阶段由编译器处理的，给原有的数据类型起新的名字，作为一种新的数据类型</li></ol></blockquote><h3 id="2-3、带参数的宏定义"><a href="#2-3、带参数的宏定义" class="headerlink" title="2.3、带参数的宏定义"></a>2.3、带参数的宏定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 宏名 （形式参数） 字符串 <span class="comment">//定义</span></span></span><br><span class="line"></span><br><span class="line">宏名（实际参数）<span class="comment">//使用</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M (n*n+3*n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) a&gt;b?a:b</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,MAX(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>形式参数之间可以出现空格，但是宏名与形式参数之间不能有空格 </p></blockquote><h3 id="2-4、C语言预处理命令总结"><a href="#2-4、C语言预处理命令总结" class="headerlink" title="2.4、C语言预处理命令总结"></a>2.4、C语言预处理命令总结</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>#</td><td>空指令，没有任何效果</td></tr><tr><td>#include</td><td>引入头文件</td></tr><tr><td>#define</td><td>宏定义</td></tr><tr><td>#undef</td><td>取消宏定义</td></tr><tr><td>#if</td><td>如果条件为真，则编译</td></tr><tr><td>#ifdef</td><td>如果宏已经定义，则编译</td></tr><tr><td>#ifndef</td><td>如果宏没有定义，则编译</td></tr><tr><td>#elif</td><td>else if 为真则编译</td></tr><tr><td>#endif</td><td>结束 if</td></tr></tbody></table><hr><h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><h3 id="3-1、数组介绍"><a href="#3-1、数组介绍" class="headerlink" title="3.1、数组介绍"></a>3.1、数组介绍</h3><p>数组可以存放多个同一数据类型的数据，是构造类型，传递是按照引用传递（地址传递）</p><p><strong>快速入门：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> hens[<span class="number">6</span>];</span><br><span class="line">    </span><br><span class="line">    hens[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">    hens[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">    hens[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    hens[<span class="number">3</span>] = <span class="number">9</span>;</span><br><span class="line">    hens[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">    hens[<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> totalWeight = <span class="number">0.0</span>;</span><br><span class="line">    <span class="type">double</span> avgWeight = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arrLen = <span class="keyword">sizeof</span>(hens)/ <span class="keyword">sizeof</span>(<span class="type">int</span>); <span class="comment">//得到数组长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arrLen; ++i) &#123;</span><br><span class="line">        totalWeight += hens[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;totalWeight = %f\n&quot;</span>,totalWeight);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;avgWeight = %f&quot;</span>,totalWeight/arrLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、数组定义和内存布局"><a href="#3-2、数组定义和内存布局" class="headerlink" title="3.2、数组定义和内存布局"></a>3.2、数组定义和内存布局</h3><p><strong>定义和初始化方式</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">3</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><ol><li>数组名就代表数组<strong>首元素的地址</strong>，即a[0]地址</li><li>数组的各个元素在内存中是连续分布的</li></ol><blockquote><p>Notes</p><ol><li>数组一旦定义&#x2F;声明，长度是固定的，不能动态变化</li><li>数组若没有赋值：<br>全局数组默认0<br>非全局数组是机器辣鸡值（系统原来分配给这块内存的值）</li></ol></blockquote><h3 id="3-3、数组按照引用传递"><a href="#3-3、数组按照引用传递" class="headerlink" title="3.3、数组按照引用传递"></a>3.3、数组按照引用传递</h3><p><img src="https://i.loli.net/2021/02/09/vDqgiAVNBJCWGaO.png"></p><h3 id="3-4、字符数组与字符串"><a href="#3-4、字符数组与字符串" class="headerlink" title="3.4、字符数组与字符串"></a>3.4、字符数组与字符串</h3><p>用来存放字符的数组称为字符数组，C语言中没有string类型的变量，因此 C语言中 字符数组 &#x3D;&#x3D; 字符串</p><blockquote><p>Notes</p><ol><li><p>在C语言中，字符串实际上是使用null字符（’\0’）终止的一维字符数组。因此，一个以null结尾的字符串，包含了组成字符串的字符</p></li><li><p>‘\0’是ASCII码表中第0个字符，用null表示，称为空字符。该字符既不能显示，也不是控制字符，输出该字符不会有任何效果，它在C语言中仅作为字符串结束标致</p></li><li><p>字符串在内存的布局分析</p><p><img src="https://i.loli.net/2021/02/15/e3X6UjyNGVYRJ8k.png"></p></li><li><p>如果在给某个字符数组赋初值时，赋给的元素个数小于该数组的长度，会自动加’\0’表示字符串结束</p><p>赋给元素的个数等于数组的长度，则不会自动添加’\0’</p></li></ol></blockquote><p><strong>指针指向字符数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* str = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str本身的地址%p，str指向的地址%p\n&quot;</span>,&amp;str,str);</span><br><span class="line">str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str本身的地址%p，str指向的地址%p&quot;</span>,&amp;str,str);</span><br><span class="line"></span><br><span class="line">G:\clion_project\basic\day01\cmake-build-debug\day01.exe</span><br><span class="line">str本身的地址<span class="number">000000000061F</span>E18，str指向的地址<span class="number">0000000000404020</span></span><br><span class="line">str本身的地址<span class="number">000000000061F</span>E18，str指向的地址<span class="number">000000000040404</span>A</span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>Notes:</p><ol><li>如果定义了一个字符数组，那么它有确定的内存地址（即字符数组是一个常量）；而定义了一个字符指针变量，它并未指向某个确定的字符数据，并且可以多次赋值</li><li>printf(“%s”,str)可以输出str指向的字符串</li></ol></blockquote><h3 id="3-5、字符串相关函数"><a href="#3-5、字符串相关函数" class="headerlink" title="3.5、字符串相关函数"></a>3.5、字符串相关函数</h3><table><thead><tr><th>序号</th><th>函数</th><th>目的</th></tr></thead><tbody><tr><td>1</td><td>strcpy(s1,s2)</td><td>复制s2到s1</td></tr><tr><td>2</td><td>strcat(s1,s2)</td><td>连接s1,s2</td></tr><tr><td>3</td><td>strlen(s1)</td><td>返回s1长度</td></tr><tr><td>4</td><td>strcmp(s1,s2)</td><td>如果s1和s2相同，返回0，s1&lt;s2返回小于0，s1&gt;s2返回大于0</td></tr><tr><td>5</td><td>strchr(s1,ch)</td><td>返回一个指针，指向字符串s1中字符ch第一次出现的位置</td></tr><tr><td>6</td><td>strstr(s1,s2)</td><td>返回一个指针，指向字符串s1中字符串s2的第一次出现的位置</td></tr></tbody></table><blockquote><p>Notes:</p><ol><li>‘\0’用于检测和判断字符串是否结束，字符串长度不会统计’\0’</li><li>系统对字符串常量自动加’\0’表示结束，如”cyfwlp”共有6个字符，但是在内存中占7个字节</li><li>如果定义的字符个数比数组长度小，系统会将剩余的元素空间全部填充0</li></ol></blockquote><hr><h2 id="四、排序和查找"><a href="#四、排序和查找" class="headerlink" title="四、排序和查找"></a>四、排序和查找</h2><h3 id="4-1、冒泡排序（bubble-sort）"><a href="#4-1、冒泡排序（bubble-sort）" class="headerlink" title="4.1、冒泡排序（bubble sort）:"></a><strong>4.1、冒泡排序（bubble sort）:</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> t = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">3</span>,<span class="number">9</span>,<span class="number">-1</span>,<span class="number">10</span>,<span class="number">-2</span>,<span class="number">-11</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    bubbleSort(arr,len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; len; ++k) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、二分查找（binary-search）："><a href="#4-2、二分查找（binary-search）：" class="headerlink" title="4.2、二分查找（binary search）："></a>4.2、二分查找（binary search）：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> target,<span class="type">int</span> low,<span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="comment">//未找到 </span></span><br><span class="line">    <span class="keyword">if</span> (low &gt; high) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (target &lt; arr[mid]) &#123;</span><br><span class="line">        binarySearch(arr,target,low,mid<span class="number">-1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; arr[mid]) &#123;</span><br><span class="line">        binarySearch(arr,target,mid + <span class="number">1</span>,high);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target == arr[mid])&#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="type">int</span> index = binarySearch(arr, <span class="number">11</span>, <span class="number">0</span>, len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;index = %d&quot;</span>,index);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、二维数组"><a href="#五、二维数组" class="headerlink" title="五、二维数组"></a>五、二维数组</h2><h3 id="5-1、快速入门"><a href="#5-1、快速入门" class="headerlink" title="5.1、快速入门"></a>5.1、快速入门</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">4</span>][<span class="number">6</span>]; <span class="comment">//未初始化是辣鸡地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line">        a[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>,a[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a的地址%p\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[0]的地址%p\n&quot;</span>,a[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[0][0]的地址为%p\n&quot;</span>,&amp;a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a[%d][%d]的地址%p &quot;</span>,k,i,&amp;a[k][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---输出---</span><br><span class="line">a的地址<span class="number">000000000061F</span>DA0</span><br><span class="line">a[<span class="number">0</span>]的地址<span class="number">000000000061F</span>DA0</span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>]的地址为<span class="number">000000000061F</span>DA0</span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>]的地址<span class="number">000000000061F</span>DA0 a[<span class="number">0</span>][<span class="number">1</span>]的地址<span class="number">000000000061F</span>DA4 a[<span class="number">0</span>][<span class="number">2</span>]的地址<span class="number">000000000061F</span>DA8 a[<span class="number">0</span>][<span class="number">3</span>]的地址<span class="number">000000000061F</span>DAC</span><br><span class="line">a[<span class="number">0</span>][<span class="number">4</span>]的地址<span class="number">000000000061F</span>DB0 a[<span class="number">0</span>][<span class="number">5</span>]的地址<span class="number">000000000061F</span>DB4</span><br><span class="line">a[<span class="number">1</span>][<span class="number">0</span>]的地址<span class="number">000000000061F</span>DB8 a[<span class="number">1</span>][<span class="number">1</span>]的地址<span class="number">000000000061F</span>DBC a[<span class="number">1</span>][<span class="number">2</span>]的地址<span class="number">000000000061F</span>DC0 a[<span class="number">1</span>][<span class="number">3</span>]的地址<span class="number">000000000061F</span>DC4</span><br><span class="line">a[<span class="number">1</span>][<span class="number">4</span>]的地址<span class="number">000000000061F</span>DC8 a[<span class="number">1</span>][<span class="number">5</span>]的地址<span class="number">000000000061F</span>DCC</span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>]的地址<span class="number">000000000061F</span>DD0 a[<span class="number">2</span>][<span class="number">1</span>]的地址<span class="number">000000000061F</span>DD4 a[<span class="number">2</span>][<span class="number">2</span>]的地址<span class="number">000000000061F</span>DD8 a[<span class="number">2</span>][<span class="number">3</span>]的地址<span class="number">000000000061F</span>DDC</span><br><span class="line">a[<span class="number">2</span>][<span class="number">4</span>]的地址<span class="number">000000000061F</span>DE0 a[<span class="number">2</span>][<span class="number">5</span>]的地址<span class="number">000000000061F</span>DE4</span><br><span class="line">a[<span class="number">3</span>][<span class="number">0</span>]的地址<span class="number">000000000061F</span>DE8 a[<span class="number">3</span>][<span class="number">1</span>]的地址<span class="number">000000000061F</span>DEC a[<span class="number">3</span>][<span class="number">2</span>]的地址<span class="number">000000000061F</span>DF0 a[<span class="number">3</span>][<span class="number">3</span>]的地址<span class="number">000000000061F</span>DF4</span><br><span class="line">a[<span class="number">3</span>][<span class="number">4</span>]的地址<span class="number">000000000061F</span>DF8 a[<span class="number">3</span>][<span class="number">5</span>]的地址<span class="number">000000000061F</span>DFC</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/16/JvzS692GpxEPQ7X.png"></p><p><strong>各个元素地址是连续分布的</strong></p><h3 id="5-1、二维数组的遍历"><a href="#5-1、二维数组的遍历" class="headerlink" title="5.1、二维数组的遍历"></a>5.1、二维数组的遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="built_in">map</span>[][<span class="number">3</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算行数和列数的方法</span></span><br><span class="line"><span class="type">int</span> rows = <span class="keyword">sizeof</span>(<span class="built_in">map</span>)/<span class="keyword">sizeof</span>(<span class="built_in">map</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="type">int</span> cols = <span class="keyword">sizeof</span>(<span class="built_in">map</span>[<span class="number">0</span>])/ <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cols; ++j) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>,<span class="built_in">map</span>[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Notes:</p><ol><li>可以只对部分元素赋值，未赋值元素自动取零。</li><li>如果对全部元素赋值，那么第一维的长度可以不给出。</li><li>二维数组可以看作由多个一维数组嵌套而成的；<strong>如果一个一维数组的每个元素又是一个二维数组</strong>，那么他就是二维数组。</li></ol></blockquote><hr><h1 id="debug、指针"><a href="#debug、指针" class="headerlink" title="debug、指针"></a>debug、指针</h1><h2 id="一、断点调试"><a href="#一、断点调试" class="headerlink" title="一、断点调试"></a>一、断点调试</h2><p>开发中诡异错误，断点调试看代码执行过程</p><p><img src="https://i.loli.net/2021/02/17/TNPsBrpVLKoX81x.png"></p><hr><h2 id="二、指针"><a href="#二、指针" class="headerlink" title="二、指针"></a>二、指针</h2><p>至今对于复杂的指针没搞清楚，是真的弱啊</p><h3 id="2-1、指针的算数运算"><a href="#2-1、指针的算数运算" class="headerlink" title="2.1、指针的算数运算"></a>2.1、指针的算数运算</h3><p>指针表示地址，可以进行四种运算 ++,–,+,-</p><p><img src="https://i.loli.net/2021/02/17/OLxbt7hYpw3D5cq.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">G:\clion_project\basic\day01\cmake-build-debug\day01.exe</span><br><span class="line">var[<span class="number">0</span>]的地址=<span class="number">000000000061F</span>E08</span><br><span class="line">vat[<span class="number">0</span>]=<span class="number">10</span></span><br><span class="line">var[<span class="number">1</span>]的地址=<span class="number">000000000061F</span>E0C</span><br><span class="line">vat[<span class="number">1</span>]=<span class="number">100</span></span><br><span class="line">var[<span class="number">2</span>]的地址=<span class="number">000000000061F</span>E10</span><br><span class="line">vat[<span class="number">2</span>]=<span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="2-2、指针的比较"><a href="#2-2、指针的比较" class="headerlink" title="2.2、指针的比较"></a>2.2、指针的比较</h3><p>指针可以使用关系运算符比较</p><p>比较地址是否相同</p><h3 id="2-3、指针数组"><a href="#2-3、指针数组" class="headerlink" title="2.3、指针数组"></a>2.3、指针数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型* 指针数组名[大小]</span><br><span class="line">如：<span class="type">int</span> *ptr[<span class="number">3</span>]</span><br></pre></td></tr></table></figure><ol><li>ptr声明一个指针数组</li><li>由三个整数指针构成，因此，ptr中的每个元素，都是指向int值的指针</li></ol><p><img src="https://i.loli.net/2021/02/17/dR9ub1JkhaE2mev.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *ptr[] = &#123;<span class="string">&quot;三国演义&quot;</span>,<span class="string">&quot;水浒传&quot;</span>,<span class="string">&quot;红楼梦&quot;</span>,<span class="string">&quot;西游记&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,ptr[i]); <span class="comment">//这里不需要加*</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4、二级指针"><a href="#2-4、二级指针" class="headerlink" title="2.4、二级指针"></a>2.4、二级指针</h3><ol><li>一个指向指针的指针变量必须如下声明，即在变量前放置两个<em>号，例如 int ** ptr &#x2F;&#x2F;ptr类型是int</em>*</li><li>当一个目标值被一个指针间接指向到另一个指针时，访问这个值需要两个星号运算符 **ptr</li><li>内存布局图</li></ol><p><img src="https://i.loli.net/2021/02/17/8jkGgBiSTJlsDfu.png"></p><h3 id="2-5、传递指针（地址）给函数"><a href="#2-5、传递指针（地址）给函数" class="headerlink" title="2.5、传递指针（地址）给函数"></a>2.5、传递指针（地址）给函数</h3><p>当函数的形参类型是指针时，若要使用该函数，需要传递指针或者地址或者数组给参数</p><p><strong>传递指针，地址</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span> *p)</span> &#123;</span><br><span class="line">    *p += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> *p = &amp;num;</span><br><span class="line"></span><br><span class="line">    test2(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">    </span><br><span class="line">    test2(&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/17/UvSADLlpnRwg4qP.png"></p><p><strong>传递数组</strong></p><p> <img src="https://i.loli.net/2021/02/17/9QYxTqre4iXS6Rc.png"></p><h3 id="2-6、返回指针的函数"><a href="#2-6、返回指针的函数" class="headerlink" title="2.6、返回指针的函数"></a>2.6、返回指针的函数</h3><p>C语言允许返回值是一个指针（地址），这样的函数称为<strong>指针函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回两个字符串中较长的一个</span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strLong</span><span class="params">(<span class="type">char</span> *str1,<span class="type">char</span> *str2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(str1) &gt; <span class="built_in">strlen</span>(str2)) &#123;</span><br><span class="line">        <span class="keyword">return</span> str1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Notes:</p><ol><li>用指针作为函数返回值时，函数允许后会销毁内部定义的所有局部数据，包括<strong>局部变量、局部数组、形式参数</strong>，函数返回的指针不能指向这些数据</li><li>销毁：<strong>并不是将局部数据所占用的内存全部清0，而是程序放弃对它的使用权，后面的代码可以继续使用这块内存</strong></li><li>C语言不支持在调用函数的时候返回局部变量的地址，如果确有这样的需求，需要将局部变量定义为<strong>static变量(存储在静态区)</strong></li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> n = <span class="number">100</span>; <span class="comment">//n的存储位置在静态存储区</span></span><br><span class="line">    <span class="keyword">return</span> &amp;n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *p = func();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = *p;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p指向的值：%d&quot;</span>,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例：返回一个大小为10的随机数数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        arr[i] = rand();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *p = f1();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7、函数指针（指向函数的指针）"><a href="#2-7、函数指针（指向函数的指针）" class="headerlink" title="2.7、函数指针（指向函数的指针）"></a>2.7、函数指针（指向函数的指针）</h3><ol><li>一个函数总是占用着一段连续的区域，函数名在表达式中有时也会被转换为该函数所在内存区域的首地址，这和数组名非常相似</li><li>把函数的这个首地址（或者入口地址）赋值给一个指针变量，使指针变量指向函数所在的内存区域，然后通过指针变量就可以找到并调用该函数，这种指针就是<strong>函数指针</strong></li></ol><p><strong>函数指针定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">returnType (*pointerName)(param <span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>) returnType为函数返回值类型</span><br><span class="line"> <span class="number">2</span>) pointerName为指针名称</span><br><span class="line"> <span class="number">3</span>) patamList为函数参数列表</span><br><span class="line"> <span class="number">4</span>) 参数列表可以只给出类型，省略参数名称</span><br><span class="line"> <span class="number">5</span>) 注意（）的优先级高于*，第一个括号不能省略，省略就变成指针函数（返回指针的函数）</span><br></pre></td></tr></table></figure><p><strong>用函数指针来实现对函数的调用，返回两个整数中的最大值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回较大的数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> (*pmax)(<span class="type">int</span>,<span class="type">int</span>) = max;<span class="comment">//可以省略参数名</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d&quot;</span>,(*pmax)(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/17/3Xz8GOPc2Jd1l6M.png"></p><h3 id="2-8、回调函数"><a href="#2-8、回调函数" class="headerlink" title="2.8、回调函数"></a>2.8、回调函数</h3><ol><li>函数指针变量可以作为某个函数的参数来使用，回调函数就是一个通过函数指针调用的函数</li><li>简单的讲：回调函数就是由别人函数执行时调用你传入的参数（通过函数指针完成）</li></ol><p>实例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initArray</span><span class="params">(<span class="type">int</span>* <span class="built_in">array</span>, <span class="type">int</span> arraySize, <span class="type">int</span>(*f)())</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arraySize; ++i) &#123;</span><br><span class="line">        <span class="built_in">array</span>[i] = f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取随机值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getRandomValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line">    initArray(arr, <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(<span class="type">int</span>),getRandomValue);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Notes:</p><ol><li>指针变量存放的是地址，从这个角度看指针的本质就是地址</li><li>变量声明时，没有明确的地址赋值，赋为NULL</li><li>赋值为NULL的指针称为空指针，NULL是定义在标准库&lt;stdio.h&gt;中的常量 #define NULL 0</li><li>指针使用一览（见后面内容）</li></ol></blockquote><hr><h1 id="动态内存分配、结构体、共用体"><a href="#动态内存分配、结构体、共用体" class="headerlink" title="动态内存分配、结构体、共用体"></a>动态内存分配、结构体、共用体</h1><h2 id="一、动态内存分配"><a href="#一、动态内存分配" class="headerlink" title="一、动态内存分配"></a>一、动态内存分配</h2><h3 id="1-1、内存布局"><a href="#1-1、内存布局" class="headerlink" title="1.1、内存布局"></a>1.1、内存布局</h3><p>c语言中，不同数据在内存中分配的说明</p><p><img src="https://i.loli.net/2021/02/06/ns2trHS17LIiDoO.png"></p><ol><li>全局变量 – 内存中的静态存储区</li><li>非全局局部变量 – 内存中的动态存储区 – stack栈</li><li>临时使用的数据 – 建立动态内存分配区域，需要随时开辟，不需要时及时释放– heap堆</li><li>根据需要向系统申请所需大小的空间，由于未在声明部分定义其为变量或数组，不能通过变量或数组名来引用这些数据，只能通过指针来（引用）</li></ol><h3 id="1-2、内存动态分配相关函数"><a href="#1-2、内存动态分配相关函数" class="headerlink" title="1.2、内存动态分配相关函数"></a>1.2、内存动态分配相关函数</h3><p><strong>头文件 #include &lt;stdlib.h&gt;</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">malloc</span> <span class="params">(<span class="type">unsigned</span> <span class="type">int</span> size)</span> <span class="comment">// memory allocation</span></span><br><span class="line">-- 作用 ：在内存的动态存储区分配一个长度为size的连续空间</span><br><span class="line">    -- 函数的返回值是所分配的第一个字节的地址，该函数是指针型函数</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">calloc</span> <span class="params">(<span class="type">unsigned</span> n,<span class="type">unsigned</span> size)</span> <span class="comment">// clear allocation</span></span><br><span class="line">    -- 作用：在内存的动态存储区分配n个长度为size的空间，这个空间一般比较大，用于存储一个数组</span><br><span class="line">    -- 为一维数组开辟动态存储空间，n为数组元素个数，每个元素长度为size</span><br><span class="line">    -- 返回起始位置的地址（指针函数）</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span>* p)</span></span><br><span class="line">    -- 作用：释放变量p指向的动态空间</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">realloc</span><span class="params">(<span class="type">void</span>* p,<span class="type">unsigned</span> <span class="type">int</span> size)</span> <span class="comment">// reset allocation</span></span><br><span class="line">    -- 作用：重新分配<span class="built_in">malloc</span>或<span class="built_in">calloc</span>函数获得的动态空间大小，将p指向的动态空间大小改变为size,p的值不变</span><br></pre></td></tr></table></figure><blockquote><p>返回值类型：</p><p>c99标准，返回类型void*为无类型指针，即不指向哪一种具体的数据类型，只表示一个纯地址，不指向任何具体的对象</p><p>当把void指针赋值给不同类型的指针变量（或相反）时，编译器会自动进行转换</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> *p1 = &amp;a;</span><br><span class="line">    <span class="type">char</span> *p2;</span><br><span class="line">    <span class="type">void</span> *p3;</span><br><span class="line"></span><br><span class="line">    p3 = p1;</span><br><span class="line">    p2 = p3;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p3);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/18/oMTrRsUlLDxwqtK.png"></p><blockquote><p>Notes:</p><ol><li>避免分配大量小的内存块，分配堆上的内存有系统开销，分配多个小的内存要比分配几个大的内存块开销大</li><li>仅在需要时分配内存，使用完及时释放，否则可能出现<strong>内存泄露</strong></li><li>在释放内存前，确保不会无意中<strong>覆盖堆上已经分配的内存地址</strong>，否则程序就会出现<strong>内存泄露</strong>。在循环分配内存时，要特别小心</li></ol></blockquote><h3 id="1-3、指针使用一览"><a href="#1-3、指针使用一览" class="headerlink" title="1.3、指针使用一览"></a>1.3、指针使用一览</h3><table><thead><tr><th>变量定义</th><th>类型表示</th><th>含义</th></tr></thead><tbody><tr><td>int i</td><td>int</td><td>定义整型变量</td></tr><tr><td>int *p</td><td>int *</td><td>定义整型指针变量</td></tr><tr><td>int a[5]</td><td>int[5]</td><td>定义整数数组</td></tr><tr><td>int *p[4]</td><td>int*[4]</td><td><strong>指针数组</strong>，它由四个指向整型数据的指针组成</td></tr><tr><td>int (*p)[4]</td><td>int(*)[4]</td><td><strong>数组指针，行指针</strong>，p为指向包含4个元素的一维数组的指针变量</td></tr><tr><td>int f()</td><td>int()</td><td>函数</td></tr><tr><td>int *p()</td><td>int *()</td><td><strong>指针函数</strong> （返回值为指针的函数）</td></tr><tr><td>int (*p)()</td><td>int(*)()</td><td><strong>函数指针</strong> （指向函数地址的指针）</td></tr><tr><td>int **p</td><td>int**</td><td>二级指针</td></tr><tr><td>void *p</td><td>void*</td><td>无类型指针（c99以上可以自动转换）</td></tr></tbody></table><hr><h2 id="二、结构体"><a href="#二、结构体" class="headerlink" title="二、结构体"></a>二、结构体</h2><h3 id="2-1、快速入门"><a href="#2-1、快速入门" class="headerlink" title="2.1、快速入门"></a>2.1、快速入门</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span>&#123;</span> <span class="comment">//结构体的名字，Cat就是自己构造的数据类型</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Cat</span> <span class="title">cat1</span>;</span></span><br><span class="line">    cat1.name = <span class="string">&quot;小白&quot;</span>;</span><br><span class="line">    cat1.age = <span class="number">3</span>;</span><br><span class="line">    cat1.color = <span class="string">&quot;白色&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s,%d,%s&quot;</span>,cat1.name,cat1.age,cat1.color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、内存布局"><a href="#2-3、内存布局" class="headerlink" title="2.3、内存布局"></a>2.3、内存布局</h3><p><img src="https://i.loli.net/2021/02/18/d6U7qS4hgEcZVYA.png"></p><h3 id="2-3、结构体声明"><a href="#2-3、结构体声明" class="headerlink" title="2.3、结构体声明"></a>2.3、结构体声明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名称 &#123;</span> <span class="comment">//结构体名称首字母大写</span></span><br><span class="line">    成员列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>成员变量需赋值后使用</li><li>成员变量可以是基础类型，也可以是指针，结构体</li></ol><h3 id="2-4、创建结构体和结构体变量"><a href="#2-4、创建结构体和结构体变量" class="headerlink" title="2.4、创建结构体和结构体变量"></a>2.4、创建结构体和结构体变量</h3><p><strong>1、先定义结构体，再创建结构体变量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span>&#123;</span> <span class="comment">//结构体的名字，Cat就是自己构造的数据类型</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span> <span class="title">cat1</span>;</span></span><br></pre></td></tr></table></figure><p><strong>2、定义结构体的同时，定义结构体变量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span>&#123;</span> <span class="comment">//结构体的名字，Cat就是自己构造的数据类型</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125;cat1, cat2;</span><br></pre></td></tr></table></figure><p><strong>3、匿名结构体（只需要两个变量，后面不再使用结构体数据类型）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> <span class="comment">//结构体的名字，Cat就是自己构造的数据类型</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125;cat1, cat2;</span><br></pre></td></tr></table></figure><h3 id="2-5、成员的获取和赋值"><a href="#2-5、成员的获取和赋值" class="headerlink" title="2.5、成员的获取和赋值"></a>2.5、成员的获取和赋值</h3><p><strong>结构体变量名.成员名</strong>  获取进行赋值和获取</p><p><strong>定义时赋值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> </span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125;cat1 = &#123;<span class="string">&quot;小白&quot;</span>,<span class="number">3</span>,<span class="string">&quot;白色&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dog</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">say</span><span class="params">(<span class="keyword">struct</span> Dog dog)</span> &#123; <span class="comment">//默认按值传递，也可以传递指针</span></span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> info[<span class="number">50</span>];</span><br><span class="line">    dog.name = <span class="string">&quot;小花&quot;</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(info,<span class="string">&quot;name=%s,age=%d,weight=%f&quot;</span>,dog.name,dog.age,dog.weight);</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Dog</span> <span class="title">dog</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* info = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    dog.name = <span class="string">&quot;小黄&quot;</span>;</span><br><span class="line">    dog.age = <span class="number">18</span>;</span><br><span class="line">    dog.weight = <span class="number">12.12</span>;</span><br><span class="line"></span><br><span class="line">    info = say(dog);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,dog.name);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、共用体"><a href="#三、共用体" class="headerlink" title="三、共用体"></a>三、共用体</h2><p>1）<strong>共用体（Union）</strong>（也称为联合或联合体）属于构造类型，它可以包含多个类型不同的成员。和结构体非常类似，但是也有不同的地方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> 共用体名&#123;</span></span><br><span class="line">    成员列表</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2）结构体和共用体的区别在于：结构体的<strong>各个成员会占用不同的内存，互相之间没有影响</strong>；而共用体的<strong>所有成员占用同一段内存</strong>，修改一个成员变量会影响所有成员</p><h3 id="3-1、快速入门"><a href="#3-1、快速入门" class="headerlink" title="3.1、快速入门"></a>3.1、快速入门</h3><p>1）定义共用体变量的三种方式（和结构体一样）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">data</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">data</span> <span class="title">a</span>;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">data</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">&#125;a,b;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">&#125;a,b;</span><br></pre></td></tr></table></figure><ol start="2"><li>快速入门</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">data</span> &#123;</span> <span class="comment">//三个成员共有数据空间，该空间的大小以占用最大的成员变量为准</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">short</span> f;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">data</span> <span class="title">a</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld,%lld\n&quot;</span>, <span class="keyword">sizeof</span>(a), <span class="keyword">sizeof</span>(<span class="keyword">union</span> data)); <span class="comment">// 4/4</span></span><br><span class="line"></span><br><span class="line">    a.n = <span class="number">0x40</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c,%d\n&quot;</span>,a.n,a.ch,a.f);</span><br><span class="line"></span><br><span class="line">    a.ch = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c,%d\n&quot;</span>,a.n,a.ch,a.f);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---输出</span><br><span class="line"><span class="number">4</span>,<span class="number">4</span></span><br><span class="line"><span class="number">64</span>,@,<span class="number">64</span></span><br><span class="line"><span class="number">57</span>,<span class="number">9</span>,<span class="number">57</span></span><br></pre></td></tr></table></figure><h3 id="3-2、内存布局"><a href="#3-2、内存布局" class="headerlink" title="3.2、内存布局"></a>3.2、内存布局</h3><p><img src="https://i.loli.net/2021/02/20/oavOcURTleVXhdI.png"></p><h3 id="3-3、最佳实践"><a href="#3-3、最佳实践" class="headerlink" title="3.3、最佳实践"></a>3.3、最佳实践</h3><p>学生信息：姓名、编号、性别、职业、分数，<br>教师信息：姓名、编号、性别、职业、教学科目，<br>使用共用体编程完成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TOTAL 2</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> sex; <span class="comment">// f -&gt; 女 ，m -&gt; 男</span></span><br><span class="line">    <span class="type">char</span> profession; <span class="comment">// s-&gt;student ,t-&gt;teacher</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="type">float</span> score;</span><br><span class="line">        <span class="type">char</span> course[<span class="number">20</span>];</span><br><span class="line">    &#125;sc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">persons</span>[<span class="title">TOTAL</span>];</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; TOTAL; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input info：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %c %c&quot;</span>,persons[i].name,&amp;persons[i].num,&amp;persons[i].sex,&amp;persons[i].profession);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (persons[i].profession == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;输入学生成绩&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;persons[i].sc.score);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;输入老师课程&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,persons[i].sc.course);</span><br><span class="line">        &#125;</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nName\t\tNum\t\tSex\t\tProfession\t\tScore/Course\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; TOTAL; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (persons[j].profession == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\t\t%d\t\t%c\t\t%c\t\t%.2f\n&quot;</span>,persons[j].name,persons[j].num,persons[j].sex,</span><br><span class="line">                    persons[j].profession,persons[j].sc.score);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\t\t%d\t\t%c\t\t%c\t\t%s\n&quot;</span>,persons[j].name,persons[j].num,persons[j].sex,</span><br><span class="line">                   persons[j].profession,persons[j].sc.course);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="一、文件"><a href="#一、文件" class="headerlink" title="一、文件"></a>一、文件</h2><h3 id="1-1、文件基本介绍"><a href="#1-1、文件基本介绍" class="headerlink" title="1.1、文件基本介绍"></a>1.1、文件基本介绍</h3><p>文件：数据源（保存数据的地方）（操作系统：一组有意义的信息的集合）</p><blockquote><p>在计算机的存储设备上存储数据的集合</p></blockquote><p>流：数据在数据源（文件）和程序（内存）之间经历的路径</p><p>输入流：数据从数据源（文件）到程序（内存）的路径</p><p>输出流：数据从程序（内存）到数据源（文件）的路径</p><p>标准库：&lt;stdio.h&gt;  <a href="https://www.runoob.com/cprogramming/c-standard-library-stdio-h.html">https://www.runoob.com/cprogramming/c-standard-library-stdio-h.html</a></p><p><strong>文本文件、二进制文件</strong></p><h3 id="1-2、标准文件"><a href="#1-2、标准文件" class="headerlink" title="1.2、标准文件"></a>1.2、标准文件</h3><p>1）<strong>C语言把所有设备都当做文件（linux操作系统）</strong>，所有设备（比如显示器）被处理的方式与文件相同。以下三个文件会在程序执行时自动打开，以便访问键盘和屏幕</p><table><thead><tr><th>标准文件</th><th>文件指针</th><th>设备</th></tr></thead><tbody><tr><td>标准输入</td><td>stdin</td><td>键盘</td></tr><tr><td>标准输出</td><td>stdout</td><td>屏幕</td></tr><tr><td>标准错误</td><td>stderr</td><td>你的屏幕</td></tr></tbody></table><p>2）<strong>文件指针是访问文件的方式</strong>，我们会讲解如何从屏幕读取值以及如何把结果输出到屏幕上</p><p>3）C语言的I&#x2F;O(输入&#x2F;输出)通常使用printf()和scanf()两个函数</p><h3 id="1-3、getchar-amp-putchar-函数"><a href="#1-3、getchar-amp-putchar-函数" class="headerlink" title="1.3、getchar() &amp; putchar 函数"></a>1.3、getchar() &amp; putchar 函数</h3><p>1）int getchar() 函数从屏幕读取下一个可用的字符，并把它返回为一个整数。</p><p>2）int putchar() 函数把字符输出到屏幕上，并返回相同的字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> c = getchar();</span><br><span class="line">    <span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4、gets-amp-puts-函数"><a href="#1-4、gets-amp-puts-函数" class="headerlink" title="1.4、gets &amp; puts 函数"></a>1.4、gets &amp; puts 函数</h3><p>1）char* gets(char* s) 函数从stdin读取一行到s指向的缓冲区，直到一个终止符或EOF。</p><p>2）int puts(const char* s) 函数把字符串s和一个尾随的换行符写入到stdout</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">    </span><br><span class="line">    gets(str);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5、文件读写"><a href="#1-5、文件读写" class="headerlink" title="1.5、文件读写"></a>1.5、文件读写</h3><p>1）如何创建、打开、关闭文本文件或二进制文件</p><p>2）一个文件，无论是二进制文件还是文本文件，都是<strong>一系列的字节</strong>，C语言不仅提供了访问顶层的函数，也提供了底层（os）调用来处理存储设备上的文件</p><p><strong>打开文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE* <span class="title function_">fopen</span><span class="params">(<span class="type">char</span>* filename, <span class="type">const</span> <span class="type">char</span>* mode)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>模式（文本文件）</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>打开一个已有的文本文件，允许<strong>读取</strong>文件</td></tr><tr><td>w</td><td>打开一个文本文件，允许<strong>写入</strong>文件，若不存在则创建。若文件存在，会被截断为零长度，重新写入</td></tr><tr><td>a</td><td>打开一个文本文件，以追加模式写入文件。若不存在则创建。</td></tr><tr><td>r+</td><td>打开一文本文件，允许<strong>读写</strong>文件</td></tr><tr><td>w+</td><td>打开一个文本文件，允许<strong>读写</strong>文件，若不存在则创建。若文件存在，会被截断为零长度，重新写入</td></tr><tr><td>a+</td><td>打开一个文本文件，若不存在则创建。以<strong>追加模式写入</strong>文件。读则是<strong>从头读取</strong></td></tr></tbody></table><p>二进制文件 +b(binary) ：rb,wb,rb+,ab+…</p><p><strong>关闭文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">(FILE *fp)</span></span><br></pre></td></tr></table></figure><p>1）如果成功关闭文件，函数返回零；否则返回EOF。函数功能：清空缓冲区中的数据，关闭文件，并释放用于该文件的所有内存</p><p>2）使用完文件（读、写）后一定要将该文件关闭</p><p><strong>写入文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> c, FILE *fp)</span>;</span><br></pre></td></tr></table></figure><p>字符c写入到fp指向的输出流中 ，如果写入成功，它会返回写入的字符，发生错误返回EOF。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s, FILE *fp)</span>;</span><br></pre></td></tr></table></figure><p>字符串s写入到fp指向的输出流，如果写入成功返回非负值，发生错误返回EOF。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fprintf</span><span class="params">(FILE *fp, <span class="type">const</span> <span class="type">char</span> *format,...)</span>;</span><br></pre></td></tr></table></figure><p>字符串写入到函数（格式）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(<span class="string">&quot;test100.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%s\n&quot;</span>,<span class="string">&quot;陈一发我老婆~~&quot;</span>);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">&quot;我老婆陈一发~~\n123&quot;</span>,fp);</span><br><span class="line">    </span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>读取文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">(FILE *fp)</span></span><br></pre></td></tr></table></figure><p>从fp指向的输入文件中读取一个字符。返回值是读取的字符，如果发生错误则返回EOF。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">fgets</span><span class="params">(<span class="type">char</span> *buf, <span class="type">int</span> n, FILE *fp)</span></span><br></pre></td></tr></table></figure><p>1）说明：函数fgets()从fp指向的输入流中读取n-1个字符。它会把读取的字符串复制到缓冲区buf，并在最后追加一个null字符在终止字符串，如果这个函数在读取最后一个字符之前就遇到一个换行符\n或者文件的结尾EOF，则只会返回读取的字符，包括换行符</p><p>2）也可以使用 int fscanf(FILE *fp, const char *format，…) 函数来从文件中读取字符串，但是在遇到第一个空格字符时，它会停止读取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    fp = fopen(<span class="string">&quot;test100.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buff[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//    fscanf(fp,&quot;%s&quot;,buff);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fgets(buff,<span class="number">1024</span>,fp) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,buff);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、小结"><a href="#二、小结" class="headerlink" title="二、小结"></a>二、小结</h2><blockquote><p>卖油翁：</p><p>陈康肃公善射，当世无双 ，公亦以此自矜。尝射于家圃，有卖油翁释担而立，睨之久而不去。见其发矢十中八九，但微颔之。<br>康肃问曰：“汝亦知射乎？吾射不亦精乎？”。翁曰：“无他， 但手熟尔。”康肃忿然曰：“尔安敢轻吾射！”翁曰：“以我酌油知之。”乃取一葫芦置于地，以钱覆其口，徐以杓酌油沥之，自钱孔入，而钱不湿。因曰：“我亦无他，惟手熟尔。”康肃笑而遣之。</p></blockquote><blockquote><p>陆游：</p><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><p>为了考研重新学习了一遍C语言，怎么说呢，发现自己以前学习的远远不到位，后期就把数据结构与算法C语言实现一遍，但是java版本的都还没有看完，谷粒学院也还有两天的内容，这个寒假先把谷粒学院结束了。开学再从长计议</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo切换主题大坑</title>
      <link href="/article/7bb05c7b.html"/>
      <url>/article/7bb05c7b.html</url>
      
        <content type="html"><![CDATA[<p>大坑大坑</p><p>先记录问题：</p><p>再更换了博客主题后，本地运行没问题，一部署就<strong>导航条不显示，控制台报错jquery未定义</strong></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318222618443.png" alt="导航条不显示"></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318222640173.png" alt="控制台报错"></p><p>之所以说是大坑，确实不易发现；定位问题在<strong>main.js</strong></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318222903496.png" alt="main.js"></p><p>这时发现，<strong>请求到的js并不是宝塔里的js</strong></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318222958162.png" alt="宝塔中main.js"></p><p>清除了浏览器的缓存（无痕浏览器打开）还是不行</p><p><strong>请求到的js是什么呢?</strong></p><p><strong>居然是以前博客主题的js</strong></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318223146485.png" alt="amaing主题 main.js"></p><p>得出结论 ：问题为<strong>宝塔面板的缓存</strong></p><blockquote><p>试图解决方法一：将宝塔页面删除重新创建；</p><p>结果实验还行不行</p></blockquote><blockquote><p>试图解决方法二：等宝塔的缓存什么时候到了；</p><p>这个问题都困扰我一个下午+晚上了，不解决了还是人吗。</p></blockquote><blockquote><p>试图解决方法三：宝塔面板清除缓存</p><p><a href="https://www.bt.cn/bbs/thread-4122-1-1.html">https://www.bt.cn/bbs/thread-4122-1-1.html</a> ，有人之前就遇到过这个问题，然而他并没有解决貌似</p><p>在这篇文章中找到了解决方法 ： <a href="https://hostloc.com/thread-790102-1-1.html">https://hostloc.com/thread-790102-1-1.html</a></p></blockquote><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318225745245.png"></p><p>找到引入main.js的地方加上参数</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318225916925.png"></p><p>刷新，解决问题</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318232923331.png"></p><p>未解决，这是public后的html里改引用main.js，得找到还没有提交上去的时候在哪引用main.js</p><p>翻着翻着发现有配置文件配置main.js的位置</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318232923331.png"></p><p>不妨修改main.js的名字为main01.js</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318233734388.png"></p><p>终于彻底解决；</p><p>深刻体会到这句话</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318233315195.png"></p><p>如果一开始就顺着报错摸索应该可以更快定位到错误，然而还是选择了寻求谷歌，百度和博客主题的开发者（在开发者的评论下面好像有人和我遇到相同的问题）</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5、详细设计</title>
      <link href="/article/ccefa554.html"/>
      <url>/article/ccefa554.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>考纲：能进行软件系统详细设计。包括过程设计工具、程序复杂度的定量度量。</p></blockquote><span id="more"></span> <h2 id="一、过程设计工具"><a href="#一、过程设计工具" class="headerlink" title="一、过程设计工具"></a>一、过程设计工具</h2><h3 id="1-1、程序流程图"><a href="#1-1、程序流程图" class="headerlink" title="1.1、程序流程图"></a>1.1、程序流程图</h3><blockquote><p>参考文章：<a href="https://www.indezine.com/products/powerpoint/learn/flowcharts/flowchart-symbols-what-they-represent.html">https://www.indezine.com/products/powerpoint/learn/flowcharts/flowchart-symbols-what-they-represent.html</a></p></blockquote><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20210902134042560.png" alt="image-20210902134042560"></p><p>按照自己的经验，用不到这么多，对于考试应该更是<strong>掌握常用</strong>即可</p><h3 id="1-2、盒图"><a href="#1-2、盒图" class="headerlink" title="1.2、盒图"></a>1.2、盒图</h3><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20210902134530303.png"></p><h3 id="1-3、PAD图"><a href="#1-3、PAD图" class="headerlink" title="1.3、PAD图"></a>1.3、PAD图</h3><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20210902134540955.png"></p><h3 id="1-4、判定表与判定树（决策树）"><a href="#1-4、判定表与判定树（决策树）" class="headerlink" title="1.4、判定表与判定树（决策树）"></a>1.4、判定表与判定树（决策树）</h3><p>算法中包含多重嵌套条件选择时，用判定表</p><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>国内乘客</td><td></td><td>T</td><td>T</td><td>F</td><td>F</td><td>T</td><td>T</td><td>F</td><td>F</td></tr><tr><td>头等舱</td><td></td><td>T</td><td>F</td><td>T</td><td>F</td><td>T</td><td>F</td><td>T</td><td>F</td></tr><tr><td>残疾乘客</td><td></td><td>F</td><td>F</td><td>F</td><td>F</td><td>T</td><td>T</td><td>T</td><td>T</td></tr><tr><td>W &lt;&#x3D; 30kg</td><td>T</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>免费</td><td>√</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>（W-30）* 2</td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td></td><td></td></tr><tr><td>（W-30）* 3</td><td></td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td></td></tr><tr><td>（W-30）* 4</td><td></td><td>√</td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td></tr><tr><td>（W-30）* 6</td><td></td><td></td><td>√</td><td></td><td></td><td></td><td></td><td></td><td>√</td></tr><tr><td>（W-30）* 8</td><td></td><td></td><td></td><td>√</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>（W-30）* 12</td><td></td><td></td><td></td><td></td><td>√</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>判定树 略</p><h3 id="1-5、PDL-Process-Design-Language"><a href="#1-5、PDL-Process-Design-Language" class="headerlink" title="1.5、PDL(Process Design Language)"></a>1.5、PDL(Process Design Language)</h3><blockquote><p>参考 <a href="https://www.geeksforgeeks.org/process-design-language/">https://www.geeksforgeeks.org/process-design-language/</a></p></blockquote><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顺序</span></span><br><span class="line">START</span><br><span class="line">A = <span class="number">2</span>;</span><br><span class="line">B = A + <span class="number">2</span>;</span><br><span class="line">STOP</span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line">START</span><br><span class="line"><span class="keyword">IF</span> A &gt; <span class="number">0</span> <span class="keyword">OR</span>/<span class="keyword">AND</span> B &lt; <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">C = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">ELSE</span> </span><br><span class="line">c =<span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line">SRART</span><br><span class="line"><span class="keyword">WHILE</span> A &gt; <span class="number">0</span> <span class="keyword">DO</span></span><br><span class="line">f</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">DO</span></span><br></pre></td></tr></table></figure><h2 id="二、程序复杂度的定量度量"><a href="#二、程序复杂度的定量度量" class="headerlink" title="二、程序复杂度的定量度量"></a>二、程序复杂度的定量度量</h2><h3 id="2-1、McCabe方法"><a href="#2-1、McCabe方法" class="headerlink" title="2.1、McCabe方法"></a>2.1、McCabe方法</h3><p>就是将流程图转为数据流图，注意复合条件的转换即可</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20211118213249941.png"></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20211118213306490.png"></p><h3 id="2-2、Halstead方法"><a href="#2-2、Halstead方法" class="headerlink" title="2.2、Halstead方法"></a>2.2、Halstead方法</h3><p> 根据程序中和<strong>操作数</strong>和<strong>运算符</strong>的总数来定量程序的复杂度</p><p>N1 为程序中运算符出现的总次数 ，N2为程序中操作数出现的总次数，<strong>实际长度N</strong></p><p>N &#x3D; N1 + N2 </p><p>若详细设计结果中使用不同的运算符(操作数的种数)个数为n1，不同操作数（变量和常数）的个数（运算符的种数）为n2, <strong>预测长度H</strong></p><p>H &#x3D; n1*log2(n1) + n2 * log2(n2)</p><blockquote><p>例：</p><p>z &#x3D; 0;</p><p>while X &gt; 0 </p><p>​    Z &#x3D; Z + Y;</p><p>​    X &#x3D; X - 1;</p><p>end_while;</p><p>print(Z);</p><p><strong>通常把常数和变量是为操作数，其他符号（逗号、分号、圆括号、方括号、算数运算符、逻辑运算符）都视为运算符</strong></p><p><strong>把所有总数总是成对出现或以三个一组方式出现的符号视为一个运算符</strong></p><p>操作数有 ：</p><table><thead><tr><th>运算符</th><th>个数</th></tr></thead><tbody><tr><td>Z</td><td>4</td></tr><tr><td>X</td><td>3</td></tr><tr><td>1</td><td>1</td></tr><tr><td>0</td><td>2</td></tr><tr><td>Y</td><td>1</td></tr></tbody></table><p>n2&#x3D; 5 ,N2 &#x3D; 11 </p><p>运算符有：</p><table><thead><tr><th>操作符</th><th>个数</th></tr></thead><tbody><tr><td>&#x3D;</td><td>3</td></tr><tr><td>；</td><td>5</td></tr><tr><td>&gt;</td><td>1</td></tr><tr><td>while end while</td><td>1</td></tr><tr><td>+</td><td>1</td></tr><tr><td>-</td><td>1</td></tr><tr><td>print</td><td>1</td></tr><tr><td>()</td><td>1</td></tr></tbody></table><p>print() 需要拆分为两个操作符</p><p>n1 &#x3D; 8 ，N2 &#x3D; 14</p><p>H &#x3D; 8 * 3 + 5 * log2(5) </p><p>N &#x3D; 14 + 11 &#x3D; 27</p></blockquote><h2 id="三、详细设计说明书"><a href="#三、详细设计说明书" class="headerlink" title="三、详细设计说明书"></a>三、详细设计说明书</h2><p>完成详细设计就是拿出程序的详细设计说明书，着重描述每一模块是怎样实现的，包括实现算法、逻辑流程等。书写根据模板写就是。</p><p>可能还会涉及到其他UML图 </p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4、总体设计</title>
      <link href="/article/868610b9.html"/>
      <url>/article/868610b9.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>考纲：掌握软件系统总体设计基本概念。包括设计过程、设计原理、启发规则</p></blockquote><span id="more"></span><p>总体设计即就是概要设计，通过这个阶段划分出组成系统的物理元素，如程序，文件，数据库，人工过程和文档等，但每个物理元素仍处于黑盒子级，这些黑盒子里的内容在后面进行详细设计；</p><p>总体设计的另一重要任务是设计软件的结构，确定系统中的每个程序是由哪些模块组成的，以及这些模块之间互相的关系</p><h2 id="一、设计过程"><a href="#一、设计过程" class="headerlink" title="一、设计过程"></a>一、设计过程</h2><h3 id="1、设想供选择的方案"><a href="#1、设想供选择的方案" class="headerlink" title="1、设想供选择的方案"></a>1、设想供选择的方案</h3><p>考虑各种可能的实现方案，<strong>数据流图</strong>可作为极好的出发点</p><h3 id="2、选取合理的方案"><a href="#2、选取合理的方案" class="headerlink" title="2、选取合理的方案"></a>2、选取合理的方案</h3><p>至少选取低成本，中成本，高成本的3中方案</p><p>每个方案资料包括：</p><ul><li>系统流程图</li><li>组成元素的物理元素清单</li><li>成本&#x2F;效益分析</li><li>实现这个系统的进度计划</li></ul><h3 id="3、推荐最佳方案"><a href="#3、推荐最佳方案" class="headerlink" title="3、推荐最佳方案"></a>3、推荐最佳方案</h3><p>用户和相关专家在合理的方案中推荐一个最佳方案</p><h3 id="4、功能分解"><a href="#4、功能分解" class="headerlink" title="4、功能分解"></a>4、功能分解</h3><p>结合算法描述分析数据流图中的每个处理（process），如果一个处理的功能过分复杂，进行分解。功能分解导致数据流图进一步细化；</p><h3 id="5、设计软件结构"><a href="#5、设计软件结构" class="headerlink" title="5、设计软件结构"></a>5、设计软件结构</h3><p>绘制层次图或结构图来描述软件结构，一个模块完成一个子功能，高层模块调用底层模块，最下层的模块完成最基本的功能</p><h3 id="6、设计数据库"><a href="#6、设计数据库" class="headerlink" title="6、设计数据库"></a>6、设计数据库</h3><p>更全面的文档参考《阿里巴巴Java开发手册》：</p><blockquote><p>MySQL数据库</p><p>1、库名与应用名称尽量一致</p><p>2、表名、字段名必须使用小写字母或数字，禁止出现数字开头</p><p>3、表名不使用复数名词</p><p>4、表的命名最好是加上“业务名称_表的作用”。如，edu_teacher</p><p>5、表必备三字段：id, gmt_create, gmt_modified 说明： 其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。 （如果使用分库分表集群部署，则id类型为verchar，非自增，业务中使用分布式id生成器） gmt_create, gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被 动更新。</p><p>6、单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。 说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p><p>7、表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint （1 表示是，0 表示否）。 说明：任何字段如果为非负数，必须是 unsigned。 注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的 命名方式是为了明确其取值含义与取值范围。 正例：表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。</p><p>8、小数类型为 decimal，禁止使用 float 和 double。 说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不 正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p><p>9、如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p><p>10、varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索 引效率。</p><p>11、唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。 说明：uk_ 即 unique key；idx_ 即 index 的简称 12、不得使用外键与级联，一切外键概念必须在应用层解决。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p></blockquote><h3 id="7、制定测试计划"><a href="#7、制定测试计划" class="headerlink" title="7、制定测试计划"></a>7、制定测试计划</h3><p>软件开发早期就应考虑测试问题</p><h3 id="8、书写文档"><a href="#8、书写文档" class="headerlink" title="8、书写文档"></a>8、书写文档</h3><p>输出：概要设计说明书</p><ul><li>系统说明</li><li>用户手册</li><li>测试计划</li><li>详细的实现计划</li><li>数据库的设计结果</li></ul><h3 id="9、审查和复审"><a href="#9、审查和复审" class="headerlink" title="9、审查和复审"></a>9、审查和复审</h3><h2 id="二、设计原理"><a href="#二、设计原理" class="headerlink" title="二、设计原理"></a>二、设计原理</h2><p>软件设计过程中应该遵循的基本原则</p><h3 id="1、模块化"><a href="#1、模块化" class="headerlink" title="1、模块化"></a>1、模块化</h3><p>将程序划分为独立命名且可以独立访问的模块（有点微服务感觉），每个模块完成与一个子功能；将一个问题拆分为容易解决的小问题，使得原来的问题容易解决；当然模块不是越多越好，适当的划分模块数量可以使系统的开发成本最小；</p><p>模块块使得系统结构清晰，易于设计和理解；</p><h3 id="2、抽象"><a href="#2、抽象" class="headerlink" title="2、抽象"></a>2、抽象</h3><p>通过层层抽象来描述一个系统</p><p>顶层抽象一个软件系统，然后逐步细化</p><h3 id="3、逐步求精"><a href="#3、逐步求精" class="headerlink" title="3、逐步求精"></a>3、逐步求精</h3><p>Miller法则：人类注意力只能集中在7±2个模块上，然而需求或者数据库的表可能远不止7个</p><p>把一个时期内必须解决的种种问题按优先级排序的技术。</p><blockquote><p>如在写一个方法时，先使用注释写出分为几步，每一步干点什么，然后细化</p></blockquote><h3 id="4、信息隐藏和局部化"><a href="#4、信息隐藏和局部化" class="headerlink" title="4、信息隐藏和局部化"></a>4、信息隐藏和局部化</h3><p><strong>信息隐藏</strong>：设计和确定模块的时候，使得一个模块内包含的信息（过程和数据）对于不需要这些信息的模块来说，是不能访问的。</p><blockquote><p>如一个模块只操作对应的几张数据表</p></blockquote><p><strong>局部化</strong>：把一些关系密切的软件元素<strong>物理地</strong>放的彼此靠近。</p><h3 id="5、模块独立"><a href="#5、模块独立" class="headerlink" title="5、模块独立"></a>5、模块独立</h3><ul><li>有效的模块化使软件比较容易开发出来</li><li>软件易于维护和测试</li></ul><h4 id="5-1、耦合"><a href="#5-1、耦合" class="headerlink" title="5.1、耦合"></a>5.1、耦合</h4><blockquote><p>我草啊，上次整理的没保存没了。。。</p></blockquote><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20210929111225306.png"></p><p>耦合（coupling）：模块(module)之间的依赖程度</p><p>（1）数据耦合（data coupling）</p><p>两个模块通过参数(不能是控制参数，公共数据结构或外部变量)交换信息</p><p>（2）标记耦合（stamp coupling，or data structure coupling）</p><p>两个模块交流传递数据结构（如对象），如在用户登录时只需传两个参数，而不用传入一个user对象；</p><p>（3）控制耦合（control coupling）</p><p>两个模块通过传递<strong>控制信息</strong>交流</p><p>（4）外部耦合（external coupling）</p><p>一个模块依赖系统外的外部设备，如文件，其他硬件或者已经开发完成的软件等</p><p>（5）公共环境耦合（common coupling）</p><p>多个模块访问同一个全局变量</p><p>（6）内容耦合（content coupling）</p><p>一个模块使用另一个模块代码</p><h4 id="5-2、内聚"><a href="#5-2、内聚" class="headerlink" title="5.2、内聚"></a>5.2、内聚</h4><p>内聚（cohesion）：一个模块各个元素(element)联系紧密程度</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20211011102007273.png"></p><p>（1）偶然内聚（Coincidental cohesion）</p><p>元素之间没有联系，只是在代码里重复出现，提出来写在一起节省内存。</p><p>例如：打印下一行或者对反转字符串在一个模块中</p><p>（2）逻辑内聚（Logical cohesion）</p><p>元素之间有逻辑联系(logical related)，没有功能联系(functionally related)；即就是完成的任务是<strong>相同或者相似</strong>的一类</p><p>如：在一个模块中，分别从磁带、硬盘、网络；</p><p>（3）时间内聚（Temporal cohesion）</p><p>元素的任务必须在同一时间段内执行，例如模块的初始化</p><p>（4）过程内聚（Procedural cohesion）</p><p>确保执行的顺序，如计算学生的绩点等操作</p><p>（5）通信内聚（Communicational Cohesion）</p><p>元素使用同一个输入数据或产生同一个输出数据，如更新数据库（增删改查操作）数据并输出到控制台</p><p>（6）顺序内聚（Sequential Cohesion）</p><p>一个元素输出的数据作为另一个元素的输入数据</p><p>（7）功能内聚（Functional Cohesion）</p><p>理想状态，所有元素属于一个整体，完成单一功能</p><h2 id="三、启发规则"><a href="#三、启发规则" class="headerlink" title="三、启发规则"></a>三、启发规则</h2><p>在开发计算机软件的长期实践中积累丰富的经验，作为参考，并非必须使用</p><h3 id="1、改进软件结构，提高独立性"><a href="#1、改进软件结构，提高独立性" class="headerlink" title="1、改进软件结构，提高独立性"></a>1、改进软件结构，提高独立性</h3><p>完成初步设计后，再看模块是否能进一步拆分和合并</p><h3 id="2、模块规模应该适中"><a href="#2、模块规模应该适中" class="headerlink" title="2、模块规模应该适中"></a>2、模块规模应该适中</h3><p>不宜过大或过小</p><h3 id="3、深度，宽度，扇入，扇出都应该适当"><a href="#3、深度，宽度，扇入，扇出都应该适当" class="headerlink" title="3、深度，宽度，扇入，扇出都应该适当"></a>3、深度，宽度，扇入，扇出都应该适当</h3><p>画出各个模块调用关系</p><p>深度：软件结构中控制的层数</p><p>宽度：同一层模块总数的最大值</p><p>扇入：这个模块调用了多少个模块</p><p>扇出：这个模块被多少个模块调用</p><h3 id="4、模块的作用域应该在控制域之内"><a href="#4、模块的作用域应该在控制域之内" class="headerlink" title="4、模块的作用域应该在控制域之内"></a>4、模块的作用域应该在控制域之内</h3><p>控制域：它调用的模块和它调用的模块调用的模块的集合</p><p>作用域：可以影响到的模块的集合</p><h3 id="5、降低接口的复杂度"><a href="#5、降低接口的复杂度" class="headerlink" title="5、降低接口的复杂度"></a>5、降低接口的复杂度</h3><p>参数和返回值不要搞的复杂难懂</p><h3 id="6、设计单入口单出口的模块"><a href="#6、设计单入口单出口的模块" class="headerlink" title="6、设计单入口单出口的模块"></a>6、设计单入口单出口的模块</h3><p>莫出现内容耦合</p><h3 id="7、模块功能应该可以预测"><a href="#7、模块功能应该可以预测" class="headerlink" title="7、模块功能应该可以预测"></a>7、模块功能应该可以预测</h3><p>根据模块名可以把功能猜个大概</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3、需求分析</title>
      <link href="/article/c662f03a.html"/>
      <url>/article/c662f03a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>考纲：了解需求分析任务，能进行软件系统需求分析。包括需求分析的任务、实体-关系图、数据规范化、状态转换图</p><ul><li>需求分析</li><li>E-R图</li><li>数据规范化</li><li>state chart diagram(state machine diagram)</li></ul></blockquote><span id="more"></span><h2 id="一、需求分析的任务"><a href="#一、需求分析的任务" class="headerlink" title="一、需求分析的任务"></a>一、需求分析的任务</h2><h3 id="1、综合要求"><a href="#1、综合要求" class="headerlink" title="1、综合要求"></a>1、综合要求</h3><ul><li>功能：起码功能得完成</li><li>性能：性能过得去</li><li>可靠性&#x2F;可用性：军用系统或者银行系统往往需要较高的可靠性</li><li>出错处理（健壮性）：响应错误的能力</li><li>接口需求：如要和硬件交互，或其他软件交互等</li><li>约束：限制条件：如语言，数据库，工具….</li><li>逆向需求：不应该做什么</li><li>将来可能提出的需求：后面可能加功能啊</li></ul><h3 id="2、数据要求"><a href="#2、数据要求" class="headerlink" title="2、数据要求"></a>2、数据要求</h3><p>书上有句话很难不认同：<strong>任何软件系统的本质都是信息处理系统</strong></p><p>使用e-r图、数据流图、数据字典、状态转换图等结合<strong>综合要求</strong>的结果描述建立<strong>逻辑模型</strong></p><h3 id="3、软件需求规格说明书"><a href="#3、软件需求规格说明书" class="headerlink" title="3、软件需求规格说明书"></a>3、软件需求规格说明书</h3><p>需求分析建立三种模型：</p><ul><li>数据模型 - ER图</li><li>功能模型 - DFD</li><li>行为模型 - 状态转换图（状态图）</li></ul><p>需求规则说明书：用自然语言描述软件的功能要求、性能要求、可靠性&#x2F;可用性要求、出错处理要求、接口需求、约束、逆向需求和将来可能提出的需求。</p><h2 id="二、E-R图"><a href="#二、E-R图" class="headerlink" title="二、E-R图"></a>二、E-R图</h2><p>数据库设计也使用</p><blockquote><p>这里发现staruml是不区分实体和联系的，统称entity</p><p><img src="https://i.loli.net/2021/07/11/BCSujZPX1GvcL4V.png"></p><p>弃用，powerdisinger好像也没有画出联系，选取visio试试</p></blockquote><p>visio中叫数据库chen‘s表示法…，发现visio不能表示联系，只有一根线可能是我没找到裂开…(可以用文本把数字加上去就这样吧)</p><p><img src="https://i.loli.net/2021/07/11/sZ8dF6OcJf9kzUn.png"></p><p><strong>E：</strong></p><p>Entity &#x3D;&#x3D; table；</p><p>WeakEntity &#x3D; 依赖于其他实体的实体，如个人简介与用户</p><p>Attribute &#x3D;&#x3D; 表的列</p><ul><li>primary Attribute  ：主键，下面加横线</li><li>derived Attribute ：可以通过其他键获得的属性，虚线框连接到可以获得它的属性；如生日与年龄</li><li>composite Attribute  ：组合属性 ，如姓名可以拆分为性和名，</li><li>multivalued Attribute ：属性的属性，如博客和标签，两个圈</li></ul><p>为什么没有表示外键属性：两个表之间的联系就已经表示他们之间有一列相同即就是主键和外键的关系</p><p><strong>R</strong>：</p><p>1 to 1 如用户和个人简介</p><img src="https://i.loli.net/2021/07/11/9vfOuIUWnSKoD2C.png" style="zoom:80%;" /><p>1 to many 如用户和邮箱id</p><img src="https://i.loli.net/2021/07/11/dF6EaRjNOcehPIk.png" style="zoom:80%;" /><p>many to many 如导演和电影</p><img src="https://i.loli.net/2021/07/11/LdwTMF4UmV8khQ6.png" style="zoom:80%;" /><p><strong>案例：博客网站</strong></p><p><img src="https://i.loli.net/2021/07/11/PSnApI8sWjBMbdX.png"></p><p><strong>有三个实体连接一个联系时解决方法</strong></p><p>如图中user comment blog ，任取两个确定看能确定另一个几个</p><p>user和comment：指定用户指定评论，只能确定一篇博客（我觉得不一定啊，比如他去每一篇博客下面刷）</p><p>user和blog:指定用户和博客，可以确定N条评论：可以在一篇博客下随意评论</p><p>comment和blog：指定评论和博客，只能确定一个用户（国外是没有复读机吗…）</p><p>小细节：书上many to many是 M对N，懒得改图了就这样吧…</p><p>另外表示关系的方式：</p><p><img src="https://i.loli.net/2021/07/11/goj5XcBwzYmhtdQ.png"></p><p>如果把many那个圈换成一就是至少对应一个；visio没有这个细节；</p><p><img src="https://i.loli.net/2021/07/11/WGs4VqgLkOMjK82.png"></p><h2 id="三、数据规范化"><a href="#三、数据规范化" class="headerlink" title="三、数据规范化"></a>三、数据规范化</h2><p>即三范式（normal forms），可以理解为解耦（降低依赖）</p><blockquote><p>先回忆下数据库系统知识：</p><p>Primary Key，主键，<strong>唯一标识一条</strong>数据（从候选键里调出最具识别意义的）</p><p>Foreign Key，其他表的主键</p><p>Candidate Keys，一个或多个属性可以<strong>唯一标识</strong>一条数据</p><p>Alternate(Secondary) Keys，候选键除了主键的其他键</p><p>Super Keys，能唯一标识数据的属性集合（可含有多余元素）&#x2F;任意候选键 并 任意属性或属性的subset</p></blockquote><p><strong>1NF：至少得是二维表</strong></p><p>比如一个框有两个值什么就不行；</p><p><strong>2NF：消除部分依赖</strong>（部分依赖：<strong>Partial Dependency –</strong> If the proper subset of candidate key determines non-prime attribute, it is called partial dependency.）</p><p>候选键的子集可以决定一个非主键的属性</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">STUD_NO            COURSE_NO        COURSE_FEE</span><br><span class="line">1                     C1                  1000</span><br><span class="line">2                     C2                  1500</span><br><span class="line">1                     C4                  2000</span><br><span class="line">4                     C3                  1000</span><br><span class="line">4                     C1                  1000</span><br><span class="line">2                     C5                  2000</span><br></pre></td></tr></table></figure><p>主键：（STUD_NO，COURSE_NO）</p><p>候选键：（STUD_NO，COURSE_NO）</p><p>（STUD_NO，COURSE_NO）-&gt; COURSE_FEE</p><p>是部分依赖，不满足第二范式，将表进行拆分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    Table 1                                    Table 2</span><br><span class="line">STUD_NO            COURSE_NO          COURSE_NO                COURSE_FEE     </span><br><span class="line">1                 C1                  C1                        1000</span><br><span class="line">2                 C2                  C2                        1500</span><br><span class="line">1                 C4                  C3                        1000</span><br><span class="line">4                 C3                  C4                        2000</span><br><span class="line">4                 C1                  C5                        2000        </span><br></pre></td></tr></table></figure><p><strong>3NF：消除传递依赖</strong>（传递依赖：If A-&gt;B and B-&gt;C are two FDs then A-&gt;C is called <strong>transitive dependency</strong>.）</p><p>FD概念：function dependency :X -&gt; Y</p><ol><li>x 超键</li><li>Y 主属性</li></ol><p><img src="https://i.loli.net/2021/07/14/sG8OIfNV1YZToUh.png"></p><p>依赖有：STUD_NO -&gt; STUD_STATE , STUD_STATE-&gt; STUD_COUNTRY 存在传递依赖：STUD_NO -&gt; STUD_COUNTRY</p><p>违背第三范式，将表进行拆分</p><p>student（STUD_NO ，STUD-NAME，STUD_STATE，STUD_AGE）</p><p>state_country（STUD_STATE，STUD_COUNTRY）</p><p><strong>BCNF:BC范式</strong>（for every FD, LHS is super key.）A relation is in BCNF iff in every non-trivial functional dependency X –&gt; Y, X is a super key.</p><p>……</p><h2 id="四、状态转换图"><a href="#四、状态转换图" class="headerlink" title="四、状态转换图"></a>四、状态转换图</h2><p>(这个图没有印度小哥在油管的视频了。。。)</p><p>statechartdiagram(state diagram)：描述系统的行为，将系统抽象为几种状态以及状态的转换</p><p><strong>组成：</strong></p><p><img src="https://i.loli.net/2021/07/14/PrqcZ8KFjwVlHgG.png"></p><p><strong>Simple State</strong>:状态</p><p><img src="https://i.loli.net/2021/07/20/B4tA3fgiouvx8hF.png"></p><p>entry activity:进入该状态的动作</p><p>do activiry:在该状态下的动作</p><p>exit activity:退出该状态的动作</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20210720195337420.png"></p><p>OpaqueBehavior:</p><p>Activity:</p><p>StateMachine:</p><p>Interaction:</p><p>(这四个不知道是啥，但图上看起来是一样的，暂时留下这个问题)</p><p><strong>Initial State</strong>:初始状态</p><p><strong>Choice</strong>：选择</p><p><strong>Join</strong>：合并为一个状态</p><p><strong>Fork</strong>：分开为多个同时状态</p><p><strong>Final State</strong>：结束状态</p><p><strong>Transition</strong>：状态的改变</p><p><strong>Self Transition</strong>：等待某一事件发生</p><p>案例：办理机场登机手续</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20210720213442925.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2、可行性研究</title>
      <link href="/article/c9e5187.html"/>
      <url>/article/c9e5187.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>考纲：能采用相关工具进行软件系统可行性研究。包括数据流图、数据字典。</p></blockquote><span id="more"></span><h2 id="一、可行性研究"><a href="#一、可行性研究" class="headerlink" title="一、可行性研究"></a>一、可行性研究</h2><p>目的：最小的代价在尽可能短的时间内确定问题是否能够解决</p><ol><li>技术可行性</li><li>经济可行性</li><li>操作可行性</li></ol><h2 id="二、数据流图"><a href="#二、数据流图" class="headerlink" title="二、数据流图"></a>二、数据流图</h2><blockquote><p>维基百科：A <strong>data-flow diagram</strong> is a way of representing a flow of data through a <a href="https://en.wikipedia.org/wiki/Process">process</a> or a system (usually an <a href="https://en.wikipedia.org/wiki/Information_system">information system</a>).</p></blockquote><p>（绘图工具使用staruml）</p><p>书上并没有提到数据流图的分层；</p><p>第0层和第1层数据流图只能有一个；其他可以有多个</p><p>level 0：</p><ul><li><p>对系统的总览</p></li><li><p>只能有一个Process表示整个系统</p></li><li><p>若出现数据存储（如数据库，文件等）也要使用外部实体表示</p></li></ul><p><img src="https://i.loli.net/2021/07/09/ElMOyt29gJ7FGbq.png"></p><p>level 1:</p><ul><li>表示整个系统，但仍然没有细节</li><li>不能在0层基础上增加外部实体（数量可以增加，种类不能）</li></ul><p><img src="https://i.loli.net/2021/07/09/Tfu5OdLvCDGzbU4.png"></p><p>level2:</p><p>对每一个subprocess的细节描述</p><p><img src="https://i.loli.net/2021/07/09/43iFybKlE2Tcazh.png" alt="image-20210709214253511"></p><h3 id="1、基本符号"><a href="#1、基本符号" class="headerlink" title="1、基本符号"></a>1、基本符号</h3><p><img src="https://i.loli.net/2021/07/09/UKBZknyT7JbiErF.png"></p><p>External Entity:外部实体，数据的源点、终点</p><p>Process:变换数据的处理</p><p>Data store:数据存储</p><p>Data Flow:数据流</p><h3 id="2、案例"><a href="#2、案例" class="headerlink" title="2、案例"></a>2、案例</h3><p><strong>案例1：社交网站（功能：facebook授权登录、发布，阅读博客、聊天、好友）</strong></p><p>level0：</p><p><img src="https://i.loli.net/2021/07/09/q2Sv1JVU6dsiZbu.png"></p><p>level1:</p><p><img src="https://i.loli.net/2021/07/10/8tlgyDiH2CbPxVT.png"></p><p>level2:(选择bolgwriting)</p><p><img src="https://i.loli.net/2021/07/10/x7KhTpyMCuAfdV9.png"></p><h2 id="三、数据字典"><a href="#三、数据字典" class="headerlink" title="三、数据字典"></a>三、数据字典</h2><blockquote><p>生活中字典，新华字典、牛津词典…，解释某种语言某个词的意思，类比数据字典：解释数据；在数据库系统中也学过数据字典；</p><p>IBM定义：as defined in the <em>IBM Dictionary of Computing</em>, is a “centralized repository of information about data such as meaning, relationships to other data, origin, usage, and format”</p><p>Oracle定义：*<a href="https://en.wikipedia.org/wiki/Oracle_Corporation">Oracle</a>* defines it as a collection of tables with metadata（<a href="https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E6%B1%89%E8%AF%AD-%E7%AE%80%E4%BD%93/information">information</a> that is given to <a href="https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E6%B1%89%E8%AF%AD-%E7%AE%80%E4%BD%93/describe">describe</a> or <a href="https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E6%B1%89%E8%AF%AD-%E7%AE%80%E4%BD%93/help">help</a> you use other <a href="https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E6%B1%89%E8%AF%AD-%E7%AE%80%E4%BD%93/information">information</a>）. </p></blockquote><p>课本说法，应该包含如下信息：名字，别名，描述，定义，位置；</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1、软件工程学概论</title>
      <link href="/article/d3361272.html"/>
      <url>/article/d3361272.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>考研专业课，冲冲冲</p><ol><li>软件</li><li>软件工程</li><li>软件生命周期</li><li>软件过程</li></ol><p>考纲：掌握软件工程基本概念。包括软件危机、软件工程、软件生命周期、软件过程。</p></blockquote><span id="more"></span><h2 id="一、软件"><a href="#一、软件" class="headerlink" title="一、软件"></a>一、软件</h2><p>程序 + 数据 + 文档</p><h2 id="二、软件工程"><a href="#二、软件工程" class="headerlink" title="二、软件工程"></a>二、软件工程</h2><h3 id="1、软件发展"><a href="#1、软件发展" class="headerlink" title="1、软件发展"></a>1、软件发展</h3><ul><li>程序设计</li><li>程序系统 （出现软件危机 -&gt; 软件工程）</li><li>软件工程</li><li>第四阶段</li></ul><h3 id="2、软件危机"><a href="#2、软件危机" class="headerlink" title="2、软件危机"></a>2、软件危机</h3><p>定义：计算机软件开发和维护中遇到的一系列<strong>严重</strong>的问题</p><p>表现：</p><ol><li>开发成本和进度估计不准</li><li>用户对已交付的软件不满意</li><li>软件产品的质量靠不住</li><li>软件的可维护性查</li><li>软件没有适当的文档资料</li><li>….</li></ol><h3 id="3、软件工程"><a href="#3、软件工程" class="headerlink" title="3、软件工程"></a>3、软件工程</h3><p>定义：软件工程是<strong>指导计算机软件开发和维护</strong>的一门工程学科，采用<strong>工程的概念，方法，技术</strong>来开发和维护软件，把经过时间考量而正确的<strong>管理技术</strong>和当前能够得到的最好<strong>技术方法</strong>结合起来，以<strong>经济</strong>的开发出<strong>高质量</strong>的软件并维护</p><h2 id="三、软件生命周期"><a href="#三、软件生命周期" class="headerlink" title="三、软件生命周期"></a>三、软件生命周期</h2><p>  定义：软件产品定义、设计、开发、维护、废弃的过程</p><p><img src="https://i.loli.net/2021/07/08/kgdwpThNRCWyPIS.png"></p><h2 id="四、软件过程"><a href="#四、软件过程" class="headerlink" title="四、软件过程"></a>四、软件过程</h2><p>软件过程：获得高质量软件所需要完成一系列任务的框架，规定了完成各项任务的工作步骤</p><p>(who when what how )</p><h3 id="1、瀑布模型"><a href="#1、瀑布模型" class="headerlink" title="1、瀑布模型"></a>1、瀑布模型</h3><p>最早，最广泛应用</p><p><img src="https://i.loli.net/2021/07/08/DXO14SHUFqP9wZe.png"></p><ol><li>阶段间具有顺序性和依赖性<br>顺序性：前一步完成才能进行后一步；<br>依赖性：前一阶段的输出文档是后一阶段的输入文档</li><li>推迟实现<br>忽视设计的重要性，直接开始码代码；（磨刀不误砍柴工）</li><li>质量保证<br>每个阶段结束都需要文档；<br>对文档进行评审</li></ol><p><strong>问题：过于理想化，不可能不出错或者遇到需求的变更</strong></p><p><img src="https://i.loli.net/2021/07/08/5qmHg6pFZ8PzNTQ.png"></p><h3 id="2、快速原型模型"><a href="#2、快速原型模型" class="headerlink" title="2、快速原型模型"></a>2、快速原型模型</h3><p>根据主要需求，快速建立原型，反复和用户交流，根据需求再进行开发</p><p><img src="https://i.loli.net/2021/07/08/Gm43PAEFIiWup8f.jpg"></p><p>优点：确定需求上优于瀑布模型；</p><p>原型可以用于指导开发或者作为系统的一部分；</p><h3 id="3、增量模型"><a href="#3、增量模型" class="headerlink" title="3、增量模型"></a>3、增量模型</h3><p>分批的向用户提交产品</p><p><img src="https://i.loli.net/2021/07/08/3P8kYTwodvAX2mb.png"></p><p>如：开发喜瑞斯的时候先完成后台开发，可以先进行数据的添加；</p><p>直接划分若干构件，并行执行，风险更大的增量模型</p><p><img src="https://i.loli.net/2021/07/08/RbZwYNsVPu3JGph.jpg"></p><h3 id="4、螺旋模型"><a href="#4、螺旋模型" class="headerlink" title="4、螺旋模型"></a>4、螺旋模型</h3><blockquote><p>风险：比如未能按规定时间完成；做到一半没钱了；程序员删库跑路或跳槽；对手已经做出类似软件等等</p></blockquote><p>加入风险分析，适用于大型软件的开发；</p><p>可理解为：在每个阶段之前都增加了<strong>风险分析</strong>过程的<strong>快速原型模型</strong></p><p><img src="https://i.loli.net/2021/07/08/CUdBOikJIX7MnqQ.png"></p><p>优点：大型软件项目很好的风险控制</p><p>缺点：需要有风险评估的经验；普及不如前面</p><h3 id="5、喷泉模型"><a href="#5、喷泉模型" class="headerlink" title="5、喷泉模型"></a>5、喷泉模型</h3><p><strong>面向对象</strong>方法的生命周期模型，迭代、无缝</p><p><img src="https://i.loli.net/2021/07/08/J8CViNwf9kTsgr4.png"></p><p>优点：同步开发、提升开发效率，节省开发时间，适用于面向对象软件</p><p>缺点：可能随时加各种信息，需求，资料，文档管理和审核困难</p><h3 id="6、Rational-统一过程"><a href="#6、Rational-统一过程" class="headerlink" title="6、Rational 统一过程"></a>6、Rational 统一过程</h3><p><strong>完整</strong>且<strong>完美</strong>软件过程，二维</p><p><img src="https://i.loli.net/2021/07/08/QcRG8s2fZD9St4m.jpg"></p><h3 id="7、微软过程"><a href="#7、微软过程" class="headerlink" title="7、微软过程"></a>7、微软过程</h3><p>微软公司独特的软件开发过程；</p><p>综合了rational过程和敏捷开发的优点；</p><h3 id="8、敏捷过程与极限编程"><a href="#8、敏捷过程与极限编程" class="headerlink" title="8、敏捷过程与极限编程"></a>8、敏捷过程与极限编程</h3><p>敏捷软件开发宣言：</p><ol><li><p>个体和交互胜过过程和工具</p></li><li><p>可以工作的软件胜过面面俱到的文档</p></li><li><p>客户合作胜过合同谈判</p></li><li><p>响应变化胜过遵循计划</p></li></ol><p>极限编程（extreme programming） - 敏捷开发最负盛名</p><table><thead><tr><th>开发方法</th><th>优点</th><th>缺点</th><th>适用范围</th></tr></thead><tbody><tr><td>瀑布模型</td><td>推迟实现；质量保证；</td><td>用户只能通过文档了解软件</td><td>需求明确且不易变换</td></tr><tr><td>快速原型</td><td>真实需求；原型可用于最终的软件产品</td><td></td><td></td></tr><tr><td>增量模型</td><td>短时间内向用户提交完成一部分工作的产品；降低用户的学习成本；易于拓展</td><td>较高的架构水平；</td><td></td></tr><tr><td>螺旋模型</td><td>风险控制</td><td>开发人员需具备风险分析能力</td><td>大型软件</td></tr><tr><td>喷泉模型</td><td>面相对象，迭代，无缝</td><td></td><td>面相对象软件开发</td></tr><tr><td>rup统一过程</td><td>完整且完美</td><td></td><td></td></tr><tr><td>微软过程</td><td>RUP精简配置版；敏捷过程扩充版。</td><td>不如rup全面</td><td>商业环境，有限资源，有限开发时间</td></tr><tr><td>极限编程</td><td>敏捷的响应变化</td><td></td><td>小型软件，商业竞争环境</td></tr></tbody></table><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客视频上传工具</title>
      <link href="/article/6689a444.html"/>
      <url>/article/6689a444.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>没次更新博客的视频贼麻烦，需要先从油管上下载，然后再上传到阿里云，再修改配置文件，再更新博客；</p><p>现在写个小程序完成这个功能</p><p>1、youtube视频下载</p><p>2、阿里云oss</p><p>3、文件操作</p><p>4、执行cmd</p></blockquote><span id="more"></span><h3 id="1、youtube视频下载"><a href="#1、youtube视频下载" class="headerlink" title="1、youtube视频下载"></a>1、youtube视频下载</h3><p>以前都是用在线网页下载，当然不能解决需求，还好找到这个 <a href="https://github.com/ytdl-org/youtube-dl">https://github.com/ytdl-org/youtube-dl</a></p><p>按照文档下载：</p><p><img src="https://i.loli.net/2021/07/08/S1zb2HNBJxLXYtP.png"></p><p>往下翻发现需要py环境</p><p><img src="https://i.loli.net/2021/07/08/T2zjwMibAdhlNSg.png" alt="image-20210708155711039"></p><p><img src="https://i.loli.net/2021/07/08/o5n3WZi1UCrhETN.png" alt="image-20210708155827405"></p><p>没问题</p><p>直接测试：(不加任何配置，默认下载最佳) 需要将vpn代理改为全局</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube<span class="literal">-dl</span> https://www.youtube.com/watch?v=<span class="number">0</span>KZ<span class="literal">-4uaj_QU</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin\Desktop\新建文件夹&gt;youtube<span class="literal">-dl</span> https://www.youtube.com/watch?v=<span class="number">0</span>KZ<span class="literal">-4uaj_QU</span></span><br><span class="line">[<span class="type">youtube</span>] <span class="number">0</span>KZ<span class="literal">-4uaj_QU</span>: Downloading webpage</span><br><span class="line">[<span class="type">youtube</span>] <span class="number">0</span>KZ<span class="literal">-4uaj_QU</span>: Downloading player <span class="number">1</span>eb201ea</span><br><span class="line">[<span class="type">youtube</span>] <span class="number">0</span>KZ<span class="literal">-4uaj_QU</span>: Downloading MPD manifest</span><br><span class="line">[<span class="type">download</span>] Destination: 陈一发儿－飛鳥和蟬<span class="literal">-0KZ-4uaj_QU</span>.mp4</span><br><span class="line">[<span class="type">download</span>] <span class="number">100</span>% of <span class="number">11.79</span>MiB <span class="keyword">in</span> <span class="number">00</span>:<span class="number">27</span></span><br></pre></td></tr></table></figure><p>然而清晰度感人，大小也才11m，自然不是很行</p><p><strong>原来YouTube的1080p及以上的分辨率都是音视频分离</strong></p><p>继续钻研：</p><p><img src="https://i.loli.net/2021/07/08/mIt6e39LYoR8xPS.png" alt="image-20210708161534212"></p><p>原来下载1080p的就只有图像没有声音，这也应该是有些youtube下载网站不行的原因</p><p>解决方法自然是<strong>分别下载音频视频</strong>再合并了</p><p>引出 ： <a href="https://ffmpeg.org/download.html">https://ffmpeg.org/download.html</a></p><p>这个作用就是合并音频和视频</p><p>下载然后把bin目录加入系统变量path</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -version</span><br></pre></td></tr></table></figure><p>安装成功</p><p>这里猜测会不会安装了ffmpeg在下载时会自动组合最高画质和音质。。。</p><p>发现并不会，那咋组合呢问题来了；好像组合都是手动先查询，然后再输入组合下载，这样自动性能就降低了</p><p>stakeoverflowed yyds</p><p><img src="https://i.loli.net/2021/07/08/nX4m1k8PjKoaWRG.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -f bestvideo+bestaudio --proxy 127.0.0.1:1080 https://www.youtube.com/watch?v=0KZ-4uaj_QU </span><br></pre></td></tr></table></figure><p>发现下载后是.webm格式，问题来了，能在博客里播放吗（后来证明可以）</p><p>然后文件名问题，下载在当前目录，需要一个可以访问到的文件名 以参数传进来，而且不能重复（会传多个文件以后）</p><p>最终命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube<span class="literal">-dl</span> <span class="operator">-f</span> bestvideo+bestaudio <span class="literal">--proxy</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span> <span class="literal">-o</span> <span class="number">11254</span> https://www.youtube.com/watch?v=<span class="number">0</span>KZ<span class="literal">-4uaj_QU</span></span><br></pre></td></tr></table></figure><p>需要将路径和文件名由参数传入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style=&quot;font-family:SimSun;font-size:14px;&quot;&gt;@ECHO OFF</span><br><span class="line">cd G:\blog\fafa</span><br><span class="line">set input=%1%</span><br><span class="line">set input2=%2%</span><br><span class="line">youtube-dl -f &#x27;&#x27;bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best&#x27;&#x27; --proxy 127.0.0.1:1080 -o %input% %input2%</span><br><span class="line">PAUSE&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.cyfwlp.download;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/8 19:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Download</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载视频，传入youtube视频连接，返回路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> File <span class="title function_">downloadVideo</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="comment">//对url进行处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">        result += url;</span><br><span class="line">        result += <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(l);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;cmd /c start G:\\blog\\fafa\\&quot;</span>+ <span class="string">&quot;dowmload&quot;</span> + <span class="string">&quot;.bat &quot;</span>+str+<span class="string">&quot; &quot;</span>+result+<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">ps</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">            ps.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">            ioe.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;child thread donn&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;G:\\blog\\fafa\\&quot;</span>+str+<span class="string">&quot;.webm&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        downloadVideo(<span class="string">&quot;https://www.youtube.com/watch?v=2XapuxXCUvQ&amp;list=PLi3zrmUZHiY-BkmXAR8snIRFCteS9g4Ga&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>掌握了这一部分，理论上可以自己写一个youtube下载的网站</p></blockquote><h3 id="2、阿里云oss"><a href="#2、阿里云oss" class="headerlink" title="2、阿里云oss"></a>2、阿里云oss</h3><p>这一块简单，直接拖代码复用就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.cyfwlp.oss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/8 18:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Oss</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">upload</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="comment">// Endpoint以杭州为例，其它Region请按实际情况填写。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 云账号AccessKey有所有API访问权限，建议遵循阿里云安全最佳实践，创建并使用RAM子账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 上传文件流。</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            inputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="type">String</span> <span class="variable">objeckName</span> <span class="operator">=</span> file.getName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            objeckName = uuid + objeckName;</span><br><span class="line">            ossClient.putObject(<span class="string">&quot;edu-cubeonline&quot;</span>, objeckName, inputStream);</span><br><span class="line">            url = <span class="string">&quot;https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/&quot;</span>+objeckName+<span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭OSSClient。</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\admin\\Desktop\\新建文件夹\\11254.webm&quot;</span>);</span><br><span class="line">        System.out.println(upload(file));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、写入文件"><a href="#3、写入文件" class="headerlink" title="3、写入文件"></a>3、写入文件</h3><p>涉及到json,使用fastjson进行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.cyfwlp.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/8 17:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置文件写入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 视频名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 视频路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">writeConfig</span><span class="params">(String name, String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;G:\\blog\\amzing\\taoBlog\\themes\\amazing\\source\\json_data\\video.json&quot;</span>);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fileInputStream);</span><br><span class="line">        String str;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">jsondata</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> ((str = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            jsondata.append(str);</span><br><span class="line">            jsondata.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Video&gt; parse = (List&lt;Video&gt;) JSON.parse(jsondata.toString(), Feature.OrderedField);</span><br><span class="line">        <span class="type">Video</span> <span class="variable">video</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Video</span>(name, url);</span><br><span class="line">        parse.add(video);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newjsondata</span> <span class="operator">=</span> JSON.toJSONString(parse);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;G:\\blog\\amzing\\taoBlog\\themes\\amazing\\source\\json_data\\video.json&quot;</span>));</span><br><span class="line">        bufferedWriter.write(newjsondata);</span><br><span class="line">        bufferedWriter.flush();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、执行cmd"><a href="#4、执行cmd" class="headerlink" title="4、执行cmd"></a>4、执行cmd</h3><p>发现不是那么简单这里</p><p>需要用到批处理脚本的知识，出来没接触过这个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style=&quot;font-family:SimSun;font-size:14px;&quot;&gt;@ECHO OFF</span><br><span class="line">cd G:\blog\amzing\taoBlog</span><br><span class="line">hexo clean &amp;&amp; hexo deploy</span><br><span class="line">PAUSE&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.cyfwlp.deploy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/8 18:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Deploy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新并上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">deploy</span><span class="params">(String batName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;cmd /c start G:\\blog\\amzing\\taoBlog\\&quot;</span>+ batName + <span class="string">&quot;.bat&quot;</span>;<span class="comment">// pass</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">ps</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">            ps.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">            ioe.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;child thread donn&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        deploy(<span class="string">&quot;deployed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、最终整合和封装"><a href="#5、最终整合和封装" class="headerlink" title="5、最终整合和封装"></a>5、最终整合和封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/8 15:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.cyfwlp.deploy.Deploy;</span><br><span class="line"><span class="keyword">import</span> cn.cyfwlp.download.Download;</span><br><span class="line"><span class="keyword">import</span> cn.cyfwlp.file.Write;</span><br><span class="line"><span class="keyword">import</span> cn.cyfwlp.oss.Oss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 没次更新博客发发的视频贼麻烦，需要先从油管上下载，然后再上传到阿里云，再修改配置文件，再更新博客；</span></span><br><span class="line"><span class="comment"> * 写一段小代码来实现这个过程</span></span><br><span class="line"><span class="comment"> * 1、youtube视频下载</span></span><br><span class="line"><span class="comment"> * 2、阿里云oss</span></span><br><span class="line"><span class="comment"> * 3、文件操作</span></span><br><span class="line"><span class="comment"> * 4、执行cmd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入视频名称：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入youtube路径&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="comment">//下载文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> Download.downloadVideo(url);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">5</span>);</span><br><span class="line">        <span class="comment">//上传oss</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Oss.upload(file);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        Write.write(name,str);</span><br><span class="line">        <span class="comment">//更新</span></span><br><span class="line">        Deploy.deploy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装前解决最后一个问题：下载可能失败！</p><p><img src="https://i.loli.net/2021/07/08/PUX6px1TSYWw54j.png"></p><p>讲道理vpn是很稳的，只需要延长这个配置时间就行</p><p>修改下载脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style=&quot;font-family:SimSun;font-size:14px;&quot;&gt;@ECHO OFF</span><br><span class="line">cd G:\blog\fafa</span><br><span class="line">set input=%1%</span><br><span class="line">set input2=%2%</span><br><span class="line">youtube-dl -f bestvideo+bestaudio --proxy 127.0.0.1:1080 --socket-timeout 60 -o %input% %input2%</span><br><span class="line">PAUSE&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>60s绝对够</p><p>封装为exe</p><p>使用exe4j（已经使用过一次）</p><p>最终测试：</p><p><img src="https://i.loli.net/2021/07/08/ndxcIvPOjo4DNCA.png"></p><p><img src="https://i.loli.net/2021/07/08/Knh5PcOLVxjBMIk.png"></p><p>最最后问题，视频名会乱码</p><p>chcp 65001</p><p><img src="https://i.loli.net/2021/07/08/7WfXBZvyhkC9PQu.png"></p><p>下载命令行执行此命令，再执行exe，测试</p><p>这个方法好像不大可靠</p><p><img src="https://i.loli.net/2021/07/08/RHtEilaJ3uhNVKs.png"></p><p>百度得另一方法：</p><p><img src="https://i.loli.net/2021/07/08/onLZrROupVKheFw.png"></p><p>还是不行，再次百度，修改这个配置</p><p><img src="https://i.loli.net/2021/07/09/8WQizkb9hf1cCRJ.png"></p><p>我草，还有乱码。。。</p><p>在idea里打开代码运行吧需要使用的时候，已经占了太多时间了；</p><p><strong>存在问题：</strong></p><ol><li><strong>视频等待下载时间为5min，可能会时间不够或者等待时间较长，应该使用多线程来解决</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-模板方法模式</title>
      <link href="/article/2d3dc485.html"/>
      <url>/article/2d3dc485.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><ol><li>模板方法模式</li><li>迪米特法则</li></ol></blockquote><span id="more"></span><h2 id="一、模板方法模式"><a href="#一、模板方法模式" class="headerlink" title="一、模板方法模式"></a>一、模板方法模式</h2><h3 id="1、问题引出"><a href="#1、问题引出" class="headerlink" title="1、问题引出"></a>1、问题引出</h3><p>仍然是程杰老师大话设计模式的例子，模拟考试的过程</p><p><img src="https://i.loli.net/2021/06/25/HTZEpa7tWDmbGzV.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/25 19:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaperDemo</span> &#123;</span><br><span class="line">    <span class="comment">//客户端</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestPaperA</span> <span class="variable">testPaperA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestPaperA</span>();</span><br><span class="line">        testPaperA.solveQA();</span><br><span class="line">        testPaperA.solveQB();</span><br><span class="line">        testPaperA.solveQC();</span><br><span class="line">        <span class="type">TestPaperB</span> <span class="variable">testPaperB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestPaperB</span>();</span><br><span class="line">        testPaperB.solveQA();</span><br><span class="line">        testPaperB.solveQB();</span><br><span class="line">        testPaperB.solveQC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象试卷父类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">TestPaper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solveQA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;问题1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;答案：&quot;</span> + resultA());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solveQB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;问题2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;答案：&quot;</span> + resultB());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solveQC</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;问题3&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;答案：&quot;</span> + resultC());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> String <span class="title function_">resultA</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">abstract</span> String <span class="title function_">resultB</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">abstract</span> String <span class="title function_">resultC</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类只需要给出答案即可</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestPaperA</span> <span class="keyword">extends</span> <span class="title class_">TestPaper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String <span class="title function_">resultA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String <span class="title function_">resultB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String <span class="title function_">resultC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestPaperB</span> <span class="keyword">extends</span> <span class="title class_">TestPaper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String <span class="title function_">resultA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String <span class="title function_">resultB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String <span class="title function_">resultC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、模板方法模式"><a href="#2、模板方法模式" class="headerlink" title="2、模板方法模式"></a>2、模板方法模式</h3><blockquote><p>模板方法模式（ Template Method）：在父类定义算法的骨架，将一些特定的步骤延迟到子类中，使得不改变算法的结构就可以改变某些特定的步骤</p></blockquote><p><img src="https://i.loli.net/2021/06/25/1n8EUp2LcQYel4m.png"></p><p>代码略</p><h2 id="二、迪米特法则"><a href="#二、迪米特法则" class="headerlink" title="二、迪米特法则"></a>二、迪米特法则</h2><blockquote><p>Demeter’s law is known as “don’t talk to strangers” because</p><ol><li>Each unit should have only limited knowledge about other units — only units “closely” related to the current unit.</li><li>Each unit should only talk to its friends — <em>don’t talk to strangers</em>.</li><li>Only talk to your immediate friends.</li></ol><p>More formally, the Law of Demeter requires that a method <em>m</em> of an object <em>O</em> may only invoke the methods of the following kinds of objects:</p><ul><li><em>O</em> itself.</li><li><em>m’s</em> parameters.</li><li>Any objects created&#x2F;instantiated <em>within m</em>.</li><li>O’s direct component objects.</li><li>A global variable, <em>accessible by O, in the scope of m</em>.</li></ul></blockquote><p>核心就是和朋友通信，不和陌生人通信；</p><p>代码写成一串（个人经常犯的问题）如 xxx.xxx.xxx.xxx.xx就是违反了迪米特法则</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-原型模式</title>
      <link href="/article/92a38b2.html"/>
      <url>/article/92a38b2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><ol><li>原型模式</li></ol></blockquote><span id="more"></span><h2 id="一、原型模式"><a href="#一、原型模式" class="headerlink" title="一、原型模式"></a>一、原型模式</h2><h3 id="1、问题引出"><a href="#1、问题引出" class="headerlink" title="1、问题引出"></a>1、问题引出</h3><p>求职信与简历</p><p>需要个对象 实例化多次 与 直接指向同一个引用 都存在问题</p><p>实例化多次耗费资源，指向同一个引用不能局部修改，牵一发而动全身</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、使用一次new一次</span></span><br><span class="line">    <span class="type">Resume</span> <span class="variable">resume1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resume</span>(<span class="string">&quot;小廖&quot;</span>,<span class="number">21</span>,<span class="string">&quot;cuit&quot;</span>);</span><br><span class="line">    System.out.println(resume1);</span><br><span class="line">    <span class="type">Resume</span> <span class="variable">resume2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resume</span>(<span class="string">&quot;小廖&quot;</span>,<span class="number">21</span>,<span class="string">&quot;cuit&quot;</span>);</span><br><span class="line">    System.out.println(resume2);</span><br><span class="line">    <span class="type">Resume</span> <span class="variable">resume3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resume</span>(<span class="string">&quot;小廖&quot;</span>,<span class="number">21</span>,<span class="string">&quot;cuit&quot;</span>);</span><br><span class="line">    System.out.println(resume3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、指向同一个引用</span></span><br><span class="line">    <span class="type">Resume</span> <span class="variable">resume4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resume</span>(<span class="string">&quot;小廖&quot;</span>,<span class="number">21</span>,<span class="string">&quot;cuit&quot;</span>);</span><br><span class="line">    <span class="type">Resume</span> <span class="variable">resume5</span> <span class="operator">=</span> resume4;</span><br><span class="line">    <span class="type">Resume</span> <span class="variable">resume6</span> <span class="operator">=</span> resume4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resume</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String company;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Resume</span><span class="params">(String name, <span class="type">int</span> age, String company)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//get set方法省略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Resume&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, company=&#x27;&quot;</span> + company + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、原型模式"><a href="#2、原型模式" class="headerlink" title="2、原型模式"></a>2、原型模式</h3><blockquote><p>原型模式（prototype）：用原型实例指定创建对象的种类，通过拷贝这些原型实例创建新的对象</p></blockquote><p><img src="https://i.loli.net/2021/06/22/9SPNexH8jnifmah.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/22 12:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropotypeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConcretePrototype</span> <span class="variable">concretePrototype</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcretePrototype</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">Prototype</span> <span class="variable">prototype</span> <span class="operator">=</span> concretePrototype.clone_();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Prototype</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get set省略</span></span><br><span class="line">    <span class="keyword">abstract</span> Prototype <span class="title function_">clone_</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcretePrototype</span> <span class="keyword">extends</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcretePrototype</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Prototype <span class="title function_">clone_</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcretePrototype</span>(<span class="built_in">this</span>.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、问题解决"><a href="#3、问题解决" class="headerlink" title="3、问题解决"></a>3、问题解决</h3><p>java中提供了Cloneable接口来实现原型模式</p><p><img src="https://i.loli.net/2021/06/22/yMvRwxqgznlCbBX.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/22 13:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resume2Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException, InterruptedException &#123;</span><br><span class="line">        <span class="type">Resume_</span> <span class="variable">resume1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resume_</span>(<span class="string">&quot;小廖&quot;</span>,<span class="number">21</span>,<span class="string">&quot;cuit&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">Resume_</span> <span class="variable">clone</span> <span class="operator">=</span> (Resume_) resume1.clone();</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        clone.setDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(resume1);</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resume_</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String company;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Resume_</span><span class="params">(String name, <span class="type">int</span> age, String company,Date date)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.company = company;</span><br><span class="line">        <span class="built_in">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// get set省略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Resume_&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, company=&#x27;&quot;</span> + company + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, date=&quot;</span> + date +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、深拷贝与浅拷贝"><a href="#4、深拷贝与浅拷贝" class="headerlink" title="4、深拷贝与浅拷贝"></a>4、深拷贝与浅拷贝</h3><p>若类中含有自定的引用属性（系统自带的会进行深拷贝，如上例中String,Date是引用变量，却被深拷贝）</p><p>如增加一个工作经历属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WorkExperience</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String company;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Resume_</span> <span class="variable">resume1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resume_</span>(<span class="string">&quot;小廖&quot;</span>,<span class="number">21</span>,<span class="string">&quot;cuit&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),workExperience);</span><br><span class="line"><span class="type">Resume_</span> <span class="variable">clone</span> <span class="operator">=</span> (Resume_) resume1.clone();</span><br><span class="line">clone.setDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">System.out.println(resume1);</span><br><span class="line">System.out.println(clone);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Resume_&#123;name=<span class="string">&#x27;小廖&#x27;</span>, age=<span class="number">21</span>, company=<span class="string">&#x27;cuit&#x27;</span>, date=Tue Jun <span class="number">22</span> <span class="number">13</span>:<span class="number">23</span>:<span class="number">01</span> CST <span class="number">2021</span>, workExperience=designpattern.f_prototype.WorkExperience@1ee12a7&#125;</span><br><span class="line">Resume_&#123;name=<span class="string">&#x27;小廖&#x27;</span>, age=<span class="number">21</span>, company=<span class="string">&#x27;cuit&#x27;</span>, date=Tue Jun <span class="number">22</span> <span class="number">13</span>:<span class="number">23</span>:<span class="number">01</span> CST <span class="number">2021</span>, workExperience=designpattern.f_prototype.WorkExperience@1ee12a7&#125;</span><br><span class="line"><span class="comment">//发现只进行了浅拷贝</span></span><br></pre></td></tr></table></figure><p><strong>需要重写clone方法完成深拷贝</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">    <span class="type">WorkExperience</span> <span class="variable">workExperience</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkExperience</span>(<span class="built_in">this</span>.getWorkExperience().getCompany());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Resume_</span>(<span class="built_in">this</span>.getName(),<span class="built_in">this</span>.getAge(),<span class="built_in">this</span>.getCompany(),<span class="built_in">this</span>.getDate(),workExperience);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Resume_&#123;name=<span class="string">&#x27;小廖&#x27;</span>, age=<span class="number">21</span>, company=<span class="string">&#x27;cuit&#x27;</span>, date=Tue Jun <span class="number">22</span> <span class="number">13</span>:<span class="number">29</span>:<span class="number">07</span> CST <span class="number">2021</span>, workExperience=designpattern.f_prototype.WorkExperience@1ee12a7&#125;</span><br><span class="line">Resume_&#123;name=<span class="string">&#x27;小廖&#x27;</span>, age=<span class="number">21</span>, company=<span class="string">&#x27;cuit&#x27;</span>, date=Tue Jun <span class="number">22</span> <span class="number">13</span>:<span class="number">29</span>:<span class="number">07</span> CST <span class="number">2021</span>, workExperience=designpattern.f_prototype.WorkExperience@10bedb4&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-工厂方法模式</title>
      <link href="/article/89a20157.html"/>
      <url>/article/89a20157.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><ol><li>工厂方法模式</li></ol></blockquote><span id="more"></span><h2 id="一、工厂方法模式"><a href="#一、工厂方法模式" class="headerlink" title="一、工厂方法模式"></a>一、工厂方法模式</h2><h3 id="1、问题引出"><a href="#1、问题引出" class="headerlink" title="1、问题引出"></a>1、问题引出</h3><p>简单工厂模式未解决的问题</p><p><img src="https://i.loli.net/2021/06/11/2d9Gb5hlJcDE3fs.png"></p><h3 id="2、工厂方法模式"><a href="#2、工厂方法模式" class="headerlink" title="2、工厂方法模式"></a>2、工厂方法模式</h3><blockquote><p>工厂方法模式：<strong>定义一个用于创建对象的接口，让子类去决定实例化哪一个子类。工厂方法使一个类的实例化延迟到其子类</strong></p></blockquote><p><img src="https://i.loli.net/2021/06/11/yp6oWI2zSR9TbKZ.png"></p><h3 id="3、解决方法"><a href="#3、解决方法" class="headerlink" title="3、解决方法"></a>3、解决方法</h3><p>解决方法：对工厂再次进行抽象</p><p><img src="https://i.loli.net/2021/06/11/LmqGMTJasZSzyNP.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/11 12:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarDemo</span> &#123;</span><br><span class="line">    <span class="comment">//client</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CarFactory</span> <span class="variable">fordFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FordFactory</span>();</span><br><span class="line">        <span class="type">CarFactory</span> <span class="variable">wuLingFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WulingFactory</span>();</span><br><span class="line"></span><br><span class="line">        fordFactory.creatCar().build();</span><br><span class="line">        wuLingFactory.creatCar().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ford</span> <span class="keyword">extends</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;造了一辆福特&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wuling</span> <span class="keyword">extends</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;造了一辆五菱宏光&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">creatCar</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FordFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">creatCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Ford</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WulingFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">creatCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Wuling</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决了简单工厂模式存在的问题，本质是对工厂进行进一步抽象</p><p><strong>简单工厂 vs 工厂方法</strong></p><p>简单工厂对于实例化哪一个对象的判断在工厂中完成，消除了客户端与产品之间的依赖；</p><p>工厂方法则将这个逻辑回到客户端，由客户端决定实例化哪个对象的工厂；</p><p>工厂方法每增加一个产品虽不需要修改代码，但需要增加一个工厂类，满足开闭原则但增加了开发负担；</p><p>反射伏笔：利用反射避免分支判断的问题</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-代理模式</title>
      <link href="/article/e3d6aa41.html"/>
      <url>/article/e3d6aa41.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><ol><li>代理模式</li></ol></blockquote><span id="more"></span><h2 id="一、代理模式（静态代理）"><a href="#一、代理模式（静态代理）" class="headerlink" title="一、代理模式（静态代理）"></a>一、代理模式（静态代理）</h2><h3 id="1、问题引出"><a href="#1、问题引出" class="headerlink" title="1、问题引出"></a>1、问题引出</h3><p>悲伤的修电脑故事引出的悲伤的做嫁衣（卓假易）故事</p><p><img src="https://i.loli.net/2021/06/10/J9VoezLfwmj2x7i.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/10 13:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZhuoJiaYi</span> &#123;</span><br><span class="line">    <span class="comment">//client</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Pursue</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="keyword">new</span> <span class="title class_">RealPursue</span>());</span><br><span class="line">        proxy.senddoll();</span><br><span class="line">        proxy.doMathWork();</span><br><span class="line">        proxy.sendFlower();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Pursue</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendFlower</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doMathWork</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">senddoll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealPursue</span> <span class="keyword">implements</span> <span class="title class_">Pursue</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小廖&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendFlower</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我送花&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doMathWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我教数学题&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">senddoll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我送洋娃娃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Pursue</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代理人知道是谁追求</span></span><br><span class="line">    <span class="keyword">private</span> RealPursue realPursue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代理人才认识追求的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">girlname</span> <span class="operator">=</span> <span class="string">&quot;小王&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(RealPursue realPursue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.realPursue = realPursue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendFlower</span><span class="params">()</span> &#123;</span><br><span class="line">        realPursue.sendFlower();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doMathWork</span><span class="params">()</span> &#123;</span><br><span class="line">        realPursue.doMathWork();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">senddoll</span><span class="params">()</span> &#123;</span><br><span class="line">         realPursue.senddoll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、代理模式"><a href="#2、代理模式" class="headerlink" title="2、代理模式"></a>2、代理模式</h3><blockquote><p>代理模式（proxy pattern）： <strong>为其他对象提供一种代理以控制对这个对象的访问</strong></p></blockquote><p><img src="https://i.loli.net/2021/06/10/IKQiwzUHVn1dafx.png"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/10 13:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyDemo</span> &#123;</span><br><span class="line">    <span class="comment">//client</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Proxy_</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy_</span>(<span class="keyword">new</span> <span class="title class_">RealSubject</span>());</span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;真实的请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Proxy_</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy_</span><span class="params">(RealSubject realSubject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        realSubject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、动态代理"><a href="#二、动态代理" class="headerlink" title="二、动态代理"></a>二、动态代理</h2><p>如果没有记错的话，动态代理应该和反射在一起学的，反射是框架设计的灵魂，自然在框架设计中也用到了动态代理；</p><p>然而现在的我一点都想不起来；只少已经学过三次动态代理；目前仅有的印象就是两种实现方式：jdk自带&#x2F;cglib实现</p><p>看书吧，拿出柜子上的《javaee互联网轻量级框架整合开发》</p><p>动态代理后续再讨论，先按照顺序继续学习其他设计模式；</p><blockquote><p>2021.7.17更新，是时候看下动态代理了</p><p>与静态代理的区别，静态代理需要创建一个代理类然后和目标类都实现接口，而动态代理不用编写这个代理类的代码，而是由反射来创建</p></blockquote><p>jdk动态代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/11 14:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">proxySubject</span> <span class="operator">=</span> ProxyFactory.getProxySubject(<span class="keyword">new</span> <span class="title class_">RealSubject</span>());</span><br><span class="line">        proxySubject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;真实的请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理工厂，返回代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Subject <span class="title function_">getProxySubject</span> <span class="params">(Subject realSubkect)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Subject) Proxy.newProxyInstance(ProxyFactory.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Subject.class&#125;, <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;真实请求前的代码&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(realSubkect, args);</span><br><span class="line">                System.out.println(<span class="string">&quot;真实请求后的代码&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-装饰者模式</title>
      <link href="/article/73c18d7c.html"/>
      <url>/article/73c18d7c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><ol><li>装饰者模式</li></ol></blockquote><span id="more"></span><h2 id="一、装饰者模式"><a href="#一、装饰者模式" class="headerlink" title="一、装饰者模式"></a>一、装饰者模式</h2><h3 id="1、问题引出"><a href="#1、问题引出" class="headerlink" title="1、问题引出"></a>1、问题引出</h3><blockquote><p>问题来源《大话设计模式》</p></blockquote><p>小菜扮靓1.0</p><p><img src="https://i.loli.net/2021/06/09/EvWguz5naXt9VRp.png"></p><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小菜&quot;</span>);</span><br><span class="line"><span class="type">Tshirt</span> <span class="variable">shirt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Finery</span>();</span><br><span class="line"><span class="type">Shoes</span> <span class="variable">shoes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shoes</span>();</span><br><span class="line"><span class="type">SunGlassess</span> <span class="variable">sunglasses</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SunGlasess</span>();</span><br><span class="line">shirt.show();</span><br><span class="line">shoes.show();</span><br><span class="line">sunglassess.show();</span><br></pre></td></tr></table></figure><p>问题：shirt.show();shoes.show();sunglassess.show();，就像在众目睽睽之下一件一件穿衣服，而真实的情况应该是在房间里穿好再出来（内部组装完毕，再显示出来），且顺序可以自己控制（先穿衣服还是先穿裤子）</p><h3 id="2、装饰者模式"><a href="#2、装饰者模式" class="headerlink" title="2、装饰者模式"></a>2、装饰者模式</h3><blockquote><p>装饰者模式（Decorate pattern）:  动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类给为灵活</p></blockquote><blockquote><p>Decorate pattern:<strong>Decorator</strong> is a structural design pattern that lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.</p></blockquote><p><img src="https://i.loli.net/2021/06/09/rkjnIZFaYUQtTpN.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/9 12:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">decoratorDemo</span> &#123;</span><br><span class="line">    <span class="comment">//client</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConcreteComponent</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteComponent</span>();</span><br><span class="line">        <span class="type">Decorator</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteDecoratorA</span>(base);</span><br><span class="line">        <span class="type">Decorator</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteDecoratorB</span>(d1);</span><br><span class="line">        d2.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;基本方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Component component;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        component.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteDecoratorA</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.operation();</span><br><span class="line">        System.out.println(<span class="string">&quot;添加A功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBehavior</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteDecoratorB</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String addState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteDecoratorB</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.operation();</span><br><span class="line">        System.out.println(<span class="string">&quot;添加B功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、问题解决"><a href="#3、问题解决" class="headerlink" title="3、问题解决"></a>3、问题解决</h3><p>小菜扮靓2.0</p><p><img src="https://i.loli.net/2021/06/09/hJBHcZqzif5TWVR.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Author liaotao</span><br><span class="line"> * @Date 2021/6/9 13:08</span><br><span class="line"> */</span><br><span class="line">public class XiaoCaiBanNiang &#123;</span><br><span class="line">    //client</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Person person = new Person();</span><br><span class="line">        Tshirt tshirt = new Tshirt(person);</span><br><span class="line">        Shoes shoes = new Shoes(tshirt);</span><br><span class="line">        Sun sun = new Sun(shoes);</span><br><span class="line"></span><br><span class="line">        sun.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        System.out.println(&quot;的人&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Finery extends Person &#123;</span><br><span class="line">    private Person finery;</span><br><span class="line"></span><br><span class="line">    public Finery(Person finery) &#123;</span><br><span class="line">        this.finery = finery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        finery.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Shoes extends Finery &#123;</span><br><span class="line"></span><br><span class="line">    public Shoes(Person finery) &#123;</span><br><span class="line">        super(finery);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        System.out.println(&quot;穿鞋子&quot;);</span><br><span class="line">        super.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Tshirt extends Finery &#123;</span><br><span class="line"></span><br><span class="line">    public Tshirt(Person finery) &#123;</span><br><span class="line">        super(finery);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        System.out.println(&quot;穿衬衫&quot;);</span><br><span class="line">        super.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Sun extends Finery &#123;</span><br><span class="line"></span><br><span class="line">    public Sun(Person finery) &#123;</span><br><span class="line">        super(finery);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        System.out.println(&quot;戴上太阳镜&quot;);</span><br><span class="line">        super.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、附加问题"><a href="#4、附加问题" class="headerlink" title="4、附加问题"></a>4、附加问题</h3><p>java基础阶段学习，io中的<strong>处理流</strong>使用了装饰者模式；</p><p>以<strong>BufferReader</strong>为例</p><p><img src="https://i.loli.net/2021/06/09/FM3kaqGQvIxJbKt.png"></p><p><img src="https://i.loli.net/2021/06/09/9DrwpPA3JFTMNud.png"></p><p>不难发现使用了装饰者模式</p><p>代码模拟：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/9 13:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader_</span> <span class="variable">bufferedReader1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader_</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>());</span><br><span class="line">        bufferedReader1.read();</span><br><span class="line">        <span class="type">BufferedReader_</span> <span class="variable">bufferedReader2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader_</span>(<span class="keyword">new</span> <span class="title class_">CharReader</span>());</span><br><span class="line">        bufferedReader2.read();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileReader</span> <span class="keyword">implements</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读文件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CharReader</span> <span class="keyword">implements</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读字符&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BufferedReader_</span> <span class="keyword">implements</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Reader reader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferedReader_</span><span class="params">(Reader reader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.reader = reader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加强功能&quot;</span>);</span><br><span class="line">        reader.read();</span><br><span class="line">        System.out.println(<span class="string">&quot;加强功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结束！</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-策略模式</title>
      <link href="/article/ea641220.html"/>
      <url>/article/ea641220.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><ol><li>策略模式</li><li>单一职责原则</li><li>开放-封闭原则</li><li>依赖倒转原则</li><li>里氏代换原则</li></ol></blockquote><span id="more"></span><h2 id="一、策略模式"><a href="#一、策略模式" class="headerlink" title="一、策略模式"></a>一、策略模式</h2><h3 id="1、问题引出"><a href="#1、问题引出" class="headerlink" title="1、问题引出"></a>1、问题引出</h3><p>需设计一个水果店的收费系统，再计算出总价格后可以正常收费、打折或者满减；</p><p>简单工厂模式实现：</p><p><img src="https://i.loli.net/2021/06/01/WSEDjUVvhl4eKis.png"></p><p>前文所述：简单工厂模式是解决在<strong>创建对象时不知道创建哪一个</strong>的问题，而这个问题的核心更在于如何<strong>灵活的变换要调用的方法</strong>，而不是创建哪一个对象。</p><h3 id="2、策略模式引出"><a href="#2、策略模式引出" class="headerlink" title="2、策略模式引出"></a>2、策略模式引出</h3><blockquote><p>策略模式（Strategy），定义了一系列的算法家族，分别封装起来，它们之间可以互相替换；算法的变化不会影响到使用算法的客户</p></blockquote><p><img src="https://i.loli.net/2021/06/01/eQzNiWR4t1xJlbB.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/1 23:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyDemo</span> &#123;</span><br><span class="line">    <span class="comment">//相当于客户端</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//修改传入的参数，就可以使用不同的方法</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">ConcreteStrategyA</span>());</span><br><span class="line">        context.ContextInterface();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">AlgorithmInterface</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteStrategyA</span> <span class="keyword">extends</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AlgorithmInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行策略A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteStrategyB</span> <span class="keyword">extends</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AlgorithmInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行策略B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteStrategyC</span> <span class="keyword">extends</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AlgorithmInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行策略C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">(Strategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ContextInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy.AlgorithmInterface();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、解决问题"><a href="#3、解决问题" class="headerlink" title="3、解决问题"></a>3、解决问题</h3><p><img src="https://i.loli.net/2021/06/01/tC4gNPcaxuZUlM8.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> designpattern.b_strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/1 23:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CashDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//算法的变换不影响客户端的使用</span></span><br><span class="line">        <span class="type">CashContext</span> <span class="variable">cashContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CashContext</span>(<span class="keyword">new</span> <span class="title class_">CashNormal</span>(<span class="number">100</span>));</span><br><span class="line">        System.out.println(cashContext.getResult());</span><br><span class="line">        cashContext = <span class="keyword">new</span> <span class="title class_">CashContext</span>(<span class="keyword">new</span> <span class="title class_">CashDebate</span>(<span class="number">100</span>,<span class="number">0.8</span>));</span><br><span class="line">        System.out.println(cashContext.getResult());</span><br><span class="line">        cashContext = <span class="keyword">new</span> <span class="title class_">CashContext</span>(<span class="keyword">new</span> <span class="title class_">CashRetuen</span>(<span class="number">100</span>,<span class="number">100</span>,<span class="number">10</span>));</span><br><span class="line">        System.out.println(cashContext.getResult());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CashSuper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CashSuper</span><span class="params">(<span class="type">double</span> total)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">acceptCash</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotal</span><span class="params">(<span class="type">double</span> total)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashNormal</span> <span class="keyword">extends</span> <span class="title class_">CashSuper</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CashNormal</span><span class="params">(<span class="type">double</span> total)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">acceptCash</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getTotal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashDebate</span> <span class="keyword">extends</span> <span class="title class_">CashSuper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> debate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CashDebate</span><span class="params">(<span class="type">double</span> total,<span class="type">double</span> debate)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(total);</span><br><span class="line">        <span class="built_in">this</span>.debate = debate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">acceptCash</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getTotal() * <span class="built_in">this</span>.debate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashRetuen</span> <span class="keyword">extends</span> <span class="title class_">CashSuper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> threshold;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> back;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CashRetuen</span><span class="params">(<span class="type">double</span> total,<span class="type">double</span> threshold,<span class="type">double</span> back)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(total);</span><br><span class="line">        <span class="built_in">this</span>.threshold = threshold;</span><br><span class="line">        <span class="built_in">this</span>.back = back;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">acceptCash</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 计算需要满减几次</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="built_in">super</span>.getTotal() / threshold);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getTotal() - count * back;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CashSuper cashSuper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CashContext</span><span class="params">(CashSuper cashSuper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cashSuper = cashSuper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> cashSuper.acceptCash();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、单一职责原则"><a href="#二、单一职责原则" class="headerlink" title="二、单一职责原则"></a>二、单一职责原则</h2><p>生活的例子；早些年手机功能不是这么强的时候，出门需要带mp3听歌，mp4看视频，钱包付款，相机拍照，等等。而现在出门只需要带手机就可以完成这些所有的功能；手机的设计违反单一职责原则，比如在大街上看到一个好看的小姐姐，用相机可以很快的拍下来，而使用手机在打开相机的时候（或者你正在打游戏）她就可能已经走远了（勉勉强强的例子）；</p><blockquote><p>单一职责原则（SRP）：就一个类而言，应该仅有一个引起它变换的原因。</p></blockquote><blockquote><p>Single responsibility principle：There should never be more than one reason for a class to change</p></blockquote><h2 id="三、开放-封闭原则"><a href="#三、开放-封闭原则" class="headerlink" title="三、开放-封闭原则"></a>三、开放-封闭原则</h2><p>开发过程难免会有需求的变化，不说是为客户开发，自己开发也是经常变动需求，而设计出<strong>易于拓展</strong>的软件显得尤为重要，不至于在修改需求时将整个软件系统推翻重做； </p><blockquote><p>开放-封闭原则（OCP）：软件实体（类、函数、模块等等）应该可以拓展，但是不可修改</p></blockquote><blockquote><p>Open-Closed Principle ：Software entities(classes,modules,functions etc) should open for extension ,but close for modification.</p></blockquote><h2 id="四、依赖倒转原则"><a href="#四、依赖倒转原则" class="headerlink" title="四、依赖倒转原则"></a>四、依赖倒转原则</h2><blockquote><p>依赖倒转原则（DIP）：</p><p>A、高层依赖不应该依赖底层模块，两个都应该依赖抽象</p><p>B、抽象不应该依赖细节，细节应该依赖抽象（说白就是针对接口编程而不是针对实现）</p></blockquote><blockquote><p>Dependency inversion principle</p><p>A、High level modules should not depend upon low level modules. Both should depend upon abstractions. 1</p><p>B、 Abstractions should not depend upon details. Details should depend upon abstractions。</p></blockquote><p>开发中经常把一些常用的方法封装起来，如访问数据库的代码，由高层模块调用，这就是高层模块依赖底层模块；在开发新的项目时直接调用这些代码；</p><p>但如果客户要求更改需求，如数据库或存储信息方式，这时当我们要使用高层模块时，高层模块和底层模块是绑定在一起就无法使用，就麻烦了；就像cpu，内存等如果都高度依赖主板，主板一坏直接jj，但事实确实主板这些电脑上的设备都是依赖接口，也就导致电脑维修的时候哪里坏了换哪里就行；</p><p>实现：如开发中service dao层都是依赖接口，而不是实现类</p><h2 id="五、里氏代换原则"><a href="#五、里氏代换原则" class="headerlink" title="五、里氏代换原则"></a>五、里氏代换原则</h2><blockquote><p>里氏代换原则（LSP）：子类型必须能够替换掉他们的父类型</p></blockquote><blockquote><p>Liskov Substitution Principle：Inheritance should ensure that any property proved about supertype objects also holds for subtype objects</p></blockquote><p>子类可以扩展父类的功能，但不能改变父类原有的功能；里氏代换原则解决了什么时候应该使用继承，什么时候不应该使用继承的问题；如果设计的类关系违反了里氏代换原则，就应该重新设计它们之间的关系；只有子类可以替换父类而软件系统不受影响的时候，父类才能真正实现复用，子类也能在父类的基础上拓展功能</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-简单工厂模式</title>
      <link href="/article/aac06fee.html"/>
      <url>/article/aac06fee.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><ol><li>uml类图</li><li>简单工厂模式</li></ol></blockquote><span id="more"></span><blockquote><p>大概结束了java基础的学习，下一个模块就是设计模式（design pattern），有句话说的好，学习的效率不在入而在出，即不在于你刷了多少视频，照着视频敲了多少代码，而在于你真真可以产出的东西，真正自己理解到的，以及用自己的语言表述出来（尽管听上去不是很到位，但这才是你自己的东西）；所以在系统学习设计模式时不再跟着视频学，而是通过gof的《设计模式》和 《大话设计模式》两本书，来产出一个系列的设计模式博客，通过韩老师的java视频已经提升了oop思想，通过学习设计模式进一步提升吧！</p></blockquote><h2 id="一、uml类图"><a href="#一、uml类图" class="headerlink" title="一、uml类图"></a>一、uml类图</h2><blockquote><p>工具选择，我感觉visio好像并没有staruml好用，也可能是用惯之前那个，现在问题回到了如何破解staruml</p><p>第二天写博客已解决这个问题  <a href="http://taoblog421.cn/posts/1132d17a/#more">解决方法</a></p></blockquote><h3 id="1、类图表示"><a href="#1、类图表示" class="headerlink" title="1、类图表示"></a>1、类图表示</h3><p><img src="https://i.loli.net/2021/05/30/3aL6xsr8bBRmlGJ.png"></p><h3 id="2、类与类，类与接口之间的关系"><a href="#2、类与类，类与接口之间的关系" class="headerlink" title="2、类与类，类与接口之间的关系"></a>2、类与类，类与接口之间的关系</h3><h4 id="1、Generalization"><a href="#1、Generalization" class="headerlink" title="1、Generalization"></a>1、Generalization</h4><p>泛化，即继承关系</p><p><img src="https://i.loli.net/2021/05/31/lQCFr9nXKA5Vcfo.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2、Realization"><a href="#2、Realization" class="headerlink" title="2、Realization"></a>2、Realization</h4><p>实现，即类实现接口（两种表示方法）</p><p><img src="https://i.loli.net/2021/05/31/oBqHgUuOxsKJMvG.png"></p><h4 id="3、Aggregation"><a href="#3、Aggregation" class="headerlink" title="3、Aggregation"></a>3、Aggregation</h4><p>聚合，“弱拥有”关系，两个类的生命周期可以不一样，一个人可以脱离人群存在</p><p>如：人群与人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PeopleList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;People&gt; peopleList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/31/3FgLCnJeSi1Dahv.png"></p><h4 id="4、Composition"><a href="#4、Composition" class="headerlink" title="4、Composition"></a>4、Composition</h4><p>组合，“强拥有”关系，两个类的生命周期一样,翅膀不能脱离鸟存在</p><p>如：鸟与翅膀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Wing leftWing;</span><br><span class="line">    <span class="keyword">private</span> Wing rightWing;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wing</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/31/jTvFc6IwXsyYVEO.png"></p><h4 id="5、Association"><a href="#5、Association" class="headerlink" title="5、Association"></a>5、Association</h4><p>关联，知道，了解关系</p><p>一个类“知道”另一个类，如人了解知识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Knowledge knowledge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Knowledge</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/31/xWBrbVpq1KO4I8L.png"></p><h4 id="6、Dependency"><a href="#6、Dependency" class="headerlink" title="6、Dependency"></a>6、Dependency</h4><p>依赖，如人类活着依赖食物和水</p><p>（个人理解<strong>当一个类作为其他类方法的参数或返回类型</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">live</span><span class="params">(Water water,Food food)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Water</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/31/juIcHWOUFMEt3Cz.png"></p><h2 id="二、简单工厂模式"><a href="#二、简单工厂模式" class="headerlink" title="二、简单工厂模式"></a>二、简单工厂模式</h2><blockquote><p>问题引出，最简单案例：计算器</p></blockquote><h3 id="1、1-0计算器"><a href="#1、1-0计算器" class="headerlink" title="1、1.0计算器"></a>1、1.0计算器</h3><p>对于但凡有过一点编程经验的人，都会第一时间写出如下代码或类似如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Caculate1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入A&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">numberA</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入B&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">numberB</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入C&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">opreation</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> (opreation) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>: &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;A&quot;</span> + opreation + <span class="string">&quot;B&quot;</span> + <span class="string">&quot;=&quot;</span> + (numberA + numberB));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>: &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;A&quot;</span> + opreation + <span class="string">&quot;B&quot;</span> + <span class="string">&quot;=&quot;</span> + (numberA - numberB));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>: &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;A&quot;</span> + opreation + <span class="string">&quot;B&quot;</span> + <span class="string">&quot;=&quot;</span> + (numberA * numberB));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (numberB == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;除数不能为零&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;A&quot;</span> + opreation + <span class="string">&quot;B&quot;</span> + <span class="string">&quot;=&quot;</span> + (numberA / numberB));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>追求能用就行，当然不是问题，但这样写出来得代码不够优雅；</p><p>这里借鉴书上学习设计模式的三个阶段（目前自认为1.5阶段吧哈哈）</p><blockquote><p>1、完全不懂设计模式，写出能用就行代码 </p><p>2、学了滥用，有时反而将简单问题复杂化</p><p>3、融会贯通，oop水平更上一层楼</p></blockquote><h3 id="2、2-0计算器"><a href="#2、2-0计算器" class="headerlink" title="2、2.0计算器"></a>2、2.0计算器</h3><p>因为书上给出简单工厂模式的例子是计算器，但造车那个例子或许更有助于理解，这里直接给出使用简单工厂模式优化后的代码</p><p><img src="https://i.loli.net/2021/05/31/32OsPMtRXBeG17k.png"></p><p>代码不是很有必要再写一遍</p><p>Note:</p><ol><li>CaculateFactory根据参数operate实例化对应的对象</li><li>运行时根据动态绑定机制执行对应子类的方法</li><li>解决了在创建对象时不知道应该使用哪个子类的问题</li></ol><h3 id="3、经典案例-造车工厂"><a href="#3、经典案例-造车工厂" class="headerlink" title="3、经典案例 - 造车工厂"></a>3、经典案例 - 造车工厂</h3><p>其实本质是一样</p><p><img src="https://i.loli.net/2021/05/31/YyPg2Hbew1EMUWz.png"></p><p>这时发现一个问题：</p><p>若添加一个新的汽车子类还是需要修改工厂类，留在后面解决</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>staruml破解</title>
      <link href="/article/1132d17a.html"/>
      <url>/article/1132d17a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>staruml破解</p></blockquote><span id="more"></span><blockquote><p>首先放个绿色版供不想自己破解的朋友直接下载使用</p><p>链接：<a href="https://pan.baidu.com/s/1Qk4IKnK9iDn2moTV9Gm37Q">https://pan.baidu.com/s/1Qk4IKnK9iDn2moTV9Gm37Q</a><br>提取码：1234<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><p>官方已经更新到4版本，我电脑上的是3版本，不知道破解方法一样不</p><p>下载链接：<a href="https://staruml.io/download">https://staruml.io/download</a></p><h2 id="二、破解"><a href="#二、破解" class="headerlink" title="二、破解"></a>二、破解</h2><p>破解方法</p><h3 id="1、安装asar依赖"><a href="#1、安装asar依赖" class="headerlink" title="1、安装asar依赖"></a>1、安装asar依赖</h3><p>需要node.js环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g asar</span><br></pre></td></tr></table></figure><h3 id="2、解压app-asar"><a href="#2、解压app-asar" class="headerlink" title="2、解压app.asar"></a>2、解压app.asar</h3><p>需要管理员身份运行cmd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asar extract app.asar app</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/31/rlTgKPJBdeNOZxW.png" alt="image-20210531121614512"></p><p>发现目录下多了app文件夹</p><h3 id="3、修改license-manager-js"><a href="#3、修改license-manager-js" class="headerlink" title="3、修改license-manager.js"></a>3、修改license-manager.js</h3><p>路径如图</p><p><img src="https://i.loli.net/2021/05/31/u5IN7EV8p2kol16.png" alt="image-20210531121753251"></p><p><strong>reject(“错误信息”) 替换成setStatus(this, true)</strong></p><p><img src="https://i.loli.net/2021/05/31/9QWpbAnYHXCEkho.png"></p><p>搜索替换全部即可</p><h3 id="4、打包回去"><a href="#4、打包回去" class="headerlink" title="4、打包回去"></a>4、打包回去</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asar pack app app.asar</span><br></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210531122140159.png"></p><p>再次打开没有未激活提醒（自认为要比visio好用）</p><p><img src="https://i.loli.net/2021/05/31/ZAklyfsM514CoBh.png"></p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>科学上网</title>
      <link href="/article/812d49a5.html"/>
      <url>/article/812d49a5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>言简意赅，科学上网</p></blockquote><span id="more"></span><h3 id="1、免费机场"><a href="#1、免费机场" class="headerlink" title="1、免费机场"></a>1、免费机场</h3><p>首先我推荐的两个网站都<strong>锁了大陆的ip</strong>，需要先找免费的连进去（免费梯子看直播当然不现实）</p><p>推荐蓝灯 <a href="https://getlantern.org/zh_CN/">https://getlantern.org/zh_CN/</a> 应该可以免费试用</p><p>安装后运行即可</p><p><img src="https://i.loli.net/2021/05/29/1Muaq6CSDPt5kHA.png"></p><p>每天有一点免费流量可以用（也可以直接升级蓝灯专业版使用，本人没有用过不知道效果如何）</p><h3 id="2、机场推荐"><a href="#2、机场推荐" class="headerlink" title="2、机场推荐"></a>2、机场推荐</h3><p>绝无广告，完全是自己用的比较稳定，看老鼠台油管都很稳</p><p><a href="https://yunyi.nl/">https://yunyi.nl/</a></p><p><a href="https://renzhe.cloud/">https://renzhe.cloud/</a></p><p>以 <a href="https://yunyi.nl/%E4%B8%BA%E4%BE%8B">https://yunyi.nl/为例</a></p><p>注册登录账号</p><p><img src="https://i.loli.net/2021/05/29/9dzWKcegUkrqYIx.png" alt="image-20210529211030551"></p><p>右边选择商店套餐，根据需要购买（支持微信，支付宝支付）</p><blockquote><p>忍者云<a href="https://renzhe.cloud/%E6%9C%899.9%E4%B8%80%E6%9C%88%E5%A5%97%E9%A4%90%EF%BC%8C%E8%8B%A5%E4%B8%8D%E9%80%89%E6%8B%A920%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%E9%82%A3%E4%B8%AA">https://renzhe.cloud/有9.9一月套餐，若不选择20可以选择那个</a></p></blockquote><p><strong>建议一月一月购买！！！</strong></p><p>购买完成后在首页点击复制ssr订阅</p><p><img src="https://i.loli.net/2021/05/29/kC91NItdTPWbUhe.png"></p><p>下载 ssr</p><p>下载链接：<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.1/ShadowsocksR-win-4.9.1.zip">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.1/ShadowsocksR-win-4.9.1.zip</a></p><p>解压，运行这个（不知道2.0,4.0啥区别应该差不多吧。。。）</p><p><img src="https://i.loli.net/2021/05/29/6S27RFp8AvtgcQm.png"></p><p>右下角小图标右键</p><p><img src="https://i.loli.net/2021/05/29/WUDvqbcJuIs3yzt.png" alt="image-20210529213845256"></p><p><img src="https://i.loli.net/2021/05/29/Om6xpHCc3Rhdsa5.png"></p><p><strong>点击add</strong></p><p>这一栏输入刚刚复制的内容</p><p><img src="https://i.loli.net/2021/05/29/yV8gIqXLiBhzDwT.png"></p><p>点击确定</p><p>右键小图标更新</p><p><img src="https://i.loli.net/2021/05/29/cavQr8OLTZU14Px.png"></p><p>代理模式改为pac模式（大陆ip不使用代理）</p><p><img src="https://i.loli.net/2021/05/29/bnT1CkPdsp7XHA6.png" alt="image-20210529212334917"></p><p>服务器，选择新添加的订阅</p><p>（这里关闭服务器负载均衡）</p><p><img src="https://i.loli.net/2021/05/29/ypiAk4t8wm5RuIN.png"></p><p>选择节点</p><p><img src="https://i.loli.net/2021/05/29/OdF4KBIpZ9iEnjw.png" alt="image-20210529212519922"></p><p>便可以开始愉快的看直播</p><p><img src="https://i.loli.net/2021/05/29/YgW9fZr4ypmIoV1.png"></p><p>这还有自己搭ssr代理方法，不是有兴趣的话没有必要</p><p><a href="http://taoblog421.cn/posts/25bd3e2a/">http://taoblog421.cn/posts/25bd3e2a/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>100篇博客纪念！</title>
      <link href="/article/1945b697.html"/>
      <url>/article/1945b697.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>大概一年前开始有了记博客的习惯，不知不觉已经水了100篇了</p></blockquote><span id="more"></span><h2 id="梦开始的地方"><a href="#梦开始的地方" class="headerlink" title="梦开始的地方"></a>梦开始的地方</h2><blockquote><p>疫情期间白嫖了半年云服务器，瞎折腾了几天搞了个云笔记，当时感觉nb的不得了啊哈，回头看看也就是照着网上的方法直接部署….，然后发到了csdn上，还是有几个人参考并评论交流</p></blockquote><p><img src="https://i.loli.net/2021/05/25/nRbGJC8tAIlL1Fo.png" alt="image-20210525231123973"></p><p><img src="https://i.loli.net/2021/05/25/hGPiLXmZ7ej681c.png"></p><h2 id="wordpress阶段"><a href="#wordpress阶段" class="headerlink" title="wordpress阶段"></a>wordpress阶段</h2><blockquote><p>莫名其妙买了三年腾讯云的学生服务器（有一定被客服坑的原因）加上本来就准备坚持记博客，很多东西学过就忘、不用就忘。自己遇到同样的问题再翻也比较方便，选择直接部署的wordpress，也是很快就可以搭建起来</p></blockquote><p><img src="https://i.loli.net/2021/05/25/4lcMvhfPxqboGew.png"></p><p>然后就是跟着韩顺平韩老师学数据结构与算法、王道的操作系统（当时应付考试）、尚硅谷springboot（就前六章学了个大概）、Vue……</p><p><img src="https://i.loli.net/2021/05/25/gfPYuAiT6Kc3QxN.png"></p><p>学过、忘过….</p><p>谷粒学院项目确实让水平提升不少</p><p><img src="https://i.loli.net/2021/05/25/t3JNWSwVYOzsmXP.png"></p><p><strong>比较有意思的</strong></p><blockquote><p>破解网易云？</p><p>也是网上的方法，可以听网易云所有歌。但通过博客分享给很多同学朋友，还是很不错</p></blockquote><p><img src="https://i.loli.net/2021/05/25/zApaP6WCwSeloBc.png"></p><blockquote><p>自建vps，</p><p>被油管上的视频洗脑上头，详见博客内容，然后闲置的服务器自建代理</p></blockquote><p><img src="https://i.loli.net/2021/05/25/Zx8oReJlkAvjyNd.png"></p><blockquote><p>爬虫程序</p><p>在水友的求助下，简单封装了一个爬虫程序，感受到互联网记忆的可怕</p></blockquote><p><img src="https://i.loli.net/2021/05/25/f5DTAgnJu6QcybV.png" alt="image-20210525232915394"></p><h2 id="hexo阶段（目前）"><a href="#hexo阶段（目前）" class="headerlink" title="hexo阶段（目前）"></a>hexo阶段（目前）</h2><blockquote><p>随着博客的数量多起来，wordpress开始巨卡无比，半年前的一天决定换为纯静态的hexo，使用稍微麻烦一点，但速度很可观</p></blockquote><p><img src="https://i.loli.net/2021/05/25/QdqLBGnwMZm9rXA.png"></p><p><img src="https://i.loli.net/2021/05/25/LfCrFwNZJYhIWzg.png"></p><p>步入考研阶段，为了考研重新学了一遍c语言；</p><p>发现java基础也很薄弱，可能这就是听不懂框架底层源码的原因，在拟定考研本校压力不是很大的情况下正在重新学一遍java，基础不牢，地动山摇啊</p><p><img src="https://i.loli.net/2021/05/25/r87tvI5LGlaMXCj.png"></p><blockquote><p>第100篇博客，希望可以坚持下去吧！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喜瑞斯商城2.0源码分享</title>
      <link href="/article/484b8864.html"/>
      <url>/article/484b8864.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>喜瑞斯商城2.0</p></blockquote><span id="more"></span><h2 id="一、技术栈"><a href="#一、技术栈" class="headerlink" title="一、技术栈"></a>一、技术栈</h2><p>bs架构、前后端分离开发、微服务</p><p><strong>主要技术栈：</strong></p><p>后端：springboot、springcloud、mybatisPlus、reids、mysql、easyExcel、swagger</p><p>前端：vue 、element-ui、axios、node.js、nginx</p><p>其他：阿里云短信、阿里云oss（对象存储）、支付宝支付</p><h2 id="二、运行说明"><a href="#二、运行说明" class="headerlink" title="二、运行说明"></a>二、运行说明</h2><p><strong>项目源码获取方法见文章末尾</strong></p><h3 id="1、前置准备："><a href="#1、前置准备：" class="headerlink" title="1、前置准备："></a>1、前置准备：</h3><h4 id="1、redis"><a href="#1、redis" class="headerlink" title="1、redis"></a>1、redis</h4><p>redis用于存储用户登录信息、短信验证码等操作</p><p>安装并启动即可</p><p><a href="https://redis.io/">https://redis.io/</a></p><h4 id="2、nacos"><a href="#2、nacos" class="headerlink" title="2、nacos"></a>2、nacos</h4><p>微服务注册中心使用阿里巴巴的nacos，同样安装并启动即可</p><p><a href="https://nacos.io/en-us/">https://nacos.io/en-us/</a></p><h4 id="3、nginx"><a href="#3、nginx" class="headerlink" title="3、nginx"></a>3、nginx</h4><p>nginx进行请求转发，将请求转发给各个微服务</p><p>配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"> </span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"> </span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    client_max_body_size 1024m;</span><br><span class="line"> </span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"> </span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"> </span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"> </span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"> </span><br><span class="line">    #gzip  on;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       9001;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location ~ /backstage/ &#123;</span><br><span class="line">            proxy_pass http://localhost:8001;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /goods/ &#123;</span><br><span class="line">            proxy_pass http://localhost:8002;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /oss/ &#123;</span><br><span class="line">            proxy_pass http://localhost:8003;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /pay/ &#123;</span><br><span class="line">            proxy_pass http://localhost:8004;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ /sms/ &#123;</span><br><span class="line">            proxy_pass http://localhost:8005;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ /user/ &#123;</span><br><span class="line">            proxy_pass http://localhost:8006;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>安装并启动即可</p><p><a href="https://www.nginx.com/">https://www.nginx.com/</a></p><h4 id="4、node-js"><a href="#4、node-js" class="headerlink" title="4、node.js"></a>4、node.js</h4><p>安装即可，前端用到</p><p><a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p><strong>确认8001-8006端口，以及以上应用默认端口没有被占用</strong></p><h3 id="2、启动后端"><a href="#2、启动后端" class="headerlink" title="2、启动后端"></a>2、启动后端</h3><p>修改各个微服务的配置文件，主要为数据库连接信息</p><p>配置文件样例：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 服务名 (spring-cloud用到)</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">service-backstage</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 环境设置：dev、test、prod</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># mysql数据库连接</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/sq_cyfwlp?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># json返回时间格式</span></span><br><span class="line"><span class="attr">spring.jackson.date-format</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="attr">spring.jackson.time-zone</span>=<span class="string">GMT+8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#nacos服务地址</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><p>启动各个微服务：</p><p>运行xxxApplication即可</p><p>如</p><p><img src="https://i.loli.net/2021/05/22/IWovLDhuzAbStlq.png"></p><p><strong>接口文档</strong>使用swagger生成</p><p><img src="https://i.loli.net/2021/05/22/tQ9XcgwFLiozfhW.png"></p><p>将地址中的端口换位对应微服务的端口即可查看对应的接口文档</p><h3 id="3、启动前端"><a href="#3、启动前端" class="headerlink" title="3、启动前端"></a>3、启动前端</h3><p>需提前安装node.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>即可(两个前端系统使用不同端口，可同时启动)</p><h2 id="三、项目演示"><a href="#三、项目演示" class="headerlink" title="三、项目演示"></a>三、项目演示</h2><p>b站链接：<a href="https://www.bilibili.com/video/BV1MU4y1L7NT">https://www.bilibili.com/video/BV1MU4y1L7NT</a></p><blockquote><p>写在最后，开发不易，项目还是有很多需要改正或者进一步优化的地方。本来看上一个项目下载量还行想恰一波烂钱，本着开源精神还是把源码放出来，如果这个项目可以帮助到你，还是可以支持一瓶肥宅快乐水</p></blockquote><img src="https://i.loli.net/2021/05/22/EeJiuKLg6o24dr7.png" style="zoom:33%;" /><blockquote><p>源码：<a href="https://wwa.lanzoui.com/iHx7Opco3ze">https://wwa.lanzoui.com/iHx7Opco3ze</a>（蓝奏云直接打包带走）</p><p>gitee:<a href="https://gitee.com/liao_tao123">https://gitee.com/liao_tao123</a> (三个部分都托管在gitee上)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gittalk登录403解决方案</title>
      <link href="/article/500ad1da.html"/>
      <url>/article/500ad1da.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前几天甚至前几周发现电脑上博客的评论用不了了，gittalk登录不上去，而平板上的却可以就凑活用了，网上查了查有不少人都遇到这个问题，决定解决这个问题</p></blockquote><span id="more"></span><h2 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h2><p><img src="https://i.loli.net/2021/05/15/MYatWdTAGreQ3Rv.png"></p><p>f12发现，问题的根源是这个请求</p><p><img src="https://i.loli.net/2021/05/15/sa4WzAhuFvH7rex.png" alt="image-20210515102934093"></p><p>索性直接访问这个地址看看</p><p><img src="https://i.loli.net/2021/05/15/DhFP3leXOa67rRS.png"></p><p>再点连接到这个界面</p><p><img src="https://i.loli.net/2021/05/15/4HJLzNDExfub2Vq.png" alt="image-20210515123451580"></p><p>可以看到原因是这个<strong>服务器被限制使用了二月开始</strong>，自建一个就行</p><h2 id="2、解决"><a href="#2、解决" class="headerlink" title="2、解决"></a>2、解决</h2><p>参考：<a href="https://www.qiansw.com/solve-the-problem-of-using-gitalk-authorization-403.html">https://www.qiansw.com/solve-the-problem-of-using-gitalk-authorization-403.html</a></p><p>自建一个代理服务器就行</p><p>在宝塔中进行如下配置</p><p><img src="https://i.loli.net/2021/05/15/ev7FDLwJUIWtKrZ.png"></p><p>修改配置文件（我的需修改多处）：</p><p><img src="https://i.loli.net/2021/05/15/lr5jTcfS2neO8FR.png"></p><p>（！！！不要修改这个）</p><p><img src="https://i.loli.net/2021/05/15/SQTP2ftb1Dwy45G.png"></p><p>重新部署</p><p>这时发现文章评论和留言没有问题了，但是<strong>碎碎念直接没了</strong>，准备直接修改碎碎念的源码</p><p><img src="https://i.loli.net/2021/05/15/MkS7vXbUsWrToBt.png"></p><p><img src="https://i.loli.net/2021/05/15/IZdrgBHYpKvxWXt.png"></p><p>修改这个js即可</p><p><img src="https://i.loli.net/2021/05/15/IZdrgBHYpKvxWXt.png"></p><p>直接搜索然后替换请求地址即可</p><p><img src="https://i.loli.net/2021/05/15/3PbTDIyfSEa7cCs.png"></p><p>再次重新部署</p><p>还是没有碎碎念，无奈改回去，现在文章和留言评论已经没问题，专注解决碎碎念问题</p><p>莫名其妙发现已经结局，就是只修改一处配置文件即可</p><p><img src="https://i.loli.net/2021/05/15/TOfj1S9VkdNXvuc.png"></p><p>终于可以愉快的使用评论了继续！！</p><p>�论了继续！！</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小米手环卡包迁移</title>
      <link href="/article/5c7eccf8.html"/>
      <url>/article/5c7eccf8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>恰好生日前一天耳机仓掉了，这不是巧了，在买耳机同时把手环也升级为了小米手环6，别的不说，当时折腾门禁卡折腾了不少时间，现在发现把手环5的门禁卡信息拷贝到6上是个不简单的问题，当时也没记个博客啥的，现在重新整理一遍以供日后使用</p></blockquote><span id="more"></span><h2 id="一、前置知识"><a href="#一、前置知识" class="headerlink" title="一、前置知识"></a>一、前置知识</h2><h3 id="1、NFC"><a href="#1、NFC" class="headerlink" title="1、NFC"></a>1、NFC</h3><p>Near Field Communication (近距离无线通讯技术)，现在好一点的手机都有nfc功能，生活中的用途如手机刷卡、手机支付、查验真伪（上次帮我爸查茅台真假哈哈）等。</p><h3 id="2、常见的ic卡"><a href="#2、常见的ic卡" class="headerlink" title="2、常见的ic卡"></a>2、常见的ic卡</h3><p>有些卡（如我们学校使用水卡是<strong>cpu卡</strong>，一高中同学家门禁卡是<strong>id卡</strong>则无法进行读取操作）</p><p>原文 ： <a href="http://www.ickezhan.com/bbs/forum.php?mod=viewthread&tid=10">http://www.ickezhan.com/bbs/forum.php?mod=viewthread&tid=10</a></p><h4 id="1、M1卡"><a href="#1、M1卡" class="headerlink" title="1、M1卡"></a>1、M1卡</h4><p>普通IC卡，<strong>0扇区不可以修改</strong>，其他扇区可反复擦写，我们使用的电梯卡、门禁卡等智能卡发卡商所使用的都是 M1 卡，可以理解为物业发的原卡</p><h4 id="2、UID卡"><a href="#2、UID卡" class="headerlink" title="2、UID卡"></a>2、UID卡</h4><p>普通复制卡，可以重复擦写所有扇区，主要应用在IC卡复制上，遇到带有防火墙的读卡器就会失效</p><h4 id="3、CUID卡"><a href="#3、CUID卡" class="headerlink" title="3、CUID卡"></a>3、CUID卡</h4><p>可擦写防屏蔽卡，可以重复擦写所有扇区，UID卡复制无效的情况下使用，可以绕过防火墙</p><h4 id="4、FUID卡"><a href="#4、FUID卡" class="headerlink" title="4、FUID卡"></a>4、<strong>FUID</strong>卡</h4><p>不可擦写防屏蔽卡，此卡的特点0扇区只能写入一次，写入一次变成 M1 卡，CUID 复制没用的情况下使用，可以绕过防火墙</p><h4 id="5、UFUID"><a href="#5、UFUID" class="headerlink" title="5、UFUID"></a>5、<strong>UFUID</strong></h4><p>高级复制卡，我们就理解为是 UID 和 FUID 的合成卡，需要封卡操作，不封卡就是 UID 卡，封卡后就变为 M1 卡</p><h3 id="3、m1卡"><a href="#3、m1卡" class="headerlink" title="3、m1卡"></a>3、m1卡</h3><h4 id="1、存储结构"><a href="#1、存储结构" class="headerlink" title="1、存储结构"></a>1、存储结构</h4><p>通过一次解原卡操作发现：</p><ul><li>m1卡有15个扇区（0-15），64个块（0-63）,即每个扇区有4个块（块0、块1、块2、块3），每块16个字节,以块为存取单位</li><li>每个扇区有独立的一组密码及访问控制</li><li>存入容量 ：64 * 16 B &#x3D; 1024B &#x3D; 1 KB</li></ul><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>块0</td><td>存放厂商代码</td><td>数据块</td><td>0</td></tr><tr><td>扇区0</td><td>块1</td><td></td><td>数据块</td><td>1</td></tr><tr><td></td><td>块2</td><td></td><td>数据块</td><td>2</td></tr><tr><td></td><td>块3</td><td>密码A、存取控制、密码B</td><td>控制块</td><td>3</td></tr><tr><td></td><td>块0</td><td></td><td>数据块</td><td>4</td></tr><tr><td>扇区1</td><td>块1</td><td></td><td>数据块</td><td>5</td></tr><tr><td></td><td>块2</td><td></td><td>数据块</td><td>6</td></tr><tr><td></td><td>块3</td><td>密码A、存取控制、密码B</td><td>控制块</td><td>7</td></tr><tr><td></td><td>…</td><td></td><td>…</td><td>…</td></tr><tr><td></td><td>块0</td><td></td><td>数据块</td><td>60</td></tr><tr><td>扇区15</td><td>块1</td><td></td><td>数据块</td><td>61</td></tr><tr><td></td><td>块2</td><td></td><td>数据块</td><td>62</td></tr><tr><td></td><td>块3</td><td>密码A、存取控制、密码B</td><td>控制块</td><td>63</td></tr></tbody></table><h4 id="2、加密与未加密"><a href="#2、加密与未加密" class="headerlink" title="2、加密与未加密"></a>2、加密与未加密</h4><p>在模拟卡的时候会发现提示：加密卡不能模拟，深入探究</p><p>&#x2F;&#x2F; 劝退，暑假回去再搞，能用就行</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mycrawler1.0封装版分享</title>
      <link href="/article/8d80e236.html"/>
      <url>/article/8d80e236.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于webmagic，爬取用户微博信息程序</p></blockquote><span id="more"></span><h4 id="1、点击mycrawler-exe运行"><a href="#1、点击mycrawler-exe运行" class="headerlink" title="1、点击mycrawler.exe运行"></a>1、点击mycrawler.exe运行</h4><p><a href="https://wwa.lanzous.com/ilZs2ob41mh">下载连接</a></p><h4 id="2、输入获取用户id"><a href="#2、输入获取用户id" class="headerlink" title="2、输入获取用户id"></a>2、输入获取用户id</h4><p>获取方法：打开<a href="https://peachring.com/">链接</a>，查找用户，复制路径上的那一串数字</p><p><img src="https://i.loli.net/2021/04/20/DZ1JEocFOdaTrvK.png"></p><p>输入：</p><p><img src="https://i.loli.net/2021/04/20/est7Z8GEHo6xMYf.png"></p><h4 id="3、输入存储路径"><a href="#3、输入存储路径" class="headerlink" title="3、输入存储路径"></a>3、输入存储路径</h4><p>例如：f:\data\luoli</p><p>（需注意，只会自动创建最后一级目录，如使用f:\data\luoli 需确认f盘下有data文件夹，而不必手动创建luoli文件夹；若f:\luoli则可以直接运行，不必创建文件夹）</p><h4 id="4、等待页面爬取"><a href="#4、等待页面爬取" class="headerlink" title="4、等待页面爬取"></a>4、等待页面爬取</h4><p>因为没有开启多线程（webmagic框架理解不是很透彻），下载速度较慢，请勿在过程中关闭程序，完成爬取会提示</p><p><img src="https://i.loli.net/2021/04/20/aLrqve4XJib83pj.png"></p><h4 id="5、下载目录说明"><a href="#5、下载目录说明" class="headerlink" title="5、下载目录说明"></a>5、下载目录说明</h4><ul><li>images –下载目标微博所有图片</li><li>日期命名文件夹 – 包含微博文案和图片</li></ul><p><img src="https://i.loli.net/2021/04/20/l3rQaZoMqpAewun.png"></p><p>运行时会在exe文件同目录下生成src文件夹，为日志文件，完成爬取后删除即可</p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试准备</title>
      <link href="/article/c5576490.html"/>
      <url>/article/c5576490.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>面试前一天准备下人生第一次面试</p></blockquote><span id="more"></span><h1 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h1><h2 id="一、springcloud"><a href="#一、springcloud" class="headerlink" title="一、springcloud"></a>一、springcloud</h2><h3 id="1、什么是微服务"><a href="#1、什么是微服务" class="headerlink" title="1、什么是微服务"></a>1、什么是微服务</h3><p>架构风格、把一个项目拆分成多个服务，多个服务独立运行</p><h3 id="2、为什么要使用微服务"><a href="#2、为什么要使用微服务" class="headerlink" title="2、为什么要使用微服务"></a>2、为什么要使用微服务</h3><p>传统j2ee缺陷：拓展性查，维护成本高，可靠性低</p><p>所有模块都堆砌在一起，耦合度高，维护困难；拆分每个模块代码量少，易于维护</p><p>存储在一个数据库，存储方式单一；微服务不同的服务可以存储不同的数据库，比如redis或mysql</p><p>每个模块可以使用不同的技术实现；</p><h3 id="3、springcloud组件"><a href="#3、springcloud组件" class="headerlink" title="3、springcloud组件"></a>3、springcloud组件</h3><ol><li><p>服务发现 - Nacos 阿里巴巴 注册中心 替代原生的 Eureka</p></li><li><p>服务调用 - feign   一个微服务调用另一个微服务的接口  整和了ribbon</p></li><li><p>熔断器 - Hystrix<br>分布式 - 将单独的服务部署在不同的服务器上<br>提供延迟和容错的功能，在一个服务出现问题的时候，没有熔断机制会导致系统挂掉</p></li><li><p>配置中心 - nacos - 替代原生的springcloud config</p><p>需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在</p></li><li><p>springcloud gateway  替代zull<br>API 网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过 API 网关这一层<br>作用：<br>1）请求转发<br>2）负载均衡  轮询&#x2F;权重&#x2F;最少请求时间<br>3）跨域其他配置（拦截器&#x2F;全局异常处理）</p></li></ol><h2 id="二、springboot"><a href="#二、springboot" class="headerlink" title="二、springboot"></a>二、springboot</h2><h3 id="1、什么是springboot"><a href="#1、什么是springboot" class="headerlink" title="1、什么是springboot"></a>1、什么是springboot</h3><p>框架，我理解：管家管理spring springMVC mybaties 框架，约定大于配置，很少的配置快速进行开发</p><h3 id="2、日志"><a href="#2、日志" class="headerlink" title="2、日志"></a>2、日志</h3><p>springboot 使用 slfj + logback</p><h3 id="3、restful"><a href="#3、restful" class="headerlink" title="3、restful"></a>3、restful</h3><p>URI:&#x2F;资源名称&#x2F;资源标识 </p><p>HTTP请求方式区分对资源crud操作</p><p>c post</p><p>r get</p><p>u put</p><p>d delete</p><h2 id="三、springSecurity-Shiro"><a href="#三、springSecurity-Shiro" class="headerlink" title="三、springSecurity (Shiro)"></a>三、springSecurity (Shiro)</h2><p>权限管理</p><p>认证：用户身份是否合法</p><p>授权：访问资源是否有权限</p><p>授权使用  RBAC</p><p>R: role&#x2F;resource</p><p>B:base</p><p>AC:access control</p><h3 id="基于session认证："><a href="#基于session认证：" class="headerlink" title="基于session认证："></a>基于session认证：</h3><p>session_id 存放在cookie中，这样用客户端请求时带上 session_id 就可以验证服务器端是否存在<br>session 数据，以此完成用户的合法校验</p><h3 id="分布式系统认证-token"><a href="#分布式系统认证-token" class="headerlink" title="分布式系统认证 token"></a>分布式系统认证 token</h3><p><strong>Oauth2.0</strong>  第三方用户可以使用用户存储在其他服务器上的资源，而不需要用户名和密码，用户进行授权</p><ol><li><h5 id="授权码模式-用户拿着授权码请求token"><a href="#授权码模式-用户拿着授权码请求token" class="headerlink" title="授权码模式  用户拿着授权码请求token"></a>授权码模式  用户拿着授权码请求token</h5></li><li><h5 id="简化模式-直接发放token"><a href="#简化模式-直接发放token" class="headerlink" title="简化模式 直接发放token"></a>简化模式 直接发放token</h5></li><li><p><strong>密码模式</strong> 直接拿到用户名和密码</p></li><li><p><strong>客户端模式</strong> 直接跳转</p></li></ol><p>token ： 字符串 包含了用户信息</p><p>jwt :生成token的方式</p><h2 id="四、Redis"><a href="#四、Redis" class="headerlink" title="四、Redis"></a>四、Redis</h2><p>数据类型：  数值 字符串 哈希 集合 有序集合 列表</p><h3 id="1、缓存穿透"><a href="#1、缓存穿透" class="headerlink" title="1、缓存穿透"></a>1、缓存穿透</h3><p>缓存中查不到，在数据库也查不到</p><p>解决：这时也可以将key-value对写为key-null</p><h3 id="2、缓存击穿"><a href="#2、缓存击穿" class="headerlink" title="2、缓存击穿"></a>2、缓存击穿</h3><p> 缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力</p><p>解决：热点数据，永不过期</p><p>互斥锁</p><h3 id="3、缓存雪崩"><a href="#3、缓存雪崩" class="headerlink" title="3、缓存雪崩"></a>3、缓存雪崩</h3><p>数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机</p><p><strong>缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了</strong></p><p>解决：缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生</p><p>热点数据不过期</p><h2 id="五、Mysql"><a href="#五、Mysql" class="headerlink" title="五、Mysql"></a>五、Mysql</h2><p>索引：增加查询效率，但会降低其他操作的效率（每次更新索引）</p><p>b树或者b+树，多叉树：重新组织节点，降低树的高度，提高读写效率</p><p>ACDI</p><p>原子性、一致性、隔离性、持久性</p><p>事务隔离级别：</p><ol><li>脏读 （dirty read）</li><li>读&#x2F;写提交 (read commit)</li><li>可重复读 (repeated read)</li><li>序列化 (serializable)</li></ol><h2 id="六、svn-x2F-git-x2F-idea"><a href="#六、svn-x2F-git-x2F-idea" class="headerlink" title="六、svn&#x2F;git&#x2F;idea"></a>六、svn&#x2F;git&#x2F;idea</h2><p>项目开发使用，较为熟悉</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署到自己服务器</title>
      <link href="/article/4bd2c845.html"/>
      <url>/article/4bd2c845.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客从wordpress迁移到hexo已经两周至于，在github page上自己看还行（梯子），但分享链接访问就很慢，再加上导致以前买的学生服务器闲置，有必要把hexo部署到自己的服务器上（<del>还在考虑使用cdn加速绕过备案，或许可以</del>，备案已经完成），现记录方法</p></blockquote><span id="more"></span><blockquote><p>再次继续写这篇博客是服务器被黑客搞了，被迫重装系统，密码千万不要设置12345678!!</p><p>现在就在这台服务器上从零开始搞一遍</p></blockquote><h2 id="一、本地操作"><a href="#一、本地操作" class="headerlink" title="一、本地操作"></a>一、本地操作</h2><p>由于原先已经成功部署到github服务器上，本地不需要操作</p><h2 id="二、服务器端操作"><a href="#二、服务器端操作" class="headerlink" title="二、服务器端操作"></a>二、服务器端操作</h2><p>我的大致理解就是在服务器上创建一个git仓库，然后本地同步的时候即同步到github的仓库也同步到服务器上的仓库就可以</p><p>发现git的知识还是很薄弱，就大概会用 </p><h3 id="1、git环境准备"><a href="#1、git环境准备" class="headerlink" title="1、git环境准备"></a>1、git环境准备</h3><p>查看是否已经安装了git，我也不知道啥时候安装的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]# git --version</span><br><span class="line">git version 1.8.3.1</span><br></pre></td></tr></table></figure><p>安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]# npm install git</span><br></pre></td></tr></table></figure><p>然后就是个难点了，需要自己的电脑和服务器建立连接，相当于在服务器上搭建git服务（我的大致理解）</p><p>先鼓捣鼓捣测试，再继续</p><p><strong>先创建用户组和用户，并授予权限,创建仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]# groupadd git</span><br><span class="line">[root@VM-0-15-centos ~]# useradd git -g git</span><br><span class="line">//给git用户一个复杂的密码，否则可能会被破解</span><br><span class="line">[root@VM-0-15-centos /]# passwd git</span><br><span class="line">Changing password for user git.</span><br><span class="line">New password: </span><br><span class="line">Retype new password: </span><br><span class="line">Sorry, passwords do not match.</span><br><span class="line">New password: </span><br><span class="line">Retype new password: </span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line">//先创建一个用与测试功能的仓库</span><br><span class="line">[root@VM-0-15-centos git]# cd /home/git</span><br><span class="line">[root@VM-0-15-centos git]# git init --bare test.git</span><br><span class="line">// 需要将文件授予git用户</span><br><span class="line">[root@VM-0-15-centos git]# chown -R git test.git</span><br></pre></td></tr></table></figure><p><strong>使用钩子函数，在文件提交到仓库时，同步到指定的目录</strong></p><p>先在git目录下创建target文件夹用于同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos git]# mkdir target</span><br><span class="line">[root@VM-0-15-centos git]# ls</span><br><span class="line">target  test.git</span><br></pre></td></tr></table></figure><p>进入仓库，在hooks下创建的post-receice文件，编辑</p><p>输入以下内容：git –work-tree&#x3D;&#x2F;home&#x2F;git&#x2F;target  checkout -f</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos hooks]# vim post-receive</span><br><span class="line">[root@VM-0-15-centos hooks]# chown -R git post-receive //</span><br><span class="line">[root@VM-0-15-centos hooks]# chmod +x post-receive //脚本需有可执行权限</span><br></pre></td></tr></table></figure><p><strong>这时候可以开始测试:</strong></p><p>执行 ：git clone git@yourip :&#x2F;home&#x2F;git&#x2F;test.git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> git@212.64.71.101:/home/git/test.git</span></span><br><span class="line">Cloning into &#x27;test&#x27;...</span><br><span class="line">The authenticity of host &#x27;212.64.71.101 (212.64.71.101)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:eX/LeVy7VZ0JxJ5Y88NE5kJ/zUozVdpjQ7IDKRqqkN8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? y</span><br><span class="line">Please type &#x27;yes&#x27;, &#x27;no&#x27; or the fingerprint: yes</span><br><span class="line">Warning: Permanently added &#x27;212.64.71.101&#x27; (ECDSA) to the list of known hosts.</span><br><span class="line">git@212.64.71.101&#x27;s password:</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br></pre></td></tr></table></figure><p>客隆仓库后在仓库里添加文件用于测试</p><p><img src="https://i.loli.net/2020/12/16/8sAnmxdIPG634uW.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add 1.txt</span></span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -<span class="string">&#x27;测试钩子函数&#x27;</span></span></span><br><span class="line">[master (root-commit) a5b6704] 娴嬭瘯閽╁瓙鍑芥暟</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 1.txt</span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin master</span></span><br><span class="line">git@212.64.71.101&#x27;s password:</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 229 bytes | 229.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: error: unable to create file 1.txt (Permission denied)</span><br><span class="line">To 212.64.71.101:/home/git/test.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不幸的报错了然而  <strong>remote: error: unable to create file 1.txt (Permission denied)</strong> </p><p>先看git日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos test.git]# git log</span><br><span class="line">commit a5b6704a8b2db43bf715babcd05e4df86f6c10d0</span><br><span class="line">Author: liaotao421 &lt;1984457659@qq.com&gt;</span><br><span class="line">Date:   Wed Dec 16 12:50:07 2020 +0800</span><br><span class="line"></span><br><span class="line">    测试钩子函数</span><br></pre></td></tr></table></figure><p>是提交成功了的，再根据报错信息可能是权限问题，发现target目录拥有者并不是git</p><p><img src="https://i.loli.net/2020/12/16/zZ4uOMgTmckdlj6.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git /home/git/target</span><br></pre></td></tr></table></figure><p>再来一次：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add 1.txt</span></span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&#x27;再次测试&#x27;</span></span></span><br><span class="line">[master 03a6964] 鍐嶆娴嬭瘯</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull origin master</span></span><br><span class="line">git@212.64.71.101&#x27;s password:</span><br><span class="line">From 212.64.71.101:/home/git/test</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Already up to date.</span><br></pre></td></tr></table></figure><p>并没有报错，查看服务器上文件：</p><p>咋还没有。。。。</p><p>应该是target文件没有写入权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown 777 target</span><br></pre></td></tr></table></figure><p>再创建个文件试一次：</p><p><img src="https://i.loli.net/2020/12/16/WXEuZQyqk5Hzg3x.png"></p><p>再次提交发现文件以及同步到target目录</p><p><img src="https://i.loli.net/2020/12/16/sEFgDfHQUt5h4T9.png"></p><p>没有问题，继续</p><h3 id="2、ssh秘钥"><a href="#2、ssh秘钥" class="headerlink" title="2、ssh秘钥"></a>2、ssh秘钥</h3><p>现在发现每次提交都要输入密码，意味着每次更新博客都需要输密码，肯定是太麻烦了，于是有听说有种避免这种情况的方法</p><p>这种输入用户名，密码的加密方式为对称加密，还有一种加密方式为非对称加密，有两个秘钥：私钥和公钥</p><ul><li>私钥是每个人私有的（需妥善保管），而公钥顾名思义是公开的</li><li>私钥和公钥是一一对应的</li><li>用私钥加密的数据只能公钥可以解开，用公钥加密的数据只有私钥可以解</li></ul><p>这里<strong>主要</strong>使用的是认证（不知道传输过程中对数据加密了没有emmm）</p><p>服务器需要知道传输文件的是我的笔记本，而不是假冒的，就需要知道到我笔记本的公钥，然后我发送<strong>私钥加密</strong>的文件，服务器用<strong>公钥解</strong>，如果解的开就是笔记本发送的文件</p><p><strong>在本地生成私钥和秘钥：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/admin/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/admin/.ssh/id_rsa</span><br><span class="line">Your public key has been saved in /c/Users/admin/.ssh/id_rsa.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:d8OT9qgBdSRjA/3xXYPSZgJXk34UIBxbmTGNueL2uXM admin@DESKTOP-P6D5FT4</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 3072]----+</span><br><span class="line">|        .+B+=B@..|</span><br><span class="line">|         .oO=@o+.|</span><br><span class="line">|          .oBoo.o|</span><br><span class="line">|         . +.+...|</span><br><span class="line">|        S o O .  |</span><br><span class="line">|         o = =   |</span><br><span class="line">|          o o o  |</span><br><span class="line">|           o + E |</span><br><span class="line">|          .  .+  |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/16/yzWskvmxheUoJp4.png"></p><p>.pub就是公钥，没有.pub的是私钥</p><p>将公钥给服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i id_rsa.pub git@212.64.71.101</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-copy-id -i id_rsa.pub git@212.64.71.101</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;id_rsa.pub&quot;</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">git@212.64.71.101&#x27;s password:</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">git@212.64.71.101&#x27;s password:</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">git@212.64.71.101&#x27;s password:</span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &#x27;git@212.64.71.101&#x27;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><p><strong>貌似这样就行了，测试</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add 3.txt</span></span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&#x27;测试免密&#x27;</span></span></span><br><span class="line">[master 1cff8de] 娴嬭瘯鍏嶅瘑</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 3.txt</span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin master</span></span><br><span class="line">Enumerating objects: 4, done.</span><br><span class="line">Counting objects: 100% (4/4), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 300 bytes | 300.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">To 212.64.71.101:/home/git/test.git</span><br><span class="line">   101e4bc..1cff8de  master -&gt; master</span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br></pre></td></tr></table></figure><p>没有问题，现在可以免密提交</p><p><img src="https://i.loli.net/2020/12/16/Pz7cOx8WArKVZgd.png"></p><h3 id="3、站点开设"><a href="#3、站点开设" class="headerlink" title="3、站点开设"></a>3、站点开设</h3><blockquote><p>今天也是域名刚完成了备案，但是还要进行公安备案，不知道能直接用不</p></blockquote><p>宝塔傻瓜式操作即可</p><p><img src="https://i.loli.net/2020/12/16/huqy8UtfojNGW1V.png"></p><p><img src="https://i.loli.net/2020/12/16/jrPaEFkyHzIi5Rx.png"></p><h3 id="4、博客仓库创建"><a href="#4、博客仓库创建" class="headerlink" title="4、博客仓库创建"></a>4、博客仓库创建</h3><p>有了上面的经验，现在所需要进行的有：</p><ol><li>新建仓库用来存放博客内容</li><li>提交后把内容自动同步到站点目录</li></ol><p>没有错，只有两步！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos git]# git init --bare blog.git</span><br><span class="line">Initialized empty Git repository in /home/git/blog.git/</span><br><span class="line">[root@VM-0-15-centos git]# chown -R git blog.git</span><br><span class="line">[root@VM-0-15-centos hooks]# vim post-recieve</span><br><span class="line">[root@VM-0-15-centos hooks]# chown -R git post-recieve</span><br><span class="line">[root@VM-0-15-centos hooks]# chmod +x post-recieve</span><br><span class="line">//将网站目录授予git用户（重要！）</span><br><span class="line">[root@VM-0-15-centos wwwroot]# chown -R git taoblog421.cn</span><br><span class="line">chown: changing ownership of ‘taoblog421.cn/.user.ini’: Operation not permitted //这个文件不影响</span><br></pre></td></tr></table></figure><h3 id="5、最终测试"><a href="#5、最终测试" class="headerlink" title="5、最终测试"></a>5、最终测试</h3><p>修改hexo配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@212.64.71.101:/home/git/blog.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>运行：hexo clean &amp;&amp; hexo deploy</p><p><img src="https://i.loli.net/2020/12/16/DVlZFTuNxcRrpvi.png"></p><p>访问：</p><p><img src="https://i.loli.net/2020/12/16/JtDWCwF8Pk4ufiL.png"></p><h2 id="三、cdn加速-优化配置"><a href="#三、cdn加速-优化配置" class="headerlink" title="三、cdn加速 优化配置"></a>三、<del>cdn加速</del> <del>优化配置</del></h2><blockquote><p>这时候我发现 只要开了vpn访问速度就飞快，但是资源都是在国内服务器上</p></blockquote><p>访问速度不使用VPN自然势必托管github快</p><p>在来个cdn加速直接起飞（访问量较少，应该花不到好多钱）</p><p>选阿里云，虽然都是资本家，还是选择阿里，emmm</p><p>我开了之后发现加速并不是很明显，emmm，还是从优化配置入手吧</p><p>好像有种说法是代码托管在github再使用cdn加速会有效果</p><p>大概能用就行，考试要紧，假期慢慢再搞优化吧，现在对国内访问已经足够友好了</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机拍照速成</title>
      <link href="/article/6d476353.html"/>
      <url>/article/6d476353.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>奇怪的技术增加了，很有必要提示下自己的拍照技术，正好传智播客有这个课晚上就学了下</p></blockquote><span id="more"></span><h2 id="一、器材选择"><a href="#一、器材选择" class="headerlink" title="一、器材选择"></a>一、器材选择</h2><blockquote><p>单反更专业，为啥还教手机摄影 – 摄影穷三代，单反毁一生</p></blockquote><p>优势：廉价 轻便 算法</p><p><strong>常规设置</strong></p><p>参考线</p><p>水平仪</p><p>闪光灯</p><p>对焦</p><p>变焦：光学变焦（放大不失真）、数码变焦</p><p>格式：jpg raw</p><p>模式：大光圈、夜景、人物、拍照、录像、专业 （算法）</p><h2 id="二、简单几招"><a href="#二、简单几招" class="headerlink" title="二、简单几招"></a>二、简单几招</h2><h3 id="1、去干扰"><a href="#1、去干扰" class="headerlink" title="1、去干扰"></a>1、去干扰</h3><p><strong>画面看起来干净，表现的主题突出</strong>，没有不该出现的人物、辣鸡、物体、光源等</p><p>——通过调整拍摄角度、机位免干扰</p><p><img src="https://i.loli.net/2021/03/17/tTG9CBwnprgK5WJ.png"></p><h3 id="2、巧构图"><a href="#2、巧构图" class="headerlink" title="2、巧构图"></a>2、巧构图</h3><p><strong>通过不同的构图方式，取景内容，</strong></p><p>突出想要拍摄的内容</p><p>去掉不想入境的内容</p><p><img src="https://i.loli.net/2021/03/17/WrjcOJ46VgCmNsK.png" alt="image-20210317192840268"></p><h3 id="3、用道具"><a href="#3、用道具" class="headerlink" title="3、用道具"></a>3、用道具</h3><p>借助有特色的物体、食物、树叶等丰富近、中、远景的层次</p><p><img src="https://i.loli.net/2021/03/17/Z7l6r3u4vNC1Twm.png"></p><h3 id="4、抓特点"><a href="#4、抓特点" class="headerlink" title="4、抓特点"></a>4、抓特点</h3><p>抓取特色的内容，让画面更生动，例如人物背景，手&#x2F;脚，标识，文字，图案等</p><p><img src="https://i.loli.net/2021/03/17/uV7KnwILtMXChNl.png" alt="image-20210317193026117"></p><h3 id="5、换机位"><a href="#5、换机位" class="headerlink" title="5、换机位"></a>5、换机位</h3><p>换个角度，仰视或俯视</p><p><img src="https://i.loli.net/2021/03/17/pNYZXhjl9iTQzVo.png" alt="image-20210317193200111"></p><h3 id="6、拍重点"><a href="#6、拍重点" class="headerlink" title="6、拍重点"></a>6、拍重点</h3><p>一个画面就一个重点，其他可以去掉</p><p><img src="https://i.loli.net/2021/03/17/xb6cEt2V5HJOgfi.png"></p><h3 id="7、有亮点"><a href="#7、有亮点" class="headerlink" title="7、有亮点"></a>7、有亮点</h3><p>太过平淡的画面，需要一点点缀</p><p><img src="https://i.loli.net/2021/03/17/IeNBXFcikVpyqwM.png"></p><h2 id="三、参数设置"><a href="#三、参数设置" class="headerlink" title="三、参数设置"></a>三、参数设置</h2><h3 id="F-x2F-光圈"><a href="#F-x2F-光圈" class="headerlink" title="F&#x2F;光圈"></a>F&#x2F;光圈</h3><p><img src="https://i.loli.net/2021/03/17/A2ZCD7pSiQoRaFz.png"></p><p>拍人使用大光圈，尤其晚上人像</p><h3 id="ISO-x2F-感光度"><a href="#ISO-x2F-感光度" class="headerlink" title="ISO&#x2F;感光度"></a>ISO&#x2F;感光度</h3><p><img src="https://i.loli.net/2021/03/17/WeEFUmZ1YinIpt3.png"></p><p>王家卫电影 – 高噪点</p><h3 id="S-x2F-快门"><a href="#S-x2F-快门" class="headerlink" title="S&#x2F;快门"></a>S&#x2F;快门</h3><p><img src="https://i.loli.net/2021/03/17/i3Zu7sK21lSrtpJ.png"></p><h3 id="EV-x2F-曝光度"><a href="#EV-x2F-曝光度" class="headerlink" title="EV&#x2F;曝光度"></a>EV&#x2F;曝光度</h3><p><img src="https://i.loli.net/2021/03/17/gbnEHcUeaxZQTfP.png"></p><h3 id="AF-x2F-对焦"><a href="#AF-x2F-对焦" class="headerlink" title="AF&#x2F;对焦"></a>AF&#x2F;对焦</h3><p><img src="https://i.loli.net/2021/03/17/qnb8mTlgAv27EQs.png"></p><h3 id="WB-x2F-白平衡-x2F-色温"><a href="#WB-x2F-白平衡-x2F-色温" class="headerlink" title="WB&#x2F;白平衡&#x2F;色温"></a>WB&#x2F;白平衡&#x2F;色温</h3><p><img src="https://i.loli.net/2021/03/17/j63kxwPXofGLuQh.png"></p><h3 id="M-x2F-测光模式"><a href="#M-x2F-测光模式" class="headerlink" title="M&#x2F;测光模式"></a>M&#x2F;测光模式</h3><p><img src="https://i.loli.net/2021/03/17/PjobYy6RumtTiwM.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小说漫画网站源码分享</title>
      <link href="/article/8244d56f.html"/>
      <url>/article/8244d56f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>分享一套可以部署获取利益的小说漫画网站源码</p></blockquote><span id="more"></span><p><a href="https://wwa.lanzous.com/ikVzGlyqncb">蓝奏云</a></p><p>源码来源于网络，按照压缩包内的教程部署即可</p><h2 id="一、部署"><a href="#一、部署" class="headerlink" title="一、部署"></a>一、部署</h2><p>1）压缩文件上传到宝塔目录</p><p><img src="https://i.loli.net/2021/02/21/6kiRKmCSqGoE8U3.png"></p><p>2）修改配置</p><ol><li><p>开启openssl扩展<br> <a href="https://jingyan.baidu.com/article/64d05a02872a2e9f54f73b53.html">百度教程</a></p></li><li><p>修改数据库配置，路经如下\Application\Common\Conf\db.php</p></li><li><p>修改漫画书内容详情图片地址前缀,路经如下\Application\Common\Conf\config.php</p><p>修改为：’mh_config_url’&#x3D;&gt;’&#x2F;upfile’ （不知道为啥）</p></li><li><p>导入数据库文件ces.sql</p></li></ol><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>进入后台 http:&#x2F;&#x2F;你的域名&#x2F;efucms.php  （用户名 admin &#x2F; 密码 123123）</p><p>发现这个网站是可以配置并使用，但是资源数量却很少，很难吸引到人显然</p><p><img src="https://i.loli.net/2021/02/21/295CP47YpFqrH3w.png" alt="image-20210221232742221"></p><p>这几天有位群友分享的漫画软件很不错，有不错的韩漫资源（你懂得），让我重燃了搭建网站的想法，准备联系作者问问情况，后续我会留言在文章后面。</p><p>运行截图：</p><p><img src="https://i.loli.net/2021/02/21/ZhIPTmb6GOeovpA.png"></p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/article/b37651.html"/>
      <url>/article/b37651.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录自己目的使用博客的搭建方法</p></blockquote><span id="more"></span><p>前言：wordpress在文章内容变多后巨卡无比，于是转为hexo，虽然在使用上没有wordpress方便，但是由于纯静态要快很多，主题的选择也很丰富</p><p>前置需求：</p><ol><li>github账户（可以直接部署在gitpage上）</li><li>一台电脑</li><li>云服务器（可有可无）</li><li>域名（可由可无）</li></ol><h2 id="一、hexo安装"><a href="#一、hexo安装" class="headerlink" title="一、hexo安装"></a>一、hexo安装</h2><p><a href="https://hexo.io/zh-cn/">hexo官网</a> ，有个优势是hexo作者是国人，官方文档便于阅读</p><p>需要 <a href="https://nodejs.org/zh-cn/download/">node.js</a> 和 <a href="https://git-scm.com/downloads">git</a> ，如果做开发的话应该会有这两个环境，无的话选择系统对应的版本下载安装就可以</p><p>这是我使用的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin&gt;git --version</span><br><span class="line">git version 2.28.0.windows.1</span><br><span class="line"></span><br><span class="line">C:\Users\admin&gt;node -v</span><br><span class="line">v12.18.3</span><br></pre></td></tr></table></figure><blockquote><p>这部分按照官网文档操作其实就可，本博客核心在于<strong>快速的建立起一个模板还不错的博客以便使用</strong>。</p></blockquote><p>为方便演示，我在桌面新建文件夹操作</p><p>在文件夹内打开命令行（方法：按住shift + 鼠标右键，点击再此处打开powershell窗口，然后输入cmd回车进入）</p><p><img src="https://i.loli.net/2021/02/22/ik4q7fOuCmY3HUb.png" alt="image-20210222120000851"></p><p><strong>安装 hexo</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><strong>创建目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;文件名&gt; // 执行后从git仓库下载，有点小慢正常</span><br></pre></td></tr></table></figure><p>等待下载完成，有这些文件</p><p><img src="https://i.loli.net/2021/02/22/Wmwk2NDFMfQxdCn.png" alt="image-20210222122114580"></p><p><strong>启动</strong></p><p>在&lt;文件名&gt;目录进入cmd ，输入<strong>hexo server</strong> 即可启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin\Desktop\blog\blog&gt;hexo server</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a></p><p><img src="https://i.loli.net/2021/02/22/fVeBL9hy73cQJnr.png"></p><p>此时显示的是hexo默认的主题，当然看起来不是很行</p><blockquote><p>如需更换其他主题以及hexo的其他使用都可以参照官方文档</p></blockquote><p>下面就分享使用我正在使用的这套模板的方法</p><p>网址 <a href="taoblog421.cn">taoblog421.cn</a> (看起来高大上许多哈)</p><p><img src="https://i.loli.net/2021/02/22/HKC6VJOmZetqjIw.png"></p><h2 id="二、amazing主题"><a href="#二、amazing主题" class="headerlink" title="二、amazing主题"></a>二、amazing主题</h2><p>使用的主题为这位大佬<a href="https://github.com/removeif">@removeif</a> 魔改，在他的博客可以找到食用方法，但是我还是折腾了很久，因为描述的并不是十分详细，但是使用起来效果不错</p><p><a href="https://wwa.lanzous.com/iWnWzlzjkxi">点击下载主题</a></p><p>下面就关键的配置进行说明</p><p>两个关键配置文件：</p><ol><li>主配置文件   目录下_config.yml</li><li>主题配置文件  主题下_config.yml</li></ol><p>然后根据大佬的博客进行修改即可！</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apriori算法</title>
      <link href="/article/b53b7f0c.html"/>
      <url>/article/b53b7f0c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Apriori算法学习（2021第一篇博客！）</p><p>主要参考：<a href="https://bainingchao.github.io/2018/09/27/%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%95%99%E4%BD%A0%E8%BD%BB%E6%9D%BE%E5%AD%A6%E5%85%B3%E8%81%94%E8%A7%84%E5%88%99Apriori%E7%AE%97%E6%B3%95/">https://bainingchao.github.io/2018/09/27/%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%95%99%E4%BD%A0%E8%BD%BB%E6%9D%BE%E5%AD%A6%E5%85%B3%E8%81%94%E8%A7%84%E5%88%99Apriori%E7%AE%97%E6%B3%95/</a></p></blockquote><span id="more"></span><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><p>关联分析是一种在大规模数据集中寻找相互关系的任务。 这些关系可以有两种形式:</p><ul><li>频繁项集（frequence set）: 经常出现在一起物品的集合</li><li>关联规则 （assosiation rule）：暗示两种物品的相关性很强</li></ul><p>支持度：数据中包含该项集的记录所占的比利</p><p>置信度：有点类似于条件概率，如A -&gt; B 这样的关联规则，置信度为 （A,B支持度）&#x2F; （A支持度）</p><p>k项集：有k个元素的项集就是k项集</p><p>候选项集：未经过最小支持度过滤数据的项集</p><p>例子：(一会代码实现也是这个，正好可以验证正确与否)</p><table><thead><tr><th>TID</th><th>ITEMS</th></tr></thead><tbody><tr><td>1</td><td>bread, cream, milk, tea</td></tr><tr><td>2</td><td>bread, cream, milk</td></tr><tr><td>3</td><td>cake, milk</td></tr><tr><td>4</td><td>milk, tea</td></tr><tr><td>5</td><td>bread, cake, milk</td></tr><tr><td>6</td><td>bread, tea</td></tr><tr><td>7</td><td>beer, milk, tea</td></tr><tr><td>8</td><td>bread, tea</td></tr><tr><td>9</td><td>bread, cream, milk, tea</td></tr><tr><td>10</td><td>bread, milk, tea</td></tr></tbody></table><p>取最小支持度为0.2</p><table><thead><tr><th>商品名</th><th>支持度</th></tr></thead><tbody><tr><td>beer</td><td>0.1</td></tr><tr><td>bread</td><td>0.7</td></tr><tr><td>cake</td><td>0.2</td></tr><tr><td>cream</td><td>0.3</td></tr><tr><td>milk</td><td>0.8</td></tr><tr><td>tea</td><td>0.7</td></tr></tbody></table><p>删除beer 和 cake </p><table><thead><tr><th>商品名</th><th>支持度</th></tr></thead><tbody><tr><td>bread,cream</td><td>0.3</td></tr><tr><td>bread,milk</td><td>0.5</td></tr><tr><td>bread,tea</td><td>0.5</td></tr><tr><td>cream,milk</td><td>0.3</td></tr><tr><td>cream,tea</td><td>0.2</td></tr><tr><td>milk,tea</td><td>0.5</td></tr></tbody></table><p>删除 cream,tea</p><table><thead><tr><th>商品名</th><th>支持度</th></tr></thead><tbody><tr><td>bread,cream,milk</td><td>0.3</td></tr><tr><td>bread,cream,tea</td><td>0.2</td></tr><tr><td>bread,milk,tea</td><td>0.3</td></tr></tbody></table><p>删除 bread,cream,tea</p><h2 id="2、apriori算法"><a href="#2、apriori算法" class="headerlink" title="2、apriori算法"></a>2、apriori算法</h2><p>上面的过程就是apriori算法的流程</p><p>第一步通过迭代，检索出事务数据库中的所有频繁项集，即支持度不低于用户设定的阈值的项集；<br>第二步利用频繁项集构造出满足用户最小信任度的规则。</p><p>具体做法就是：</p><p>首先找出频繁1-项集，记为L1；然后利用L1来产生候选项集C2，对C2中的项进行判定挖掘出L2，即频繁2-项集；不断如此循环下去直到无法发现更多的频繁k-项集为止。每挖掘一层Lk就需要扫描整个数据库一遍。算法利用了一个性质：任一频繁项集的所有非空子集也必须是频繁的。</p><h2 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> utils.FileRead;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/12/31 10:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apriori</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> minSupport; <span class="comment">//最小支持度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; dataSet; <span class="comment">//存放商品数据（字典排序）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; itemList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//商品种类 如 [beer, bread, cake, cream, milk, tea]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; candidateSet = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//当前的候选项级</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        dataSet = initDataSet(<span class="string">&quot;f:/dataset.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        minSupport = <span class="number">0.2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            generateCandidate(i);</span><br><span class="line">            System.out.println(generateFrequentCandidate(candidateSet));</span><br><span class="line">            generateAssosiationRole(generateFrequentCandidate(candidateSet));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filepath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">initDataSet</span><span class="params">(String filepath)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取文件</span></span><br><span class="line">        List&lt;String&gt; stringList = FileRead.read(filepath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回的结果</span></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>; i &lt; stringList.size(); i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 文本处理，截取，去掉空格等</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> stringList.get(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">tindex</span> <span class="operator">=</span> str.indexOf(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            str= str.substring(tindex + <span class="number">1</span>);</span><br><span class="line">            str = str.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            List&lt;String&gt; rowList = Arrays.asList(str.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">            result.add(rowList);</span><br><span class="line">            <span class="keyword">for</span> (String s : rowList) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!itemList.contains(s)) &#123;</span><br><span class="line">                    itemList.add(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//字典排序</span></span><br><span class="line">            Collections.sort(itemList);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成候选项集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n C(n) 如 C1,C2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 候选集C(n)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generateCandidate</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            candidateSet.addAll(itemList);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            candidateSet = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">// 将所有商品两两组合</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; itemList.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; itemList.size(); j++) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">&quot;(&quot;</span> + itemList.get(i) + <span class="string">&quot;,&quot;</span> +itemList.get(j) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">                    candidateSet.add(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// n &gt; 2</span></span><br><span class="line">            List&lt;String&gt; tempCadidatetSet = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; candidateSet.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; candidateSet.size() ; j++) &#123;</span><br><span class="line"></span><br><span class="line">                    List&lt;String&gt; now = Arrays.asList(candidateSet.get(i).replace(<span class="string">&quot;(&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;)&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">                    List&lt;String&gt; next = Arrays.asList(candidateSet.get(j).replace(<span class="string">&quot;(&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;)&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 比较前n-2个</span></span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt;= n-<span class="number">2</span>-<span class="number">1</span>; k++) &#123;</span><br><span class="line">                        flag = now.get(k).equals(next.get(k));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                        stringBuilder.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">                        <span class="keyword">for</span> (String s : now) &#123;</span><br><span class="line">                            stringBuilder.append(s).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        stringBuilder.append(next.get(n-<span class="number">2</span>)).append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">                        tempCadidatetSet.add(stringBuilder.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            candidateSet = tempCadidatetSet;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算支持度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">countSupport</span><span class="params">(String goodsList)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(goodsList.replace(<span class="string">&quot;(&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;)&quot;</span>,<span class="string">&quot;&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        <span class="type">double</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; strings : dataSet) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strings.containsAll(list)) &#123;</span><br><span class="line">                count ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count/dataSet.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成频繁项集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> candidateSet 候选项集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">generateFrequentCandidate</span><span class="params">(List&lt;String&gt; candidateSet)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String item : candidateSet) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">support</span> <span class="operator">=</span> countSupport(item);</span><br><span class="line">            <span class="keyword">if</span> (support &gt; minSupport) &#123;</span><br><span class="line">                result.add(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成关联规则并计算置信度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> frequentSet 频繁项集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generateAssosiationRole</span><span class="params">(List&lt;String&gt; frequentSet)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String item : frequentSet) &#123;</span><br><span class="line">            List&lt;String&gt; list = Arrays.asList(item.replace(<span class="string">&quot;(&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;)&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">            <span class="keyword">if</span> (list.size() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (list.size() == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">conf1</span> <span class="operator">=</span> countSupport(list.get(<span class="number">0</span>) + <span class="string">&quot;,&quot;</span> + list.get(<span class="number">1</span>))/countSupport(list.get(<span class="number">0</span>));</span><br><span class="line">                <span class="type">double</span> <span class="variable">conf2</span> <span class="operator">=</span> countSupport(list.get(<span class="number">0</span>) + <span class="string">&quot;,&quot;</span> + list.get(<span class="number">1</span>))/countSupport(list.get(<span class="number">1</span>));</span><br><span class="line">                System.out.println(list.get(<span class="number">0</span>) + <span class="string">&quot;-&gt;&quot;</span> + list.get(<span class="number">1</span>) + <span class="string">&quot;  conf = &quot;</span> + conf1);</span><br><span class="line">                System.out.println(list.get(<span class="number">1</span>) + <span class="string">&quot;-&gt;&quot;</span> + list.get(<span class="number">0</span>) + <span class="string">&quot;  conf = &quot;</span> + conf2);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">goods1</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">goods2</span> <span class="operator">=</span> list.get(<span class="number">1</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">goods3</span> <span class="operator">=</span> list.get(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">double</span> <span class="variable">conf1_23</span> <span class="operator">=</span> countSupport(goods1 + <span class="string">&quot;,&quot;</span> + goods2 + <span class="string">&quot;,&quot;</span> + goods3)/countSupport(goods1);</span><br><span class="line">                <span class="type">double</span> <span class="variable">conf2_13</span> <span class="operator">=</span> countSupport(goods1 + <span class="string">&quot;,&quot;</span> + goods2 + <span class="string">&quot;,&quot;</span> + goods3)/countSupport(goods2);</span><br><span class="line">                <span class="type">double</span> <span class="variable">conf3_12</span> <span class="operator">=</span> countSupport(goods1 + <span class="string">&quot;,&quot;</span> + goods2 + <span class="string">&quot;,&quot;</span> + goods3)/countSupport(goods3);</span><br><span class="line">                <span class="type">double</span> <span class="variable">conf23_1</span> <span class="operator">=</span> countSupport(goods1 + <span class="string">&quot;,&quot;</span> + goods2 + <span class="string">&quot;,&quot;</span> + goods3)/countSupport(goods2 + <span class="string">&quot;,&quot;</span> + goods3);</span><br><span class="line">                <span class="type">double</span> <span class="variable">conf13_2</span> <span class="operator">=</span> countSupport(goods1 + <span class="string">&quot;,&quot;</span> + goods2 + <span class="string">&quot;,&quot;</span> + goods3)/countSupport(goods1 + <span class="string">&quot;,&quot;</span> + goods3);</span><br><span class="line">                <span class="type">double</span> <span class="variable">conf12_3</span> <span class="operator">=</span> countSupport(goods1 + <span class="string">&quot;,&quot;</span> + goods2 + <span class="string">&quot;,&quot;</span> + goods3)/countSupport(goods1 + <span class="string">&quot;,&quot;</span> + goods2);</span><br><span class="line"></span><br><span class="line">                System.out.println(goods1 + <span class="string">&quot;-&gt;&quot;</span> + goods2 + <span class="string">&quot;,&quot;</span> + goods3 + <span class="string">&quot;  conf = &quot;</span> + conf1_23);</span><br><span class="line">                System.out.println(goods2 + <span class="string">&quot;-&gt;&quot;</span> + goods1 + <span class="string">&quot;,&quot;</span> + goods3 + <span class="string">&quot;  conf = &quot;</span> + conf2_13);</span><br><span class="line">                System.out.println(goods3 + <span class="string">&quot;-&gt;&quot;</span> + goods1 + <span class="string">&quot;,&quot;</span> + goods2 + <span class="string">&quot;  conf = &quot;</span> + conf3_12);</span><br><span class="line">                System.out.println(goods2 + <span class="string">&quot;,&quot;</span> + goods3 + <span class="string">&quot;-&gt;&quot;</span> + goods1 + <span class="string">&quot;  conf = &quot;</span> + conf23_1);</span><br><span class="line">                System.out.println(goods1 + <span class="string">&quot;,&quot;</span> + goods3 + <span class="string">&quot;-&gt;&quot;</span> + goods2 + <span class="string">&quot;  conf = &quot;</span> + conf13_2);</span><br><span class="line">                System.out.println(goods1 + <span class="string">&quot;,&quot;</span> + goods2 + <span class="string">&quot;-&gt;&quot;</span> + goods3 + <span class="string">&quot;  conf = &quot;</span> + conf12_3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://i.loli.net/2021/01/01/yLPzd5F3Tvko7bS.png"></p><p>发现运行的结果与手算一致</p>]]></content>
      
      
      <categories>
          
          <category> 数据挖掘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聚类分析经典算法(一)</title>
      <link href="/article/27782ca8.html"/>
      <url>/article/27782ca8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>完成实验的过程学习下聚类分析算法</p></blockquote><p>参考文章：<a href="https://developer.ibm.com/zh/articles/ba-1607-clustering-algorithm/">https://developer.ibm.com/zh/articles/ba-1607-clustering-algorithm/</a></p><span id="more"></span><h2 id="1、分类和聚类"><a href="#1、分类和聚类" class="headerlink" title="1、分类和聚类"></a>1、分类和聚类</h2><p><strong>监督学习与非监督学习</strong></p><p>生活例子：</p><p>高中或者初中阶段，同学们三五成群，比如看小说的几个人一伙，玩魔方的几个人一伙，上网的几个人一伙……，这个过程老师一般是不知道的，也就是没有老师进行监督，称为非监督学习，聚类算法是非监督学习的算法。</p><p>高三的时候，有些老师会采取什么学习小组政策，擅长不同学科的同学组成互帮互助学习小组，这个过程是老师监督下完成的，称为监督学习，分类算法是监督学习的算法</p><p>数据分类是根据已有的分类标准对数据划分为不同的类别，类别数和分类的标准都是已知的。而聚类则相反，需要根据数据提取属性，按照属性进行分组，每个组之间的数据是相似的，显然组内的相似性越高，组间的相异性越高，聚类的效果越好</p><h2 id="2、K均值算法"><a href="#2、K均值算法" class="headerlink" title="2、K均值算法"></a>2、K均值算法</h2><h3 id="2-1-基础知识"><a href="#2-1-基础知识" class="headerlink" title="2.1 基础知识"></a>2.1 基础知识</h3><p>k均值算法为聚类算法中最基础也最重要的算法，对绝大多数数据有效，但是不能处理异型簇</p><ol><li>随机的取 k 个点作为 k 个初始质心；</li><li>计算其他点到这个 k 个质心的距离；</li><li>如果某个点 p 离第 n 个质心的距离更近，则该点属于 cluster n，并对其打标签，标注 point p.label&#x3D;n，其中 n&lt;&#x3D;k；</li><li>计算同一 cluster 中，也就是相同 label 的点向量的平均值，作为新的质心；</li><li>迭代至所有质心都不变化为止，即算法结束。</li></ol><p><strong>K值的估计</strong></p><p>对于k的值必须提前知道，这也是kmeans算法的一个缺点，对于k值有多种估计方法，这里使用<strong>平均直径法</strong>来估计</p><p>就是首先视所有的点为一个大的整体 cluster，计算所有点之间距离的平均值作为该 cluster 的平均直径。选择初始质心的时候，先选择最远的两个点，接下来从这最两个点开始，与这最两个点距离都很远的点（远的程度为，该点到之前选择的最远的两个点的距离都大于整体 cluster 的平均直径）可视为新发现的质心，否则不视之为质心。这样就可以得到质心的数量</p><h3 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h3><p>测试数据 kmeans.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1,1</span><br><span class="line">2,1</span><br><span class="line">1,2</span><br><span class="line">2,2</span><br><span class="line">6,1</span><br><span class="line">6,2</span><br><span class="line">7,1</span><br><span class="line">7,2</span><br><span class="line">1,5</span><br><span class="line">1,6</span><br><span class="line">2,5</span><br><span class="line">2,6</span><br><span class="line">6,5</span><br><span class="line">6,6</span><br><span class="line">7,5</span><br><span class="line">7,6</span><br></pre></td></tr></table></figure><p>代码实现（java）：</p><p>文本读取工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 读取.txt文件工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: zyb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/13 15:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;文件所在路径/文件名&quot;</span>;</span><br><span class="line">        List&lt;String&gt; list = FileRead.read(filePath);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">read</span><span class="params">(String filePath)</span>&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;String&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="comment">//设置inputStreamReader的构造方法并创建对象设置编码方式为gbk(编码格式可自行切换)</span></span><br><span class="line">            bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream,<span class="string">&quot;gbk&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((str = bufferedReader.readLine()) != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                data.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kmeans.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/12/29 16:28</span></span><br><span class="line"><span class="comment"> * 实现kmeans算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Kmeans</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Node&gt; nodeList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 质心</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer,Node&gt; centroid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        nodeList = getNodeListByPath(<span class="string">&quot;g:/kmeans.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        centroid = computeK(nodeList);</span><br><span class="line"></span><br><span class="line">        doIteration();</span><br><span class="line"></span><br><span class="line">        printResult();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出聚类结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node node : nodeList) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(node.getAttributes()) + <span class="string">&quot;belongs to cluster &quot;</span> + node.getLabel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关键代码，迭代进行聚类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doIteration</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 1.计算各个节点到质心的距离，最近的就属于哪个簇</span></span><br><span class="line">            <span class="keyword">for</span> (Node node : nodeList) &#123;</span><br><span class="line">                <span class="comment">// 暂时存储一个节点与所有质心的距离，方便取最小值</span></span><br><span class="line">                Map&lt;Double,Integer&gt; distance = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;Integer, Node&gt; entry : centroid.entrySet()) &#123;</span><br><span class="line">                    distance.put(getDistance(node,entry.getValue()), entry.getKey());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//找最小值</span></span><br><span class="line">                <span class="type">double</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (Double value : distance.keySet()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (min &lt; value) &#123;</span><br><span class="line">                        min = value;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                node.setLabel(distance.get(min));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.计算同一 cluster 中，也就是相同 label 的点向量的平均值，作为新的质心；</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保留旧的质心用于比较</span></span><br><span class="line">            Map&lt;Integer,Node&gt; oldCentroid = centroid;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 清空旧的质心</span></span><br><span class="line">            centroid = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            List&lt;Integer&gt; labelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            List&lt;CentroidSupport&gt; centroidSupportList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Node node : nodeList) &#123;</span><br><span class="line">                <span class="keyword">if</span> (! labelList.contains(node.getLabel())) &#123;</span><br><span class="line">                    <span class="type">CentroidSupport</span> <span class="variable">centroidSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CentroidSupport</span>(node.getLabel());</span><br><span class="line">                    labelList.add(node.getLabel());</span><br><span class="line">                    centroidSupport.getNodeList().add(node);</span><br><span class="line">                    centroidSupportList.add(centroidSupport);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (CentroidSupport centroidSupport : centroidSupportList) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (centroidSupport.getLabel() == node.getLabel()) &#123;</span><br><span class="line">                            centroidSupport.getNodeList().add(node);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (CentroidSupport centroidSupport : centroidSupportList) &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">avg</span> <span class="operator">=</span> CentroidSupport.getAvg(centroidSupport.getNodeList());</span><br><span class="line">                centroid.put(count,avg);</span><br><span class="line">                count ++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断质心是否变化，若无变化则退出循环</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">falg</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, Node&gt; entry : centroid.entrySet()) &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node1</span> <span class="operator">=</span> centroid.get(entry.getKey());</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node2</span> <span class="operator">=</span> oldCentroid.get(entry.getKey());</span><br><span class="line">                <span class="keyword">if</span> (node1.getLabel() == node2.getLabel() &amp;&amp; node1.getAttributes() != node2.getAttributes()) &#123;</span><br><span class="line">                    falg = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (falg) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文件路径获取节点列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Node&gt; <span class="title function_">getNodeListByPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        List&lt;Node&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; list = FileRead.read(path);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            List&lt;String&gt; list1 = Arrays.asList(s.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            <span class="type">double</span>[] attArr = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">6</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list1.size(); i++) &#123;</span><br><span class="line">                attArr[i] = Double.parseDouble(list1.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            node.setAttributes(attArr);</span><br><span class="line">            result.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算k值和初始质心</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Integer,Node&gt; <span class="title function_">computeK</span><span class="params">(List&lt;Node&gt; nodeList)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算所有点之间距离的平均值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 辅助计算节点列表</span></span><br><span class="line">        List&lt;NodeSupport&gt; nodeSupportList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">distanceSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> distanceAvg;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终返回结果map</span></span><br><span class="line">        Map&lt;Integer,Node&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nodeList.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; nodeList.size(); j++) &#123;</span><br><span class="line">                distanceSum += getDistance(nodeList.get(i),nodeList.get(j));</span><br><span class="line">                <span class="comment">// 填充nodeSupportList</span></span><br><span class="line">                nodeSupportList.add(<span class="keyword">new</span> <span class="title class_">NodeSupport</span>(nodeList.get(i),nodeList.get(j),getDistance(nodeList.get(i),nodeList.get(j))));</span><br><span class="line">                count ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        distanceAvg = distanceSum/count;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//还要用到计数器</span></span><br><span class="line">        count = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选择初始质心的时候，先选择最远的两个点</span></span><br><span class="line">        <span class="comment">// 这时想到应该封装一个类，类属性有节点1，节点2，他们之间的距离 方便后续操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到距离最远的两个点</span></span><br><span class="line">        <span class="type">NodeSupport</span> <span class="variable">max</span> <span class="operator">=</span> Collections.max(nodeSupportList, (n1, n2) -&gt; (<span class="type">int</span>) (n1.getDistance() - n2.getDistance()));</span><br><span class="line"></span><br><span class="line">        resultMap.put(<span class="number">1</span>,max.getNode1());</span><br><span class="line">        resultMap.put(<span class="number">2</span>,max.getNode2());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接下来从这最两个点开始，与这最两个点距离都大于平均距离的点可视为新发现的质心，否则不视之为质心</span></span><br><span class="line">        <span class="keyword">for</span> (Node node : nodeList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (getDistance(node,max.getNode1()) &gt; distanceAvg &amp;&amp; getDistance(node,max.getNode2()) &gt; distanceAvg) &#123;</span><br><span class="line">                <span class="comment">//新的质心</span></span><br><span class="line">                resultMap.put(count,node);</span><br><span class="line">                count ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算两个结点之间得到欧式距离的平方（为了避免比较时出现奇怪的问题，直接用平方来比较）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n1 节点1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n2 节点2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 欧氏距离的平方</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">getDistance</span><span class="params">(Node n1,Node n2)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">distance</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n1.getAttributes().length; i++) &#123;</span><br><span class="line">            distance += (n1.getAttributes()[i] - n2.getAttributes()[i]) * (n1.getAttributes()[i] - n2.getAttributes()[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> distance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义分类的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> label; <span class="comment">//label(标签)用来记录这个点属于哪个cluster(簇)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span>[] attributes = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">6</span>]; <span class="comment">//存放属性，使用数组是可以存放多维的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLabel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLabel</span><span class="params">(<span class="type">int</span> label)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span>[] getAttributes() &#123;</span><br><span class="line">        <span class="keyword">return</span> attributes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAttributes</span><span class="params">(<span class="type">double</span>[] attributes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.attributes = attributes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;label=&quot;</span> + label +</span><br><span class="line">                <span class="string">&quot;, attributes=&quot;</span> + Arrays.toString(attributes) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 辅助完成功能的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NodeSupport</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node node1;</span><br><span class="line">    <span class="keyword">private</span> Node node2;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> distance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NodeSupport</span><span class="params">(Node node1, Node node2, <span class="type">double</span> distance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.node1 = node1;</span><br><span class="line">        <span class="built_in">this</span>.node2 = node2;</span><br><span class="line">        <span class="built_in">this</span>.distance = distance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getNode1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNode1</span><span class="params">(Node node1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.node1 = node1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getNode2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNode2</span><span class="params">(Node node2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.node2 = node2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDistance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> distance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDistance</span><span class="params">(<span class="type">double</span> distance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.distance = distance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NodeSupport&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;node1=&quot;</span> + node1 +</span><br><span class="line">                <span class="string">&quot;, node2=&quot;</span> + node2 +</span><br><span class="line">                <span class="string">&quot;, distance=&quot;</span> + distance +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 辅助完成质点划分</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CentroidSupport</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer label;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&gt; nodeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据节点列表算出平均值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">getAvg</span><span class="params">(List&lt;Node&gt; list)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        <span class="keyword">for</span> (Node node : list) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; node.getAttributes().length; i++) &#123;</span><br><span class="line">                sum.getAttributes()[i] += node.getAttributes()[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sum.getAttributes().length; i++) &#123;</span><br><span class="line">            sum.getAttributes()[i] /= list.size();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getLabel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLabel</span><span class="params">(Integer label)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Node&gt; <span class="title function_">getNodeList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nodeList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNodeList</span><span class="params">(List&lt;Node&gt; nodeList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nodeList = nodeList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CentroidSupport</span><span class="params">(Integer label)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CentroidSupport&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;label=&quot;</span> + label +</span><br><span class="line">                <span class="string">&quot;, nodeList=&quot;</span> + nodeList +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://i.loli.net/2020/12/29/1uRi9t7BlemLwQT.png"></p><blockquote><p>这里默认数据最多是六维，设计的时候不应该使用数组存储，发现已经来不及改，若需要增加多维数据修改Node类即可</p></blockquote><h2 id="3、层次聚类算法"><a href="#3、层次聚类算法" class="headerlink" title="3、层次聚类算法"></a>3、层次聚类算法</h2><h3 id="3-1-基础知识"><a href="#3-1-基础知识" class="headerlink" title="3.1 基础知识"></a>3.1 基础知识</h3><p>凝聚式层次聚类，就是在初始阶段将每一个点都视为一个簇，之后每一次合并两个最接近的簇，当然对于接近程度的定义则需要指定簇的邻近准则。</p><p><strong>簇的邻近准则：</strong></p><p>min 、max、组平均。下面这张图可以很好的理解</p><p><img src="https://i.loli.net/2020/12/29/jeldwvnT7KsQDL8.png"></p><p><strong>各种距离：</strong></p><blockquote><p>该部分参考：</p><p><a href="https://blog.csdn.net/sinat_30353259/article/details/80885702">https://blog.csdn.net/sinat_30353259&#x2F;article&#x2F;details&#x2F;80885702</a></p><p><a href="https://blog.csdn.net/zmdsjtu/article/details/77965222">https://blog.csdn.net/zmdsjtu/article/details/77965222</a></p></blockquote><p>欧式距离：</p><p>​        初中高中数学经常使用的两点之间的距离公式</p><p>曼哈顿距离：</p><p>​        名字可以猜测个大概，从曼哈顿街区一个十字路口到另一个路口的距离肯定不是直线距离，而是实际驾驶的距离，除非暴君mk2直接飞过去…</p><p>切比雪夫距离：</p><p>​        之前好像学过个切比雪夫不等式，不知道有啥关系没有….</p><p>​        国际象棋里国王的走法每次只能向各个方向走一步，从点(x1,y1)走到(x2,y2)的最少步数为切比雪夫距离，这个距离为 max(|x1 - x2|,|y1 -y2|)</p><p>汉明距离：</p><p>​        两个字符串对应字符不一样的个数</p><p>​        1011101 与 1001001 之间的汉明距离是 2</p><p>​         2143896 与 2233796 之间的汉明距离是 3</p><p>​        “toned” 与 “roses” 之间的汉明距离是 3</p><p>余弦距离：</p><p>​        1 - 两个向量角的余弦值（梦回高中，余弦定理 ？？），这个余弦值又叫做余弦相似度</p><p>闵氏距离：</p><p>​        不是一种距离， 而是一组距离的定义， 是对多个距离度量公式的概括性的表述。</p><p>​        两个n维变量a(x11,x12,…,x1n)与b(x21,x22,…,x2n)间的闵可夫斯基距离定义为:</p><p>​        <img src="https://i.loli.net/2020/12/30/pSQmR7batZou4vA.png"></p><p>​        其中p是一个变参数：<br>​        当p&#x3D;1时， 就是曼哈顿距离；<br>​        当p&#x3D;2时， 就是欧氏距离；<br>​        当p→∞时， 就是切比雪夫距离。<br>​        根据p的不同， 闵氏距离可以表示某一类&#x2F;种的距离。</p><p>绝对距离：</p><p>​        百度百科：平面直角坐标系中两点的横坐标的差的绝对值与纵坐标的差的绝对值的和叫做这两点的绝对距离</p><p>​        d &#x3D; |x1 - x2| + |y1 + y2|</p><p>…(这些应该够用了)</p><h3 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h3><p>选取学习老师安排的实验：</p><p><img src="https://i.loli.net/2020/12/30/HDZx5t6bTwlpeBO.png"></p><p><a href="https://edu-cyfwlp.oss-cn-beijing.aliyuncs.com/test3-1.csv">点击下载test3-1.csv</a></p><p>临近准则就选<strong>最大</strong>和<strong>最小</strong>显然比较简单，距离选择<strong>欧氏距离</strong>和<strong>切比雪夫距离</strong>（本来选的平方欧式距离，结果linkage这个函数的参数里没有平方欧式距离）</p><p>这样就有四种组合，先用spss软件操作一波，在这两个地方分布选择临近准则和距离衡量 </p><p><strong>（四种组合就不用了，应该是用到就行，不用覆盖每个组合，两种就行这样）</strong></p><p><img src="https://i.loli.net/2020/12/30/BsM14qGviOyIDdR.png"></p><p>好家伙，一点直接报错</p><p><img src="https://i.loli.net/2020/12/30/63IXEzOGDjhsq12.png"></p><p>后来试了几次因为勾选了这个东西，这样结果就没有树状图</p><p>网上查了是安装目录的问题，需要将spss安装在默认目录下，无奈卸载重装（时间实在有限，期末将至，暂且认为这样可以解决）</p><p><img src="https://i.loli.net/2020/12/30/eMPx1wRFHaju7Eq.png" alt="image-20201230125820529"></p><p>结果：</p><ol><li><p>最小距离，欧式距离<br><img src="https://i.loli.net/2020/12/30/ReGQ1w2yEtg7voz.png"></p></li><li><p>最大距离，切比雪夫距离</p></li></ol><p><img src="https://i.loli.net/2020/12/30/aYS3xN4X2he8dwC.png"></p><p>貌似都差不多，根据不错</p><p>既然要求了python就只好先用了</p><p>原来python直接调库就行，都不用实现算法，还是有点爽</p><p>代码来源：<a href="https://blog.csdn.net/qq_41489917/article/details/106873924">本校大佬博客</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> scipy.cluster.hierarchy <span class="keyword">as</span> sch</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> AgglomerativeClustering</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line">data = pd.read_csv(<span class="string">&quot;test3-1.csv&quot;</span>,encoding=<span class="string">&quot;gbk&quot;</span>) <span class="comment">#读入数据</span></span><br><span class="line"><span class="comment">#清除‘酒’这列数据</span></span><br><span class="line">data = data.drop([<span class="string">&#x27;酒&#x27;</span>], axis=<span class="number">1</span>)</span><br><span class="line">df = MinMaxScaler().fit_transform(data)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 建立模型</span></span><br><span class="line">model = AgglomerativeClustering(n_clusters=<span class="number">3</span>)</span><br><span class="line">model.fit(df)</span><br><span class="line">data[<span class="string">&#x27;类别标签&#x27;</span>] = model.labels_</span><br><span class="line"><span class="built_in">print</span>(data.head())</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line"><span class="comment">#single为最近邻点算法，euclidean为欧式距离</span></span><br><span class="line">ss = sch.linkage(df,method=<span class="string">&#x27;single&#x27;</span>, metric=<span class="string">&#x27;euclidean&#x27;</span>)</span><br><span class="line">sch.dendrogram(ss)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">ss = sch.linkage(df,method=<span class="string">&#x27;complete&#x27;</span>, metric=<span class="string">&#x27;chebychev&#x27;</span>)</span><br><span class="line">sch.dendrogram(ss)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/30/M1noeHRkzWSiKF9.jpg"></p><p>少库什么的，安装起来又贼慢，要不就先到此为止了，运行结果应该是没有问题。</p><p>还是再搞搞，先换个国内得到镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>再全部安装一遍库</p><p>运行结果：</p><p><img src="https://i.loli.net/2020/12/30/fDkha24dYy7rnZv.png"></p><p><img src="https://i.loli.net/2020/12/30/Q6qXSY4tlfZ29BD.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据挖掘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朴素贝叶斯分类算法</title>
      <link href="/article/f2d77da3.html"/>
      <url>/article/f2d77da3.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>概率论和高中数学都学习过贝叶斯公式来计算条件概率，A发生下B发送的概率这种题，比较熟悉。朴素贝叶斯分类算法或许和这个有点关系吧…</p></blockquote><span id="more"></span><h2 id="1、贝叶斯原理"><a href="#1、贝叶斯原理" class="headerlink" title="1、贝叶斯原理"></a>1、贝叶斯原理</h2><p>“逆向概率”：相对“正向概率”而言，正向概率就像是一个袋子各种颜色球然后摸求概率这种问题，上帝视角解决问题。而大多数我们需要解决的问题确不能在上帝视角解决的。于是贝叶斯提出这样一个问题：<strong>不知道袋中白球和黑球的个数，而是通过摸出球的颜色来判断带中白球和黑球个数的比例</strong></p><p>贝叶斯公式 <strong>P(A|B) &#x3D; (P(B|A) * P(A))&#x2F; P(B)</strong>  </p><h2 id="2、朴素贝叶斯"><a href="#2、朴素贝叶斯" class="headerlink" title="2、朴素贝叶斯"></a>2、朴素贝叶斯</h2><p>例子（<strong>重要，代码实现的思路依赖于解决这个问题的思路</strong>）：</p><p>某个医院早上收了六个门诊病人，如下表。</p><p>　　症状　　职业　　　疾病<br>　　打喷嚏　护士　　　感冒<br>　　打喷嚏　农夫　　　过敏<br>　　头痛　　建筑工人　脑震荡<br>　　头痛　　建筑工人　感冒<br>　　打喷嚏　教师　　　感冒<br>　　头痛　　教师　　　脑震荡</p><p>现在又来了第七个病人，是一个打喷嚏的建筑工人。请问他患上感冒的概率有多大？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">P(感冒|打喷嚏 x 建筑工人)</span><br><span class="line"></span><br><span class="line">= P（打喷嚏 * 建筑工人|感冒）* P（感冒） /  p (打喷嚏 * 建筑工人)</span><br><span class="line"></span><br><span class="line">由于打喷嚏和建筑工人是相互独立事件</span><br><span class="line"></span><br><span class="line">原式 = P(打喷嚏|感冒) * p(建筑工人|感冒) * p(感冒) / p(打喷嚏) * p(建筑工人)</span><br><span class="line"></span><br><span class="line">(这些概率都可以根据数据计算出来，从来预测第七个病人患上感冒的概率)</span><br><span class="line"></span><br><span class="line">= (2/3 * 1/3 * 1/2) / (1/2 * 1/3)</span><br><span class="line"></span><br><span class="line">=  2/3 = 66.6%</span><br></pre></td></tr></table></figure><p>上面这给例子的计算过程大概就是朴素贝叶斯分类算法的原理,贝叶斯朴素算法的前提是假设影响结果的属性之间是相互独立的，如职业护士和教师（但现实不排除有人同时从事这两种职业的可能），虽然如此，这种算法在大多数情况下还是比较准确。</p><p><strong>朴素贝叶斯分类</strong>：在统计资料的基础上，依据某些特征，计算各个类别的概率，从而实现分类。</p><h2 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h2><p>以实验的作业为例：</p><p>现有西瓜挑选数据文件：dataset.txt</p><p>编程实现朴素贝叶斯算法</p><p>并判断有如下特征的瓜是否好瓜：</p><p>青绿,稍蜷,浊响,清晰,凹陷,硬滑</p><p>dataset.txt:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">编号,色泽,根蒂,敲声,纹理,脐部,触感,好瓜  </span><br><span class="line">1,青绿,蜷缩,浊响,清晰,凹陷,硬滑,是  </span><br><span class="line">2,乌黑,蜷缩,沉闷,清晰,凹陷,硬滑,是  </span><br><span class="line">3,乌黑,蜷缩,浊响,清晰,凹陷,硬滑,是  </span><br><span class="line">4,青绿,蜷缩,沉闷,清晰,凹陷,硬滑,是  </span><br><span class="line">5,浅白,蜷缩,浊响,清晰,凹陷,硬滑,是  </span><br><span class="line">6,青绿,稍蜷,浊响,清晰,稍凹,软粘,是  </span><br><span class="line">7,乌黑,稍蜷,浊响,稍糊,稍凹,软粘,是  </span><br><span class="line">8,乌黑,稍蜷,浊响,清晰,稍凹,硬滑,是  </span><br><span class="line">9,乌黑,稍蜷,沉闷,稍糊,稍凹,硬滑,否  </span><br><span class="line">10,青绿,硬挺,清脆,清晰,平坦,软粘,否  </span><br><span class="line">11,浅白,硬挺,清脆,模糊,平坦,硬滑,否  </span><br><span class="line">12,浅白,蜷缩,浊响,模糊,平坦,软粘,否  </span><br><span class="line">13,青绿,稍蜷,浊响,稍糊,凹陷,硬滑,否  </span><br><span class="line">14,浅白,稍蜷,沉闷,稍糊,凹陷,硬滑,否  </span><br><span class="line">15,乌黑,稍蜷,浊响,清晰,稍凹,软粘,否  </span><br><span class="line">16,浅白,蜷缩,浊响,模糊,平坦,硬滑,否  </span><br><span class="line">17,青绿,蜷缩,沉闷,稍糊,稍凹,硬滑,否  </span><br></pre></td></tr></table></figure><p><strong>代码实现之：</strong></p><p>目录结构：</p><p><img src="https://i.loli.net/2020/12/25/aILTHUQNu6iSY1y.png"></p><ul><li>FileRead : 读取txt工具类</li><li>Watermelon:西瓜实体类</li><li>NativeBayesModel:算法实现类</li></ul><p>FileRead.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 读取.txt文件工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: zyb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/13 15:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;文件所在路径/文件名&quot;</span>;</span><br><span class="line">        List&lt;String&gt; list = FileRead.read(filePath);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">read</span><span class="params">(String filePath)</span>&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;String&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="comment">//设置inputStreamReader的构造方法并创建对象设置编码方式为gbk(编码格式可自行切换)</span></span><br><span class="line">            bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream,<span class="string">&quot;gbk&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((str = bufferedReader.readLine()) != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                data.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Watermelon.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/12/23 16:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Watermelon</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String attribute1;</span><br><span class="line">    <span class="keyword">private</span> String attribute2;</span><br><span class="line">    <span class="keyword">private</span> String attribute3;</span><br><span class="line">    <span class="keyword">private</span> String attribute4;</span><br><span class="line">    <span class="keyword">private</span> String attribute5;</span><br><span class="line">    <span class="keyword">private</span> String attribute6;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isGood;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略 get/set方法</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>NativeBayesModel：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> utils.FileRead;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/12/23 15:39</span></span><br><span class="line"><span class="comment"> * 朴素贝叶斯分类算法判断瓜是否为好瓜</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NaiveBayesModel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Double&gt; conditionGood = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();   <span class="comment">//存储每个属性的 P(A|好瓜) 如 P(&quot;青旅&quot;|好瓜)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Double&gt; conditionNotGood = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">//存储每个属性的 P(A|不好瓜)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String filePath;<span class="comment">//文件路径</span></span><br><span class="line">        String attlist; <span class="comment">//西瓜属性</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        List&lt;Watermelon&gt; watermelonList = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入读取的数据路径&quot;</span>);</span><br><span class="line">            filePath = scanner.nextLine();</span><br><span class="line">            watermelonList = getWatermelonList(filePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 训练数据</span></span><br><span class="line">        calculate(watermelonList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        System.out.println(<span class="string">&quot;输入西瓜的属性（，分割）&quot;</span>);</span><br><span class="line">        attlist = scanner.nextLine();</span><br><span class="line">        List&lt;String&gt; attList = Arrays.asList(attlist.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(isGood(attList)?<span class="string">&quot;这个瓜是好瓜&quot;</span>:<span class="string">&quot;这个瓜不是好瓜&quot;</span>);</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据属性判断是否是好瓜</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> attList 属性列表，如 [青绿,稍蜷,浊响,清晰,凹陷,硬滑]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 好瓜</span></span><br><span class="line"><span class="comment">     *         false 坏瓜</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isGood</span><span class="params">(List&lt;String&gt; attList)</span> &#123;</span><br><span class="line">        <span class="comment">// p1 p2并非满足属性的瓜是好瓜或坏瓜的实际概率，因为这两个概率的分母相同，只需要比较p1和p2的大小即可</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">p1</span> <span class="operator">=</span> conditionGood.get(<span class="string">&quot;好瓜&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : attList) &#123;</span><br><span class="line">            p1 *= conditionGood.get(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">p2</span> <span class="operator">=</span> conditionNotGood.get(<span class="string">&quot;坏瓜&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : attList) &#123;</span><br><span class="line">            p2*= conditionNotGood.get(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p1 &gt; p2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据西瓜列表计算出各个属性的条件概率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  watermelons 含义西瓜数据列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">calculate</span><span class="params">(List&lt;Watermelon&gt; watermelons)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String,Integer&gt; att1Bad = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 统计att1各种类别坏瓜数量</span></span><br><span class="line">        Map&lt;String,Integer&gt; att1Good = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 统计att1各种类别好瓜数量</span></span><br><span class="line">        Map&lt;String,Integer&gt; att2Bad = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String,Integer&gt; att2Good = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String,Integer&gt; att3Bad = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String,Integer&gt; att3Good = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String,Integer&gt; att4Bad = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String,Integer&gt; att4Good = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String,Integer&gt; att5Bad = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String,Integer&gt; att5Good = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String,Integer&gt; att6Bad = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String,Integer&gt; att6Good = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对西瓜列表进行遍历，得到每个属性瓜是好瓜的个数和是坏瓜的个数</span></span><br><span class="line">        <span class="keyword">for</span> (Watermelon watermelon : watermelons) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 统计属性1</span></span><br><span class="line">            <span class="keyword">if</span> (watermelon.isGood()) &#123;</span><br><span class="line">                <span class="comment">//好瓜</span></span><br><span class="line">                att1Good.merge(watermelon.getAttribute1(), <span class="number">1</span>, Integer::sum); <span class="comment">// 兰姆达表达式</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//坏瓜</span></span><br><span class="line">                att1Bad.merge(watermelon.getAttribute1(), <span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 统计属性2</span></span><br><span class="line">            <span class="keyword">if</span> (watermelon.isGood()) &#123;</span><br><span class="line">                <span class="comment">//好瓜</span></span><br><span class="line">                att2Good.merge(watermelon.getAttribute2(), <span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//坏瓜</span></span><br><span class="line">                att2Bad.merge(watermelon.getAttribute2(), <span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 统计属性3</span></span><br><span class="line">            <span class="keyword">if</span> (watermelon.isGood()) &#123;</span><br><span class="line">                <span class="comment">//好瓜</span></span><br><span class="line">                att3Good.merge(watermelon.getAttribute3(), <span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//坏瓜</span></span><br><span class="line">                att3Bad.merge(watermelon.getAttribute3(), <span class="number">1</span>, Integer::sum);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 统计属性4</span></span><br><span class="line">            <span class="keyword">if</span> (watermelon.isGood()) &#123;</span><br><span class="line">                <span class="comment">//好瓜</span></span><br><span class="line">                att4Good.merge(watermelon.getAttribute4(), <span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//坏瓜</span></span><br><span class="line">                att4Bad.merge(watermelon.getAttribute4(), <span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 统计属性5</span></span><br><span class="line">            <span class="keyword">if</span> (watermelon.isGood()) &#123;</span><br><span class="line">                <span class="comment">//好瓜</span></span><br><span class="line">                att5Good.merge(watermelon.getAttribute5(), <span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//坏瓜</span></span><br><span class="line">                att5Bad.merge(watermelon.getAttribute5(), <span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 统计属性6</span></span><br><span class="line">            <span class="keyword">if</span> (watermelon.isGood()) &#123;</span><br><span class="line">                <span class="comment">//好瓜</span></span><br><span class="line">                att6Good.merge(watermelon.getAttribute6(), <span class="number">1</span>, Integer::sum); <span class="comment">// 兰姆达表达式</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//坏瓜</span></span><br><span class="line">                att6Bad.merge(watermelon.getAttribute6(), <span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算好瓜的总数和坏瓜的总数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">goodTotal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> badTotal;</span><br><span class="line">        <span class="keyword">for</span> (Integer value : att1Good.values()) &#123;</span><br><span class="line">            goodTotal += value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        badTotal = watermelons.size() - goodTotal;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算是好瓜与是坏瓜的概率</span></span><br><span class="line">        conditionGood.put(<span class="string">&quot;好瓜&quot;</span>, goodTotal*<span class="number">1.0</span>/watermelons.size());</span><br><span class="line">        conditionNotGood.put(<span class="string">&quot;坏瓜&quot;</span>, badTotal*<span class="number">1.0</span>/watermelons.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算条件概率</span></span><br><span class="line">        countConditionalProbability(att1Good,conditionGood,goodTotal);</span><br><span class="line">        countConditionalProbability(att2Good,conditionGood,goodTotal);</span><br><span class="line">        countConditionalProbability(att3Good,conditionGood,goodTotal);</span><br><span class="line">        countConditionalProbability(att4Good,conditionGood,goodTotal);</span><br><span class="line">        countConditionalProbability(att5Good,conditionGood,goodTotal);</span><br><span class="line">        countConditionalProbability(att6Good,conditionGood,goodTotal);</span><br><span class="line"></span><br><span class="line">        countConditionalProbability(att1Bad,conditionNotGood,badTotal);</span><br><span class="line">        countConditionalProbability(att2Bad,conditionNotGood,badTotal);</span><br><span class="line">        countConditionalProbability(att3Bad,conditionNotGood,badTotal);</span><br><span class="line">        countConditionalProbability(att4Bad,conditionNotGood,badTotal);</span><br><span class="line">        countConditionalProbability(att5Bad,conditionNotGood,badTotal);</span><br><span class="line">        countConditionalProbability(att6Bad,conditionNotGood,badTotal);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算各个属性的条件概率，为calculate子程序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 各属性西瓜的数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultMap 每个属性的 P(A|好瓜)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Total 西瓜好/坏的总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countConditionalProbability</span><span class="params">(Map&lt;String,Integer&gt; map,Map&lt;String,Double&gt; resultMap,<span class="type">int</span> Total)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> (<span class="type">double</span>)entry.getValue()/Total;</span><br><span class="line">            resultMap.put(entry.getKey(),result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入文件生成西瓜列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 含有西瓜数据的列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Watermelon&gt; <span class="title function_">getWatermelonList</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = FileRead.read(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历文件，得到西瓜列表</span></span><br><span class="line">        List&lt;Watermelon&gt; watermelonList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            List&lt;String&gt; attList = Arrays.asList(line.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">            <span class="type">Watermelon</span> <span class="variable">watermelon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Watermelon</span>();</span><br><span class="line">            watermelon.setAttribute1(attList.get(<span class="number">1</span>));</span><br><span class="line">            watermelon.setAttribute2(attList.get(<span class="number">2</span>));</span><br><span class="line">            watermelon.setAttribute3(attList.get(<span class="number">3</span>));</span><br><span class="line">            watermelon.setAttribute4(attList.get(<span class="number">4</span>));</span><br><span class="line">            watermelon.setAttribute5(attList.get(<span class="number">5</span>));</span><br><span class="line">            watermelon.setAttribute6(attList.get(<span class="number">6</span>));</span><br><span class="line">            watermelon.setGood(attList.get(<span class="number">7</span>).trim().equals(<span class="string">&quot;是&quot;</span>));</span><br><span class="line">            watermelonList.add(watermelon);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> watermelonList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://i.loli.net/2020/12/25/AG3nDjdvVYJQ5l2.png"></p><blockquote><p>加起来搞这点东西搞了两个下午，原来除了项目开发以及经典的算法还有这些机器学习的这些算法，更是感慨知识的无穷无尽，可能文章还是有许多不正确的地方，望指正<img src="https://i.loli.net/2020/12/25/CIZQ4EB3ApRawvW.jpg" alt="img" style="zoom:33%;" /></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据挖掘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络概述</title>
      <link href="/article/7c4ca347.html"/>
      <url>/article/7c4ca347.html</url>
      
        <content type="html"><![CDATA[<blockquote><p> 计算机网络概述</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/12/22/WSblva7VrZ59Gtq.png" alt="概览"></p><h2 id="1、计算机网络的概念、组成、功能、分类"><a href="#1、计算机网络的概念、组成、功能、分类" class="headerlink" title="1、计算机网络的概念、组成、功能、分类"></a>1、计算机网络的概念、组成、功能、分类</h2><h3 id="1-1、计算机网络的概念"><a href="#1-1、计算机网络的概念" class="headerlink" title="1.1、计算机网络的概念"></a>1.1、计算机网络的概念</h3><p>计算机网络：将一个分散的，具有独立功能的<strong>计算机系统</strong>，通过<strong>通讯设备</strong>与<strong>线路</strong>连接起来，由功能完善的<strong>软件</strong>实现<strong>资源共享</strong>和<strong>信息传递</strong>的系统</p><p><img src="https://i.loli.net/2020/12/19/7cIaZspykvK8nbr.png"></p><h3 id="1-2、计算机网络的功能"><a href="#1-2、计算机网络的功能" class="headerlink" title="1.2、计算机网络的功能"></a>1.2、计算机网络的功能</h3><p><strong>1、数据通信</strong>（连通性）</p><p><strong>2、资源共享</strong>  硬件 软件 数据 </p><p>3、分布式处理 多台计算机各自承担同一工作任务的不同部分</p><p>4、提高可靠性 </p><p>5、负载均衡 </p><h3 id="1-3、计算机网络的组成"><a href="#1-3、计算机网络的组成" class="headerlink" title="1.3、计算机网络的组成"></a>1.3、计算机网络的组成</h3><p>1、组成部分：硬件，软件，协议</p><p>2、工作方式：</p><p>​    边缘部分 ：用户直接使用</p><p>​    核心部分：为边缘部分服务</p><p>3、功能组成：</p><p>​    通信子网：实现数据通信</p><p>​    资源子网：实现资源共享&#x2F;数据处理</p><h3 id="1-4、计算机网络的分类"><a href="#1-4、计算机网络的分类" class="headerlink" title="1.4、计算机网络的分类"></a>1.4、计算机网络的分类</h3><p>1、按分布范围分：广域网（WAN），城域网(MAN)，局域网(WAN)，个人区域网(PAN)</p><p>2、按照使用者分：公用网（中国电信…），专用网(政府，军队…)</p><p>3、按照交换技术分：电路交换 报文交换 分组交换</p><p>4、按照拓补结构分：总线型 星型 环形 网状型</p><p><img src="https://i.loli.net/2020/12/19/63dLKeVDQ5qzfoP.png"></p><p>5、按照传输技术分：</p><p>​    广播式网络：共享公共通信信道</p><p>​    点对点网络：使用<strong>分组存储转发</strong>和<strong>路由选择</strong>机制</p><h2 id="2、标准化工作和相关组织"><a href="#2、标准化工作和相关组织" class="headerlink" title="2、标准化工作和相关组织"></a>2、标准化工作和相关组织</h2><p>标准的分类：</p><p>​    法定标准：由权威机构指定的正式的，合法的标准   <strong>OSI</strong></p><p>​    事实标准:某些公司的产品在竞争中占据了主流，时间长了，这些产品中的协议或技术就成了标准   <strong>TCP&#x2F;IP</strong></p><h3 id="2-1、标准化工作"><a href="#2-1、标准化工作" class="headerlink" title="2.1、标准化工作"></a>2.1、标准化工作</h3><p>RFC (Request For Comments) – 因特网的标准形式</p><h3 id="2-2、标准化工作的相关组织"><a href="#2-2、标准化工作的相关组织" class="headerlink" title="2.2、标准化工作的相关组织"></a>2.2、标准化工作的相关组织</h3><p><img src="https://i.loli.net/2020/12/19/2QrEy69lFzJLqxb.png"></p><h2 id="3、性能指标之速率，带宽，吞吐量"><a href="#3、性能指标之速率，带宽，吞吐量" class="headerlink" title="3、性能指标之速率，带宽，吞吐量"></a>3、性能指标之速率，带宽，吞吐量</h2><h3 id="3-1、速率"><a href="#3-1、速率" class="headerlink" title="3.1、速率"></a>3.1、速率</h3><p>速率即<strong>数据率</strong>或<strong>数据传输率</strong>或<strong>比特率</strong></p><p>连接在计算机网络上的主机在数字信道上传送数据位数的速度</p><p>单位：b&#x2F;s , kb&#x2F;s , Mb&#x2F;s , Gb&#x2F;s ,Tb&#x2F;s （进制为10^3）</p><h3 id="3-2、带宽"><a href="#3-2、带宽" class="headerlink" title="3.2、带宽"></a>3.2、带宽</h3><blockquote><p>带宽，原指某个信号具有的频带宽度，即最高频率与最低频率之差，单位值赫兹（Hz）</p></blockquote><p>计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是单位时间内从网络中某一点到另一点能通过的“最高数据率”，单位是“比特每秒”</p><p><strong>网络设备所支持的最高速度</strong></p><h3 id="3-3、吞吐量"><a href="#3-3、吞吐量" class="headerlink" title="3.3、吞吐量"></a>3.3、吞吐量</h3><p>表示<strong>单位之间</strong>内通过某个网络（或信道、接口）的数据量，单位为b&#x2F;s , kb&#x2F;s , Mb&#x2F;s </p><p>吞吐量受网络的带宽或网络的额定速率的限制</p><h2 id="4、性能指标之时延、时延带宽积、往返时间RTT、利用率"><a href="#4、性能指标之时延、时延带宽积、往返时间RTT、利用率" class="headerlink" title="4、性能指标之时延、时延带宽积、往返时间RTT、利用率"></a>4、性能指标之时延、时延带宽积、往返时间RTT、利用率</h2><h3 id="4-1、时延"><a href="#4-1、时延" class="headerlink" title="4.1、时延"></a>4.1、时延</h3><p>指数据（报文&#x2F;分组&#x2F;比特流）从网络（或链路）一端发送到另一端所需要的时间，也叫延迟或迟延，单位是秒（s）</p><ol><li>发送时延（传输时延）：主机或路由器发送数据帧到链路所需要的时间</li><li>传播时延：数据在链路上传输时间</li><li>排队时延：等待输入&#x2F;输出链路可用时间</li><li>处理时延：检错，找出口</li></ol><p><strong>时延 &#x3D; 发送时延 + 传播时延 + 排队时延 + 排队时延</strong></p><p><img src="https://i.loli.net/2020/12/20/xuWTkRsdMDBF1ZV.png"></p><h3 id="4-2、时延带宽积"><a href="#4-2、时延带宽积" class="headerlink" title="4.2、时延带宽积"></a>4.2、时延带宽积</h3><p>时延带宽积 &#x3D; 传播时延 x 带宽  （b&#x2F;s）</p><p><img src="https://i.loli.net/2020/12/20/dG1IeljPbRgty6F.png"></p><p>表示<strong>容量</strong>的单位，以比特为单位的链路长度，即某段链路现在就多少比特</p><h3 id="4-3、往返时延RTT"><a href="#4-3、往返时延RTT" class="headerlink" title="4.3、往返时延RTT"></a>4.3、往返时延RTT</h3><blockquote><p>打LOL右上角那个</p></blockquote><p>从发送方发送数据开始，到发送方接受到接受方的确认（接受方收到数据后立即发送确认），总共经历的时延</p><p>RTT越大，在收到确认之前，可以发送的数据更多</p><p>RTT包括</p><ul><li>往返传播时延：传播时延 * 2</li><li>末端处理时间：接收方接收到数据处理时间</li></ul><h3 id="4-4、利用率"><a href="#4-4、利用率" class="headerlink" title="4.4、利用率"></a>4.4、利用率</h3><p>信道利用率：有数据通过的时间&#x2F;（有+无）数据通过的时间</p><p>网络利用率：信道利用率加权平均值</p><h2 id="5、分层结构、协议、接口、服务"><a href="#5、分层结构、协议、接口、服务" class="headerlink" title="5、分层结构、协议、接口、服务"></a>5、分层结构、协议、接口、服务</h2><p><img src="https://i.loli.net/2020/12/20/nDSYZg53ecNBPWI.png"></p><h2 id="6、OSI参考模型"><a href="#6、OSI参考模型" class="headerlink" title="6、OSI参考模型"></a>6、OSI参考模型</h2><p>ISO 提出开放系统互联（OSI）参考模型</p><p>理论成功，市场失败</p><p><img src="https://i.loli.net/2020/12/21/yXfQ5o7j6gOpIGV.png"></p><h3 id="6-1、OSI参考模型解释通信过程"><a href="#6-1、OSI参考模型解释通信过程" class="headerlink" title="6.1、OSI参考模型解释通信过程"></a>6.1、OSI参考模型解释通信过程</h3><p><img src="https://i.loli.net/2020/12/21/w6VJXqjsagSzBbO.png"></p><h3 id="6-2、各层的功能与对应的协议"><a href="#6-2、各层的功能与对应的协议" class="headerlink" title="6.2、各层的功能与对应的协议"></a>6.2、各层的功能与对应的协议</h3><p><strong>应用层</strong>：所有能与<strong>用户交互产生网络流量</strong>的程序 </p><p>典型的应用层服务：文件传输（ftp），电子邮件（SMTP），万维网（http）</p><p><strong>表示层</strong>：用于处理在两个通信系统中<strong>交换信息</strong>的表示方式（语法和语义）</p><p>功能：1、数据格式变换 （翻译官）</p><p>​            2、数据加密解密</p><p>​            3、数据的压缩和恢复 （视频聊天）</p><p><strong>会话层</strong>：向表示层实体&#x2F;用户进程提供<strong>建立连接</strong>并在连接上<strong>有序</strong>的<strong>传输</strong>数据  </p><p>功能：1、建立，管理，终止会话</p><p>​            2、使用校验点可使会话在通信失效时从<strong>校验点&#x2F;同步点</strong>继续恢复通信，实现数据同步（适合于传输大文件）</p><p><strong>传输层</strong>：负责主机中<strong>两个进程</strong>的通信，即<strong>端到端</strong>的通信。传输单位是报文段或用户数据报</p><p>功能：</p><p>​    1、可靠传输、不可靠传输</p><p>​    2、差错控制</p><p>​    3、流量控制</p><p>​    4、复用分用</p><p>​        复用：多个应用层进程可以同时使用运输层的服务</p><p>​        分用：运输层收到消息分别交付给应用层相应的进程</p><p>主要协议：TCP、UDP</p><p><strong>网络层</strong>：把<strong>分组</strong>从源端传到目的端，为分组交换网上不同主机提供通信服务。网络层传输单位是<strong>数据报</strong></p><p>功能：</p><p>​    1、路由选择 最佳路径</p><p>​    2、流量控制</p><p>​    3、差错控制</p><p>​    4、拥塞控制</p><p>主要协议：IP、IPX、ICMP……</p><p><strong>数据链路层</strong>：把网络层传下来的数据报<strong>组装成帧</strong>，数据链路层的传输单位是帧</p><p>功能：</p><p>​    1、成帧（定义帧的开始和结束）</p><p>​    2、差错控制</p><p>​    3、流量控制</p><p>​    4、访问（接入）控制 控制对信道的访问</p><p><strong>物理层</strong>：在物理媒体上实现比特流的透明传输，物理层的传输单位是比特</p><p>透明传输：指不管数据是什么样的比特组合，都应当能在链路上传送</p><p>功能：</p><p>​    1、定义接口特性</p><p>​    2、定义传输模式   单工、半双工、双工</p><p>​    3、定义传输速率</p><p>​    4、比特同步</p><p>​    5、比特编码</p><p>常见协议：Rj45、802.3</p><h2 id="7、TCP-x2F-IP模型-amp-amp-五层参考模型"><a href="#7、TCP-x2F-IP模型-amp-amp-五层参考模型" class="headerlink" title="7、TCP&#x2F;IP模型 &amp;&amp; 五层参考模型"></a>7、TCP&#x2F;IP模型 &amp;&amp; 五层参考模型</h2><h3 id="7-1、TCP-x2F-IP模型"><a href="#7-1、TCP-x2F-IP模型" class="headerlink" title="7.1、TCP&#x2F;IP模型"></a>7.1、TCP&#x2F;IP模型</h3><p><img src="https://i.loli.net/2020/12/22/csdIyjRxDwZBmaV.png"></p><p><img src="https://i.loli.net/2020/12/22/SZmHJzsqKru3j4t.png"></p><h3 id="7-2、五层参考模型"><a href="#7-2、五层参考模型" class="headerlink" title="7.2、五层参考模型"></a>7.2、五层参考模型</h3><p>考研、学习使用这种模型</p><p><img src="https://i.loli.net/2020/12/22/u9zLwoV7I683itq.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>oracle(三)</title>
      <link href="/article/9056aa1c.html"/>
      <url>/article/9056aa1c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>一些练习题</p></blockquote><span id="more"></span><h2 id="1、存储过程，存储函数，触发器练习"><a href="#1、存储过程，存储函数，触发器练习" class="headerlink" title="1、存储过程，存储函数，触发器练习"></a>1、存储过程，存储函数，触发器练习</h2><p><img src="https://i.loli.net/2020/12/18/QMn1wlSvUTHGbZq.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">function</span> fun_getmgrs(eno emp.empno<span class="operator">%</span>type)</span><br><span class="line"><span class="keyword">return</span> varchar2</span><br><span class="line"><span class="keyword">is</span></span><br><span class="line">  <span class="keyword">result</span> varchar2(<span class="number">20</span>) :<span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">cursor</span> c1 <span class="keyword">is</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">start</span> <span class="keyword">with</span> empno <span class="operator">=</span> (<span class="keyword">select</span> mgr <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="operator">=</span> eno) <span class="keyword">connect</span> <span class="keyword">by</span> prior mgr <span class="operator">=</span> empno <span class="keyword">order</span> <span class="keyword">by</span> level <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> c1 loop</span><br><span class="line">    if <span class="keyword">result</span> <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">result</span> :<span class="operator">=</span> item.ename;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">result</span> :<span class="operator">=</span> <span class="keyword">result</span> <span class="operator">||</span> <span class="string">&#x27;-&#x27;</span> <span class="operator">||</span>item.ename;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">  <span class="keyword">end</span> loop;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> fun_getmgrs(<span class="number">7876</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/18/D1CxiEoPOuKmZ24.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">function</span> func_createempno</span><br><span class="line"><span class="keyword">return</span> varchar2</span><br><span class="line"><span class="keyword">is</span></span><br><span class="line">  now_date varchar2(<span class="number">10</span>) :<span class="operator">=</span> to_char(sysdate,<span class="string">&#x27;yyyymmdd&#x27;</span>);</span><br><span class="line">  emp_count number(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="operator">+</span> <span class="number">1</span> <span class="keyword">into</span> emp_count <span class="keyword">from</span> emp <span class="keyword">where</span> to_char(hiredate,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>) <span class="operator">=</span> to_char(sysdate,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>);</span><br><span class="line">  if emp_count <span class="operator">&lt;</span> <span class="number">10</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> now_date <span class="operator">||</span> <span class="number">0</span> <span class="operator">||</span>emp_count;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> now_date <span class="operator">||</span> emp_count;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> func_createempno <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> tr_insertemp</span><br><span class="line">before <span class="keyword">insert</span> <span class="keyword">on</span> emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  :new.empno :<span class="operator">=</span> func_createempno();</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/18/3FDVMZcSzJ8RE5T.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">function</span> count_sal (eno emp.empno<span class="operator">%</span>type) <span class="keyword">return</span> number</span><br><span class="line"><span class="keyword">is</span></span><br><span class="line">  e_sal emp.sal<span class="operator">%</span>type;</span><br><span class="line">  e_comm emp.comm<span class="operator">%</span>type;</span><br><span class="line">  e_geshui number(<span class="number">3</span>);</span><br><span class="line">  e_ynssdr emp.sal<span class="operator">%</span>type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> sal,nvl(comm,<span class="number">0</span>) <span class="keyword">into</span> e_sal,e_comm <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="operator">=</span> eno;</span><br><span class="line">  e_ynssdr :<span class="operator">=</span> e_sal <span class="operator">+</span> e_comm <span class="operator">-</span> <span class="number">800</span>;</span><br><span class="line">  if(e_ynssdr<span class="operator">&lt;=</span> <span class="number">500</span>) <span class="keyword">then</span></span><br><span class="line">    e_geshui :<span class="operator">=</span> e_ynssdr <span class="operator">*</span> <span class="number">0.05</span> <span class="operator">-</span> <span class="number">0</span>;</span><br><span class="line">  elsif (e_ynssdr <span class="operator">&lt;=</span> <span class="number">2000</span>) <span class="keyword">then</span></span><br><span class="line">    e_geshui :<span class="operator">=</span> e_ynssdr <span class="operator">*</span> <span class="number">0.10</span> <span class="operator">-</span> <span class="number">25</span>;</span><br><span class="line">  elsif (e_ynssdr <span class="operator">&lt;=</span> <span class="number">5000</span>) <span class="keyword">then</span></span><br><span class="line">    e_geshui :<span class="operator">=</span> e_ynssdr <span class="operator">*</span> <span class="number">0.15</span> <span class="operator">-</span> <span class="number">0125</span>;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    e_geshui :<span class="operator">=</span> e_ynssdr <span class="operator">*</span> <span class="number">0.20</span> <span class="operator">-</span> <span class="number">375</span>;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line">  <span class="keyword">return</span> e_sal <span class="operator">+</span> e_comm <span class="operator">-</span> e_geshui;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> count_sal(<span class="number">7788</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><h2 id="2、PL-x2F-SQL匿名块练习"><a href="#2、PL-x2F-SQL匿名块练习" class="headerlink" title="2、PL&#x2F;SQL匿名块练习"></a>2、PL&#x2F;SQL匿名块练习</h2><p><img src="https://i.loli.net/2020/12/18/eQlgKqp5ikM1Wtb.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">  t_rows number(<span class="number">1</span>) :<span class="operator">=</span> <span class="operator">&amp;</span>t_rows;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  if t_rows <span class="operator">&lt;</span> <span class="number">1</span> <span class="keyword">or</span> t_rows <span class="operator">&gt;</span> <span class="number">9</span> <span class="keyword">then</span> </span><br><span class="line">    dbms_output.put_line(<span class="string">&#x27;请输入1~9的整数！&#x27;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span>.t_rows loop</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1.</span>.i loop</span><br><span class="line">        dbms_output.put(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">      <span class="keyword">end</span> loop;</span><br><span class="line">      dbms_output.put_line(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span> loop;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/18/Ov9XBRLaUJWgf8E.png"></p><p>建表语句和数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_sys_insurance(</span><br><span class="line">  n_location_type number(<span class="number">1</span>),</span><br><span class="line">  vc_insurance_name varchar2(<span class="number">20</span>),</span><br><span class="line">  n_least_apply number <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  n_most_apply number <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  f_company_ratio number(<span class="number">5</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  f_self_ratio number(<span class="number">5</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="keyword">constraint</span> pk_t <span class="keyword">primary</span> key(n_location_type,vc_insurance_name));</span><br><span class="line">  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_sys_insurance <span class="keyword">values</span>(<span class="number">0</span>,<span class="string">&#x27;养老保险&#x27;</span>,<span class="number">893</span>,<span class="number">4464</span>,<span class="number">20</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_sys_insurance <span class="keyword">values</span>(<span class="number">0</span>,<span class="string">&#x27;医疗保险&#x27;</span>,<span class="number">965</span>,<span class="number">4464</span>,<span class="number">7.5</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_sys_insurance <span class="keyword">values</span>(<span class="number">0</span>,<span class="string">&#x27;失业保险&#x27;</span>,<span class="number">965</span>,<span class="number">4464</span>,<span class="number">0.2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_sys_insurance <span class="keyword">values</span>(<span class="number">0</span>,<span class="string">&#x27;生育保险&#x27;</span>,<span class="number">965</span>,<span class="number">4464</span>,<span class="number">0.6</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_sys_insurance <span class="keyword">values</span>(<span class="number">0</span>,<span class="string">&#x27;工伤保险&#x27;</span>,<span class="number">893</span>,<span class="number">4464</span>,<span class="number">0.96</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_sys_insurance <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;综合保险&#x27;</span>,<span class="number">965</span>,<span class="number">4464</span>,<span class="number">14.8</span>,<span class="number">5.5</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">  t_apply number :<span class="operator">=</span> <span class="operator">&amp;</span>t_apply; <span class="comment">--申报金额</span></span><br><span class="line">  t_locationType t_sys_insurance.n_location_type<span class="operator">%</span>type :<span class="operator">=</span> <span class="operator">&amp;</span>t_locationType; <span class="comment">--户口类型</span></span><br><span class="line">  <span class="keyword">cursor</span> c1(locationType t_sys_insurance.n_location_type<span class="operator">%</span>type) <span class="keyword">is</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_sys_insurance <span class="keyword">where</span> n_location_type <span class="operator">=</span> locationType; <span class="comment">--带参数游标</span></span><br><span class="line">  company_pay number(<span class="number">5</span>,<span class="number">2</span>) :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">--公司缴纳社保金额</span></span><br><span class="line">  self_pay number(<span class="number">5</span>,<span class="number">2</span>) :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">-- 个人缴纳社保金额</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> c1(t_locationType) loop</span><br><span class="line">    if(t_apply <span class="operator">&lt;</span> item.n_least_apply) <span class="keyword">then</span></span><br><span class="line">      company_pay :<span class="operator">=</span>  company_pay <span class="operator">+</span> item.n_least_apply <span class="operator">*</span> (item.f_company_ratio<span class="operator">/</span><span class="number">100</span>);</span><br><span class="line">      self_pay :<span class="operator">=</span> self_pay <span class="operator">+</span> item.n_least_apply <span class="operator">*</span> (item.f_self_ratio<span class="operator">/</span><span class="number">100</span>);</span><br><span class="line">    elsif(t_apply <span class="operator">&gt;</span> item.n_most_apply) <span class="keyword">then</span></span><br><span class="line">      company_pay :<span class="operator">=</span>  company_pay <span class="operator">+</span> item.n_most_apply <span class="operator">*</span> (item.f_company_ratio<span class="operator">/</span><span class="number">100</span>);</span><br><span class="line">      self_pay :<span class="operator">=</span> self_pay <span class="operator">+</span> item.n_most_apply <span class="operator">*</span> (item.f_self_ratio<span class="operator">/</span><span class="number">100</span>);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      company_pay :<span class="operator">=</span>  company_pay <span class="operator">+</span> t_apply <span class="operator">*</span> (item.f_company_ratio<span class="operator">/</span><span class="number">100</span>);</span><br><span class="line">      self_pay :<span class="operator">=</span> self_pay <span class="operator">+</span> t_apply <span class="operator">*</span> (item.f_self_ratio<span class="operator">/</span><span class="number">100</span>);</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">  <span class="keyword">end</span> loop;</span><br><span class="line">  dbms_output.put_line(company_pay);</span><br><span class="line">  dbms_output.put_line(self_pay);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/18/AIHQdZM5plmTRwb.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> </span><br><span class="line">  ex_toomore exception;</span><br><span class="line">  e_number number(<span class="number">2</span>) :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  e_total emp.sal<span class="operator">%</span>type :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">cursor</span> c_emp <span class="keyword">is</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">savepoint</span> s1;</span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> c_emp loop</span><br><span class="line">    if sysdate <span class="operator">-</span> item.hiredate <span class="operator">&gt;</span> <span class="number">7300</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">update</span> emp <span class="keyword">set</span> sal <span class="operator">=</span> sal <span class="operator">+</span> sal <span class="operator">*</span> <span class="number">0.1</span> <span class="keyword">where</span> empno <span class="operator">=</span> item.empno;</span><br><span class="line">      e_number :<span class="operator">=</span> e_number <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">      e_total :<span class="operator">=</span> e_total <span class="operator">+</span> item.sal<span class="operator">*</span><span class="number">1.1</span>;</span><br><span class="line">    elsif sysdate <span class="operator">-</span> item.hiredate <span class="operator">&gt;</span> <span class="number">3650</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">update</span> emp <span class="keyword">set</span> sal <span class="operator">=</span> sal <span class="operator">+</span> sal <span class="operator">*</span> <span class="number">0.05</span> <span class="keyword">where</span> empno <span class="operator">=</span> item.empno;</span><br><span class="line">      e_number :<span class="operator">=</span> e_number <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">      e_total :<span class="operator">=</span> e_total <span class="operator">+</span> item.sal<span class="operator">*</span><span class="number">1.05</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      e_total :<span class="operator">=</span> e_total <span class="operator">+</span> item.sal;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">    if e_total <span class="operator">&gt;</span> <span class="number">1000000</span> <span class="keyword">then</span></span><br><span class="line">      raise ex_toomore;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">  <span class="keyword">end</span> loop;</span><br><span class="line">  <span class="keyword">commit</span>;</span><br><span class="line">  dbms_output.put_line(<span class="string">&#x27;涨工资人数&#x27;</span> <span class="operator">||</span> e_number);</span><br><span class="line">  dbms_output.put_line(<span class="string">&#x27;总工资数&#x27;</span> <span class="operator">||</span> e_total);</span><br><span class="line">exception</span><br><span class="line">  <span class="keyword">when</span> ex_toomore <span class="keyword">then</span> </span><br><span class="line">    <span class="keyword">rollback</span> <span class="keyword">to</span> <span class="keyword">savepoint</span> s1;</span><br><span class="line">    dbms_output.put_line(<span class="string">&#x27;工资超额，已经撤销所有操作&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>运行：涨了几次超过100万</p><p><img src="https://i.loli.net/2020/12/18/xWaKPCtRMNFZDO1.png"></p><p><img src="https://i.loli.net/2020/12/18/ED4G36gdxzQZv5B.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> pro_insal(in_limit emp.sal<span class="operator">%</span>type,e_total <span class="keyword">out</span> emp.sal<span class="operator">%</span>type, e_number <span class="keyword">out</span> number)</span><br><span class="line"><span class="keyword">is</span></span><br><span class="line">  <span class="keyword">cursor</span> c_emp <span class="keyword">is</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line">  ex_toomore exception;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  e_total :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  e_number :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">savepoint</span> s1;</span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> c_emp loop</span><br><span class="line">    if sysdate <span class="operator">-</span> item.hiredate <span class="operator">&gt;</span> <span class="number">7300</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">update</span> emp <span class="keyword">set</span> sal <span class="operator">=</span> sal <span class="operator">+</span> sal <span class="operator">*</span> <span class="number">0.1</span> <span class="keyword">where</span> empno <span class="operator">=</span> item.empno;</span><br><span class="line">      e_number :<span class="operator">=</span> e_number <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">      e_total :<span class="operator">=</span> e_total <span class="operator">+</span> item.sal<span class="operator">*</span><span class="number">1.1</span>;</span><br><span class="line">    elsif sysdate <span class="operator">-</span> item.hiredate <span class="operator">&gt;</span> <span class="number">3650</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">update</span> emp <span class="keyword">set</span> sal <span class="operator">=</span> sal <span class="operator">+</span> sal <span class="operator">*</span> <span class="number">0.05</span> <span class="keyword">where</span> empno <span class="operator">=</span> item.empno;</span><br><span class="line">      e_number :<span class="operator">=</span> e_number <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">      e_total :<span class="operator">=</span> e_total <span class="operator">+</span> item.sal<span class="operator">*</span><span class="number">1.05</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      e_total :<span class="operator">=</span> e_total <span class="operator">+</span> item.sal;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">    if e_total <span class="operator">&gt;</span> in_limit <span class="keyword">then</span></span><br><span class="line">      raise ex_toomore;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">  <span class="keyword">end</span> loop;</span><br><span class="line">  <span class="keyword">commit</span>;</span><br><span class="line">exception</span><br><span class="line">  <span class="keyword">when</span> ex_toomore <span class="keyword">then</span> </span><br><span class="line">    <span class="keyword">rollback</span> <span class="keyword">to</span> <span class="keyword">savepoint</span> s1;</span><br><span class="line">    e_total :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    e_number :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  in_limit emp.sal<span class="operator">%</span>type :<span class="operator">=</span> <span class="number">2000000</span>;</span><br><span class="line">  e_total emp.sal<span class="operator">%</span>type;</span><br><span class="line">  e_number number(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  pro_insal(in_limit,e_total,e_number);</span><br><span class="line">  dbms_output.put_line(e_total);</span><br><span class="line">  dbms_output.put_line(e_number);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>测试，分别将额度设置为1000000和2000000</p><p><img src="https://i.loli.net/2020/12/18/HloLRvXn8zpT9iM.png"></p><h2 id="3、查询及事务控制练习"><a href="#3、查询及事务控制练习" class="headerlink" title="3、查询及事务控制练习"></a>3、查询及事务控制练习</h2><p><img src="https://i.loli.net/2020/12/18/OFaEcBIrX7yThwG.png"></p><p>oeacle 默认事务隔离级别：READ COMMITTED 只能读取到提交的数据</p><table><thead><tr><th></th><th>2</th><th>5</th><th>6</th><th>8</th><th>9</th><th>12</th><th>13</th></tr></thead><tbody><tr><td>scott</td><td>15</td><td>15</td><td>TT</td><td>15</td><td>Test</td><td>15</td><td>Test</td></tr><tr><td>system</td><td>14</td><td>14</td><td>null</td><td>14</td><td>null</td><td>15</td><td>Test</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oracle(二)</title>
      <link href="/article/eea58a37.html"/>
      <url>/article/eea58a37.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>考试前花几天速成oracle</p></blockquote><span id="more"></span><h2 id="1、PL-x2F-SQL"><a href="#1、PL-x2F-SQL" class="headerlink" title="1、PL&#x2F;SQL"></a>1、PL&#x2F;SQL</h2><p>pl&#x2F;sql编程语言是对sql语言的拓展，使得sql语言具有过程化编程的特性</p><p>主要用来编写存储过程和存储函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> serveroutput <span class="keyword">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 声明方法</span></span><br><span class="line"><span class="comment">-- 赋值操作可以用 ：=</span></span><br><span class="line"><span class="comment">-- 也可以使用查询语句赋值</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  i number(<span class="number">2</span>) :<span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  s varchar2(<span class="number">10</span>) :<span class="operator">=</span> <span class="string">&#x27;小明111&#x27;</span>;</span><br><span class="line">  ena emp.ename<span class="operator">%</span>type; <span class="comment">--引用型变量</span></span><br><span class="line">  e_emp emp<span class="operator">%</span>rowtype;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  dbms_output.put_line(i);</span><br><span class="line">  dbms_output.put_line(s);</span><br><span class="line">  <span class="keyword">select</span> ename <span class="keyword">into</span> ena <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="operator">=</span> <span class="number">7788</span>;</span><br><span class="line">  dbms_output.put_line(ena);</span><br><span class="line">  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">into</span> e_emp <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="operator">=</span> <span class="number">7788</span>;</span><br><span class="line">  dbms_output.put_line(e_emp.ename <span class="operator">||</span> <span class="string">&#x27;的工作是&#x27;</span><span class="operator">||</span> e_emp.job);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- if判断</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  age number(<span class="number">3</span>) :<span class="operator">=</span> <span class="operator">&amp;</span>age;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  if age<span class="operator">&lt;</span><span class="number">18</span> <span class="keyword">then</span></span><br><span class="line">    dbms_output.put_line(<span class="string">&#x27;未成年&#x27;</span>);</span><br><span class="line">  elsif age <span class="operator">&lt;</span><span class="number">40</span> <span class="keyword">then</span></span><br><span class="line">    dbms_output.put_line(<span class="string">&#x27;中年&#x27;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    dbms_output.put_line(<span class="string">&#x27;老年&#x27;</span>);</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 循环 loop循环</span></span><br><span class="line"><span class="comment">--  三种方式输出1--10</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  i number(<span class="number">2</span>) :<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  while i <span class="operator">&lt;</span> <span class="number">11</span> loop</span><br><span class="line">    dbms_output.put_line(i);</span><br><span class="line">    i :<span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> loop</span><br><span class="line">    dbms_output.put_line(i);</span><br><span class="line">  <span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  i number(<span class="number">2</span>) :<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  LOOP</span><br><span class="line">  dbms_output.put_line(i);</span><br><span class="line">  i :<span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  EXIT <span class="keyword">WHEN</span> i <span class="operator">&gt;</span> <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h2 id="2、游标"><a href="#2、游标" class="headerlink" title="2、游标"></a>2、游标</h2><p>cursor ：存放多个对象</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 输出emp表所有员工的姓名</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  <span class="keyword">cursor</span> c1 <span class="keyword">is</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> emp <span class="keyword">in</span> c1 loop</span><br><span class="line">    dbms_output.put_line(emp.ename);</span><br><span class="line">  <span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定部门员工涨100工资</span></span><br><span class="line"><span class="comment">-- 带参数的游标</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  <span class="keyword">cursor</span> c2(eno emp.deptno<span class="operator">%</span>type) <span class="keyword">is</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="operator">=</span> eno ;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> c2(<span class="number">10</span>) loop</span><br><span class="line">    <span class="keyword">update</span> emp <span class="keyword">set</span> sal <span class="operator">=</span> sal <span class="operator">+</span> <span class="number">100</span> <span class="keyword">where</span> empno <span class="operator">=</span> item.empno;</span><br><span class="line">  <span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="3、存储过程"><a href="#3、存储过程" class="headerlink" title="3、存储过程"></a>3、存储过程</h2><p>存储过程：提前编写好的PL&#x2F;SQL语句，供程序直接调用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给指定员工涨100块钱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> p1(e_empno emp.empno<span class="operator">%</span>type)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">is</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">update</span> emp <span class="keyword">set</span> sal <span class="operator">=</span> sal <span class="operator">+</span> <span class="number">100</span> <span class="keyword">where</span> empno <span class="operator">=</span> e_empno;</span><br><span class="line">  <span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  p1(<span class="number">7788</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="operator">=</span> <span class="number">7788</span>;</span><br></pre></td></tr></table></figure><h2 id="4、存储函数"><a href="#4、存储函数" class="headerlink" title="4、存储函数"></a>4、存储函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 存储函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过存储函数实现计算指定员工的年薪</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回类型不能长度</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">function</span> f1(eno emp.empno<span class="operator">%</span>type) <span class="keyword">return</span> number</span><br><span class="line"><span class="keyword">is</span></span><br><span class="line">  s number(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> sal <span class="operator">*</span> <span class="number">12</span> <span class="operator">+</span> nvl(comm,<span class="number">0</span>) <span class="keyword">into</span> s <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="operator">=</span> eno;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用函数</span></span><br><span class="line"><span class="comment">-- 必须接收返回值</span></span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">  s number(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  s :<span class="operator">=</span> f1(<span class="number">7788</span>);</span><br><span class="line">  dbms_output.put_line(s);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- out类型参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用存储过程计算年薪</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> p2(eno emp.empno<span class="operator">%</span>type,<span class="keyword">result</span> <span class="keyword">out</span> number )</span><br><span class="line"><span class="keyword">is</span></span><br><span class="line">  s number(<span class="number">10</span>);</span><br><span class="line">  c emp.comm<span class="operator">%</span>type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> sal <span class="operator">*</span> <span class="number">12</span> ,nvl(comm,<span class="number">0</span>) <span class="keyword">into</span> s,c <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="operator">=</span> eno;</span><br><span class="line">  <span class="keyword">result</span> :<span class="operator">=</span> s <span class="operator">+</span> c;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  yearsal number(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  p2(<span class="number">7788</span>,yearsal);</span><br><span class="line">  dbms_output.put_line(yearsal);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>存储函数与存储过程的区别：</p><p>存储函数有返回值 -&gt; 存储函数可以用来自定义函数</p><h2 id="5、触发器"><a href="#5、触发器" class="headerlink" title="5、触发器"></a>5、触发器</h2><p>触发器：指定一个规则，在我们做增删改操作的时候，只要满足规则，自动触发，无需调用<br>语句级触发器<br>行级触发器 for each row<br>for each row 为了使用 ：old 和 ：new 对象或者一行记录</p><p>触发语句与伪记录变量的值：</p><table><thead><tr><th>触发语句</th><th>:old</th><th>:new</th></tr></thead><tbody><tr><td>insert</td><td>null</td><td>将要插入的数据</td></tr><tr><td>update</td><td>更新前的数据</td><td>更新后的数据</td></tr><tr><td>delete</td><td>删除前的值</td><td>null</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语句级触发器</span></span><br><span class="line"><span class="comment">-- 插入一条数据，输出新员工入职</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> t1</span><br><span class="line">after </span><br><span class="line"><span class="keyword">insert</span> </span><br><span class="line"><span class="keyword">on</span> person</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  dbms_output.put_line(<span class="string">&#x27;一个新员工入职&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> person;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 行级触发器</span></span><br><span class="line"><span class="comment">-- 不能给员工降薪</span></span><br><span class="line"><span class="comment">-- raise_application_error(-20001~-20999之间,&#x27;错误提示信息&#x27;);</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> t2</span><br><span class="line">before</span><br><span class="line"><span class="keyword">update</span></span><br><span class="line"><span class="keyword">on</span> emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  if :old.sal <span class="operator">&gt;</span> :new.sal <span class="keyword">then</span></span><br><span class="line">    raise_application_error(<span class="number">-20001</span>,<span class="string">&#x27;不能降工资&#x27;</span>);</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 触发t2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> sal <span class="operator">=</span> sal <span class="number">-1</span> <span class="keyword">where</span> empno <span class="operator">=</span> <span class="number">77888</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="operator">=</span> <span class="number">7788</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 触发器实现主键自增【行级触发器】</span></span><br><span class="line"><span class="comment">-- 思路：在用户做插入操作之前拿到即将插入的数据，给主键列赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> t3</span><br><span class="line">before</span><br><span class="line"><span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> person</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> s_person.nextval <span class="keyword">into</span> :new.pid <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person (pname) <span class="keyword">values</span>(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对软件测试的一点点理解</title>
      <link href="/article/cb32ddf1.html"/>
      <url>/article/cb32ddf1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>对软件测试的一点看法</p></blockquote><span id="more"></span><h2 id="1、行业前景"><a href="#1、行业前景" class="headerlink" title="1、行业前景"></a>1、行业前景</h2><p>某网站统计，国内现有120万软件从业（开发）人员，软件测试人员只有5万</p><p>微软公司，开发工程师和测试车测试工程师比例 1:1</p><p>国内一些工程 5:1或8:1</p><p>随着软件产业的发展，软件产品的质量控制和质量管理逐渐成为软件企业生产和发展的关键因素，目前国内软件测试人才的紧缺已经在一定程度上<strong>限制了软件行业的发展</strong></p><h2 id="2、什么是软件测试"><a href="#2、什么是软件测试" class="headerlink" title="2、什么是软件测试"></a>2、什么是软件测试</h2><blockquote><p>有人喜欢创建世界 –开发工程师</p><p>有人喜欢挑毛病 –测试工程师</p></blockquote><p>简单说，对软件进行“质检”</p><h2 id="3、软件测试的重要性"><a href="#3、软件测试的重要性" class="headerlink" title="3、软件测试的重要性"></a>3、软件测试的重要性</h2><p>各种事故，什么火箭发射失败，飞机失事，导弹打击自己，自动驾驶事故，恶意利用bug来获取非法利益….</p><p>可以笼统的说都是因为软件bug导致</p><p>造成了大量的人力，财力损失</p><h2 id="4、开发为什么不去测试"><a href="#4、开发为什么不去测试" class="headerlink" title="4、开发为什么不去测试"></a>4、开发为什么不去测试</h2><ol><li><p>思维定式：</p><p>“我的程序不可能有错”</p></li><li><p>测试力度：</p><p>对自己开发软件夹带感情，测试力度不够</p></li><li><p>专注度：</p><p>既要开发又要测试，不能兼顾</p></li></ol><blockquote><p>虽然如此，记得尚硅谷的一个老师说过，选择开发和测试，还是推荐去开发，因此我还是选择开发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>oracle(一)</title>
      <link href="/article/41941155.html"/>
      <url>/article/41941155.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>考试前花几天速成oracle</p></blockquote><span id="more"></span><h2 id="1、oracle体系结构"><a href="#1、oracle体系结构" class="headerlink" title="1、oracle体系结构"></a>1、oracle体系结构</h2><blockquote><p>貌似cv一遍也记不住，考试应该不考这些吧…</p></blockquote><h3 id="1、数据库"><a href="#1、数据库" class="headerlink" title="1、数据库"></a>1、数据库</h3><p>数据库是一个数据的集合，该集合被视为一个逻辑单元。</p><p>Oracle 数据库由操作系统文件组成，这些文件为数据库信息提供实际物理存储区</p><p>Oracle 数据库包括逻辑结构和物理结构。</p><p><strong>物理结构：</strong>是指存储数据库信息的一组操作系统文件，每个数据库有一个逻辑结构和一个物理结构。物理结构是指构成数据库的一组操作系统文件，主要由3种类型文件组成：数据文件，控制文件和重做日志文件。</p><p><strong>逻辑结构：</strong>是指数据库数据的逻辑存储结构，包括：表空间，数据段，表，视图等。</p><h3 id="2、实例"><a href="#2、实例" class="headerlink" title="2、实例"></a>2、实例</h3><p>实例是后台进程和内存的集合，必须启动实例才能访问数据库中的数据。</p><p>Oracle启动时，将分配一个系统全局区（SGA），并启动一系列oracle后台进程</p><p>一个实例只能打开并使用一个数据库</p><p>Oracle分为单进程实例和多进程实例，现在普遍都是多进程实例，多进程就是多用户，不同用户使用不同进程来执行oracle的不同部分。</p><h3 id="3、用户"><a href="#3、用户" class="headerlink" title="3、用户"></a>3、用户</h3><p>用户是在实例下创建的，用户是oracle中管理表的基本单位</p><h3 id="4、表空间"><a href="#4、表空间" class="headerlink" title="4、表空间"></a>4、表空间</h3><p>表空间是数据库中最大的逻辑单位， SYSTEM 和SYSAUX 表空间是在创建数据库时创建的必须存在的表空间，还会有TEMP，USERS等。</p><p> 每个表空间是由一个或多个数据文件组成的，一个数据文件只能与一个表空间相关联。</p><h2 id="2、创建表空间与创建用户，用户授权"><a href="#2、创建表空间与创建用户，用户授权" class="headerlink" title="2、创建表空间与创建用户，用户授权"></a>2、创建表空间与创建用户，用户授权</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space cyfwlp</span><br><span class="line">datafile <span class="string">&#x27;E:\tablespace\cyfwlp.dbf&#x27;</span></span><br><span class="line">size <span class="number">100</span>m</span><br><span class="line">autoextend <span class="keyword">on</span></span><br><span class="line">next <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除表空间</span></span><br><span class="line"><span class="keyword">drop</span> tablespace itheima;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建用户</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> c##cyfwlp</span><br><span class="line">identified <span class="keyword">by</span> cyfwlp</span><br><span class="line"><span class="keyword">default</span> tablespace cyfwlp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 授予dba权限</span></span><br><span class="line"><span class="comment">-- oracle 权限：</span></span><br><span class="line"><span class="comment">---1、connext 连接权限</span></span><br><span class="line"><span class="comment">---2、resource 开发者</span></span><br><span class="line"><span class="comment">---3、dba 数据库管理员</span></span><br><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> c##cyfwlp</span><br></pre></td></tr></table></figure><h2 id="3、oracle数据类型-常用"><a href="#3、oracle数据类型-常用" class="headerlink" title="3、oracle数据类型(常用)"></a>3、oracle数据类型(常用)</h2><table><thead><tr><th></th><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td></td><td>Varchar,<strong>varchar2</strong></td><td>表示字符串</td></tr><tr><td></td><td>number</td><td>number(n):表示n位数字</td></tr><tr><td></td><td></td><td>number(m,n)表示m位数字，n位小数</td></tr><tr><td></td><td>data</td><td>日期类型，精确到年月日，时分秒</td></tr><tr><td></td><td>clob</td><td>大对象，文本类型，4g</td></tr><tr><td></td><td>blob</td><td>大对象，二进制，4g</td></tr></tbody></table><h2 id="4、表相关操作"><a href="#4、表相关操作" class="headerlink" title="4、表相关操作"></a>4、表相关操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line">  pid number(<span class="number">20</span>),</span><br><span class="line">  pname varchar2(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> person <span class="keyword">add</span> (gender number(<span class="number">1</span>));</span><br><span class="line"><span class="comment">-- 修改列类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> person modify gender <span class="type">char</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">-- 修改列的名称</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> person rename <span class="keyword">column</span> gender <span class="keyword">to</span> sex;</span><br><span class="line"><span class="comment">--删除一列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> person <span class="keyword">drop</span> <span class="keyword">column</span> sex</span><br></pre></td></tr></table></figure><p>约束：</p><p><strong>1、主键约束（PRIMARY KEY）：可以加在列级约束或表级约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列级约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line">  pid number(<span class="number">20</span>) <span class="keyword">primary</span> key,</span><br><span class="line">  pname varchar2(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 表级约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line">  pid number(<span class="number">20</span>),</span><br><span class="line">  pname varchar2(<span class="number">10</span>),</span><br><span class="line">  <span class="keyword">constraint</span> pk_person <span class="keyword">primary</span> key(pid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>2、非空约束(NOT NULL)：只能加在列级约束上</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line">  pid number(<span class="number">20</span>) <span class="keyword">primary</span> key,</span><br><span class="line">  pname varchar2(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>3、唯一约束(UNIQUE)：可以加在列级约束或表级约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列级约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line">  pid number(<span class="number">20</span>) <span class="keyword">primary</span> key,</span><br><span class="line">  pname varchar2(<span class="number">10</span>) <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 表级约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line">  pid number(<span class="number">20</span>),</span><br><span class="line">  pname varchar2(<span class="number">10</span>),</span><br><span class="line">  <span class="keyword">constraint</span> un_person <span class="keyword">unique</span>(pname)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>4、外键约束（FOREIGN KEY）：可以加在列级约束或表级约束：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列级约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line">  pid number(<span class="number">20</span>) ,</span><br><span class="line">  did number(<span class="number">20</span>) <span class="keyword">references</span> dept(did),</span><br><span class="line">  pname varchar2(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 表级约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line">  pid number(<span class="number">20</span>),</span><br><span class="line">  did number(<span class="number">20</span>),</span><br><span class="line">  pname varchar2(<span class="number">10</span>),</span><br><span class="line">  <span class="keyword">constraint</span> fk_person <span class="keyword">foreign</span> key(did) <span class="keyword">references</span> dept(did)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>5、检查约束(CHECK)：可以加在列级约束或表级约束</strong></p><p>对数据限定条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constraint</span> ck_person <span class="keyword">check</span>(sex <span class="keyword">in</span>(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>在开发中出来主键约束很少使用其他约束，例如外键约束，会降低系统的性能</p></blockquote><h2 id="5、基本增删改查"><a href="#5、基本增删改查" class="headerlink" title="5、基本增删改查"></a>5、基本增删改查</h2><p>这要是有问题基本不用复习，明年再见</p><blockquote><p>注意两个点：</p><p>1、oracle不能insert多条数据</p><p>2、truncate table 效果等同于delete table 但是在有索引的情况下效率更高</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--数据的增删改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一条记录</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person (pid,pname) <span class="keyword">values</span>(<span class="number">111</span>,<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改一条记录</span></span><br><span class="line"><span class="keyword">update</span> person <span class="keyword">set</span> pname <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span> <span class="keyword">where</span> pid <span class="operator">=</span> <span class="number">111</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 三个删除</span></span><br><span class="line"><span class="comment">-- 删除表中所有记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> person;</span><br><span class="line"><span class="comment">--删除表结构</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> person;</span><br><span class="line"><span class="comment">--先删除表再次创建表,效果等同于删除表中所有记录</span></span><br><span class="line"><span class="comment">--在数据量大的情况下，尤其是表中带有索引的情况下，改操作效率高</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> person;</span><br></pre></td></tr></table></figure><h2 id="6、序列"><a href="#6、序列" class="headerlink" title="6、序列"></a>6、序列</h2><p>主键策略：oracle没有mysql的自增策略，需要借助序列实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 序列不真的属于哪一张表，但可以逻辑对表绑定</span></span><br><span class="line"><span class="comment">-- 序列：默认从1开始，依次递增，主要用来给主键赋值使用</span></span><br><span class="line"><span class="comment">-- dual 虚表只是为了补全语法，没有任何意义</span></span><br><span class="line"><span class="keyword">create</span> sequence s_person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> s_person.currval <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一条记录</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person (pid,pname) <span class="keyword">values</span>(s_person.nextval,<span class="string">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="7、单行函数与多行函数"><a href="#7、单行函数与多行函数" class="headerlink" title="7、单行函数与多行函数"></a>7、单行函数与多行函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--单行函数：作用于单行返回一个值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--字符函数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;yes&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(<span class="string">&#x27;YES&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- substr(&#x27;&#x27;,m,n) 从m开始，截取n和字符 注意索引从1开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--数值函数</span></span><br><span class="line"><span class="keyword">select</span> round(<span class="number">26.18</span>,<span class="number">1</span>) <span class="keyword">from</span> dual; <span class="comment">--四舍五入。后面的参数表示保留的位数</span></span><br><span class="line"><span class="keyword">select</span> trunc(<span class="number">56.66</span>,<span class="number">1</span>) <span class="keyword">from</span> dual; <span class="comment">--直接截取，后面的参数表示截取的位数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">10</span>,<span class="number">3</span>) <span class="keyword">from</span> dual; <span class="comment">--取余数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--日期函数</span></span><br><span class="line"><span class="comment">---- 查询出emp表中所有员工入职距离现在几天 -- 日期可以直接加减，得到xx天</span></span><br><span class="line"><span class="keyword">select</span> sysdate<span class="operator">-</span>e.hiredate <span class="keyword">from</span> emp e;</span><br><span class="line"></span><br><span class="line"><span class="comment">---- 查询明天现在</span></span><br><span class="line"><span class="keyword">select</span> sysdate <span class="operator">+</span> <span class="number">1</span> <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">---- 查询出emp表中所有员工入职距离现在几月</span></span><br><span class="line"><span class="keyword">select</span> months_between(sysdate,e.hiredate) <span class="keyword">from</span> emp e;</span><br><span class="line"></span><br><span class="line"><span class="comment">---- 查询出emp表中所有员工入职距离现在几年</span></span><br><span class="line"><span class="keyword">select</span> months_between(sysdate,e.hiredate)<span class="operator">/</span><span class="number">12</span> <span class="keyword">from</span> emp e;</span><br><span class="line"></span><br><span class="line"><span class="comment">---- 查询出emp表中所有员工入职距离现在几周</span></span><br><span class="line"><span class="keyword">select</span> (sysdate<span class="operator">-</span>e.hiredate)<span class="operator">/</span><span class="number">7</span> <span class="keyword">from</span> emp e;</span><br><span class="line"></span><br><span class="line"><span class="comment">--转换函数</span></span><br><span class="line"><span class="comment">--- 当前日期转为字符串</span></span><br><span class="line"><span class="keyword">select</span> to_char(sysdate,<span class="string">&#x27;yyyy-mm-dd hh:mi:ss&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">--- 字符串转日期</span></span><br><span class="line"><span class="keyword">select</span> to_date(<span class="string">&#x27;2020-12-15 01:02:49&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd hh:mi:ss&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--通用函数</span></span><br><span class="line"><span class="comment">--- 算出emp表所有员工年薪</span></span><br><span class="line"><span class="comment">-- null 和任意数值做算数运算结果都是null</span></span><br><span class="line"><span class="keyword">select</span> e.sal <span class="operator">*</span> <span class="number">12</span> <span class="operator">+</span> nvl(e.comm,<span class="number">0</span>) <span class="keyword">from</span> emp e;</span><br><span class="line"></span><br><span class="line"><span class="comment">--条件表达式：</span></span><br><span class="line"><span class="comment">-- 通用条件表达式（mysql，oracle）</span></span><br><span class="line"><span class="comment">--给emp员工起中文名 （等值判断）</span></span><br><span class="line"><span class="keyword">select</span> e.ename,</span><br><span class="line">  <span class="keyword">case</span> e.ename</span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;SMITH&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;曹贼&#x27;</span></span><br><span class="line">      <span class="keyword">when</span> <span class="string">&#x27;ALLEN&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;大耳贼&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">&#x27;WARD&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;诸葛小二&#x27;</span></span><br><span class="line"><span class="comment">--          else &#x27;无名&#x27;</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> emp e;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 判断emp工资，如果高于3000显示高收入 中等：1500-3000 其余低 （范围判断）</span></span><br><span class="line"><span class="keyword">select</span> e.sal,</span><br><span class="line">  <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> e.sal <span class="operator">&gt;</span> <span class="number">3000</span> <span class="keyword">then</span> <span class="string">&#x27;高收入&#x27;</span></span><br><span class="line">      <span class="keyword">when</span> e.sal <span class="operator">&gt;</span> <span class="number">1500</span> <span class="keyword">then</span> <span class="string">&#x27;中等收入&#x27;</span></span><br><span class="line">          <span class="keyword">else</span> <span class="string">&#x27;低收入&#x27;</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> emp e;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- oracle除了起别名都用单引号</span></span><br><span class="line"><span class="comment">---oracle专用条件表达式</span></span><br><span class="line"><span class="keyword">select</span> e.ename,</span><br><span class="line">   decode(e.ename,</span><br><span class="line">     <span class="string">&#x27;SMITH&#x27;</span>,  <span class="string">&#x27;曹贼&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;ALLEN&#x27;</span>, <span class="string">&#x27;大耳贼&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;WARD&#x27;</span>,  <span class="string">&#x27;诸葛小二&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;无名&#x27;</span>) &quot;中文名&quot;           </span><br><span class="line"><span class="keyword">from</span> emp e;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--多行函数(聚合函数)：作用于多行返回一个值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--count(*)和count(1)底层是一样，推荐写count(1)</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--数据在java中处理还是在oracle处理根据情况而定</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--- 分组查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- 查询出每个部门的平均工资</span></span><br><span class="line"><span class="comment">--- 分组查询中出现在group by后面的原始列，才能出现在select后面</span></span><br><span class="line"><span class="comment">--- 没有出现在group by后面的列，想在select后面，必须加上聚合函数</span></span><br><span class="line"><span class="keyword">select</span> e.deptno,<span class="built_in">avg</span>(e.sal)</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> e.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询平均工资高于2000的部门信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> e.deptno,<span class="built_in">avg</span>(e.sal)</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> e.deptno</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">avg</span>(e.sal) <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br></pre></td></tr></table></figure><h2 id="8、多表查询"><a href="#8、多表查询" class="headerlink" title="8、多表查询"></a>8、多表查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 多表查询的一些概念</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 笛卡尔积</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e,dept d;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等值连接 (推荐使用)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e,dept d <span class="keyword">where</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 内连接</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">inner</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询出所有部门以及部门下的员工信息【外连接】</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- oracle专用外连接</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e,dept d</span><br><span class="line"><span class="keyword">where</span> e.deptno(<span class="operator">+</span>) <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 自连接：自连接其实就是站在不同的角度把一张表看成多张表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- 查询出员工姓名，员工领导姓名</span></span><br><span class="line"><span class="keyword">select</span> e1.ename,e2.ename</span><br><span class="line"><span class="keyword">from</span> emp e1,emp e2</span><br><span class="line"><span class="keyword">where</span> e1.mgr <span class="operator">=</span> e2.empno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 查询出员工姓名，员工部门名称，员工领导姓名，员工领导部门名称</span></span><br><span class="line"><span class="keyword">select</span> e1.ename,d1.dname,e2.ename,d2.dname</span><br><span class="line"><span class="keyword">from</span> emp e1,emp e2,dept d1,dept d2</span><br><span class="line"><span class="keyword">where</span> e1.mgr <span class="operator">=</span> e2.empno</span><br><span class="line"><span class="keyword">and</span> e1.deptno <span class="operator">=</span> d1.deptno</span><br><span class="line"><span class="keyword">and</span> e2.deptno <span class="operator">=</span> d2.deptno;</span><br></pre></td></tr></table></figure><h2 id="9、子查询"><a href="#9、子查询" class="headerlink" title="9、子查询"></a>9、子查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 子查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- 子查询返回一个值</span></span><br><span class="line"><span class="comment">-- 查询出工程和Scott一样的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 子查询返回一个集合</span></span><br><span class="line"><span class="comment">-- 查询出工资和10号部门工资一样的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 子查询返回一张表</span></span><br><span class="line"><span class="comment">--- 查询出每个部门最低工资和最低工资员工姓名和员工所在部门名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">min</span>(sal) msal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> t.deptno,t.msal,e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span> emp e,dept d, (<span class="keyword">select</span> deptno,<span class="built_in">min</span>(sal) msal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t</span><br><span class="line"><span class="keyword">where</span> t.deptno <span class="operator">=</span> e.deptno</span><br><span class="line"><span class="keyword">and</span> t.msal <span class="operator">=</span> e.sal</span><br><span class="line"><span class="keyword">and</span> e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure><h2 id="10、递归查询"><a href="#10、递归查询" class="headerlink" title="10、递归查询"></a>10、递归查询</h2><p>用于查询树形结构数据，可以查询出数据再在java中处理，参照谷粒学院开发使用的方法，也可以使用递归查询在数据库实现</p><p>自连接应该也可以实现同样的效果</p><blockquote><p>该部分参考：<a href="https://www.cnblogs.com/Soprano/p/10659127.html">https://www.cnblogs.com/Soprano/p/10659127.html</a></p></blockquote><p><strong>1、创建数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DISTRICT</span><br><span class="line">(</span><br><span class="line">  ID         NUMBER(<span class="number">10</span>)                  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  PARENT_ID  NUMBER(<span class="number">10</span>),</span><br><span class="line">  NAME       VARCHAR2(<span class="number">255</span> BYTE)          <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> DISTRICT <span class="keyword">ADD</span> (</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> DISTRICT_PK</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY</span><br><span class="line"> (ID));</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> DISTRICT <span class="keyword">ADD</span> (</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> DISTRICT_R01 </span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (PARENT_ID) </span><br><span class="line"> <span class="keyword">REFERENCES</span> DISTRICT (ID));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">1</span>, <span class="keyword">null</span>, <span class="string">&#x27;四川省&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="string">&#x27;巴中市&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;达州市&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">4</span>, <span class="number">2</span>, <span class="string">&#x27;巴州区&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">5</span>, <span class="number">2</span>, <span class="string">&#x27;通江县&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">6</span>, <span class="number">2</span>, <span class="string">&#x27;平昌县&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">7</span>, <span class="number">3</span>, <span class="string">&#x27;通川区&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">8</span>, <span class="number">3</span>, <span class="string">&#x27;宣汉县&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">9</span>, <span class="number">8</span>, <span class="string">&#x27;塔河乡&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">10</span>, <span class="number">8</span>, <span class="string">&#x27;三河乡&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">11</span>, <span class="number">8</span>, <span class="string">&#x27;胡家镇&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">12</span>, <span class="number">8</span>, <span class="string">&#x27;南坝镇&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">13</span>, <span class="number">6</span>, <span class="string">&#x27;大寨乡&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">14</span>, <span class="number">6</span>, <span class="string">&#x27;响滩镇&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">15</span>, <span class="number">6</span>, <span class="string">&#x27;龙岗镇&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> DISTRICT (id, parent_id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">16</span>, <span class="number">6</span>, <span class="string">&#x27;白衣镇&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p><strong>2、start with connect by 递归</strong></p><p>2.1、查询所有子节点</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> district</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> name <span class="operator">=</span> <span class="string">&#x27;四川省&#x27;</span></span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span> prior id <span class="operator">=</span> parent_id;</span><br></pre></td></tr></table></figure><p>2.2、查询所有父节点</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> district</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> name <span class="operator">=</span> <span class="string">&#x27;巴州区&#x27;</span></span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span> prior parent_id <span class="operator">=</span> id;</span><br></pre></td></tr></table></figure><h2 id="11、分页查询"><a href="#11、分页查询" class="headerlink" title="11、分页查询"></a>11、分页查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---分页查询</span></span><br><span class="line"><span class="comment">--- rownum行号：当我们select操作就会在改行上加上一个行号，行号从1开始依次递增1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>,rownum <span class="keyword">from</span> emp e <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span><br><span class="line"><span class="comment">--- 排序操作会影响rownum的数据</span></span><br><span class="line"><span class="comment">--- 设计到排序还要使用rownum我们可以使用嵌套查询</span></span><br><span class="line"><span class="keyword">select</span> t.<span class="operator">*</span>,rownum <span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>,rownum <span class="keyword">from</span> emp e <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>) t;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- emp工资倒叙排列，每页五条查询第二页</span></span><br><span class="line"><span class="comment">--- rowmun行号不能写上大于一个正数</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> rownum rn,e.<span class="operator">*</span> <span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">order</span> <span class="keyword">by</span> e.sal <span class="keyword">desc</span>) e</span><br><span class="line"><span class="keyword">where</span> rownum <span class="operator">&lt;</span> <span class="number">11</span>)</span><br><span class="line"><span class="keyword">where</span> rn <span class="operator">&gt;</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="12、视图与索引"><a href="#12、视图与索引" class="headerlink" title="12、视图与索引"></a>12、视图与索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询语句创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp <span class="keyword">as</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> c##scott.emp);</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建视图：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_emp <span class="keyword">as</span> <span class="keyword">select</span> ename,job <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询视图</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改视图</span></span><br><span class="line"><span class="keyword">update</span> v_emp <span class="keyword">set</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;ALLEN&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建只读视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_emp1 <span class="keyword">as</span> <span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">with</span> read <span class="keyword">only</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--视图作用：</span></span><br><span class="line"><span class="comment">--1、屏蔽敏感字段，如工资</span></span><br><span class="line"><span class="comment">--2、保证总部和分部数据及时统一</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 索引</span></span><br><span class="line"><span class="comment">-- 索引的概念：在表的列上构建一个二叉树达到大幅度提高查询效率的目的，但是索引会影响增删改的效率</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单列索引</span></span><br><span class="line"><span class="comment">--- 创建单列索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_ename <span class="keyword">on</span> emp(ename);</span><br><span class="line"><span class="comment">--- 单列索引触发规格，条件必须是索引列中的原始值(单行函数，模糊查询都会影响索引的触发)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复合索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_enamejob <span class="keyword">on</span> emp(ename,job);</span><br><span class="line"><span class="comment">--- 复合索引触发机制</span></span><br><span class="line"><span class="comment">--- 复合索引第一列为优先检索列</span></span><br><span class="line"><span class="comment">--- 如果要触发复合索引，必须包含有优先检索列中的原始值</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span> <span class="keyword">and</span> job <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span>; <span class="comment">--触发复合索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span> <span class="keyword">or</span> job <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span>; <span class="comment">--- 不触发索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>; <span class="comment">--触发单列索引</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode编写python</title>
      <link href="/article/38293883.html"/>
      <url>/article/38293883.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>明天有门课上机需要使用python，自带的IDE有点弱，去装个pycharm以后又不经常使用，于是想到vscode</p><p>记录方法以后使用的时候查阅</p></blockquote><span id="more"></span><h2 id="1、安装-python-和-vscode"><a href="#1、安装-python-和-vscode" class="headerlink" title="1、安装 python 和 vscode"></a>1、安装 python 和 vscode</h2><p>之前已经安装过</p><p>未安装的话去官网安装稳定版本即可</p><h2 id="2、安装python插件"><a href="#2、安装python插件" class="headerlink" title="2、安装python插件"></a>2、安装python插件</h2><p>直接在vscode插件里搜索python</p><p><img src="https://i.loli.net/2020/12/13/k45fwu8YSlRhDHB.png"></p><p>点击安装后重启vscode</p><p>然后点击插件设置，会提醒未选择python路径，选择自己电脑上的路径即可</p><p><img src="https://i.loli.net/2020/12/13/S1TOg82EuUKMpam.png"></p><p>新建文件夹保存为工作区，修改配置文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;folders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;python.linting.flake8Enabled&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;python.formatting.provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yapf&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;python.linting.flake8Args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;--max-line-length=248&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;python.linting.pylintEnabled&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>运行，可能会提醒安装依赖，点击install即可</p><p>测试：</p><p>新建.py文件，f5运行</p><p><img src="https://i.loli.net/2020/12/13/UdNgVb5EYHXzkGf.png"></p><p>就可以使用vscode来写python了，自动提醒也有，比自带的IDE是要强一点</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity (二)</title>
      <link href="/article/6a4b4d74.html"/>
      <url>/article/6a4b4d74.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><ol><li>分布式系统认证方案</li><li>spring security Oauth2</li></ol></blockquote><span id="more"></span><h2 id="一、分布式系统认证方案"><a href="#一、分布式系统认证方案" class="headerlink" title="一、分布式系统认证方案"></a>一、分布式系统认证方案</h2><h3 id="1-1、什么是分布式系统"><a href="#1-1、什么是分布式系统" class="headerlink" title="1.1、什么是分布式系统"></a>1.1、什么是分布式系统</h3><p>随着软件需求的变化，软件的架构逐渐有单体结构，变为分布式结构，具有分布式结构的系统叫做分布式系统，分布式系统的运行依靠网络，它将单体结构的系统分为若干服务，服务之间通过网络交互来完成业务处理，当前主流的微服务架构就是分布式系统架构</p><p><img src="https://i.loli.net/2020/12/08/zkjicWUGaDNemxR.png"></p><p>分布式系统具有以下特点：</p><ol><li>分布性：各个部分独立部署，通过网络交互</li><li>伸缩性：各个部分可以进行集群部署，针对部分节点进行软件或硬件扩容</li><li>共享性：每个部分可以作为共享资源对外提供服。（系统内）</li><li>开放性：每个部分根据需求都可以对外发布共享资源的访问接口，并可允许第三方系统访问（系统外）</li></ol><h3 id="1-2、分布式认证需求"><a href="#1-2、分布式认证需求" class="headerlink" title="1.2、分布式认证需求"></a>1.2、分布式认证需求</h3><p><strong>统一认证授权：</strong></p><p>​        提供独立的认证服务，统一处理认证授权，不同用户，不同平台（web,安卓,小程序…)均使统一的授权认证</p><p><strong>应用接入认证：</strong></p><p>​        应提供扩展和开放能力，提供安全的系统对接机制，并可开放部分API给接入第三方使用，一方应用（内部系统服务和三方应用（第三方应用）均采用统一机制接入</p><h3 id="1-3、分布式认证方案"><a href="#1-3、分布式认证方案" class="headerlink" title="1.3、分布式认证方案"></a>1.3、分布式认证方案</h3><p>一般分布式系统很少使用session</p><p><strong>选择基于token实现</strong></p><p>token优点：</p><ol><li>适合统一认证的机制</li><li>对第三方应用接入更适合，如使用的Oauth2 jwt令牌等</li><li>服务器端无需存储会话信息，减少服务器压力</li></ol><p><img src="https://i.loli.net/2020/12/08/1tcwyW4rKoHC2pJ.png"></p><h2 id="二、Oauth-2-0"><a href="#二、Oauth-2-0" class="headerlink" title="二、Oauth 2.0"></a>二、Oauth 2.0</h2><h3 id="2-1、oAuth-2-0介绍"><a href="#2-1、oAuth-2-0介绍" class="headerlink" title="2.1、oAuth 2.0介绍"></a><strong>2.1、oAuth 2.0介绍</strong></h3><p>自己理解：是<strong>开放标准</strong>，使<strong>第三方应用</strong>可以使用用户存储在<strong>其他服务器上的资源</strong>，而用户不需要提供用户名和密码给第三方应用，用户仅需要进行<strong>授权</strong></p><p>例子：使用微信或qq扫码登录一些网站</p><p><img src="https://i.loli.net/2020/12/08/XDmJ8izuG56FWoC.png"></p><p>引自OAauth2.0协议rfc6749 <a href="https://tools.ietf.org/html/rfc6749">https://tools.ietf.org/html/rfc6749</a></p><p><img src="https://i.loli.net/2020/12/08/D59ZWAySHa3gxF6.png"></p><p>Oauth包括以下角色:</p><p><strong>Client(客户端)：</strong></p><p>通过<strong>资源拥有者</strong>的授权去获取<strong>资源服务器</strong>的资源，常见的web端，安卓端…</p><p><strong>ResourseOwner(资源拥有者)：</strong></p><p>用户或应用程序</p><p><strong>AuthorizationServer(授权服务器):</strong><br>对访问者的身份进行认证，认证成功发放<strong>assess_token</strong>作为<strong>客户端</strong>访问资源的凭证</p><p>还会对客户端**标识(client_id)<strong>和</strong>秘钥(client_key)**进行认证授权</p><p><strong>ResourceServer(资源服务器):</strong></p><p>存贮资源的服务器</p><h3 id="2-2、spring-security-Oauth2"><a href="#2-2、spring-security-Oauth2" class="headerlink" title="2.2、spring security Oauth2"></a>2.2、spring security Oauth2</h3><h4 id="2-2-1、环境介绍"><a href="#2-2-1、环境介绍" class="headerlink" title="2.2.1、环境介绍"></a>2.2.1、环境介绍</h4><p>Spring-Security-OAuth2是对OAuth2的一种实现，并且跟我们之前学习的Spring Security相辅相成，与SpringCloud体系的集成也非常便利，</p><p>OAuth2.0的服务提供方涵盖两个服务，即授权服务 (Authorization Server，也叫认证服务) 和资源服务 (ResourceServer)</p><p><strong>授权服务：</strong>对接入端以及登入用户的合法性进行验证并颁发token等功能</p><p><strong>资源服务</strong>：包含对资源的保护功能，对非法请求进行拦截，对请求中token进行解析鉴权等</p><p>本案例分别创建uaa授权服务（也可叫认证服务）和order订单资源服务</p><p><img src="https://i.loli.net/2020/12/09/gVHnWzsr958YCKw.png"></p><h4 id="2-2-2、环境搭建"><a href="#2-2-2、环境搭建" class="headerlink" title="2.2.2、环境搭建"></a>2.2.2、环境搭建</h4><blockquote><p>这一块有点迷了，课程使用的微服务架构和原来用的不太一样，而且看不懂了开始……</p><p>先照抄一遍，然后是用nacos那一套用过的再搭建一遍这个项目</p><p>第二天：已经参透的差不多了</p></blockquote><h5 id="1、创建父工程"><a href="#1、创建父工程" class="headerlink" title="1、创建父工程"></a>1、创建父工程</h5><p>创建父工程 <strong>distributed-security</strong>，导入依赖</p><p><img src="https://i.loli.net/2020/12/09/ePvy2XqdAHFwBCu.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cyfwlp.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>distributed_security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>distributed_security_uaa<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>distributed_security_order<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.interceptor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.interceptor-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security.oauth.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-oauth2-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;plugin&gt;</span></span><br><span class="line"><span class="comment">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;/plugin&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">useDefaultDelimiters</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useDefaultDelimiters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2、创建uaa服务"><a href="#2、创建uaa服务" class="headerlink" title="2、创建uaa服务"></a>2、创建uaa服务</h5><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.hystrix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-javanica<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.interceptor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.interceptor-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">uaa-service</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/user_db?serverTimezone=GMT%2B8&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/10/ybqCOaQ8BkYnhgM.png"></p><p><strong>AuthorizationServer:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.security.uaa.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * 配置授权服务器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/12/9 14:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationServer</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenStore tokenStore;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ClientDetailsService clientDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthorizationCodeServices authorizationCodeServices;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来配置令牌端点的安全约束.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> security</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        security</span><br><span class="line">                .tokenKeyAccess(<span class="string">&quot;permitAll()&quot;</span>)                    <span class="comment">//oauth/token_key是公开</span></span><br><span class="line">                .checkTokenAccess(<span class="string">&quot;permitAll()&quot;</span>)                  <span class="comment">//oauth/check_token公开</span></span><br><span class="line">                .allowFormAuthenticationForClients()<span class="comment">//表单认证（申请令牌）</span></span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来配置客户端详情服务（ClientDetailsService），客户端详情信息在这里进行初始化，</span></span><br><span class="line"><span class="comment">     * 你能够把客户端详情信息写死在这里或者是通过数据库来存储调取详情信息。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clients</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        clients.inMemory()<span class="comment">// 使用in-memory存储</span></span><br><span class="line">            .withClient(<span class="string">&quot;c1&quot;</span>)<span class="comment">// client_id</span></span><br><span class="line">            .secret(<span class="string">&quot;secret&quot;</span>)<span class="comment">//客户端密钥</span></span><br><span class="line">            .resourceIds(<span class="string">&quot;res1&quot;</span>)<span class="comment">//资源列表</span></span><br><span class="line">            .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>, <span class="string">&quot;password&quot;</span>,<span class="string">&quot;client_credentials&quot;</span>,<span class="string">&quot;implicit&quot;</span>,<span class="string">&quot;refresh_token&quot;</span>)<span class="comment">// 该client允许的授权类型authorization_code,password,refresh_token,implicit,client_credentials</span></span><br><span class="line">            .scopes(<span class="string">&quot;all&quot;</span>)<span class="comment">// 允许的授权范围</span></span><br><span class="line">            .autoApprove(<span class="literal">false</span>)<span class="comment">//false跳转到授权页面</span></span><br><span class="line">            <span class="comment">//加上验证回调地址</span></span><br><span class="line">            .redirectUris(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来配置令牌（token）的访问端点和令牌服务(tokenservices)。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endpoints</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        endpoints</span><br><span class="line">                .authenticationManager(authenticationManager) <span class="comment">//认证管理器</span></span><br><span class="line">                .authorizationCodeServices(authorizationCodeServices) <span class="comment">//授权码服务</span></span><br><span class="line">                .tokenServices(tokenService()) <span class="comment">//token存储策略</span></span><br><span class="line">                .allowedTokenEndpointRequestMethods(HttpMethod.POST); <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthorizationServerTokenServices <span class="title function_">tokenService</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DefaultTokenServices</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultTokenServices</span>();</span><br><span class="line">        service.setClientDetailsService(clientDetailsService);<span class="comment">//客户端详情服务</span></span><br><span class="line">        service.setSupportRefreshToken(<span class="literal">true</span>);<span class="comment">//支持刷新令牌</span></span><br><span class="line">        service.setTokenStore(tokenStore);<span class="comment">//令牌存储策略</span></span><br><span class="line">        service.setAccessTokenValiditySeconds(<span class="number">7200</span>); <span class="comment">// 令牌默认有效期2小时</span></span><br><span class="line">        service.setRefreshTokenValiditySeconds(<span class="number">259200</span>); <span class="comment">// 刷新令牌默认有效期3天</span></span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置授权码模式的授权码如何存取</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthorizationCodeServices <span class="title function_">authorizationCodeServices</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InMemoryAuthorizationCodeServices</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TokenConfig:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/12/9 14:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//令牌存储策略</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TokenStore <span class="title function_">tokenStore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//简单基于内存token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InMemoryTokenStore</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>WebSecurityConfig:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/12/9 14:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码编码器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//安全拦截机制（最重要）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/r/r1&quot;</span>).hasAnyAuthority(<span class="string">&quot;p1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login*&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、创建order服务"><a href="#3、创建order服务" class="headerlink" title="3、创建order服务"></a>3、创建order服务</h5><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.interceptor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.interceptor-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/10/vsV3YdSGKomCZFl.png"></p><p><strong>ResourceServerConfig:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/12/9 22:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResouceServerConfig</span> <span class="keyword">extends</span> <span class="title class_">ResourceServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RESOURCE_ID</span> <span class="operator">=</span> <span class="string">&quot;res1&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        resources.resourceId(RESOURCE_ID)</span><br><span class="line">                    .tokenServices(tokenService())</span><br><span class="line">                    .stateless(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 令牌策略 使用远程调用</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ResourceServerTokenServices <span class="title function_">tokenService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RemoteTokenServices</span> <span class="variable">services</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteTokenServices</span>();</span><br><span class="line">        services.setCheckTokenEndpointUrl(<span class="string">&quot;http://localhost:8001/oauth/check_token&quot;</span>);</span><br><span class="line">        services.setClientId(<span class="string">&quot;c1&quot;</span>);</span><br><span class="line">        services.setClientSecret(<span class="string">&quot;secret&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/**&quot;</span>).access(<span class="string">&quot;#oauth2.hasScope(&#x27;all&#x27;)&quot;</span>)</span><br><span class="line">                .and().csrf().disable()</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); <span class="comment">//不记录session</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OrderController:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/12/9 22:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/r1&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;p1&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">r1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;访问资源 r1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/r2&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;p2&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">r2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;访问资源 r2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3、授权模式"><a href="#2-2-3、授权模式" class="headerlink" title="2.2.3、授权模式"></a>2.2.3、授权模式</h4><p><em>复习 oAuth2 角色有哪些</em></p><blockquote><p>资源服务器（resource server）</p><p>认证服务器（authorization server）</p><p>客户端（client）</p><p>资源拥有者（resource owner）</p></blockquote><h5 id="1、授权码模式"><a href="#1、授权码模式" class="headerlink" title="1、授权码模式"></a>1、授权码模式</h5><p>交互图：</p><p><img src="https://i.loli.net/2020/12/10/QXe5uibqZFIkNrp.png"></p><p>流程：（想一想微信扫码登录流程）</p><ol><li>资源拥有者打开客户端，客户端需要资源访问者授权，将浏览器重定向到认证（授权）服务器，并携带资源拥有者信息</li><li>资源拥有者进行认证并确定授权，授权服务器将授权码（授权码英语怎么写？？ <strong>authorizationcode</strong>）通过浏览器发送给客户端</li><li>客户端拿着授权码向授权服务器请求获取token</li><li>客户端根据token请求资源服务器</li></ol><p>测试：</p><p>1、获取授权码:</p><pre><code>http://localhost:8001/oauth/authorize?client_id=c1&amp;response_type=code&amp;scope=all&amp;redirect_uri=https://www.baidu.com</code></pre><p>在认证页面登录并授权，重定向到百度首页，发现url后面有了授权码</p><p><img src="https://i.loli.net/2020/12/10/xiwXLCuQgkYSUr5.png"></p><p><img src="https://i.loli.net/2020/12/10/84YsmRl2WzpdCiO.png"></p><p>2、根据授权码访问授权服务器获取token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8001/oauth/token?code=MNluxN&amp;grant_type=authorization_code&amp;client_id=c1&amp;client_secret=secret&amp;username=zhangsan&amp;password=123&amp;redirect_uri=https://www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/10/5GLfcUy9HjVIKr4.png"></p><blockquote><p>授权码模式是四种模式中最安全的模式，token直接是在服务器端获取，最少可能泄露。一般用于client是web服务器或第三方应用需要使用资源</p></blockquote><h5 id="2、简化模式"><a href="#2、简化模式" class="headerlink" title="2、简化模式"></a>2、简化模式</h5><p>交互图：</p><p><img src="https://i.loli.net/2020/12/10/DVQbmJZ4f5U7dSO.png"></p><p>流程：资源拥有者认证后授权服务器直接将token通过浏览器返回给客户端</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/oauth/authorize?client_id=c1&amp;response_type=token&amp;scope=all&amp;redirect_uri=http://www.baidu.com </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/10/XYGLeyAaqrl4cRN.png"></p><blockquote><p>简化模式用于没有服务器端的第三方单页面应用，因为没有服务器端就无法接收授权码</p></blockquote><h5 id="3、密码模式"><a href="#3、密码模式" class="headerlink" title="3、密码模式"></a>3、密码模式</h5><p>交互图：</p><p><img src="https://i.loli.net/2020/12/10/Ov9GZ3pNstgXPM2.png"></p><p>流程：授权服务器直接根据用户名，密码返回客户端token</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/oauth/token?client_id=c1&amp;client_secret=secret&amp;grant_type=password&amp;username=zhangsansan&amp;password=123</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/11/4a8fNmKxJtSnsME.png"></p><blockquote><p>该模式将密码泄露给了客户端，需要客户端为我们自己开发的第一方app或web应用</p></blockquote><h5 id="3、客户端模式"><a href="#3、客户端模式" class="headerlink" title="3、客户端模式"></a>3、客户端模式</h5><p><img src="https://i.loli.net/2020/12/11/5ifkVSRvbLtQApd.png"></p><p>流程：授权服务器验证客户端后直接发放令牌</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/oauth/token?client_id=c1&amp;client_secret=secret&amp;grant_type=client_credentials </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/11/ajgiz4XSARcmJKO.png"></p><blockquote><p>最不安全的模式，完全信赖的服务器端使用</p></blockquote><h4 id="2-2-4、访问资源测试"><a href="#2-2-4、访问资源测试" class="headerlink" title="2.2.4、访问资源测试"></a>2.2.4、访问资源测试</h4><p>启动两个服务，获取令牌后可以访问资源，没有令牌或令牌错误或没有权限则不能访问</p><p><strong>未携带token:</strong></p><p><img src="https://i.loli.net/2020/12/11/ie6SqQZkzN58Wtl.png"></p><p><strong>token错误：</strong></p><p><img src="https://i.loli.net/2020/12/11/A1vSQWirnpsLXl8.png"></p><p><strong>没有权限：</strong>（zhangsan只拥有访问r1权限）</p><p><img src="https://i.loli.net/2020/12/11/UyoWRKfsZ4jYpnt.png" alt="image-20201211100500434"></p><p><strong>访问资源：</strong></p><p><img src="https://i.loli.net/2020/12/11/NrHb7KQ23CnycMA.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity (一)</title>
      <link href="/article/c57ad616.html"/>
      <url>/article/c57ad616.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：认证，授权等基本概念</p><p>spring security快速上手</p></blockquote><span id="more"></span><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1、什么是认证"><a href="#1-1、什么是认证" class="headerlink" title="1.1、什么是认证"></a>1.1、什么是认证</h3><blockquote><p>认证（authentication），<strong>判断用户身份是否合法的过程</strong>，用户去访问系统资源时系统要求验证用户的身份信息，身份合法方可继续访问，不合法则拒绝访问。常见的用户认证：用户名密码，手机号验证码，二维码认证….</p></blockquote><h3 id="1-2、什么是会话"><a href="#1-2、什么是会话" class="headerlink" title="1.2、什么是会话"></a>1.2、什么是会话</h3><blockquote><p>用户认证通过后，为了避免用户的每次操作都进行认证可将用户的信息保证在会话中。会话就是系统为了保持当前用户的登录状态所提供的机制，常见的有基于session方式、基于token方式等。</p></blockquote><p><img src="https://i.loli.net/2020/12/07/MEf1lCQH9dmIRuA.png" alt="基于session方式"></p><p><img src="https://i.loli.net/2020/12/07/hru87yHENBJfzDY.png" alt="基于token方式"></p><p>基于session的认证方式由Servlet规范定制，服务端要存储session信息需要占用内存资源，客户端需要支持<br>cookie；基于token的方式则一般不需要服务端存储token，并且不限制客户端的存储方式。如今移动互联网时代<br>更多类型的客户端需要接入系统，系统多是采用前后端分离的架构进行实现，所以基于token的方式更适合。</p><h3 id="1-3、什么是授权"><a href="#1-3、什么是授权" class="headerlink" title="1.3、什么是授权"></a>1.3、什么是授权</h3><blockquote><p> 授权(access-control)是用户认证通过<strong>根据用户的权限来控制用户访问资源的过程</strong>，拥有资源的访问权限则正常访问，没有权限则拒绝访问。</p></blockquote><h3 id="1-4、授权的数据模型"><a href="#1-4、授权的数据模型" class="headerlink" title="1.4、授权的数据模型"></a>1.4、授权的数据模型</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201207150421098.png"></p><p>三个课程都是这样将的，记住这个数据模型</p><h3 id="1-5、RBAC"><a href="#1-5、RBAC" class="headerlink" title="1.5、RBAC"></a>1.5、RBAC</h3><p>如何实现授权？业界通常基于RBAC实现授权。</p><p>R ：Role 或 Resource</p><p>B：base</p><p>AC：access control</p><h4 id="1-5-1、基于角色的访问控制"><a href="#1-5-1、基于角色的访问控制" class="headerlink" title="1.5.1、基于角色的访问控制"></a>1.5.1、基于角色的访问控制</h4><p>RBAC基于角色的访问控制（Role-Based Access Control）是按角色进行授权，比如：主体的角色为总经理可以查询企业运营报表，查询员工工资信息等，访问制流程如下：</p><p><img src="https://i.loli.net/2020/12/07/pbMQuf54Y1GZD3T.png"></p><h4 id="1-5-2、基于资源的访问控制-常用"><a href="#1-5-2、基于资源的访问控制-常用" class="headerlink" title="1.5.2、基于资源的访问控制(常用)"></a>1.5.2、基于资源的访问控制(常用)</h4><p>RBAC基于资源的访问控制（Resource-Based Access Control）是按资源（或权限）进行授权，比如：用户必须具有查询工资权限才可以查询员工工资信息等，访问控制流程如下：</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201207153309068.png"></p><p>优点：根据权限查询，在需要添加用户权限时无需修改授权代码，只需给相应的角色添加权限，可拓展性高</p><h2 id="2、基于session实现方式"><a href="#2、基于session实现方式" class="headerlink" title="2、基于session实现方式"></a>2、基于session实现方式</h2><h3 id="2-1、认证流程"><a href="#2-1、认证流程" class="headerlink" title="2.1、认证流程"></a>2.1、认证流程</h3><p>基于Session认证方式的流程是，用户认证成功后，在服务端生成用户相关的数据保存在session(当前会话)，而发<br>给客户端的 sesssion_id 存放到 cookie 中，这样用客户端请求时带上 session_id 就可以验证服务器端是否存在<br>session 数据，以此完成用户的合法校验。当用户退出系统或session过期销毁时,客户端的session_id也就无效了。<br>下图是session认证方式的流程图：</p><p><img src="https://i.loli.net/2020/12/07/TM7GoZbnj6Rv8Df.png" alt="session认证方式的流程图"></p><h3 id="2-2、创建工程"><a href="#2-2、创建工程" class="headerlink" title="2.2、创建工程"></a>2.2、创建工程</h3><p>以前开发中经常使用这种模式，不再进行记录</p><h2 id="3、Spring-Security-快速上手"><a href="#3、Spring-Security-快速上手" class="headerlink" title="3、Spring Security 快速上手"></a>3、Spring Security 快速上手</h2><blockquote><p>快速上手失败，直接运行老师的代码都404 <img src="https://i.loli.net/2020/12/07/nZP2pu6OwsNiVzr.jpg" style="zoom:33%;" /></p><p>（一小时后）Maven的tomcat插件就离谱，换为本地的tomcat就可以运行了</p></blockquote><p>项目目录结构：</p><p><img src="https://i.loli.net/2020/12/08/UXeWiY56P1OmnRZ.png"></p><p><strong>1、创建项目，导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cyfwlp.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>security-spring-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>security-springmvc<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">useDefaultDelimiters</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useDefaultDelimiters</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、ApplicationConfig（相当于application.xml）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/12/7 17:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.cyfwlp.security.springmvc&quot;,excludeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION,value = Controller.class))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、WebConfig(相当与web.xml)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/12/7 17:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.cyfwlp.security.springmvc&quot;,includeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION,value = Controller.class))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//视图解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> InternalResourceViewResolver <span class="title function_">viewResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">InternalResourceViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternalResourceViewResolver</span>();</span><br><span class="line">        viewResolver.setPrefix(<span class="string">&quot;/WEB-INF/view/&quot;</span>);</span><br><span class="line">        viewResolver.setSuffix(<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;redirect:/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、WebSecurityConfig(spring sequrity核心配置)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/12/7 17:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义用户信息服务</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//内存查</span></span><br><span class="line">        <span class="type">InMemoryUserDetailsManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;zhangsan&quot;</span>).password(<span class="string">&quot;123&quot;</span>).authorities(<span class="string">&quot;p1&quot;</span>).build());</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;lisi&quot;</span>).password(<span class="string">&quot;456&quot;</span>).authorities(<span class="string">&quot;p2&quot;</span>).build());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义密码编码器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//不对密码进行加密处理</span></span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义安全拦截机制</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/r/r1&quot;</span>).hasAnyAuthority(<span class="string">&quot;p1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/r/r2&quot;</span>).hasAnyAuthority(<span class="string">&quot;p2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/r/**&quot;</span>).authenticated()</span><br><span class="line">                .anyRequest().permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .successForwardUrl(<span class="string">&quot;/login-success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目测试，没有问题</p><h2 id="4、Spring-Security-应用详解"><a href="#4、Spring-Security-应用详解" class="headerlink" title="4、Spring Security 应用详解"></a>4、Spring Security 应用详解</h2><h3 id="4-1、集成springboot"><a href="#4-1、集成springboot" class="headerlink" title="4.1、集成springboot"></a>4.1、集成springboot</h3><p>删减  Spring Security 快速上手 部分代码即可</p><h3 id="4-2、工作原理"><a href="#4-2、工作原理" class="headerlink" title="4.2、工作原理"></a>4.2、工作原理</h3><blockquote><p>源码还是直接跳了算了 <img src="https://i.loli.net/2020/12/08/fErwKSsU41GIinJ.jpg" style="zoom: 25%;" /></p></blockquote><p><img src="https://i.loli.net/2020/12/08/ZYq8RTNfJdPklCu.png" alt="认证流程"></p><h3 id="4-3、自定义登录界面"><a href="#4-3、自定义登录界面" class="headerlink" title="4.3、自定义登录界面"></a>4.3、自定义登录界面</h3><p><strong>1、将页面复制到项目下</strong></p><p>cv 操作</p><p><strong>2、修改webConfig.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//视图解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> InternalResourceViewResolver <span class="title function_">viewResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">InternalResourceViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternalResourceViewResolver</span>();</span><br><span class="line">        viewResolver.setPrefix(<span class="string">&quot;/WEB-INF/view/&quot;</span>);</span><br><span class="line">        viewResolver.setSuffix(<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;redirect:/login-view&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/login-view&quot;</span>).setViewName(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、修改spring security 配置文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义安全拦截机制</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//屏蔽csrf</span></span><br><span class="line">    http.csrf().disable();</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/r/r1&quot;</span>).hasAnyAuthority(<span class="string">&quot;p1&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/r/r2&quot;</span>).hasAnyAuthority(<span class="string">&quot;p2&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/r/**&quot;</span>).authenticated()</span><br><span class="line">        .anyRequest().permitAll()</span><br><span class="line">        .and()</span><br><span class="line">        .formLogin()</span><br><span class="line">        .loginPage(<span class="string">&quot;/login-view&quot;</span>)</span><br><span class="line">        .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">        .successForwardUrl(<span class="string">&quot;/login-success&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、启动项目发现登录页已经变为自定义登录页</strong></p><p><img src="https://i.loli.net/2020/12/08/ytg27ifp1I8MrWo.png"></p><h3 id="4-4、连接数据库认证"><a href="#4-4、连接数据库认证" class="headerlink" title="4.4、连接数据库认证"></a>4.4、连接数据库认证</h3><p>核心就是自己定义一个类实现UserDetailService接口实现里面的方法完成认证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/12/7 20:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringDataUserDetailService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接数据库查询账号信息</span></span><br><span class="line">        <span class="type">UserDto</span> <span class="variable">userDto</span> <span class="operator">=</span> userDao.getUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (userDto == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//throw new RuntimeException(&quot;&quot;) 不需要抛异常，又provider来抛出异常</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> User.withUsername(userDto.getUsername()).password(userDto.getPassword()).authorities(<span class="string">&quot;p1&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>报错解决：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Field jdbcTemplate in com.cyfwlp.security.springboot.dao.UserDao required a bean of type <span class="string">&#x27;org.springframework.jdbc.core.JdbcTemplate&#x27;</span> that could not be found.</span><br><span class="line"></span><br><span class="line">The injection point has the following annotations:</span><br><span class="line">- <span class="meta">@org</span>.springframework.beans.factory.annotation.Autowired(required=<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider defining a bean of type <span class="string">&#x27;org.springframework.jdbc.core.JdbcTemplate&#x27;</span> in your configuration.</span><br></pre></td></tr></table></figure><p>网上查了查需要使用阿里的德鲁伊数据源，不知道为什么试试吧(这个配置文件好像有点小问题，先用着)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">druid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1.配置一个管理后台的Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">statViewServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ServletRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(<span class="keyword">new</span> <span class="title class_">StatViewServlet</span>(),<span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        initParams.put(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.配置一个监控的filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">webStatFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        filter.setFilter(<span class="keyword">new</span> <span class="title class_">WebStatFilter</span>());</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filter.setInitParameters(initParams);</span><br><span class="line">        filter.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>离谱的是成功解决了</p><p>debug进不到 UserDetailsService 里的方法，好像是注入有问题，稀里糊涂解决了….</p><h3 id="4-5、会话"><a href="#4-5、会话" class="headerlink" title="4.5、会话"></a>4.5、会话</h3><h4 id="4-5-1、获取用户身份"><a href="#4-5-1、获取用户身份" class="headerlink" title="4.5.1、获取用户身份"></a>4.5.1、获取用户身份</h4><p>由spring security认证流程可以得知，一次会话的用户信息存储在 SecurityContextHolder上下文，SecurityContext与当前线程进行绑定，方便获取<br>用户身份。</p><p>调用如下方法获取用户身份</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前用户的信息</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">principal</span> <span class="operator">=</span> authentication.getPrincipal();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (principal == <span class="literal">null</span>) &#123;</span><br><span class="line">        username = <span class="string">&quot;匿名用户&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (principal <span class="keyword">instanceof</span> UserDetails) &#123;</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> (UserDetails) principal;</span><br><span class="line">        username = userDetails.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.5.2、会话控制</p><p>我们可以通过以下选项准确控制会话何时创建以及Spring Security如何与之交互：</p><table><thead><tr><th>机制</th><th>描述</th></tr></thead><tbody><tr><td>always</td><td>如果没有session存在就创建一个</td></tr><tr><td>ifRequired</td><td>需要时创建</td></tr><tr><td>never</td><td>从来不创建，但其他地方创建了将会使用</td></tr><tr><td>stateless</td><td>从来不创建，也不使用</td></tr></tbody></table><p>在配置类里进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   http.sessionManagement()</span><br><span class="line">        .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stateless常用于 无状态架构适用于REST API及其无状态认证机制</p><h3 id="4-6、自定义退出"><a href="#4-6、自定义退出" class="headerlink" title="4.6、自定义退出"></a>4.6、自定义退出</h3><p>修改配置类即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.and()</span><br><span class="line">    .logout()</span><br><span class="line">    .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">    .logoutSuccessUrl(<span class="string">&quot;/logout-view&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-7、授权"><a href="#4-7、授权" class="headerlink" title="4.7、授权"></a>4.7、授权</h3><p>授权的方式包括 web授权和方法授权</p><p>web授权：对uri进行拦截查询是否拥有权限</p><p>方法授权：对方法进行拦截查询是否拥有权限</p><p>他们都会调用accessDecisionManager进行授权决策，若为web授权则拦截器为FilterSecurityInterceptor；若为方法授权则拦截器为MethodSecurityInterceptor。如果同时通过web授权和方法授权则先执行web授权，再执行方法授权，最后决策通过，则允许访问资源，否则将禁止访问。</p><p><img src="https://i.loli.net/2020/12/08/7K2QDeSzmyqrhUb.png"></p><p>创建所需要的五张表</p><h4 id="4-7-1、web授权"><a href="#4-7-1、web授权" class="headerlink" title="4.7.1、web授权"></a><strong>4.7.1、web授权</strong></h4><p><strong>添加接口查询用户方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findPermissionsByUserId</span><span class="params">(String userId)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span>  <span class="string">&quot;SELECT * FROM t_permission WHERE id IN(\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;\tSELECT permission_id FROM t_role_permission WHERE role_id IN (\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;\t\tSELECT role_id FROM t_user_role WHERE user_id = ?)\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    List&lt;PermissionDto&gt; list = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(PermissionDto.class), userId);</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (PermissionDto permissionDto : list) &#123;</span><br><span class="line">        result.add(permissionDto.getCode());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改UserDetailService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringDataUserDetailService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接数据库查询账号信息</span></span><br><span class="line">        <span class="type">UserDto</span> <span class="variable">userDto</span> <span class="operator">=</span> userDao.getUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (userDto == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//throw new RuntimeException(&quot;&quot;) 不需要抛异常，又provider来抛出异常</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; permissions = userDao.findPermissionsByUserId(userDto.getId());</span><br><span class="line"></span><br><span class="line">        String[] permissionArray = <span class="keyword">new</span> <span class="title class_">String</span>[permissions.size()];</span><br><span class="line"></span><br><span class="line">        permissions.toArray(permissionArray);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> User.withUsername(userDto.getUsername()).password(userDto.getPassword()).authorities(permissionArray).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>保护URL常用的方法有：</strong></p><p>authenticated() 保护URL，需要用户登录<br>permitAll() 指定URL无需保护，一般应用与静态资源文件<br>hasRole(String role) 限制单个角色访问，角色将被增加 “ROLE_” .所以”ADMIN” 将和 “ROLE_ADMIN”进行比较.<br>hasAuthority(String authority) 限制单个权限访问<br>hasAnyRole(String… roles)允许多个角色访问.<br>hasAnyAuthority(String… authorities) 允许多个权限访问.<br>access(String attribute) 该方法使用 SpEL表达式, 所以可以创建复杂的限制.<br>hasIpAddress(String ipaddressExpression) 限制IP地址或子网</p><h4 id="4-7-2、方法授权"><a href="#4-7-2、方法授权" class="headerlink" title="4.7.2、方法授权"></a><strong>4.7.2、方法授权</strong></h4><p>一般拦截controller方法</p><p><strong>开启方法授权 ：我们可以在任何 @Configuration 实例上使用 @EnableGlobalMethodSecurity 注释</strong></p><p>主要学习**@PreAuthorize,@PostAuthorize, @Secured**三类注解</p><p>开启注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/r/r1&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;p1&#x27;)&quot;)</span> <span class="comment">//拥有p1权限才可以访问</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">r1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getUsername() + <span class="string">&quot;  r1----------------&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day18</title>
      <link href="/article/cc559e96.html"/>
      <url>/article/cc559e96.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Day18 内容介绍</p><p>1、整合spring security 权限框架</p><p>2、整合权限管理前端页面</p><p>3、Nacos配置中心</p><p>4、提交项目到远程git仓库</p></blockquote><span id="more"></span><h2 id="1、整合spring-security-权限框架"><a href="#1、整合spring-security-权限框架" class="headerlink" title="1、整合spring security 权限框架"></a>1、整合spring security 权限框架</h2><h3 id="1、spring-security-简介"><a href="#1、spring-security-简介" class="headerlink" title="1、spring security 简介"></a>1、spring security 简介</h3><blockquote><p>Spring 是一个非常流行和成功的 Java 应用开发框架。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。一般来说，Web 应用的安全性包括<strong>用户认证</strong>（<strong>Authentication</strong>）和用户授权（<strong>Authorization</strong>）两个部分。</p><p>（1）用户认证指的是：验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。</p><p>（2）用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</p><p><strong>Spring Security其实就是用filter，多请求的路径进行过滤。</strong></p><p>（1）如果是基于Session，那么Spring-security会对cookie里的sessionid进行解析，找到服务器存储的sesion信息，然后判断当前用户是否符合请求的要求。</p><p>（2）如果是token，则是解析出token，然后将当前请求加入到Spring-security管理的权限信息中去</p></blockquote><p><strong>认证与授权实现思路</strong>：（面试）</p><p>如果系统的模块众多，每个模块都需要就行授权与认证，所以我们选择<strong>基于token</strong>的形式进行授权与认证，用户根据用户名密码认证成功，然后获取当前用户角色的一系列权限值，并<strong>以用户名为key</strong>，<strong>权限列表为value</strong>的形式存入<strong>redis缓存</strong>中，根据用户名相关信息生成token返回，浏览器将token记录到<strong>cookie</strong>中，每次调用api接口都默认将<strong>token携带到header请求头</strong>中，Spring-security解析header头获取token信息，解析token获取当前用户名，根据用户名就可以从redis中获取权限列表，这样Spring-security就能够判断当前请求是否有权限访问</p><p><img src="https://i.loli.net/2020/12/05/uE4kM6nLwWIO1iH.png"></p><h3 id="2、后端整合"><a href="#2、后端整合" class="headerlink" title="2、后端整合"></a>2、后端整合</h3><p><strong>cv操作 -&gt; 大概看看代码是干什么的</strong></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201205115006138.png"></p><p><strong>在service_acl引入spring security依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cyfwlp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>编写 UserDetailsService 实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userDetailsService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 根据账号获取用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: org.springframework.security.core.userdetails.UserDetails</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 从数据库中取出用户信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.selectByUsername(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == user)&#123;</span><br><span class="line">            <span class="comment">//throw new UsernameNotFoundException(&quot;用户名不存在！&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回UserDetails实现类</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">curUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        BeanUtils.copyProperties(user,curUser);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; authorities = permissionService.selectPermissionValueByUserId(user.getId());</span><br><span class="line"><span class="comment">//        SecurityUser securityUser = new SecurityUser(curUser);</span></span><br><span class="line"><span class="comment">//        securityUser.setPermissionValueList(authorities);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、页面整合"><a href="#3、页面整合" class="headerlink" title="3、页面整合"></a>3、页面整合</h3><p>CV操作 这老师好像最后不细了，可能是时间不多了，这一点暂停了自己好好研究研究</p><p>不行啊这，得去好好研究研究 spring security 才行 <img src="https://i.loli.net/2020/12/05/cltgHs3VFRQPC9G.jpg" style="zoom:33%;" /></p><h2 id="2、nacos配置中心"><a href="#2、nacos配置中心" class="headerlink" title="2、nacos配置中心"></a>2、nacos配置中心</h2><p>在系统开发过程中，开发者通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在。目的是让静态的系统工件或者交付物（如 WAR，JAR 包等）更好地和实际的物理运行环境进行适配。配置管理一般包含在系统部署的过程中，由系统管理员或者运维人员完成。配置变更是调整系统运行时的行为的有效手段。</p><p>如果微服务架构中没有使用统一配置中心时，所存在的问题：</p><p>- 配置文件分散在各个项目里，不方便维护</p><p>- 配置内容安全与权限</p><p>- 更新配置后，项目需要重启</p><p>nacos配置中心：系统配置的集中管理（编辑、存储、分发）、动态更新不重启、回滚配置（变更管理、历史版本管理、变更审计）等所有与配置相关的活动。</p><p>项目中我们使用<strong>nacos</strong>实现配置中心替代原生的 spring cloud config</p><p><img src="https://i.loli.net/2020/12/05/yjDbvs1Bo3WOG6A.png"></p><h3 id="1、创建配置文件"><a href="#1、创建配置文件" class="headerlink" title="1、创建配置文件"></a>1、创建配置文件</h3><p>在nacos里创建配置文件，点击操作即可</p><p><img src="https://i.loli.net/2020/12/05/3klzmTbEAJ7UC8L.png"></p><p><strong>补充知识：</strong></p><p>bootstrap与application</p><p><img src="https://i.loli.net/2020/12/05/5Tl6IYWJt2ndr14.png"></p><p><strong>（1）加载顺序</strong><br>这里主要是说明application和bootstrap的加载顺序。</p><p>bootstrap.yml（bootstrap.properties）先加载<br>application.yml（application.properties）后加载<br>bootstrap.yml 用于应用程序上下文的引导阶段。</p><p>bootstrap.yml 由父Spring ApplicationContext加载。</p><p>父ApplicationContext 被加载到使用 application.yml 的之前。</p><p><strong>（2）配置区别</strong><br>bootstrap.yml 和application.yml 都可以用来配置参数。</p><p>bootstrap.yml 可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。<br>application.yml 可以用来定义应用级别的。</p><h3 id="2、在bootstrap-properties中配置"><a href="#2、在bootstrap-properties中配置" class="headerlink" title="2、在bootstrap.properties中配置"></a>2、在bootstrap.properties中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#注册中心地址</span><br><span class="line">spring.cloud.nacos.config.server-addr=127.0.0.1:8848</span><br><span class="line"></span><br><span class="line">spring.profiles.active=dev</span><br><span class="line"></span><br><span class="line"># 该配置影响统一配置中心中的dataId，之前已经配置过</span><br><span class="line">spring.application.name=service-sta</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若开启 spring.profiles.active&#x3D;dev 配置</p><p>需要在nacos添加配置文件 service-sta-dev.properties才能找到配置文件</p><h3 id="3、nacos命名空间"><a href="#3、nacos命名空间" class="headerlink" title="3、nacos命名空间"></a>3、nacos命名空间</h3><p>常见的环境 dev test prod</p><p>在命名空间添加常用的环境</p><p><img src="https://i.loli.net/2020/12/05/kv9DjLTHehRx76c.png"></p><p>根据名称空间切换</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注册中心地址</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 该配置影响统一配置中心中的dataId，之前已经配置过</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">service-sta</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">17b81064-200c-4908-864f-1be97ce5b9e3</span></span><br></pre></td></tr></table></figure><h3 id="4、加载多个配置文件"><a href="#4、加载多个配置文件" class="headerlink" title="4、加载多个配置文件"></a>4、加载多个配置文件</h3><p>在nacos创建多个配置文件</p><p><img src="https://i.loli.net/2020/12/05/HaEy9pm1FTBNrYK.png"></p><p>修改bootstrap配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注册中心地址</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 该配置影响统一配置中心中的dataId，之前已经配置过</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">service-sta</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置nacos命名空间</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">17b81064-200c-4908-864f-1be97ce5b9e3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 多个配置文件</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[0].data-id</span>=<span class="string">port.properties</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 开启动态刷新配置，否则配置文件修改，工程无法感知</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.ext-config[0].refresh</span>=<span class="string">tr</span></span><br></pre></td></tr></table></figure><h2 id="3、git"><a href="#3、git" class="headerlink" title="3、git"></a>3、git</h2><h3 id="1、git提交过程"><a href="#1、git提交过程" class="headerlink" title="1、git提交过程"></a>1、git提交过程</h3><p><img src="https://i.loli.net/2020/12/05/ZGFQHYhCKIbwTaq.png"></p><h3 id="2、码云（gitee）"><a href="#2、码云（gitee）" class="headerlink" title="2、码云（gitee）"></a>2、码云（gitee）</h3><p>idea整合gitee 在之前开发魔方比赛系统已经使用过，感觉问题不大</p>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day17</title>
      <link href="/article/5cea8307.html"/>
      <url>/article/5cea8307.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要</p><p>canal、Gateway网关、权限管理</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/12/04/fFmQWDb3u1YNHgJ.png"></p><h2 id="一、canal"><a href="#一、canal" class="headerlink" title="一、canal"></a>一、canal</h2><h3 id="1、应用场景-–-远程库中内容同步到本地库"><a href="#1、应用场景-–-远程库中内容同步到本地库" class="headerlink" title="1、应用场景 – 远程库中内容同步到本地库"></a>1、应用场景 – 远程库中内容同步到本地库</h3><p>​        在前面的统计分析功能中，我们采取了服务调用获取统计数据，这样耦合度高，效率相对较低，目前我采取另一种实现方式，通过实时同步数据库表的方式实现，例如我们要统计每天注册与登录人数，我们只需把会员表同步到统计库中，实现本地统计就可以了，这样效率更高，耦合度更低，Canal就是一个很好的数据库同步工具。canal是阿里巴巴旗下的一款开源项目，纯Java开发。基于数据库增量日志解析，提供增量数据订阅&amp;消费，目前主要支持了MySQL。</p><h3 id="2、Canal环境搭建"><a href="#2、Canal环境搭建" class="headerlink" title="2、Canal环境搭建"></a>2、Canal环境搭建</h3><p><img src="https://i.loli.net/2020/12/02/7khyz3nmOPvlg6E.png"></p><p>linux 使用虚拟机  mysql安装使用docker <a href="https://liaotao421.github.io/posts/7ff872e6/">docker使用</a></p><p><strong>canal的原理是基于mysql binlog技术，所以这里一定需要开启mysql的binlog写入功能</strong></p><h4 id="（1）进入容器"><a href="#（1）进入容器" class="headerlink" title="（1）进入容器"></a>（1）进入容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 7e3c363677fe /bin/bash</span><br></pre></td></tr></table></figure><h4 id="（2）检查binlog功能是否开启（OFF为未开启）"><a href="#（2）检查binlog功能是否开启（OFF为未开启）" class="headerlink" title="（2）检查binlog功能是否开启（OFF为未开启）"></a>（2）检查binlog功能是否开启（OFF为未开启）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show variables like <span class="string">&#x27;log_bin&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_bin       | OFF   |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>docker安装vim</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure><h4 id="（3）修改配置文件开启binlog"><a href="#（3）修改配置文件开启binlog" class="headerlink" title="（3）修改配置文件开启binlog"></a>（3）修改配置文件开启binlog</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1，修改 mysql 的配置文件 conf.d</span><br><span class="line">vi /etc/mysql/conf.d/</span><br><span class="line"></span><br><span class="line">追加内容：</span><br><span class="line">log-bin=mysql-bin     #binlog文件名</span><br><span class="line">binlog_format=ROW     #选择row模式</span><br><span class="line">server_id=1           #mysql实例id,不能和canal的slaveId重复</span><br><span class="line"></span><br><span class="line">2，重启 mysql：</span><br><span class="line">docker restart [容器id]</span><br><span class="line"></span><br><span class="line">3，登录 mysql 客户端，查看 log_bin 变量</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show variables like <span class="string">&#x27;log_bin&#x27;</span>;</span></span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_bin       | ON|</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">————————————————</span><br><span class="line">如果显示状态为ON表示该功能已开启</span><br></pre></td></tr></table></figure><blockquote><p>这一步搞了好久，发现还是对linux相关知识欠缺，太弱了</p></blockquote><h4 id="（4）下载安装Canal服务"><a href="#（4）下载安装Canal服务" class="headerlink" title="（4）下载安装Canal服务"></a>（4）下载安装Canal服务</h4><p>下载地址：</p><p><a href="https://github.com/alibaba/canal/releases">https://github.com/alibaba/canal/releases</a></p><p><strong>下载之后，放到目录中，解压文件</strong></p><p>cd <code>/usr/local/canal</code></p><p>canal.deployer-1.1.4.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf canal.deployer-1.1.4.tar.gz</span><br></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi conf/example/instance.properties</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#需要改成自己的数据库信息</span><br><span class="line">canal.instance.master.address=192.168.44.132:3306</span><br><span class="line">#需要改成自己的数据库用户名与密码</span><br><span class="line">canal.instance.dbUsername=canal</span><br><span class="line">canal.instance.dbPassword=canal</span><br><span class="line">#需要改成同步的数据库表规则，例如只是同步一下表</span><br><span class="line">#canal.instance.filter.regex=.*\\..*</span><br><span class="line">canal.instance.filter.regex=guli_ucenter.ucenter_member</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql 数据解析关注的表，Perl正则表达式.</span><br><span class="line">多个正则之间以逗号(,)分隔，转义符需要双斜杠(\\) </span><br><span class="line">常见例子：</span><br><span class="line">1.  所有表：.*   or  .*\\..*</span><br><span class="line">2.  canal schema下所有表： canal\\..*</span><br><span class="line">3.  canal下的以canal打头的表：canal\\.canal.*</span><br><span class="line">4.  canal schema下的一张表：canal.test1</span><br><span class="line">5.  多个规则组合使用：canal\\..*,mysql.test1,mysql.test2 (逗号分隔)</span><br><span class="line">注意：此过滤条件只针对row模式的数据有效(ps. mixed/statement因为不解析sql，所以无法准确提取tableName进行过滤)</span><br></pre></td></tr></table></figure><p><strong>进入bin目录下启动</strong></p><p>(需要java环境，选择直接在宝塔上装个tomcat，自动按照java环境)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/startup.sh</span><br></pre></td></tr></table></figure><p>这里又启动不了，<img src="https://i.loli.net/2020/12/03/yFawjW1PquZnsoe.gif" alt="img" style="zoom:33%;" /></p><p><img src="https://i.loli.net/2020/12/03/FAJUin7RfoyaPSV.png"></p><p>也不知道为啥，就按照教程一步一步来的、</p><p><strong>最后决定把canal运行再本地，操作本地服务器和云服务器，可算是成功了</strong></p><p><img src="https://i.loli.net/2020/12/03/dure8W4RsNQPh2l.png"></p><h4 id="（5）写代码实现同步过程"><a href="#（5）写代码实现同步过程" class="headerlink" title="（5）写代码实现同步过程"></a>（5）写代码实现同步过程</h4><p>创建新模块 canalclent</p><p>1、引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.otter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal.client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">10000</span></span><br><span class="line"><span class="comment"># 服务名</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">canal-client</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 环境设置：dev、test、prod</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># mysql数据库连接</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>3、编写canal客户端类（直接复制）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.client.CanalConnector;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.client.CanalConnectors;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.Message;</span><br><span class="line"><span class="keyword">import</span> com.google.protobuf.InvalidProtocolBufferException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.DbUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CanalClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sql队列</span></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;String&gt; SQL_QUEUE = <span class="keyword">new</span> <span class="title class_">ConcurrentLinkedQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * canal入库方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CanalConnector</span> <span class="variable">connector</span> <span class="operator">=</span> CanalConnectors.newSingleConnector(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;192.168.44.132&quot;</span>,</span><br><span class="line">                <span class="number">11111</span>), <span class="string">&quot;example&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connector.connect();</span><br><span class="line">            connector.subscribe(<span class="string">&quot;.*\\..*&quot;</span>);</span><br><span class="line">            connector.rollback();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="comment">//尝试从master那边拉去数据batchSize条记录，有多少取多少</span></span><br><span class="line">                    <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> connector.getWithoutAck(batchSize);</span><br><span class="line">                    <span class="type">long</span> <span class="variable">batchId</span> <span class="operator">=</span> message.getId();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> message.getEntries().size();</span><br><span class="line">                    <span class="keyword">if</span> (batchId == -<span class="number">1</span> || size == <span class="number">0</span>) &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dataHandle(message.getEntries());</span><br><span class="line">                    &#125;</span><br><span class="line">                    connector.ack(batchId);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//当队列里面堆积的sql大于一定数值的时候就模拟执行</span></span><br><span class="line">                    <span class="keyword">if</span> (SQL_QUEUE.size() &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                        executeQueueSql();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connector.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟执行队列里面的sql语句</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeQueueSql</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> SQL_QUEUE.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> SQL_QUEUE.poll();</span><br><span class="line">            System.out.println(<span class="string">&quot;[sql]----&gt; &quot;</span> + sql);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.execute(sql.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entrys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dataHandle</span><span class="params">(List&lt;Entry&gt; entrys)</span> <span class="keyword">throws</span> InvalidProtocolBufferException &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry entry : entrys) &#123;</span><br><span class="line">            <span class="keyword">if</span> (EntryType.ROWDATA == entry.getEntryType()) &#123;</span><br><span class="line">                <span class="type">RowChange</span> <span class="variable">rowChange</span> <span class="operator">=</span> RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">                <span class="type">EventType</span> <span class="variable">eventType</span> <span class="operator">=</span> rowChange.getEventType();</span><br><span class="line">                <span class="keyword">if</span> (eventType == EventType.DELETE) &#123;</span><br><span class="line">                    saveDeleteSql(entry);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventType == EventType.UPDATE) &#123;</span><br><span class="line">                    saveUpdateSql(entry);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventType == EventType.INSERT) &#123;</span><br><span class="line">                    saveInsertSql(entry);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存更新语句</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveUpdateSql</span><span class="params">(Entry entry)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">RowChange</span> <span class="variable">rowChange</span> <span class="operator">=</span> RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">            List&lt;RowData&gt; rowDatasList = rowChange.getRowDatasList();</span><br><span class="line">            <span class="keyword">for</span> (RowData rowData : rowDatasList) &#123;</span><br><span class="line">                List&lt;Column&gt; newColumnList = rowData.getAfterColumnsList();</span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;update &quot;</span> + entry.getHeader().getTableName() + <span class="string">&quot; set &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newColumnList.size(); i++) &#123;</span><br><span class="line">                    sql.append(<span class="string">&quot; &quot;</span> + newColumnList.get(i).getName()</span><br><span class="line">                            + <span class="string">&quot; = &#x27;&quot;</span> + newColumnList.get(i).getValue() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (i != newColumnList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                        sql.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sql.append(<span class="string">&quot; where &quot;</span>);</span><br><span class="line">                List&lt;Column&gt; oldColumnList = rowData.getBeforeColumnsList();</span><br><span class="line">                <span class="keyword">for</span> (Column column : oldColumnList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (column.getIsKey()) &#123;</span><br><span class="line">                        <span class="comment">//暂时只支持单一主键</span></span><br><span class="line">                        sql.append(column.getName() + <span class="string">&quot;=&quot;</span> + column.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                SQL_QUEUE.add(sql.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存删除语句</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveDeleteSql</span><span class="params">(Entry entry)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">RowChange</span> <span class="variable">rowChange</span> <span class="operator">=</span> RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">            List&lt;RowData&gt; rowDatasList = rowChange.getRowDatasList();</span><br><span class="line">            <span class="keyword">for</span> (RowData rowData : rowDatasList) &#123;</span><br><span class="line">                List&lt;Column&gt; columnList = rowData.getBeforeColumnsList();</span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;delete from &quot;</span> + entry.getHeader().getTableName() + <span class="string">&quot; where &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (Column column : columnList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (column.getIsKey()) &#123;</span><br><span class="line">                        <span class="comment">//暂时只支持单一主键</span></span><br><span class="line">                        sql.append(column.getName() + <span class="string">&quot;=&quot;</span> + column.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                SQL_QUEUE.add(sql.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存插入语句</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveInsertSql</span><span class="params">(Entry entry)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">RowChange</span> <span class="variable">rowChange</span> <span class="operator">=</span> RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">            List&lt;RowData&gt; rowDatasList = rowChange.getRowDatasList();</span><br><span class="line">            <span class="keyword">for</span> (RowData rowData : rowDatasList) &#123;</span><br><span class="line">                List&lt;Column&gt; columnList = rowData.getAfterColumnsList();</span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;insert into &quot;</span> + entry.getHeader().getTableName() + <span class="string">&quot; (&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnList.size(); i++) &#123;</span><br><span class="line">                    sql.append(columnList.get(i).getName());</span><br><span class="line">                    <span class="keyword">if</span> (i != columnList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                        sql.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sql.append(<span class="string">&quot;) VALUES (&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnList.size(); i++) &#123;</span><br><span class="line">                    sql.append(<span class="string">&quot;&#x27;&quot;</span> + columnList.get(i).getValue() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (i != columnList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                        sql.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sql.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">                SQL_QUEUE.add(sql.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String sql)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> == sql) <span class="keyword">return</span>;</span><br><span class="line">            con = dataSource.getConnection();</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> qr.execute(con, sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;update: &quot;</span>+ row);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.closeQuietly(con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、编写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CanalApplication</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CanalClient canalClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(CanalApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//项目启动，执行canal客户端监听</span></span><br><span class="line">        canalClient.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、GataWay-网关"><a href="#二、GataWay-网关" class="headerlink" title="二、GataWay 网关"></a>二、GataWay 网关</h2><h3 id="1、网关"><a href="#1、网关" class="headerlink" title="1、网关"></a>1、网关</h3><p>API 网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过 API 网关这一层。也就是说，API 的实现方面更多的考虑业务逻辑，而安全、性能、监控可以交由 API 网关来做，这样既提高业务灵活性又不缺安全性</p><h3 id="2、Spring-Cloud-Gateway"><a href="#2、Spring-Cloud-Gateway" class="headerlink" title="2、Spring Cloud Gateway"></a>2、Spring Cloud Gateway</h3><p><strong>Spring cloud gateway</strong>是spring官方基于Spring 5.0、Spring Boot2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供简单、有效和统一的API路由管理方式，Spring Cloud Gateway作为Spring Cloud生态系统中的网关，目标是替代Netflix Zuul，其不仅提供统一的路由方式，并且还基于Filer链的方式提供了网关基本的功能，例如：安全、监控&#x2F;埋点、限流等。</p><p><img src="https://i.loli.net/2020/12/03/DCU9ZAkqPKx3wyH.jpg"></p><h3 id="3、Spring-Cloud-Gateway核心概念"><a href="#3、Spring-Cloud-Gateway核心概念" class="headerlink" title="3、Spring Cloud Gateway核心概念"></a>3、Spring Cloud Gateway核心概念</h3><p>网关提供API全托管服务，丰富的API管理功能，辅助企业管理大规模的API，以降低管理成本和安全风险，包括协议适配、协议转发、安全策略、防刷、流量、监控日志等贡呢。一般来说网关对外暴露的URL或者接口信息，我们统称为路由信息。如果研发过网关中间件或者使用过Zuul的人，会知道网关的核心是Filter以及Filter Chain（Filter责任链）。Sprig Cloud Gateway也具有路由和Filter的概念。下面介绍一下Spring Cloud Gateway中几个重要的概念。</p><p>（1）路由。路由是网关最基础的部分，路由信息有一个ID、一个目的URL、一组断言和一组Filter组成。如果断言路由为真，则说明请求的URL和配置匹配</p><p>（2）断言。Java8中的断言函数。Spring Cloud Gateway中的断言函数输入类型是Spring5.0框架中的ServerWebExchange。Spring Cloud Gateway中的断言函数允许开发者去定义匹配来自于http request中的任何信息，比如请求头和参数等。</p><p>（3）过滤器。一个标准的Spring webFilter。Spring cloud gateway中的filter分为两种类型的Filter，分别是Gateway Filter和Global Filter。过滤器Filter将会对请求和响应进行修改处理</p><p><img src="https://i.loli.net/2020/12/03/EkxuGz2JP7bFc3t.jpg"></p><p>如上图所示，Spring cloud Gateway发出请求。然后再由Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到Gateway web handler。Handler再通过指定的过滤器链将请求发送到我们实际的服务执行业务逻辑，然后返回。</p><h3 id="4、实现请求转发"><a href="#4、实现请求转发" class="headerlink" title="4、实现请求转发"></a>4、实现请求转发</h3><p><strong>（1）引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common_utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--gson--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--服务调用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8222</span></span><br><span class="line"><span class="comment"># 服务名</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">service-gateway</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># nacos服务地址</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#使用服务发现路由</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.discovery.locator.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#服务路由名小写</span></span><br><span class="line"><span class="comment">#spring.cloud.gateway.discovery.locator.lower-case-service-id=true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#这不知道干啥的，但是不能删了...</span></span><br><span class="line"><span class="comment">#设置路由id</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[0].id</span>=<span class="string">service-acl</span></span><br><span class="line"><span class="comment">#设置路由的uri</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[0].uri</span>=<span class="string">lb://service-acl</span></span><br><span class="line"><span class="comment">#设置路由断言,代理servicerId为auth-service的/auth/路径</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[0].predicates</span>= <span class="string">Path=/*/acl/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置service-edu服务</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[1].id</span>=<span class="string">service-edu</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[1].uri</span>=<span class="string">lb://service-edu</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[1].predicates</span>= <span class="string">Path=/eduservice/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置service-ucenter服务</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[2].id</span>=<span class="string">service-ucenter</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[2].uri</span>=<span class="string">lb://service-ucenter</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[2].predicates</span>= <span class="string">Path=/ucenterservice/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置service-ucenter服务</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[3].id</span>=<span class="string">service-cms</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[3].uri</span>=<span class="string">lb://service-cms</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[3].predicates</span>= <span class="string">Path=/cmsservice/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[4].id</span>=<span class="string">service-msm</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[4].uri</span>=<span class="string">lb://service-msm</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[4].predicates</span>= <span class="string">Path=/edumsm/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[5].id</span>=<span class="string">service-order</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[5].uri</span>=<span class="string">lb://service-order</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[5].predicates</span>= <span class="string">Path=/orderservice/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[6].id</span>=<span class="string">service-order</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[6].uri</span>=<span class="string">lb://service-order</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[6].predicates</span>= <span class="string">Path=/orderservice/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[7].id</span>=<span class="string">service-oss</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[7].uri</span>=<span class="string">lb://service-oss</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[7].predicates</span>= <span class="string">Path=/eduoss/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[8].id</span>=<span class="string">service-statistic</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[8].uri</span>=<span class="string">lb://service-statistic</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[8].predicates</span>= <span class="string">Path=/staservice/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[9].id</span>=<span class="string">service-vod</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[9].uri</span>=<span class="string">lb://service-vod</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[9].predicates</span>= <span class="string">Path=/eduvod/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[10].id</span>=<span class="string">service-edu</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[10].uri</span>=<span class="string">lb://service-edu</span></span><br><span class="line"><span class="attr">spring.cloud.gateway.routes[10].predicates</span>= <span class="string">Path=/eduuser/**</span></span><br></pre></td></tr></table></figure><h3 id="5、实现负载均衡"><a href="#5、实现负载均衡" class="headerlink" title="5、实现负载均衡"></a>5、实现负载均衡</h3><p><img src="https://i.loli.net/2020/12/03/E4tIzdawTFWnrZH.png"></p><h3 id="6、解决跨域等其他配置"><a href="#6、解决跨域等其他配置" class="headerlink" title="6、解决跨域等其他配置"></a>6、解决跨域等其他配置</h3><p>cv操作 保存好老师的代码，以后开发直接修改使用</p><p><strong>1、网关解决跨域问题</strong></p><p><strong>（1）创建配置类</strong></p><p><img src="https://i.loli.net/2020/12/03/pNtRlBavVUinkEG.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>(<span class="keyword">new</span> <span class="title class_">PathPatternParser</span>());</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、全局Filter，统一处理会员登录与外部不允许访问的服务</strong></p><p><img src="https://i.loli.net/2020/12/03/pNtRlBavVUinkEG.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 全局Filter，统一处理会员登录与外部不允许访问的服务</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AntPathMatcher</span> <span class="variable">antPathMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getURI().getPath();</span><br><span class="line">        <span class="comment">//谷粒学院api接口，校验用户必须登录</span></span><br><span class="line">        <span class="keyword">if</span>(antPathMatcher.match(<span class="string">&quot;/api/**/auth/**&quot;</span>, path)) &#123;</span><br><span class="line">            List&lt;String&gt; tokenList = request.getHeaders().get(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> == tokenList) &#123;</span><br><span class="line">                <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">                <span class="keyword">return</span> out(response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//                Boolean isCheck = JwtUtils.checkToken(tokenList.get(0));</span></span><br><span class="line"><span class="comment">//                if(!isCheck) &#123;</span></span><br><span class="line">                    <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">                    <span class="keyword">return</span> out(response);</span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//内部服务接口，不允许外部访问</span></span><br><span class="line">        <span class="keyword">if</span>(antPathMatcher.match(<span class="string">&quot;/**/inner/**&quot;</span>, path)) &#123;</span><br><span class="line">            <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">            <span class="keyword">return</span> out(response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Mono&lt;Void&gt; <span class="title function_">out</span><span class="params">(ServerHttpResponse response)</span> &#123;</span><br><span class="line">        <span class="type">JsonObject</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonObject</span>();</span><br><span class="line">        message.addProperty(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        message.addProperty(<span class="string">&quot;code&quot;</span>, <span class="number">28004</span>);</span><br><span class="line">        message.addProperty(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;鉴权失败&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bits = message.toString().getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="type">DataBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> response.bufferFactory().wrap(bits);</span><br><span class="line">        <span class="comment">//response.setStatusCode(HttpStatus.UNAUTHORIZED);</span></span><br><span class="line">        <span class="comment">//指定编码，否则在浏览器中会中文乱码</span></span><br><span class="line">        response.getHeaders().add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> response.writeWith(Mono.just(buffer));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、自定义异常处理</strong></p><p>服务网关调用服务时可能会有一些异常或服务不可用，它返回错误信息不友好，需要我们覆盖处理</p><p><img src="https://i.loli.net/2020/12/03/pNtRlBavVUinkEG.png"></p><p>ErrorHandlerConfig：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.ObjectProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.ResourceProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.ServerProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.reactive.error.ErrorAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.reactive.error.ErrorWebExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.codec.ServerCodecConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.result.view.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 覆盖默认的异常处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;ServerProperties.class, ResourceProperties.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorHandlerConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerProperties serverProperties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext applicationContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ErrorHandlerConfig</span><span class="params">(ServerProperties serverProperties,</span></span><br><span class="line"><span class="params">                                     ResourceProperties resourceProperties,</span></span><br><span class="line"><span class="params">                                     ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,</span></span><br><span class="line"><span class="params">                                        ServerCodecConfigurer serverCodecConfigurer,</span></span><br><span class="line"><span class="params">                                     ApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serverProperties = serverProperties;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">        <span class="built_in">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">        <span class="built_in">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);</span><br><span class="line">        <span class="built_in">this</span>.serverCodecConfigurer = serverCodecConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line">    <span class="keyword">public</span> ErrorWebExceptionHandler <span class="title function_">errorWebExceptionHandler</span><span class="params">(ErrorAttributes errorAttributes)</span> &#123;</span><br><span class="line">        <span class="type">JsonExceptionHandler</span> <span class="variable">exceptionHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonExceptionHandler</span>(</span><br><span class="line">                errorAttributes,</span><br><span class="line">                <span class="built_in">this</span>.resourceProperties,</span><br><span class="line">                <span class="built_in">this</span>.serverProperties.getError(),</span><br><span class="line">                <span class="built_in">this</span>.applicationContext);</span><br><span class="line">        exceptionHandler.setViewResolvers(<span class="built_in">this</span>.viewResolvers);</span><br><span class="line">        exceptionHandler.setMessageWriters(<span class="built_in">this</span>.serverCodecConfigurer.getWriters());</span><br><span class="line">        exceptionHandler.setMessageReaders(<span class="built_in">this</span>.serverCodecConfigurer.getReaders());</span><br><span class="line">        <span class="keyword">return</span> exceptionHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JsonExceptionHandler：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.ErrorProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.ResourceProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.reactive.error.DefaultErrorWebExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.reactive.error.ErrorAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;异常时用JSON代替HTML异常信息&lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonExceptionHandler</span> <span class="keyword">extends</span> <span class="title class_">DefaultErrorWebExceptionHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonExceptionHandler</span><span class="params">(ErrorAttributes errorAttributes, ResourceProperties resourceProperties,</span></span><br><span class="line"><span class="params">                                ErrorProperties errorProperties, ApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorAttributes, resourceProperties, errorProperties, applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取异常属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title function_">getErrorAttributes</span><span class="params">(ServerRequest request, <span class="type">boolean</span> includeStackTrace)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="number">20005</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;网关失败&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;data&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定响应处理方法为JSON处理的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorAttributes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">getRoutingFunction</span><span class="params">(ErrorAttributes errorAttributes)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions.route(RequestPredicates.all(), <span class="built_in">this</span>::renderErrorResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据code获取对应的HttpStatus</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorAttributes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> HttpStatus <span class="title function_">getHttpStatus</span><span class="params">(Map&lt;String, Object&gt; errorAttributes)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> HttpStatus.OK;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、权限管理"><a href="#三、权限管理" class="headerlink" title="三、权限管理"></a>三、权限管理</h2><p>需求分析：</p><p><img src="https://i.loli.net/2020/12/03/ahSQRvFfMLVtrEW.png"></p><p>表和表之间的关系：</p><p><img src="https://i.loli.net/2020/12/03/F6ynDGvkxtWBif4.png"></p><h3 id="1、整合代码（无需敲）"><a href="#1、整合代码（无需敲）" class="headerlink" title="1、整合代码（无需敲）"></a>1、整合代码（无需敲）</h3><p><strong>1、引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、复制权限管理接口代码</strong></p><p>cv 操作，导包</p><p><strong>3、复制spring-security代码</strong></p><p>cv操作，导包</p><blockquote><p>保留老师代码，以后开发再次cv操作使用</p></blockquote><h3 id="2、接口开发"><a href="#2、接口开发" class="headerlink" title="2、接口开发"></a>2、接口开发</h3><p><strong>1、查询所有菜单接口</strong></p><p>弃用以前的方法（封装实体类，遍历组装），使用<strong>递归实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历查询所有菜单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Permission <span class="title function_">guliQueryAllMenuGuli</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询所有菜单</span></span><br><span class="line">        QueryWrapper&lt;Permission&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        List&lt;Permission&gt; list = baseMapper.selectList(wrapper);</span><br><span class="line">        <span class="comment">//2.进行封装</span></span><br><span class="line">        <span class="type">Permission</span> <span class="variable">result</span> <span class="operator">=</span> buildPermission(list);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Permission <span class="title function_">buildPermission</span><span class="params">(List&lt;Permission&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//创建list集合用于数据最后封装</span></span><br><span class="line">       <span class="type">Permission</span> <span class="variable">finalNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permission</span>();</span><br><span class="line">        <span class="comment">//1.遍历得到顶层菜单，设置level为1</span></span><br><span class="line">        <span class="keyword">for</span> (Permission permissionNode : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (permissionNode.getPid().equals(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">                permissionNode.setLevel(<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//根据顶层菜单向下查询</span></span><br><span class="line">                finalNode = guliSelectChildren(permissionNode,list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> finalNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归方法 (秒啊~)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permissionNode 当前节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 所有节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Permission <span class="title function_">guliSelectChildren</span><span class="params">(Permission permissionNode, List&lt;Permission&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//1.向一级菜单放二层菜单</span></span><br><span class="line">        permissionNode.setChildren(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="comment">//2.遍历所有进行比较</span></span><br><span class="line">        <span class="keyword">for</span> (Permission permission : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (permissionNode.getId().equals(permission.getPid())) &#123;</span><br><span class="line">                <span class="comment">//进行封装</span></span><br><span class="line">                permission.setLevel(permissionNode.getLevel() + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//查询到的菜单放到上一级目录</span></span><br><span class="line">                permissionNode.getChildren().add(guliSelectChildren(permission,list));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> permissionNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、递归删除菜单</strong></p><p>核心就是递归查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归删除菜单 -&gt; 关键完成递归查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">guliRemoveChildByIdGuli</span><span class="params">(String id)</span> &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; idList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    idList.add(id);</span><br><span class="line"></span><br><span class="line">    MySelectChildListById(id,idList);</span><br><span class="line"></span><br><span class="line">    baseMapper.deleteBatchIds(idList);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">MySelectChildListById</span><span class="params">(String id, ArrayList&lt;String&gt; idList)</span> &#123;</span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;Permission&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;pId&quot;</span>,id);</span><br><span class="line">    wrapper.select(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;Permission&gt; childList = baseMapper.selectList(wrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取出childList加到idList并封装</span></span><br><span class="line">    childList.forEach(item-&gt; &#123;</span><br><span class="line">        idList.add(item.getId());</span><br><span class="line">        MySelectChildListById(item.getId(),idList);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、授予权限</strong></p><p>较为简单，节省篇幅</p>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己搭建ssr代理</title>
      <link href="/article/25bd3e2a.html"/>
      <url>/article/25bd3e2a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前几天因为网络赚钱上头购买的国外vps还闲置着，还有那些YouTube上什么小说，视频，成人站广告引流赚钱看看就行，不能说绝对是被割韭菜，一部分人纯碎是凭借视频的播放量加上传授所谓的内购项目来牟利，想一想，如果你发现了一个被动赚钱的项目，你会闷声发大财还是公之于众，再加上我国网络监管的力度，还是把心思放在正道上为妙！ <img src="https://i.loli.net/2020/12/03/1SLFatPoX7mv64M.jpg" alt="img" style="zoom: 33%;" />        ，记录一篇使用<strong>国外vps</strong>“科学上网”的方法</p></blockquote><span id="more"></span><h2 id="一、一些我也分不清的概念"><a href="#一、一些我也分不清的概念" class="headerlink" title="一、一些我也分不清的概念"></a>一、一些我也分不清的概念</h2><h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN:"></a>VPN:</h3><p>VPN可谓是经常说了，平时自己折腾折腾的也知道大概可以用来科学上网，要是问我什么是VPN，大概就是知道中文虚拟专用网络（Virtual Private Network），也就说不出个所以然了（计算机网络学过一点，搞忘了），网上扒一段作用</p><blockquote><p>“vpn作用：提供安全可靠的通信渠道，一般而言企业使用较多。延伸作用：科学上网。说明：VPN的出现并不是为了“科学上网”，二是在公网上建立加密的通信渠道。例如，公司员工出差或者在寝室，想要登录公司内网邮箱怎么办？这时VPN就派上用场了，可以通过第三方连接工具进行远程连接，比如思科就有相应的工具。”</p></blockquote><h3 id="VPS，虚拟主机，云服务器，服务器"><a href="#VPS，虚拟主机，云服务器，服务器" class="headerlink" title="VPS，虚拟主机，云服务器，服务器"></a>VPS，虚拟主机，云服务器，服务器</h3><p>这些概念还是可以区分下，</p><p>服务器：就是看得见摸得着的服务器，可以理解性能更佳的主机，等以后或许可以搞一台放家里，emmmmm</p><p>云服务器（Elastic Compute Service 简称ESC）：接触到是疫情期间阿里云的白嫖活动，开启了新世界的大门啊哈哈，目前我就主要使用腾讯云推出的腾讯云学生服务器，一年120还是很划算（辣鸡腾讯客服忽悠我买了三年），用途就可以自己部署部署项目，建小型站点什么的</p><p>虚拟主机：当时因为分不清云服务器与虚拟主机，看便宜就买了一台，虽然是香港的不需要备案，但便宜的太离谱，一年好像40多，访问啥的贼慢，已经弃置，虚拟主机就是弱化版的云服务器，也可以进行建站，但性能不如云服务器，而且没有操作系统，自然不能安装java环境啥的</p><p>VPS:就是把服务器虚拟化成一个一个，没部分都有独立的ip，操作系统，之前我都不知道有这玩意，买了一台发现性能比腾讯云的学生稍好，多一个核，价格又差不多（就离谱），推荐网站 <a href="https://pacificrack.com/">https://pacificrack.com/</a> ，有各种价位的套餐，可以使用支付宝支付</p><h3 id="SSR-SS"><a href="#SSR-SS" class="headerlink" title="SSR,SS"></a>SSR,SS</h3><p>一样是知道名字，但细说说不出个所以然，扒一段解释继续</p><blockquote><p>SS全称shadowsocks，一开始为个人独立开发并用作“科学上网”，后被大家所熟知和广泛使用。再后来，据说作者被请去“喝茶”，停止了该项目。</p></blockquote><blockquote><p>SSR全称shadowsocks-R。SSR作者声称SS不够隐匿，容易被防火墙检测到，SSR在改进了混淆和协议，更难被防火墙检测到。简单地说，SSR是SS的改进版。</p></blockquote><p>底层原理就不去探究了，步入正题，开始搭建自己的SSR代理！</p><p>ps : 以上各种观点均个人理解，可能漏洞百出，勿喷<img src="https://i.loli.net/2020/12/03/HYzmwS8DZjOaWJu.jpg" alt="img" style="zoom:50%;" /></p><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><p>其实网上一搜找个教程照着做就行，还是自己写写，记录记录踩到的坑啥的</p><h3 id="1、拥有一台国外VPS"><a href="#1、拥有一台国外VPS" class="headerlink" title="1、拥有一台国外VPS"></a>1、拥有一台国外VPS</h3><p>买 就完事了，性能差不多就行应该，应该吧 <a href="%5Bhttps://pacificrack.com/%5D(https://pacificrack.com/)">推荐网站</a></p><h3 id="2、连接到终端进行操作"><a href="#2、连接到终端进行操作" class="headerlink" title="2、连接到终端进行操作"></a>2、连接到终端进行操作</h3><p>连接我用的xshell，当然各种工具都行，默认这些工具读者都会了，回头在b站发一个从零开始教程</p><p><strong>移动到你选择的目录，一键安装，运行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/CecilWu/SSR-Chinese/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/03/N25FYZmcOMQrIJL.png" alt="image-20201203221555870"></p><p><strong>相信各位已经看出，现在只需要配置就可以了</strong></p><p>安装网上的方法，加密协议选10，输入自己的密码，一路默认回车，有Y输入y</p><p>（安装的东西还是挺多感觉）</p><p><img src="https://i.loli.net/2020/12/03/Evl8CdHXsKTIe5P.png" alt="image-20201203225800326"></p><p>安装中… …</p><p><img src="https://i.loli.net/2020/12/04/nucqHyvDOw47xGj.png" alt="image-20201204002348669"></p><p>这样就安装完成</p><h3 id="3、安装Shadowsocks"><a href="#3、安装Shadowsocks" class="headerlink" title="3、安装Shadowsocks"></a>3、安装Shadowsocks</h3><p>（得下这个蓝飞机，我电脑上的红飞机不得行不知道为什么）</p><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.1.7.1/Shadowsocks-4.1.7.1.zip">下载地址</a></p><p>打开，将配置修改为自己的ssr配置信息</p><p><img src="https://i.loli.net/2020/12/04/iAqg6cPfjVZ59Mn.png" alt="image-20201204002536886"></p><p>即可开始“科学上网”</p><p><img src="https://i.loli.net/2020/12/04/d4jPGJF1MxzAbIp.png" alt="image-20201204002611903"></p><h2 id="三、效果测试"><a href="#三、效果测试" class="headerlink" title="三、效果测试"></a>三、效果测试</h2><p><img src="https://i.loli.net/2020/12/04/pyXHcaBg5qnfVZ3.png" alt="image-20201204002745794"></p><blockquote><p>速度自然是没有每月15的机场快，看视频上很难替代，但谷歌搜索，推特等使用还行，提高vps性能可以加快速度</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day16</title>
      <link href="/article/2bedb391.html"/>
      <url>/article/2bedb391.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>统计分析模块</p><p>定时任务、ECharts</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/12/01/6w3dukNq4JVb8rE.png" alt="image-20201201103531438"></p><h2 id="一、课程详情界面立即观看和立即购买完善"><a href="#一、课程详情界面立即观看和立即购买完善" class="headerlink" title="一、课程详情界面立即观看和立即购买完善"></a>一、课程详情界面立即观看和立即购买完善</h2><p>小细节：<strong>对于参数带了requet的请求，不要点击再让浏览器发送请求去判断返回数据是否正确</strong></p><p>如这个请求返回isBuy为true</p><p><img src="https://i.loli.net/2020/12/01/o1us5SNywPe7Xqx.png" alt="image-20201201123322641"></p><p>但点击后</p><p><img src="https://i.loli.net/2020/12/01/vR95TPSlGYnAXCJ.png" alt="image-20201201123352948"></p><p><img src="https://i.loli.net/2020/12/01/bEqNi92HTlyIMtU.png" alt="image-20201201124332720"></p><p>同时触发远程调用熔断器，以后注意这种小错误</p><h2 id="二、后台-统计模块"><a href="#二、后台-统计模块" class="headerlink" title="二、后台-统计模块"></a>二、后台-统计模块</h2><h3 id="1、添加定时任务"><a href="#1、添加定时任务" class="headerlink" title="1、添加定时任务"></a>1、添加定时任务</h3><p>生活中：闹钟</p><p><strong>需求：每天凌晨一点统计前一天的数据添加到数据库</strong></p><p>1、启动类添加注解 @EnableScheduling</p><p>2、创建定时任务类，在类里边使用表达式（&#x3D;&gt; cron表达式）设置什么时候去执行</p><p><strong>cron表达式 （七子表达式）</strong>springboot里只支持六位，默认当前年</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StatisticsDailyService dailyService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     * 每天七点到二十三点每五秒执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;*********++++++++++++*****执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每天凌晨1点执行定时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 1 * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取上一天的日期</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">day</span> <span class="operator">=</span> DateUtil.formatDate(DateUtil.addDays(<span class="keyword">new</span> <span class="title class_">Date</span>(), -<span class="number">1</span>));</span><br><span class="line">        dailyService.createStatisticsByDay(day);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、在线生成cron表法式  <a href="http://cron.qqe2.com/">http://cron.qqe2.com/</a></p><h3 id="2、ECharts"><a href="#2、ECharts" class="headerlink" title="2、ECharts"></a>2、ECharts</h3><blockquote><p>简介：ECharts是百度的一个项目，后来百度把Echart捐给apache，用于图表展示，提供了常规的<a href="https://echarts.baidu.com/option.html#series-line">折线图</a>、<a href="https://echarts.baidu.com/option.html#series-line">柱状图</a>、<a href="https://echarts.baidu.com/option.html#series-scatter">散点图</a>、<a href="https://echarts.baidu.com/option.html#series-pie">饼图</a>、<a href="https://echarts.baidu.com/option.html#series-candlestick">K线图</a>，用于统计的<a href="https://echarts.baidu.com/option.html#series-boxplot">盒形图</a>，用于地理数据可视化的<a href="https://echarts.baidu.com/option.html#series-map">地图</a>、<a href="https://echarts.baidu.com/option.html#series-heatmap">热力图</a>、<a href="https://echarts.baidu.com/option.html#series-lines">线图</a>，用于关系数据可视化的<a href="https://echarts.baidu.com/option.html#series-graph">关系图</a>、<a href="https://echarts.baidu.com/option.html#series-treemap">treemap</a>、<a href="https://echarts.baidu.com/option.html#series-sunburst">旭日图</a>，多维数据可视化的<a href="https://echarts.baidu.com/option.html#series-parallel">平行坐标</a>，还有用于 BI 的<a href="https://echarts.baidu.com/option.html#series-funnel">漏斗图</a>，<a href="https://echarts.baidu.com/option.html#series-gauge">仪表盘</a>，并且支持图与图之间的混搭。</p><p>官网：<a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a></p></blockquote><p>快速使用</p><p>1、安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">--save</span> echarts@<span class="number">4.1</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>2、前端整合</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--表单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;searchObj.type&quot;</span> <span class="attr">clearable</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;学员登录数统计&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login_num&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;学员注册数统计&quot;</span> <span class="attr">value</span>=<span class="string">&quot;register_num&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;课程播放数统计&quot;</span> <span class="attr">value</span>=<span class="string">&quot;video_view_num&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;每日课程数统计&quot;</span> <span class="attr">value</span>=<span class="string">&quot;course_num&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;searchObj.begin&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;选择开始日期&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;searchObj.end&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;选择截止日期&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:disabled</span>=<span class="string">&quot;btnDisabled&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;showChart()&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chart-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chart&quot;</span> <span class="attr">class</span>=<span class="string">&quot;chart&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:500px;width:100%&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> staApi <span class="keyword">from</span> <span class="string">&#x27;@/api/sta&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">searchObj</span>:&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">btnDisabled</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">xData</span>:[],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">yData</span>:[]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">showChart</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            staApi.<span class="title function_">getStaData</span>(<span class="variable language_">this</span>.<span class="property">searchObj</span>)</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">xData</span> = response.<span class="property">data</span>.<span class="property">date</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">yData</span> = response.<span class="property">data</span>.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">setChart</span>()</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setChart</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;chart&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//x轴是类目轴（离散数据）,必须通过data设置类目数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">xData</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//y轴是数据轴（连续数据）</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">yAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//系列列表。每个系列通过 type 决定自己的图表类型</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">series</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//系列中的数据内容数组</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">yData</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//折线图</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">text</span>: <span class="string">&quot;数据统计&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tooltip</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataZoom</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">show</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">height</span>: <span class="number">30</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">xAxisIndex</span>: [</span></span><br><span class="line"><span class="language-javascript">                    <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">bottom</span>: <span class="number">30</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">start</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">end</span>: <span class="number">80</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">handleIcon</span>: <span class="string">&#x27;path://M306.1,413c0,2.2-1.8,4-4,4h-59.8c-2.2,0-4-1.8-4-4V200.8c0-2.2,1.8-4,4-4h59.8c2.2,0,4,1.8,4,4V413z&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">handleSize</span>: <span class="string">&#x27;110%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">handleStyle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">color</span>: <span class="string">&#x27;#d3dee5&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">textStyle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">color</span>: <span class="string">&#x27;#fff&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">borderColor</span>: <span class="string">&#x27;#90979c&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;inside&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">show</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">height</span>: <span class="number">15</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">start</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">end</span>: <span class="number">35</span></span></span><br><span class="line"><span class="language-javascript">                &#125;]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            myChart.<span class="title function_">setOption</span>(option);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考配置手册：<a href="https://echarts.baidu.com/option.html#title">https://echarts.baidu.com/option.html#title</a></p>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day15</title>
      <link href="/article/b2e4e22b.html"/>
      <url>/article/b2e4e22b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>微信支付</p></blockquote> <span id="more"></span><p><img src="https://i.loli.net/2020/11/23/cq6hOFN1XnIkL8l.png" alt="image-20201123153114343"></p><h2 id="一、根据文档独立开发评论功能"><a href="#一、根据文档独立开发评论功能" class="headerlink" title="一、根据文档独立开发评论功能"></a>一、根据文档独立开发评论功能</h2><h3 id="1、代码生成器生成代码"><a href="#1、代码生成器生成代码" class="headerlink" title="1、代码生成器生成代码"></a>1、代码生成器生成代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建代码生成器</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="comment">/*String projectPath = System.getProperty(&quot;user.dir&quot;);*/</span></span><br><span class="line">        <span class="comment">//推荐使用绝对路径</span></span><br><span class="line">        gc.setOutputDir(<span class="string">&quot;G:\\idea_project\\guli\\service\\service_edu&quot;</span> + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;liaotao&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>); <span class="comment">//生成后是否打开资源管理器</span></span><br><span class="line">        gc.setFileOverride(<span class="literal">false</span>); <span class="comment">//重新生成时文件是否覆盖</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);<span class="comment">//去掉Service接口的首字母I</span></span><br><span class="line">        gc.setIdType(IdType.ID_WORKER); <span class="comment">//主键策略</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);<span class="comment">//定义生成的实体类中日期类型</span></span><br><span class="line">        gc.setSwagger2(<span class="literal">true</span>);<span class="comment">//开启Swagger2模式</span></span><br><span class="line"></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/guli?serverTimezone=Asia/Shanghai&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;eduservice&quot;</span>); <span class="comment">//模块名</span></span><br><span class="line">        pc.setParent(<span class="string">&quot;com.cyfwlp&quot;</span>);</span><br><span class="line">        <span class="comment">//生成 com.cyfwlp.eduservice</span></span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        <span class="comment">//加表的名称</span></span><br><span class="line">        strategy.setInclude(<span class="string">&quot;edu_comment&quot;</span>);</span><br><span class="line"></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表映射到实体的命名策略</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>); <span class="comment">//生成实体时去掉表前缀</span></span><br><span class="line"></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表字段映射到实体的命名策略</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>); <span class="comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span></span><br><span class="line"></span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>); <span class="comment">//restful api风格控制器</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>); <span class="comment">//url中驼峰转连字符</span></span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、添加实体类注解，自动填充，逻辑删除"><a href="#2、添加实体类注解，自动填充，逻辑删除" class="headerlink" title="2、添加实体类注解，自动填充，逻辑删除"></a>2、添加实体类注解，自动填充，逻辑删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty(value = &quot;逻辑删除 1（true）已删除， 0（false）未删除&quot;)</span></span><br><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Boolean isDeleted;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date gmtCreate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date gmtModified;</span><br></pre></td></tr></table></figure><p>前面已经配置逻辑删除插件和自动填充</p><h3 id="3、创建分页查询评论、评论接口"><a href="#3、创建分页查询评论、评论接口" class="headerlink" title="3、创建分页查询评论、评论接口"></a>3、创建分页查询评论、评论接口</h3><p>需使用到微服务调用 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;分页查询评论&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;getComment/&#123;current&#125;/&#123;limit&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getComment</span><span class="params">(<span class="meta">@PathVariable</span> Long current, <span class="meta">@PathVariable</span> Long limit)</span> &#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = commentService.getComment(current,limit);</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation(&quot;评论&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/makeComment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">makeComment</span><span class="params">(<span class="meta">@RequestBody</span> EduComment comment, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取用户id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> JwtUtils.getMemberIdByJwtToken(request);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(id)) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error().code(<span class="number">28004</span>).message(<span class="string">&quot;请登录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    comment.setMemberId(id);</span><br><span class="line">    <span class="comment">//2.微服务调用获取用户其他信息</span></span><br><span class="line">    <span class="type">R</span> <span class="variable">result</span> <span class="operator">=</span> ucenterClient.getUserInfo(request);</span><br><span class="line">    Map&lt;String, Object&gt; data = result.getData();</span><br><span class="line">    <span class="type">UcenterMember</span> <span class="variable">ucenterMember</span>  <span class="operator">=</span> (UcenterMember) data.get(<span class="string">&quot;userInfo&quot;</span>);</span><br><span class="line">    comment.setAvatar(ucenterMember.getAvatar());</span><br><span class="line">    comment.setNickname(ucenterMember.getNickname());</span><br><span class="line">    <span class="comment">//3.保存评论信息</span></span><br><span class="line">    commentService.save(comment);</span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、前端整合"><a href="#4、前端整合" class="headerlink" title="4、前端整合"></a>4、前端整合</h3><p>…大概就那种，主要cv操作</p><h2 id="二、微信支付"><a href="#二、微信支付" class="headerlink" title="二、微信支付"></a>二、微信支付</h2><p><a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1">官方文档</a></p><p>准备工作，个人无法申请，使用老师提供</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">weixin:</span></span><br><span class="line">  <span class="attr">pay:</span></span><br><span class="line">    <span class="comment">#关联的公众号appid</span></span><br><span class="line">    <span class="attr">appid:</span> <span class="string">wx74862e0dfcf69954</span></span><br><span class="line">    <span class="comment">#商户号</span></span><br><span class="line">    <span class="attr">partner:</span> <span class="number">1558950191</span></span><br><span class="line">    <span class="comment">#商户key</span></span><br><span class="line">    <span class="attr">partnerkey:</span> <span class="string">T6m9iK73b0kn9g5v426MKfHQH7X8rKwb</span></span><br><span class="line">    <span class="comment">#回调地址</span></span><br><span class="line">    <span class="attr">notifyurl:</span> <span class="string">http://guli.shop/api/order/weixinPay/weixinNotify</span></span><br></pre></td></tr></table></figure><p><strong>1、引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.wxpay<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wxpay-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、生成二维码代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">createNative</span><span class="params">(String orderNo)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.根据订单号查询订单信息</span></span><br><span class="line">        QueryWrapper&lt;Order&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;order_no&quot;</span>,orderNo);</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.getOne(wrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.设置生成二维码需要参数</span></span><br><span class="line">        Map&lt;String,String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;appid&quot;</span>, <span class="string">&quot;wx74862e0dfcf69954&quot;</span>);</span><br><span class="line">        params.put(<span class="string">&quot;mch_id&quot;</span>, <span class="string">&quot;1558950191&quot;</span>);</span><br><span class="line">        params.put(<span class="string">&quot;nonce_str&quot;</span>, WXPayUtil.generateNonceStr());</span><br><span class="line">        params.put(<span class="string">&quot;body&quot;</span>, order.getCourseTitle());</span><br><span class="line">        params.put(<span class="string">&quot;out_trade_no&quot;</span>, orderNo);</span><br><span class="line">        params.put(<span class="string">&quot;total_fee&quot;</span>, order.getTotalFee().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;100&quot;</span>)).longValue()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        params.put(<span class="string">&quot;spbill_create_ip&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        params.put(<span class="string">&quot;notify_url&quot;</span>, <span class="string">&quot;http://guli.shop/api/order/weixinPay/weixinNotify\n&quot;</span>);</span><br><span class="line">        params.put(<span class="string">&quot;trade_type&quot;</span>, <span class="string">&quot;NATIVE&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.httpClient请求，传递xml格式参数</span></span><br><span class="line">        <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpClient</span>(<span class="string">&quot;https://api.mch.weixin.qq.com/pay/unifiedorder&quot;</span>);</span><br><span class="line"></span><br><span class="line">        httpClient.setXmlParam(WXPayUtil.generateSignedXml(params,<span class="string">&quot;T6m9iK73b0kn9g5v426MKfHQH7X8rKwb&quot;</span>));</span><br><span class="line">        httpClient.setHttps(<span class="literal">true</span>); <span class="comment">//开启支持https访问</span></span><br><span class="line"></span><br><span class="line">        httpClient.post();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.得到发送请求返回的结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> httpClient.getContent(); <span class="comment">//返回xml格式</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; result = WXPayUtil.xmlToMap(content);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;out_trade_no&quot;</span>, orderNo);</span><br><span class="line">        map.put(<span class="string">&quot;course_id&quot;</span>, order.getCourseId());</span><br><span class="line">        map.put(<span class="string">&quot;total_fee&quot;</span>, order.getTotalFee());</span><br><span class="line">        map.put(<span class="string">&quot;result_code&quot;</span>, result.get(<span class="string">&quot;result_code&quot;</span>));</span><br><span class="line">        map.put(<span class="string">&quot;code_url&quot;</span>, result.get(<span class="string">&quot;code_url&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GuliException</span>(<span class="number">20001</span>,<span class="string">&quot;生成二维码失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、</strong>查询支付状态代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询订单状态</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">queryPayStatus</span><span class="params">(String orderNo)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1、封装参数</span></span><br><span class="line">        Map&lt;String,String&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        m.put(<span class="string">&quot;appid&quot;</span>, <span class="string">&quot;wx74862e0dfcf69954&quot;</span>);</span><br><span class="line">        m.put(<span class="string">&quot;mch_id&quot;</span>, <span class="string">&quot;1558950191&quot;</span>);</span><br><span class="line">        m.put(<span class="string">&quot;out_trade_no&quot;</span>, orderNo);</span><br><span class="line">        m.put(<span class="string">&quot;nonce_str&quot;</span>, WXPayUtil.generateNonceStr());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、设置请求</span></span><br><span class="line">        <span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpClient</span>(<span class="string">&quot;https://api.mch.weixin.qq.com/pay/orderquery&quot;</span>);</span><br><span class="line">        client.setXmlParam(WXPayUtil.generateSignedXml(m, <span class="string">&quot;T6m9iK73b0kn9g5v426MKfHQH7X8rKwb&quot;</span>));</span><br><span class="line">        client.setHttps(<span class="literal">true</span>);</span><br><span class="line">        client.post();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、返回第三方的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> client.getContent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7、转成Map,返回</span></span><br><span class="line">        <span class="keyword">return</span> WXPayUtil.xmlToMap(xml);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这几天先是博客迁移搞了几天又是比赛玩了两天，进度有点慢，现在应该没什么事情了，冲冲冲</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电商系统源码分享</title>
      <link href="/article/e0cd336a.html"/>
      <url>/article/e0cd336a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>话不多说，一套模仿京东淘宝的电商系统源码，快来带走吧</p></blockquote><span id="more"></span><p><a href="https://www.bilibili.com/video/BV1qD4y1D7Vw">b站链接</a></p><p><a href="https://github.com/liaotao421/xiruisi">github链接</a></p><p><a href="https://lanzous.com/b00tlwh7c">项目源码</a></p><p><strong>项目为大二工程实践完成项目，说是组队开发实际为一人开发，前端使用<a href="https://github.com/ycf001/youpinngou">黑马品优购界面</a> + javaex框架，后端使用ssm框架，使用短信验证，支付宝沙箱支付等功能吗，现在看来代码写的并不是很好，供学习借鉴指正！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day13</title>
      <link href="/article/5b87471e.html"/>
      <url>/article/5b87471e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>微信扫码登录</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/11/18/FVdwictgJeoY4qm.png" alt="image-20201118130243341"></p><h2 id="一、登录前端整合"><a href="#一、登录前端整合" class="headerlink" title="一、登录前端整合"></a>一、登录前端整合</h2><p><img src="https://i.loli.net/2020/11/18/DBVjGa8qrtdisOe.png" alt="image-20201118131003847"></p><h2 id="二、微信扫码登录"><a href="#二、微信扫码登录" class="headerlink" title="二、微信扫码登录"></a>二、微信扫码登录</h2><h3 id="1、OAuth2"><a href="#1、OAuth2" class="headerlink" title="1、OAuth2"></a>1、OAuth2</h3><p>OAuth2是针对特定问题的一种解决方案 OAuth2主要解决两个问题</p><ol><li><p>开放系统间授权 照片拥有者想要在云冲印服务上打印照片，云冲印服务需要访问云存储服务上的资源 <img src="https://i.loli.net/2020/11/18/KYapl3snERfQmbM.jpg" alt="img"></p></li><li><p>分布式访问问题 （单点登录） <img src="https://i.loli.net/2020/11/18/Cwym6JcPhN2FQ7k.png" alt="image-20201118193813408"></p></li></ol><h3 id="2、微信扫码登录"><a href="#2、微信扫码登录" class="headerlink" title="2、微信扫码登录"></a>2、微信扫码登录</h3><p><img src="https://i.loli.net/2020/11/18/BvuMT1zNldRJr8H.png" alt="image-20201118205508930"> <strong>问题：cookie怎么都设置不了</strong> <strong>就离谱</strong> <strong>解决 ： localhost 和 127.0.0.1 在设置cookie domain属性是不一样</strong> 1、申请成为微信开发者 网址：<a href="https://open.weixin.qq.com/">https://open.weixin.qq.com/</a> 添加网站项目，得到相关参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wx:</span></span><br><span class="line">  <span class="attr">open:</span></span><br><span class="line">    <span class="comment"># 微信开放平台 appid</span></span><br><span class="line">    <span class="attr">appid:</span> <span class="string">wxed9954c01bb89b47</span></span><br><span class="line">    <span class="comment"># 微信开放平台 appsecret</span></span><br><span class="line">    <span class="attr">appsecret:</span> <span class="string">a7482517235173ddb4083788de60b90e</span></span><br><span class="line">    <span class="comment"># 微信开放平台 重定向url（guli.shop需要在微信开放平台配置）</span></span><br><span class="line">    <span class="attr">redirecturl:</span> <span class="string">http://guli.shop/api/ucenter/wx/callback</span></span><br></pre></td></tr></table></figure><p>2、显示二维码界面 第三方使用网站应用授权登录前请注意已获取相应网页授权作用域（scope&#x3D;snsapi_login），则可以通过在PC端打开以下链接： <a href="https://open.weixin.qq.com/connect/qrconnect?appid=APPID&amp;redirect%5C_uri=REDIRECT%5C_URI&amp;response%5C_type=code&amp;scope=SCOPE&amp;state=STATE#wechat\_redirect">https://open.weixin.qq.com/connect/qrconnect?appid=APPID&amp;redirect\_uri=REDIRECT\_URI&amp;response\_type=code&amp;scope=SCOPE&amp;state=STATE#wechat\_redirect</a> 若提示“该链接无法访问”，请检查参数是否填写错误，如redirect_uri的域名与审核时填写的授权域名不一致或scope不为snsapi_login。 <strong>参数说明</strong></p><p>参数</p><p>是否必须</p><p>说明</p><p>appid</p><p>是</p><p>应用唯一标识</p><p>redirect_uri</p><p>是</p><p>请使用urlEncode对链接进行处理</p><p>response_type</p><p>是</p><p>填code</p><p>scope</p><p>是</p><p>应用授权作用域，拥有多个作用域用逗号（,）分隔，网页应用目前仅填写snsapi_login</p><p>state</p><p>否</p><p>用于保持请求和回调的状态，授权请求后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验</p><p><strong>返回说明</strong> 用户允许授权后，将会重定向到redirect_uri的网址上，并且带上code和state参数</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redirect_uri?code=CODE&amp;state=STATE</span><br></pre></td></tr></table></figure><p>若用户禁止授权，则重定向后不会带上code参数，仅会带上state参数</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redirect_uri?state=STATE</span><br></pre></td></tr></table></figure><p>在controller里实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;生成微信扫描二维码&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getWxCode</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 微信开放平台授权baseUrl</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">baseUrl</span> <span class="operator">=</span> <span class="string">&quot;https://open.weixin.qq.com/connect/qrconnect&quot;</span> +</span><br><span class="line">        <span class="string">&quot;?appid=%s&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&amp;redirect_uri=%s&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&amp;response_type=code&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&amp;scope=snsapi_login&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&amp;state=%s&quot;</span> +</span><br><span class="line">        <span class="string">&quot;#wechat_redirect&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调地址</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">redirectUrl</span> <span class="operator">=</span> WxConfig.WX_OPEN_REDIRECT_URL; <span class="comment">//获取业务服务器重定向地址</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        redirectUrl = URLEncoder.encode(redirectUrl, <span class="string">&quot;UTF-8&quot;</span>); <span class="comment">//url编码</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GuliException</span>(<span class="number">20001</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止csrf攻击（跨站请求伪造攻击）</span></span><br><span class="line">    <span class="comment">//String state = UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;);//一般情况下会使用一个随机数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">state</span> <span class="operator">=</span> <span class="string">&quot;imhelen&quot;</span>;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 采用redis等进行缓存state 使用sessionId为key 30分钟后过期，可配置</span></span><br><span class="line">    <span class="comment">//键：&quot;wechar-open-state-&quot; + httpServletRequest.getSession().getId()</span></span><br><span class="line">    <span class="comment">//值：satte</span></span><br><span class="line">    <span class="comment">//过期时间：30分钟</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成qrcodeUrl</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">qrcodeUrl</span> <span class="operator">=</span> String.format(</span><br><span class="line">        baseUrl,</span><br><span class="line">        WxConfig.WX_OPEN_APP_ID,</span><br><span class="line">        redirectUrl,</span><br><span class="line">        state);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:&quot;</span> + qrcodeUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、用户扫码后得到用户信息，保存数据库</p><blockquote><p>使用技术httpclient 模拟浏览器发送请求，接收返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code 类似于手机的验证码，随机唯一，每次不一样</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> state 原样传递</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;微信登录回调方法&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/callback&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">callBack</span><span class="params">(String code,String state)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.根据code 请求微信api 得到access_token 和openid</span></span><br><span class="line">        <span class="comment">//向认证服务器发送请求换取access_token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">baseAccessTokenUrl</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token&quot;</span> +</span><br><span class="line">                <span class="string">&quot;?appid=%s&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&amp;secret=%s&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&amp;code=%s&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&amp;grant_type=authorization_code&quot;</span>;</span><br><span class="line">        <span class="comment">//拼接参数</span></span><br><span class="line">        baseAccessTokenUrl = String.format(baseAccessTokenUrl,</span><br><span class="line">                WxConfig.WX_OPEN_APP_ID,</span><br><span class="line">                WxConfig.WX_OPEN_APP_SECRET,</span><br><span class="line">                code);</span><br><span class="line">        <span class="comment">//请求这个拼接好的地址，得到返回的值</span></span><br><span class="line">        <span class="comment">// ? 如何在程序中请求地址 =》 httpclient</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpClientUtils.get(baseAccessTokenUrl);</span><br><span class="line">        <span class="comment">//进行json解析</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> gson.fromJson(result, HashMap.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">access_token</span> <span class="operator">=</span> (String) map.get(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">openid</span> <span class="operator">=</span> (String) map.get(<span class="string">&quot;openid&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否需要注册</span></span><br><span class="line">        <span class="type">UcenterMember</span> <span class="variable">member</span> <span class="operator">=</span> memberService.getOpenIdMember(openid);</span><br><span class="line">        <span class="keyword">if</span> (member == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//再请求微信提供的地址获取扫码人的信息</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//访问微信的资源服务器，获取用户信息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">baseUserInfoUrl</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/sns/userinfo&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;?access_token=%s&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&amp;openid=%s&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userInfoUrl</span> <span class="operator">=</span> String.format(baseUserInfoUrl, access_token, openid);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">resultUserInfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            resultUserInfo = HttpClientUtils.get(userInfoUrl);</span><br><span class="line">            <span class="comment">//解析json</span></span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">mapUserInfo</span> <span class="operator">=</span> gson.fromJson(resultUserInfo, HashMap.class);</span><br><span class="line">            <span class="type">String</span> <span class="variable">nickname</span> <span class="operator">=</span> (String)mapUserInfo.get(<span class="string">&quot;nickname&quot;</span>); <span class="comment">//昵称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">headimgurl</span> <span class="operator">=</span> (String)mapUserInfo.get(<span class="string">&quot;headimgurl&quot;</span>); <span class="comment">//头像</span></span><br><span class="line">            <span class="comment">//自动注册</span></span><br><span class="line">            member = <span class="keyword">new</span> <span class="title class_">UcenterMember</span>();</span><br><span class="line">            member.setOpenid(openid);</span><br><span class="line">            member.setAvatar(headimgurl);</span><br><span class="line">            member.setNickname(nickname);</span><br><span class="line">            memberService.save(member);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cookie存放用户信息 （X）</span></span><br><span class="line">        <span class="comment">//问题：cookie无法实现跨域</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据微信信息使用jwt生成token，把token字符串传递到首页面</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtils.getJwtToken(member.getId(), member.getNickname());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:http://localhost:3000?token=&quot;</span> + token;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GuliException</span>(<span class="number">20001</span>,e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、QQ扫码登录"><a href="#三、QQ扫码登录" class="headerlink" title="三、QQ扫码登录"></a>三、QQ扫码登录</h2><p>审核成为腾讯开发者，回头再添加这个功能 过了几天，这审核也太慢了，回头再说吧 过了几天，审核给我拒绝了，算了，不搞这个功能了</p>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day14</title>
      <link href="/article/c5e3d2bd.html"/>
      <url>/article/c5e3d2bd.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>阿里云视频播放器整合</p><p>项目开发</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/11/19/PLvHat8ukRwSZNo.png" alt="image-20201119152200748"></p><h2 id="一、名师-列表-详情"><a href="#一、名师-列表-详情" class="headerlink" title="一、名师 列表 详情"></a>一、名师 列表 详情</h2><p>正常的开发流程 后端接口 - 前端调用 - 数据展示</p><h2 id="二、课程-列表-详情"><a href="#二、课程-列表-详情" class="headerlink" title="二、课程 列表 详情"></a>二、课程 列表 详情</h2><p>正常的开发流程 后端接口 - 前端调用 - 数据展示</p><h2 id="三、阿里云视频播放器"><a href="#三、阿里云视频播放器" class="headerlink" title="三、阿里云视频播放器"></a>三、阿里云视频播放器</h2><p>参考文档：<a href="https://help.aliyun.com/document/_detail/51991.html">https://help.aliyun.com/document\_detail/51991.html</a> 参考 【<strong>播放器简单使用说明】</strong>一节 引入脚本文件和css文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://g.alicdn.com/de/prismplayer/2.8.1/skins/default/aliplayer-min.css&quot; /&gt;</span><br><span class="line">&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://g.alicdn.com/de/prismplayer/2.8.1/aliplayer-min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>初始化视频播放器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div  class=&quot;prism-player&quot; id=&quot;J_prismPlayer&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var player = new Aliplayer(&#123;</span><br><span class="line">            id: &#x27;J_prismPlayer&#x27;,</span><br><span class="line">            width: &#x27;100%&#x27;,</span><br><span class="line">            autoplay: false,</span><br><span class="line">            cover: &#x27;http://liveroom-img.oss-cn-qingdao.aliyuncs.com/logo.png&#x27;,  </span><br><span class="line">            //播放配置</span><br><span class="line">        &#125;,function(player)&#123;</span><br><span class="line">            console.log(&#x27;播放器创建好了。&#x27;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>播放地址播放</strong>： 在Aliplayer的配置参数中添加如下属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//播放方式一：支持播放地址播放,此播放优先级最高，此种方式不能播放加密视频</span></span><br><span class="line">source : <span class="string">&#x27;你的视频播放地址&#x27;</span>,</span><br></pre></td></tr></table></figure><p>启动浏览器运行，测试视频的播放 <strong>播放凭证播放：</strong> 阿里云播放器支持通过播放凭证自动换取播放地址进行播放，接入方式更为简单，且安全性更高。播放凭证默认时效为100秒（最大为3000秒），只能用于获取指定视频的播放地址，不能混用或重复使用。如果凭证过期则无法获取播放地址，需要重新获取凭证。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encryptType</span>:<span class="string">&#x27;1&#x27;</span>,<span class="comment">//如果播放加密视频，则需设置encryptType=1，非加密视频无需设置此项</span></span><br><span class="line">vid : <span class="string">&#x27;视频id&#x27;</span>,</span><br><span class="line">playauth : <span class="string">&#x27;视频授权码&#x27;</span>,</span><br></pre></td></tr></table></figure><p>注意：播放凭证有过期时间，默认值：100秒 。取值范围：<strong>100~3000</strong>。 设置播放凭证的有效期 在获取播放凭证的测试用例中添加如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setAuthInfoTimeout(<span class="number">200L</span>);</span><br></pre></td></tr></table></figure><p>在线配置参考：<a href="https://player.alicdn.com/aliplayer/setting/setting.html?spm=a2c4g.11186623.2.16.242c6782Kdc4Za">https://player.alicdn.com/aliplayer/setting/setting.html</a></p><blockquote><p>发现播放凭证播放会报错</p></blockquote><p><img src="https://i.loli.net/2020/11/23/G4TNAPDLIU5yYrQ.png" alt="image-20201123123336462"> 查询官方文档得知可能是转码加密的问题 解决： 上传时不使用加密模板，只是在HTML里没有显示的写上播放地址，而是使用id和auth获取，防止盗链</p><blockquote><p>created里赋给data的值在mounted里取不到</p></blockquote><p>watch函数 解决这个问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> vod <span class="keyword">from</span> <span class="string">&#x27;@/api/vod&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">layout</span>: <span class="string">&#x27;video&#x27;</span>,<span class="comment">//应用video布局</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">videoId</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">auth</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">flag</span>:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">videoId</span> = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">vid</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAuth</span>()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line">        <span class="title function_">auth</span>(<span class="params">newName, oldName</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;auth= &#x27;</span> + <span class="variable language_">this</span>.<span class="property">auth</span>);</span><br><span class="line">            <span class="keyword">var</span> player = <span class="keyword">new</span> <span class="title class_">Aliplayer</span>(&#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;player-con&quot;</span>,</span><br><span class="line">            <span class="string">&quot;vid&quot;</span>: <span class="variable language_">this</span>.<span class="property">videoId</span>,</span><br><span class="line">            <span class="string">&quot;playauth&quot;</span>: <span class="variable language_">this</span>.<span class="property">auth</span>,</span><br><span class="line">            <span class="string">&quot;qualitySort&quot;</span>: <span class="string">&quot;asc&quot;</span>,</span><br><span class="line">            <span class="string">&quot;format&quot;</span>: <span class="string">&quot;mp4&quot;</span>,</span><br><span class="line">            <span class="string">&quot;mediaType&quot;</span>: <span class="string">&quot;video&quot;</span>,</span><br><span class="line">            <span class="string">&quot;width&quot;</span>: <span class="string">&quot;100%&quot;</span>,</span><br><span class="line">            <span class="string">&quot;height&quot;</span>: <span class="string">&quot;500px&quot;</span>,</span><br><span class="line">            <span class="string">&quot;autoplay&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;isLive&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;rePlay&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;playsinline&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;preload&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;controlBarVisibility&quot;</span>: <span class="string">&quot;hover&quot;</span>,</span><br><span class="line">            <span class="string">&quot;useH5Prism&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;, <span class="keyword">function</span> (<span class="params">player</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The player is created&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            );  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">getAuth</span>(<span class="params"></span>) &#123;</span><br><span class="line">            vod.<span class="title function_">getPlayAuth</span>(<span class="variable language_">this</span>.<span class="property">videoId</span>)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">auth</span> = response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">auth</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span></span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day12</title>
      <link href="/article/2c807788.html"/>
      <url>/article/2c807788.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>单点登录</p><p>阿里云短信服务</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/11/16/vIjk9S5CxDr8eiO.png" alt="image-20201116191037824"></p><h2 id="一、用户登录业务介绍"><a href="#一、用户登录业务介绍" class="headerlink" title="一、用户登录业务介绍"></a>一、用户登录业务介绍</h2><h3 id="1、单一服务器模式"><a href="#1、单一服务器模式" class="headerlink" title="1、单一服务器模式"></a>1、单一服务器模式</h3><p><img src="https://i.loli.net/2020/11/16/2RPbAjoz9sNDFvi.gif" alt="img"> 前面web项目的开发使用这种模式，将用户登录信息存储在session，登录成功将用户信息存在session，根据session里的用户信息判断用户是否登录</p><h3 id="2、集群部署"><a href="#2、集群部署" class="headerlink" title="2、集群部署"></a>2、集群部署</h3><p><img src="https://i.loli.net/2020/11/16/jamTbrM2I6ovtLO.png" alt="image-20201116192140898"> 此时显然不能使用session <strong>单点登录（single sign on，SSO）</strong> 单点登录常见三种方式</p><ol><li>session广播机制 – session复制</li><li>cookie + redis实现 <img src="https://i.loli.net/2020/11/16/Oz9AFpZXfIoK41s.png" alt="image-20201116194236390"></li><li>token实现 <strong>项目选用token实现</strong></li></ol><p>token是什么？ 按照一定的规则生成的字符串，生成字符串里包含用户信息 <img src="https://i.loli.net/2020/11/16/gHwDkI2oPBeR3Sr.gif" alt="img"> <img src="https://i.loli.net/2020/11/16/9FpoK1LyPfOV5vD.png" alt="image-20201116195202885"></p><h2 id="二、JWT"><a href="#二、JWT" class="headerlink" title="二、JWT"></a>二、JWT</h2><h3 id="1、什么是jwt"><a href="#1、什么是jwt" class="headerlink" title="1、什么是jwt"></a>1、什么是jwt</h3><p><img src="https://i.loli.net/2020/11/16/NmGp37zYvAQ1hW9.png" alt="image-20201116200013151"> 典型的，一个JWT看起来如下图： <img src="https://i.loli.net/2020/11/16/yu5BMwNLYFKXi6C.png" alt="img"> 该对象为一个很长的字符串，字符之间通过”.”分隔符分为三个子串。 每一个子串表示了一个功能块，总共有以下三个部分：JWT头、有效载荷和签名 <strong>JWT头</strong> JWT头部分是一个描述JWT元数据的JSON对象，通常如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，alg属性表示签名使用的算法，默认为HMAC SHA256（写为HS256）；typ属性表示令牌的类型，JWT令牌统一写为JWT。最后，使用Base64 URL算法将上述JSON对象转换为字符串保存。 <strong>有效载荷</strong> 有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。 JWT指定七个默认字段供选择。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss：发行人</span><br><span class="line">exp：到期时间</span><br><span class="line">sub：主题</span><br><span class="line">aud：用户</span><br><span class="line">nbf：在此之前不可用</span><br><span class="line">iat：发布时间</span><br><span class="line">jti：JWT ID用于标识该JWT</span><br></pre></td></tr></table></figure><p>除以上默认字段外，我们还可以自定义私有字段，如下例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;Helen&quot;,</span><br><span class="line">  &quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。 JSON对象也使用Base64 URL算法转换为字符串保存。 <strong>签名哈希</strong> 签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。 首先，需要指定一个密码（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用标头中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(claims), secret)</span><br></pre></td></tr></table></figure><p>在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用”.”分隔，就构成整个JWT对象。 <strong>Base64URL算法</strong> 如前所述，JWT头和有效载荷序列化的算法都用到了Base64URL。该算法和常见Base64算法类似，稍有差别。 作为令牌的JWT可以放在URL中（例如api.example&#x2F;?token&#x3D;xxx）。 Base64中用的三个字符是”+”，”&#x2F;“和”&#x3D;”，由于在URL中有特殊含义，因此Base64URL中对他们做了替换：”&#x3D;”去掉，”+”用”-“替换，”&#x2F;“用”_“替换，这就是Base64URL算法。</p><h3 id="2、项目中使用jwt"><a href="#2、项目中使用jwt" class="headerlink" title="2、项目中使用jwt"></a>2、项目中使用jwt</h3><p>1、引入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- JWT--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2、复制工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.servicebase.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jws;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> helen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/10/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">EXPIRE</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>; <span class="comment">//设置token过期时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_SECRET</span> <span class="operator">=</span> <span class="string">&quot;ukc8BDbRigUDaY6pZFfWus2jZWLPHO&quot;</span>; <span class="comment">//秘钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtToken</span><span class="params">(String id, String nickname)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">JwtToken</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">                .setSubject(<span class="string">&quot;guli-user&quot;</span>)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRE))</span><br><span class="line">                .claim(<span class="string">&quot;id&quot;</span>, id)</span><br><span class="line">                .claim(<span class="string">&quot;nickname&quot;</span>, nickname)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, APP_SECRET)</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkToken</span><span class="params">(String jwtToken)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkToken</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token获取会员id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMemberIdByJwtToken</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> claimsJws.getBody();</span><br><span class="line">        <span class="keyword">return</span> (String)claims.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、阿里云短息服务"><a href="#三、阿里云短息服务" class="headerlink" title="三、阿里云短息服务"></a>三、阿里云短息服务</h2><p>申请<strong>模板</strong>与<strong>签名</strong> <a href="https://help.aliyun.com/product/44282.html?spm=5176.10629532.0.0.38311cbeYzBm73">官方文档</a> <strong>1、引入依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>2、发送短信方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送短信方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">send</span><span class="params">(Map&lt;String, Object&gt; param, String phone)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isEmpty(phone)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">DefaultProfile</span> <span class="variable">profile</span> <span class="operator">=</span></span><br><span class="line">        DefaultProfile.getProfile(<span class="string">&quot;default&quot;</span>, <span class="string">&quot;LTAI4G7UBH87zGL5jp5sbX&quot;</span>, <span class="string">&quot;0J5xk6K0ftTbyrqlJq7iEt4KJm7T&quot;</span>);</span><br><span class="line">    <span class="type">IAcsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAcsClient</span>(profile);</span><br><span class="line"></span><br><span class="line">    <span class="type">CommonRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonRequest</span>();</span><br><span class="line">    <span class="comment">//request.setProtocol(ProtocolType.HTTPS);</span></span><br><span class="line">    request.setMethod(MethodType.POST);</span><br><span class="line">    request.setDomain(<span class="string">&quot;dysmsapi.aliyuncs.com&quot;</span>);</span><br><span class="line">    request.setVersion(<span class="string">&quot;2017-05-25&quot;</span>);</span><br><span class="line">    request.setAction(<span class="string">&quot;SendSms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    request.putQueryParameter(<span class="string">&quot;PhoneNumbers&quot;</span>, phone);</span><br><span class="line">    request.putQueryParameter(<span class="string">&quot;SignName&quot;</span>, <span class="string">&quot;cyfwlp在线教育网站&quot;</span>);</span><br><span class="line">    request.putQueryParameter(<span class="string">&quot;TemplateCode&quot;</span>, <span class="string">&quot;SMS_205473183&quot;</span>);</span><br><span class="line">    request.putQueryParameter(<span class="string">&quot;TemplateParam&quot;</span>, JSONObject.toJSONString(param));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">CommonResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.getCommonResponse(request);</span><br><span class="line">        System.out.println(response.getData());</span><br><span class="line">        <span class="keyword">return</span> response.getHttpResponse().isSuccess();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、redis解决验证码有效时间问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;发送短信方法&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/sendSms/&#123;phone&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">sendSms</span><span class="params">(<span class="meta">@PathVariable</span> String phone)</span> &#123;</span><br><span class="line">    <span class="comment">//1.redis获取验证码，获取到直接返回</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(code)) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成随机验证码</span></span><br><span class="line">    code = RandomUtil.getFourBitRandom();</span><br><span class="line">    Map&lt;String,Object&gt; param = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    param.put(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line">    <span class="comment">//调用service方法发送短信</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">isSend</span> <span class="operator">=</span> smsService.send(param,phone);</span><br><span class="line">    <span class="keyword">if</span> (isSend) &#123;</span><br><span class="line">        <span class="comment">//发送成功，将发送成功的验证码放到redis，同时设置有效时间</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;phone&quot;</span>,code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error().message(<span class="string">&quot;短信发送失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day11</title>
      <link href="/article/b5892632.html"/>
      <url>/article/b5892632.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>nuxt</p><p>项目开发</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/11/15/3tYh5HRFSnMoiKl.png" alt="image-20201115124025622"></p><h2 id="一、前台环境搭建-NUXT（读音-纳斯特）"><a href="#一、前台环境搭建-NUXT（读音-纳斯特）" class="headerlink" title="一、前台环境搭建 NUXT（读音 纳斯特）"></a>一、前台环境搭建 NUXT（读音 纳斯特）</h2><h3 id="1、什么是服务端渲染"><a href="#1、什么是服务端渲染" class="headerlink" title="1、什么是服务端渲染"></a>1、什么是服务端渲染</h3><p>服务端渲染又称SSR (Server Side Render)是在服务端完成页面的内容，而不是在客户端通过AJAX获取数据。 服务器端渲染(SSR)的优势主要在于：<strong>更好的 SEO</strong>，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。 如果你的应用程序初始展示 loading 菊花图，然后通过 Ajax 获取内容，抓取工具并不会等待异步完成后再进行页面内容的抓取。也就是说，如果 SEO 对你的站点至关重要，而你的页面又是异步获取内容，则你可能需要服务器端渲染(SSR)解决此问题。 另外，使用服务器端渲染，我们可以获得更快的内容到达时间(time-to-content)，无需等待所有的 JavaScript 都完成下载并执行，产生更好的用户体验，对于那些「内容到达时间(time-to-content)与转化率直接相关」的应用程序而言，服务器端渲染(SSR)至关重要。 <img src="https://i.loli.net/2020/11/15/6XJQoGNBi2AcHCq.png" alt="image-20201115125606658"></p><h3 id="2、NUXT"><a href="#2、NUXT" class="headerlink" title="2、NUXT"></a>2、NUXT</h3><p><img src="https://i.loli.net/2020/11/15/XRvzYrVcEDbNmyQ.png" alt="image-20201115185127474"> 项目启动报错：关闭eslintrc</p><h2 id="二、redis缓存"><a href="#二、redis缓存" class="headerlink" title="二、redis缓存"></a>二、redis缓存</h2><h3 id="1、redis简介"><a href="#1、redis简介" class="headerlink" title="1、redis简介"></a>1、redis简介</h3><p>Redis是当前比较热门的NOSQL系统之一，它是一个开源的使用ANSI c语言编写的key-value存储系统（区别于MySQL的二维表格的形式存储。）。和Memcache类似，但很大程度补偿了Memcache的不足。和Memcache一样，Redis数据都是缓存在计算机内存中，不同的是，Memcache只能将数据缓存到内存中，无法自动定期写入硬盘，这就表示，一断电或重启，内存清空，数据丢失。所以Memcache的应用场景适用于缓存无需持久化的数据。而Redis不同的是它会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，实现数据的持久化。 Redis的特点： 1，Redis读取的速度是110000次&#x2F;s，写的速度是81000次&#x2F;s； 2，原子 。Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。 3，支持多种数据结构：string（字符串）；list（列表）；hash（哈希），set（集合）；zset(有序集合) 4，持久化，集群部署 5，支持过期时间，支持事务，消息订阅</p><h3 id="2、项目集成"><a href="#2、项目集成" class="headerlink" title="2、项目集成"></a>2、项目集成</h3><p><strong>缓存注解</strong> <strong>（1）缓存@Cacheable</strong> 根据方法对其返回结果进行缓存，下次请求时，如果缓存存在，则直接读取缓存数据返回；如果缓存不存在，则执行方法，并把返回的结果存入缓存中。一般用在查询方法上。一般用在<strong>查询</strong>方法上 查看源码，属性值如下：</p><p><strong>属性&#x2F;方法名</strong></p><p><strong>解释</strong></p><p>value</p><p>缓存名，必填，它指定了你的缓存存放在哪块命名空间</p><p>cacheNames</p><p>与 value 差不多，二选一即可</p><p>key</p><p>可选属性，可以使用 SpEL 标签自定义缓存的key</p><p><strong>（2）缓存@CachePut</strong> 使用该注解标志的方法，每次都会执行，并将结果存入指定的缓存中。其他方法可以直接从响应的缓存中读取缓存数据，而不需要再去查询数据库。一般用在<strong>新增方法上</strong>。 查看源码，属性值如下：</p><p><strong>属性&#x2F;方法名</strong></p><p><strong>解释</strong></p><p>value</p><p>缓存名，必填，它指定了你的缓存存放在哪块命名空间</p><p>cacheNames</p><p>与 value 差不多，二选一即可</p><p>key</p><p>可选属性，可以使用 SpEL 标签自定义缓存的key</p><p><strong>（3）缓存@CacheEvict</strong> 使用该注解标志的方法，会清空指定的缓存。一般用在<strong>更新或者删除</strong>方法上 查看源码，属性值如下：</p><p><strong>属性&#x2F;方法名</strong></p><p><strong>解释</strong></p><p>value</p><p>缓存名，必填，它指定了你的缓存存放在哪块命名空间</p><p>cacheNames</p><p>与 value 差不多，二选一即可</p><p>key</p><p>可选属性，可以使用 SpEL 标签自定义缓存的key</p><p>allEntries</p><p>是否清空所有缓存，默认为 false。如果指定为 true，则方法调用后将立即清空所有的缓存</p><p>beforeInvocation</p><p>是否在方法执行前就清空，默认为 false。如果指定为 true，则在方法执行前就会清空缓存</p><p><strong>1、添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、编写配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">              .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、启动redis服务</strong> windows:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis.windows.conf</span><br></pre></td></tr></table></figure><p>点击redis-cli.exe <strong>4、redis配置</strong> application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">192.168.44.132</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.redis.database</span>= <span class="string">0</span></span><br><span class="line"><span class="attr">spring.redis.timeout</span>=<span class="string">1800000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-active</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment">#最大阻塞等待时间(负数表示没限制)</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-idle</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day10</title>
      <link href="/article/c28e16a4.html"/>
      <url>/article/c28e16a4.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>springCloud</p><p>nacos</p><p>feign</p><p>hysrix</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/11/12/FXNAzlGn6BrRuVs.png" alt="image-20201112185212241"></p><h2 id="一、springCloud"><a href="#一、springCloud" class="headerlink" title="一、springCloud"></a>一、springCloud</h2><h3 id="1、什么是微服务"><a href="#1、什么是微服务" class="headerlink" title="1、什么是微服务"></a>1、什么是微服务</h3><ol><li>微服务是一种架构风格</li><li>把一个项目拆分成独立的多个服务 有多个服务 多服务独立运行 每个服务占用独立进程</li></ol><h3 id="2、为什么使用微服务"><a href="#2、为什么使用微服务" class="headerlink" title="2、为什么使用微服务"></a>2、为什么使用微服务</h3><p> 在传统的IT行业软件大多都是各种独立系统的堆砌，这些系统的问题总结来说就是扩展性差，可靠性不高，维护成本高。到后面引入了SOA服务化，但是，由于 SOA 早期均使用了总线模式，这种总线模式是与某种技术栈强绑定的，比如：J2EE。这导致很多企业的遗留系统很难对接，切换时间太长，成本太高，新系统稳定性的收敛也需要一些时间。</p><h3 id="3、微服务与单体架构区别"><a href="#3、微服务与单体架构区别" class="headerlink" title="3、微服务与单体架构区别"></a>3、微服务与单体架构区别</h3><p>（1）单体架构所有的模块全都耦合在一块，代码量大，维护困难。 ​ 微服务每个模块就相当于一个单独的项目，代码量明显减少，遇到问题也相对来说比较好解决。 （2）单体架构所有的模块都共用一个数据库，存储方式比较单一。 ​ 微服务每个模块都可以使用不同的存储方式（比如有的用redis，有的用mysql等），数据库也是单个模块对应自己的数据库。 （3）单体架构所有的模块开发所使用的技术一样。 ​ 微服务每个模块都可以使用不同的开发技术，开发模式更灵活。</p><h3 id="4、什么是springcloud"><a href="#4、什么是springcloud" class="headerlink" title="4、什么是springcloud"></a>4、什么是springcloud</h3><ol><li>springcloud 并不是一种技术，很多技术的集合，总称</li><li>springcloud中有很多框架（技术），我们使用springcloud里面这些框架技术实现微服务</li><li>使用springcloud依赖springboot</li></ol><h3 id="5、springcloud相关基础服务组件（后续都会学习）"><a href="#5、springcloud相关基础服务组件（后续都会学习）" class="headerlink" title="5、springcloud相关基础服务组件（后续都会学习）"></a>5、springcloud相关基础服务组件（后续都会学习）</h3><p>服务发现——Netflix Eureka （Nacos） 服务调用——Netflix Feign 熔断器——Netflix Hystrix 服务网关——Spring Cloud GateWay 分布式配置——Spring Cloud Config （Nacos） 消息总线 —— Spring Cloud Bus （Nacos）</p><h2 id="二、服务发现-搭建Nacos服务"><a href="#二、服务发现-搭建Nacos服务" class="headerlink" title="二、服务发现 搭建Nacos服务"></a>二、服务发现 搭建Nacos服务</h2><p><img src="https://i.loli.net/2020/11/12/4xI1skz25ilLaAX.png" alt="image-20201112202445788"></p><h3 id="1、什么是Nacos"><a href="#1、什么是Nacos" class="headerlink" title="1、什么是Nacos"></a>1、什么是Nacos</h3><p>阿里巴巴，开源项目，构建云原生应用的动态服务发现、配置管理和服务管理平台 项目中<strong>注册中心</strong> 使用nacos替代原生的 Eureka</p><h3 id="2、Nacos流程"><a href="#2、Nacos流程" class="headerlink" title="2、Nacos流程"></a>2、Nacos流程</h3><p><img src="https://i.loli.net/2020/11/12/yVCg7UwGXRjxPLo.png" alt="image-20201112203844454"></p><h3 id="3、服务注册"><a href="#3、服务注册" class="headerlink" title="3、服务注册"></a>3、服务注册</h3><p><strong>service父模块添加依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>添加服务配置关系</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#nacos服务地址</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><p><strong>启动类添加注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure><h2 id="三、服务调用-Feign"><a href="#三、服务调用-Feign" class="headerlink" title="三、服务调用 Feign"></a>三、服务调用 Feign</h2><h3 id="1、Feign"><a href="#1、Feign" class="headerlink" title="1、Feign"></a>1、Feign</h3><ul><li>Feign是Netflix开发的声明式、模板化的HTTP客户端， Feign可以帮助我们更快捷、优雅地调用HTTP API。</li><li>Feign支持多种注解，例如Feign自带的注解或者JAX-RS注解等。</li><li>Spring Cloud对Feign进行了增强，使Feign支持了Spring MVC注解，并整合了Ribbon和Eureka，从而让Feign的使用更加方便。</li><li>Spring Cloud Feign是基于Netflix feign实现，整合了Spring Cloud Ribbon和Spring Cloud Hystrix，除了提供这两者的强大功能外，还提供了一种声明式的Web服务客户端定义的方式。</li><li>Spring Cloud Feign帮助我们定义和实现依赖服务接口的定义。在Spring Cloud feign的实现下，只需要创建一个接口并用注解方式配置它，即可完成服务提供方的接口绑定，简化了在使用Spring Cloud Ribbon时自行封装服务调用客户端的开发量。</li></ul><h3 id="2、服务调用"><a href="#2、服务调用" class="headerlink" title="2、服务调用"></a>2、服务调用</h3><p><strong>service父模块添加依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--服务调用--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>调用端启动类添加注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure><p><strong>创建包和接口</strong> 创建client包 @FeignClient注解用于指定从哪个服务中调用功能 ，名称与被调用的服务名保持一致。 @Component注解防止，在其他位置注入CodClient时idea报错 <strong>@PathVariable注解一定要指定参数名称，否则出错</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;service-vod&quot;)</span></span><br><span class="line"><span class="comment">//远程调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">VodClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义要调用方法的路径</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/eduvod/video/deleteVideo/&#123;videoId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">deleteVideoById</span><span class="params">(<span class="meta">@PathVariable(&quot;videoId&quot;)</span> String videoId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在使用的地方注入接口调用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> VodClient vodClient;</span><br></pre></td></tr></table></figure><h2 id="四、熔断器"><a href="#四、熔断器" class="headerlink" title="四、熔断器"></a>四、熔断器</h2><h3 id="1、Spring-Cloud调用接口过程"><a href="#1、Spring-Cloud调用接口过程" class="headerlink" title="1、Spring Cloud调用接口过程"></a>1、Spring Cloud调用接口过程</h3><p><img src="https://i.loli.net/2020/11/15/jnltrOiwpZTg7hY.jpg" alt="img"></p><h3 id="2、Hystrix概念"><a href="#2、Hystrix概念" class="headerlink" title="2、Hystrix概念"></a>2、<strong>Hystrix概念</strong></h3><p>分布式：项目单独的服务部署在不同的服务器上 <img src="https://i.loli.net/2020/11/15/kFSo3MK2OrGsQnh.png" alt="image-20201115110521851"> Hystrix 是一个供分布式系统使用，提供延迟和容错功能，保证复杂的分布系统在面临不可避免的失败时，仍能有其弹性。 比如系统中有很多服务，当某些服务不稳定的时候，使用这些服务的用户线程将会阻塞，如果没有隔离机制，系统随时就有可能会挂掉，从而带来很大的风险。SpringCloud使用Hystrix组件提供断路器、资源隔离与自我修复功能。下图表示服务B触发了断路器，阻止了级联失败 <img src="https://i.loli.net/2020/11/15/n2ms4UVJI3FBeAt.jpg" alt="img"></p><h3 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h3><p><strong>1、添加依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--hystrix依赖，主要是用  @HystrixCommand --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--服务注册--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--服务调用--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>2、修改配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启熔断机制</span></span><br><span class="line"><span class="attr">feign.hystrix.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 设置hystrix超时时间，默认1000ms</span></span><br><span class="line"><span class="attr">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</span>=<span class="string">6000</span></span><br></pre></td></tr></table></figure><p><strong>3、创建实体类继承VodClient实现里面的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VodClientImpl</span> <span class="keyword">implements</span> <span class="title class_">VodClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义的方法都是出错后执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">deleteVideoById</span><span class="params">(String videoId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error().message(<span class="string">&quot;出错了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">deleteBatch</span><span class="params">(List videoIdList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error().message(<span class="string">&quot;出错了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4、修改client注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;service-vod&quot;,fallback = VodClientImpl.class)</span></span><br><span class="line"><span class="comment">//远程调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">VodClient</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day09</title>
      <link href="/article/a2499f41.html"/>
      <url>/article/a2499f41.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>阿里云视频点播</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/11/10/6MtlurDnQoREqWS.png" alt="image-20201110174543203"></p><h2 id="一、阿里云视频点播"><a href="#一、阿里云视频点播" class="headerlink" title="一、阿里云视频点播"></a>一、阿里云视频点播</h2><h3 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h3><p>视频点播（ApsaraVideo for VoD）是集音视频采集、编辑、上传、自动化转码处理、媒体资源管理、分发加速于一体的一站式音视频点播解决方案。 <img src="https://i.loli.net/2020/11/10/ARmwGiOktUr1Eoj.png" alt="img"></p><h3 id="2、API与SDK"><a href="#2、API与SDK" class="headerlink" title="2、API与SDK"></a>2、API与SDK</h3><p><img src="https://i.loli.net/2020/11/10/xXKPLIujikUEVNR.png" alt="image-20201110205246625"></p><h3 id="3、操作"><a href="#3、操作" class="headerlink" title="3、操作"></a>3、操作</h3><p>参照 <a href="https://help.aliyun.com/document_detail/61064.html?spm=a2c4g.11186623.6.931.7c317bdcDqYUQx">官方文档</a> 数据库中需要存储加密视频</p><h3 id="4、手动安装依赖到本地仓库"><a href="#4、手动安装依赖到本地仓库" class="headerlink" title="4、手动安装依赖到本地仓库"></a>4、手动安装依赖到本地仓库</h3><p><img src="https://i.loli.net/2020/11/12/JUWxCHIBouwVXz9.png" alt="image-20201112132246351"> 使用maven命令进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com.aliyun -DartifactId=aliyun-sdk-vod-upload -Dversion=1.4.11 -Dpackaging=jar -Dfile=aliyun-java-vod-upload-1.4.11.jar</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">listen       9001;</span><br><span class="line">server_name  localhost;</span><br><span class="line"></span><br><span class="line">location ~ /eduservice/ &#123;</span><br><span class="line">    proxy_pass http://localhost:8001;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /eduoss/ &#123;</span><br><span class="line">    proxy_pass http://localhost:8002;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /eduvod/ &#123;</span><br><span class="line">    proxy_pass http://localhost:8003;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、跨域问题"><a href="#5、跨域问题" class="headerlink" title="5、跨域问题"></a>5、跨域问题</h3><p>报错 <img src="https://i.loli.net/2020/11/12/YMFBSzAXQ2UZJyE.png" alt="image-20201112160211660"> 乍一看是跨域问题，但是后台接口加了注解防止跨域，网上找了各种方法尝试也不行 结果莫名其妙加了配置nginx上传文件大小，离谱的是没有加这个配置并没有老师视频里出现的 413 (Request Entity Too Large) 异常</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">client_max_body_size</span> <span class="string">1024m;</span></span><br></pre></td></tr></table></figure><p>解决问题 难道说不配置nginx上传文件大小会引起跨域，百度试试，但是没有结果好像</p>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day08</title>
      <link href="/article/d54eafd7.html"/>
      <url>/article/d54eafd7.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>富文本编辑器</p><p>项目开发</p></blockquote><span id="more"></span><h2 id="一、富文本编辑器"><a href="#一、富文本编辑器" class="headerlink" title="一、富文本编辑器"></a>一、富文本编辑器</h2><p>Tinymce是一个传统javascript插件，默认不能用于Vue.js因此需要做一些特殊的整合步骤</p><h3 id="1、复制脚本库"><a href="#1、复制脚本库" class="headerlink" title="1、复制脚本库"></a>1、复制脚本库</h3><p>将脚本库复制到项目的static目录下（在vue-element-admin-master的static路径下）</p><h3 id="2、配置html变量"><a href="#2、配置html变量" class="headerlink" title="2、配置html变量"></a>2、配置html变量</h3><p>在 guli-admin&#x2F;build&#x2F;webpack.dev.conf.js 中添加配置 使在html页面中可是使用这里定义的BASE_URL变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    ......,</span><br><span class="line">    <span class="attr">templateParameters</span>: &#123;</span><br><span class="line">        <span class="attr">BASE_URL</span>: config.<span class="property">dev</span>.<span class="property">assetsPublicPath</span> + config.<span class="property">dev</span>.<span class="property">assetsSubDirectory</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3、引入js脚本"><a href="#3、引入js脚本" class="headerlink" title="3、引入js脚本"></a>3、引入js脚本</h3><p>在guli-admin&#x2F;index.html 中引入js脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&lt;%= BASE_URL %&gt;/tinymce4.7.5/tinymce.min.js&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&lt;%= BASE_URL %&gt;/tinymce4.7.5/langs/zh_CN.js&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="4、复制组件"><a href="#4、复制组件" class="headerlink" title="4、复制组件"></a>4、复制组件</h3><p>src&#x2F;components&#x2F;Tinymce</p><h3 id="5、引入组件"><a href="#5、引入组件" class="headerlink" title="5、引入组件"></a>5、引入组件</h3><p>课程信息组件中引入 Tinymce</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Tinymce</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Tinymce&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">Tinymce</span> &#125;,</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、组件模板"><a href="#6、组件模板" class="headerlink" title="6、组件模板"></a>6、组件模板</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 课程简介--&gt;</span><br><span class="line">&lt;el-form-item label=&quot;课程简介&quot;&gt;</span><br><span class="line">    &lt;tinymce :height=&quot;300&quot; v-model=&quot;courseInfo.description&quot;/&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure><h3 id="7、组件样式"><a href="#7、组件样式" class="headerlink" title="7、组件样式"></a>7、组件样式</h3><p>在info.vue文件的最后添加如下代码，调整上传图片按钮的高度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">.tinymce-container &#123;</span><br><span class="line">  line-height: 29px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="8、图片的base64编码"><a href="#8、图片的base64编码" class="headerlink" title="8、图片的base64编码"></a>8、图片的base64编码</h3><p>Tinymce中的图片上传功能直接存储的是图片的base64编码，因此无需图片服务器</p><h2 id="二、多表连接查询"><a href="#二、多表连接查询" class="headerlink" title="二、多表连接查询"></a>二、多表连接查询</h2><p>涉及多张表的查询，多使用手写sql语句实现 <img src="https://i.loli.net/2020/11/10/srlVomLH3qgJCbd.png" alt="image-20201110110221774"></p><h3 id="1、内连接"><a href="#1、内连接" class="headerlink" title="1、内连接"></a>1、内连接</h3><p>只查询两张表有关联的数据</p><h3 id="2、左外连接"><a href="#2、左外连接" class="headerlink" title="2、左外连接"></a>2、左外连接</h3><p>左边所有数据，右边有关联数据</p><h3 id="3、右外连接"><a href="#3、右外连接" class="headerlink" title="3、右外连接"></a>3、右外连接</h3><p>右边所有数据，左边有关联数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ec.id,ec.price,ec.`lesson_num`,</span><br><span class="line">       ecd.`description`,</span><br><span class="line">       et.`name`,</span><br><span class="line">       es1.`title` <span class="keyword">AS</span> oneSubject,es2.`title` <span class="keyword">AS</span> twoSubject</span><br><span class="line"><span class="keyword">FROM</span> edu_course ec <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> edu_course_description ecd <span class="keyword">ON</span> ec.`id` <span class="operator">=</span> ecd.`id` </span><br><span class="line">           <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> edu_teacher et <span class="keyword">ON</span> ec.`teacher_id` <span class="operator">=</span> et.`id`</span><br><span class="line">           <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> edu_subject es1 <span class="keyword">ON</span> ec.`subject_parent_id` <span class="operator">=</span> es1.`id`</span><br><span class="line">           <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> edu_subject es2 <span class="keyword">ON</span> ec.`subject_id` <span class="operator">=</span> es2.`id`</span><br><span class="line">           <span class="keyword">WHERE</span> ec.id <span class="operator">=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><h2 id="三、maven加载问题"><a href="#三、maven加载问题" class="headerlink" title="三、maven加载问题"></a>三、maven加载问题</h2><p>maven在加载的时候，只会将.java文件进行编译</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Invalid bound <span class="title function_">statement</span> <span class="params">(not found)</span>: com.cyfwlp.eduservice.mapper.EduCourseMapper.getPublishCourse</span><br></pre></td></tr></table></figure><p>解决方案：</p><ol><li>手动复制目录</li><li>将.xml文件放到resources中</li><li>推荐使用 通过配置实现</li></ol><p>pom.xml配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 项目打包时会将java目录中的*.xml文件也进行打包 --&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">            &lt;/includes&gt;</span><br><span class="line">            &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">    &lt;/resources&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>application.propertie配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus.mapper-locations</span>=<span class="string">classpath:com/cyfwlp/eduservice/mapper/xml/*.xml</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day07</title>
      <link href="/article/45f1b246.html"/>
      <url>/article/45f1b246.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>返回树形结构数据</p><p>项目开发</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/11/05/TUxW9GYgVQAKIJS.png" alt="image-20201105215237446"></p><h2 id="一、返回树形结构的数据"><a href="#一、返回树形结构的数据" class="headerlink" title="一、返回树形结构的数据"></a>一、返回树形结构的数据</h2><p>返回这种格式数据 <img src="https://i.loli.net/2020/11/06/dvs38kGFXmax57W.png" alt="image-20201106150753889"> <strong>第一步：针对返回数据创建对应的实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/11/6 15:09</span></span><br><span class="line"><span class="comment"> * 一级分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneSubject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/11/6 15:09</span></span><br><span class="line"><span class="comment"> * 二级分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoSubject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步：在两个实体类之间表示关系（一个一级分类有多个二级分类）</strong> <em>修改一级分类代码</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/11/6 15:09</span></span><br><span class="line"><span class="comment"> * 一级分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneSubject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;TwoSubject&gt; children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三部：编写具体代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;OneSubject&gt; <span class="title function_">getAllOneTwoSubject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询所有一级分类</span></span><br><span class="line">    QueryWrapper&lt;EduSubject&gt; wrapperOne = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;EduSubject&gt;();</span><br><span class="line">    wrapperOne.eq(<span class="string">&quot;parent_id&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    List&lt;EduSubject&gt; oneSubject = baseMapper.selectList(wrapperOne);</span><br><span class="line">    <span class="comment">// 或者自己调自己</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.查询所有二级分类</span></span><br><span class="line">    QueryWrapper&lt;EduSubject&gt; wrapperTwo = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;EduSubject&gt;();</span><br><span class="line">    wrapperOne.ne(<span class="string">&quot;parent_id&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    List&lt;EduSubject&gt; twoSubject = baseMapper.selectList(wrapperTwo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建list存储最终封装的数据</span></span><br><span class="line">    ArrayList&lt;OneSubject&gt; finalSubjectList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.封装一级分类</span></span><br><span class="line">    <span class="comment">// 遍历封装</span></span><br><span class="line">    <span class="keyword">for</span> (EduSubject eduSubject : oneSubject) &#123;</span><br><span class="line">        <span class="type">OneSubject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OneSubject</span>();</span><br><span class="line">        subject.setId(eduSubject.getId());</span><br><span class="line">        subject.setTitle(eduSubject.getTitle());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取每个一级分类对应的二级分类、</span></span><br><span class="line">        List&lt;TwoSubject&gt; twoFinalSubjectList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (EduSubject eduSubject1 : twoSubject) &#123;</span><br><span class="line">            <span class="comment">//判断二级分类parent_id 和 id</span></span><br><span class="line">            <span class="keyword">if</span> (eduSubject1.getParentId().equals(eduSubject.getId())) &#123;</span><br><span class="line">                <span class="type">TwoSubject</span> <span class="variable">subject1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TwoSubject</span>();</span><br><span class="line">                subject1.setId(eduSubject1.getId());</span><br><span class="line">                subject1.setTitle(eduSubject1.getTitle());</span><br><span class="line">                twoFinalSubjectList.add(subject1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        subject.setChildren(twoFinalSubjectList);</span><br><span class="line"></span><br><span class="line">        finalSubjectList.add(subject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.封装二级分类</span></span><br><span class="line">    <span class="keyword">return</span> finalSubjectList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、课程添加模块"><a href="#二、课程添加模块" class="headerlink" title="二、课程添加模块"></a>二、课程添加模块</h2><p>课程相关表直接关系 <img src="https://i.loli.net/2020/11/08/GyKSAoQTrc2BtEZ.png" alt="image-20201108101229467"> 1、课程添加 细节问题</p><ol><li>创建vo类用于表单数据封装</li><li>表单提交过来的数据添加到数据库 两张表 edu_couese edu_description</li><li>讲师和分类使用下拉列表 课程分类 二级联动</li></ol><p>vo类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.eduservice.entity.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/11/8 10:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseInfoVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程讲师ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String teacherId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程专业ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String subjectId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程标题&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程销售价格，设置为0则可免费观看&quot;)</span></span><br><span class="line">    <span class="comment">// 0.01 价格不能使用 double  精度问题</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;总课时&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer lessonNum;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程封面图片路径&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cover;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程简介&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>serviceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加课程基本信息的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCourseInfo</span><span class="params">(CourseInfoVo courseInfoVo)</span> &#123;</span><br><span class="line">    <span class="comment">//1.添加到课程信息表</span></span><br><span class="line">    <span class="type">EduCourse</span> <span class="variable">eduCourse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EduCourse</span>();</span><br><span class="line">    BeanUtils.copyProperties(courseInfoVo,eduCourse);</span><br><span class="line">    <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> baseMapper.insert(eduCourse);</span><br><span class="line">    <span class="keyword">if</span> (insert &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//添加失败</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GuliException</span>(<span class="number">20001</span>,<span class="string">&quot;添加课程信息失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 得到添加后的课程id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">cid</span> <span class="operator">=</span> eduCourse.getId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.添加数据到课程简介表</span></span><br><span class="line">    <span class="comment">//需要调用其他service @Autowired</span></span><br><span class="line">    <span class="type">EduCourseDescription</span> <span class="variable">eduCourseDescription</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EduCourseDescription</span>();</span><br><span class="line">    BeanUtils.copyProperties(courseInfoVo,eduCourseDescription);</span><br><span class="line">    <span class="comment">//手动设置表述id为课程id</span></span><br><span class="line">    eduCourseDescription.setId(cid);</span><br><span class="line">    descriptionService.save(eduCourseDescription);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多的难点在于element ui的使用，结合官网在项目中灵活运用即可</p>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day06</title>
      <link href="/article/32f682d0.html"/>
      <url>/article/32f682d0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>阿里云oss</p><p>nginx</p><p>easyExcel</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/11/03/Uy47tw8M2HLxvZs.png" alt="image-20201103123419627"></p><h2 id="一、阿里云oss存储服务"><a href="#一、阿里云oss存储服务" class="headerlink" title="一、阿里云oss存储服务"></a>一、阿里云oss存储服务</h2><p>前置准备：</p><ol><li>获取操作阿里云oss许可证 Accesskey 官网创建就行</li><li><a href="https://help.aliyun.com/document_detail/32011.html?spm=a2c4g.11186623.6.917.2a5c6328xhqaJG">官方文档</a></li></ol><p>参照官方文档使用难度不大</p><h2 id="二、nginx"><a href="#二、nginx" class="headerlink" title="二、nginx"></a>二、nginx</h2><p>nginx : 高性能的HTTP和反向代理web服务器 nginx主要使用：</p><ol><li>请求转发</li><li>负载均衡</li><li>动静分离</li></ol><p>项目中使用请求转发，根据请求路径转发到不同的服务 nginx 结束命令 (windows)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe -s stop</span><br></pre></td></tr></table></figure><p>修改配置文件，在http{}里添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server <span class="punctuation">&#123;</span></span><br><span class="line">    listen       <span class="number">9001</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location ~ /eduservice/ <span class="punctuation">&#123;</span></span><br><span class="line">    proxy_pass http<span class="punctuation">:</span><span class="comment">//localhost:8001;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    location ~ /eduoss/ <span class="punctuation">&#123;</span></span><br><span class="line">        proxy_pass http<span class="punctuation">:</span><span class="comment">//localhost:8002;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>再启动</p><h2 id="三、EasyExcel"><a href="#三、EasyExcel" class="headerlink" title="三、EasyExcel"></a>三、EasyExcel</h2><p>EasyExcel是阿里巴巴开源的一个excel处理框架，<strong>以使用简单、节省内存著称</strong>。 需要 poi依赖 和 EasyExcel依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;easyexcel&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--xls--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--xlsx--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>1、Excel写操作 创建Excel对应实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoData</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置excel表头名称</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;学生编号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sno;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;学生姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEasyExcel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//实现Excel写的操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.设置写入文件地址和Excel文件名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;F:\\write.xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.实现写操作</span></span><br><span class="line">        EasyExcel.write(fileName,DemoData.class).sheet(<span class="string">&quot;学生列表&quot;</span>).doWrite(getData());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;DemoData&gt; <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        ArrayList&lt;DemoData&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">DemoData</span> <span class="variable">demoData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DemoData</span>();</span><br><span class="line">            demoData.setSno(i);</span><br><span class="line">            demoData.setSname(<span class="string">&quot;jack&quot;</span> + i);</span><br><span class="line">            list.add(demoData);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Excel读操作 创建对应实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoData</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置excel表头名称</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;学生编号&quot;,index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sno;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;学生姓名&quot;,index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建监听进行Excel文件的读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/11/5 16:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;DemoData&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一行一行的读取Excel内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> demoData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> analysisContext</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(DemoData demoData, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;****&quot;</span> + demoData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeHeadMap</span><span class="params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;表头&quot;</span> + headMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取完成后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> analysisContext</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day05</title>
      <link href="/article/abffd36a.html"/>
      <url>/article/abffd36a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>滑水的一天</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/11/25/67KQtM3DVFkjf1o.png" alt="image-20201029150822056"></p><h2 id="一、零碎知识"><a href="#一、零碎知识" class="headerlink" title="一、零碎知识"></a>一、零碎知识</h2><h3 id="1、好像没什么需要记的，水一篇把-滑稽-jpg"><a href="#1、好像没什么需要记的，水一篇把-滑稽-jpg" class="headerlink" title="1、好像没什么需要记的，水一篇把 滑稽.jpg"></a>1、好像没什么需要记的，水一篇把 滑稽.jpg</h3>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day04</title>
      <link href="/article/dcf8e3fc.html"/>
      <url>/article/dcf8e3fc.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>node.js、elementui</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/10/28/oLnbDJ53CuxOyt1.png" alt="image-20201028224654958"></p><h2 id="一、axios"><a href="#一、axios" class="headerlink" title="一、axios"></a>一、axios</h2><h4 id="1、跨域问题"><a href="#1、跨域问题" class="headerlink" title="1、跨域问题"></a><strong>1、跨域问题</strong></h4><p>1、什么是跨域 浏览器从一个域名的网页去请求另一个域名的资源时，<strong>域名、端口、协议</strong>任一不同，都是跨域 。前后端分离开发中，需要考虑ajax跨域的问题。 这里我们可以从服务端解决这个问题 </p><p>2、配置 在Controller类上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span> <span class="comment">//跨域</span></span><br></pre></td></tr></table></figure><h4 id="2、axios"><a href="#2、axios" class="headerlink" title="2、axios"></a>2、axios</h4><p>axios是独立于vue的一个项目，基于promise用于浏览器和node.js的http客户端</p><ul><li>在浏览器中可以帮助我们完成 ajax请求的发送</li><li>在node.js中可以向远程接口发送请求</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;div v-for=&quot;(item,index) in userList&quot;&gt;&#123;&#123;item&#125;&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            //固定结构</span><br><span class="line">            data: &#123; //data定义变量和初始值</span><br><span class="line">                userList:[]</span><br><span class="line">            &#125;,</span><br><span class="line">            created()&#123;</span><br><span class="line">                //调用定义的方法</span><br><span class="line">                this.getuserList();</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;//编写具体的方法</span><br><span class="line">                //创建方法 查询所有用户数据</span><br><span class="line">                getuserList() &#123;</span><br><span class="line">                    //使用axiox发送ajax请求</span><br><span class="line">                    axios.get(&quot;http://localhost:8002/eduservice/teacher/findAll&quot;)</span><br><span class="line">                    //请求成功执行then方法</span><br><span class="line">                    .then(response =&gt; &#123;</span><br><span class="line">                        // console.log(response.data.data.items);</span><br><span class="line">                        // 数据复制给data定义的数组</span><br><span class="line">                        this.userList = response.data.data.items</span><br><span class="line">                        console.log(this.userList);</span><br><span class="line">                    &#125;)</span><br><span class="line">                    //请求失败实现catch方法</span><br><span class="line">                    .catch(error =&gt; &#123;</span><br><span class="line">                        console.log(error);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="二、element-ui"><a href="#二、element-ui" class="headerlink" title="二、element-ui"></a>二、element-ui</h2><p>element-ui 是饿了么前端出品的基于 Vue.js的 后台组件库，方便程序员进行页面快速布局和构建 </p><p>官网： <a href="http://element-cn.eleme.io/#/zh-CN">http://element-cn.eleme.io/#/zh-CN</a></p><h2 id="三、Node-js"><a href="#三、Node-js" class="headerlink" title="三、Node.js"></a>三、Node.js</h2><h4 id="1、node-js是什么"><a href="#1、node-js是什么" class="headerlink" title="1、node.js是什么"></a>1、node.js是什么</h4><p>简单的说 Node.js 就是<strong>运行在服务端的 JavaScript</strong>。 </p><p>Node.js是一个事件驱动I&#x2F;O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好</p><h4 id="2、nodejs作用"><a href="#2、nodejs作用" class="headerlink" title="2、nodejs作用."></a>2、nodejs作用.</h4><ol><li>JavaScript的运行环境，用于执行JavaScript环境，不需要浏览器，直接使用nodejs运行JavaScript代码</li><li>模拟服务器效果</li></ol><h4 id="3、vscode打开cmd窗口"><a href="#3、vscode打开cmd窗口" class="headerlink" title="3、vscode打开cmd窗口"></a>3、vscode打开cmd窗口</h4><p><img src="https://i.loli.net/2020/10/29/ztKWArQicPGLgwn.png" alt="image-20201029114819386"></p><h4 id="4、服务器端应用开发（了解）"><a href="#4、服务器端应用开发（了解）" class="headerlink" title="4、服务器端应用开发（了解）"></a>4、服务器端应用开发（了解）</h4><p>创建 02-server-app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">    <span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>&#125;);</span><br><span class="line">    <span class="comment">// 发送响应数据 &quot;Hello World&quot;</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello Server&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8888</span>);</span><br><span class="line"><span class="comment">// 终端打印如下信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:8888/&#x27;</span>);</span><br></pre></td></tr></table></figure><p>运行服务器程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node 02-server-app.js</span><br></pre></td></tr></table></figure><p>服务器启动成功后，在浏览器中输入：<a href="http://localhost:8888/">http://localhost:8888/</a> 查看webserver成功运行，并输出html页面 停止服务：ctrl + c</p><h2 id="四、npm"><a href="#四、npm" class="headerlink" title="四、npm"></a>四、npm</h2><h4 id="1、npm是什么"><a href="#1、npm是什么" class="headerlink" title="1、npm是什么"></a>1、npm是什么</h4><p>NPM全称<strong>Node Package Manager</strong>，是Node.js包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的；也是Node.js的包管理工具，相当于前端的Maven</p><h4 id="2、npm具体操作"><a href="#2、npm具体操作" class="headerlink" title="2、npm具体操作"></a>2、npm具体操作</h4><p>（1）项目初始化 使用命令 npm init （使用默认配置 nmp init -y） 项目初始化之后，生成文件package.json 相当于后端pom.xml </p><p>（2）下载js依赖 <strong>设置镜像地址</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看npm配置信息</span></span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure><p>命令 npm install xxx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery</span><br></pre></td></tr></table></figure><p>指定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果安装时想指定特定的版本</span></span><br><span class="line">npm install jquery@2.1.x</span><br></pre></td></tr></table></figure><p>（3）根据配置文件下载依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="五、bable"><a href="#五、bable" class="headerlink" title="五、bable"></a>五、bable</h2><h4 id="1、bable是什么"><a href="#1、bable是什么" class="headerlink" title="1、bable是什么"></a>1、bable是什么</h4><p>转码器 把es6的代码转换成es5的代码 </p><p><strong>实际开发</strong>： 编写es6代码转换成es5运行</p><h4 id="2、bable使用"><a href="#2、bable使用" class="headerlink" title="2、bable使用"></a>2、bable使用</h4><p>1、安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --global babel-cli</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看是否安装成功</span></span><br><span class="line">babel --version</span><br></pre></td></tr></table></figure><p>2、编写es6代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转码前</span></span><br><span class="line"><span class="comment">// 定义数据</span></span><br><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 将数组的每个元素 +1</span></span><br><span class="line">input = input.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(input)</span><br></pre></td></tr></table></figure><p>3、根目录下配置.babelrc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;es2015&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>4、安装es2015的转码器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure><p>5、使用命令进行转码 （1）根据文件转码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel es6/01.js -o dist/001.js</span><br></pre></td></tr></table></figure><p>（2）根据文件夹转码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel es6 -d dist</span><br></pre></td></tr></table></figure><h2 id="六、模块化"><a href="#六、模块化" class="headerlink" title="六、模块化"></a>六、模块化</h2><h4 id="1、模块化是什么"><a href="#1、模块化是什么" class="headerlink" title="1、模块化是什么"></a>1、模块化是什么</h4><p>在前端中，js与js之间调用称为模块化</p><h4 id="2、es5模块化"><a href="#2、es5模块化" class="headerlink" title="2、es5模块化"></a>2、es5模块化</h4><p>01.js 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 01.js创建js方法</span></span><br><span class="line"><span class="comment">// 定义成员：</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(a) + <span class="built_in">parseInt</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sub = <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(a) - <span class="built_in">parseInt</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置哪些方法可以被调用</span></span><br><span class="line"><span class="comment">// 导出成员：</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">sum</span>: sum,</span><br><span class="line">    <span class="attr">sub</span>: sub,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>02.js 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 02.js调用01.js方法</span></span><br><span class="line"><span class="comment">// 引入01.js文件</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="title function_">equire</span>(<span class="string">&#x27;./01.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">sub</span>(<span class="number">10</span>,<span class="number">4</span>));</span><br></pre></td></tr></table></figure><h4 id="3-1、es6模块化（1）"><a href="#3-1、es6模块化（1）" class="headerlink" title="3.1、es6模块化（1）"></a>3.1、es6模块化（1）</h4><p>01.js 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义方法 设置哪些方法可以被其他的js调用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getList&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">save</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;save&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>02.js 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用01.js方法 引入01.js 调用</span></span><br><span class="line"><span class="keyword">import</span> &#123;getList,save&#125; <span class="keyword">from</span> <span class="string">&#x27;./01.js&#x27;</span></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"><span class="title function_">getList</span>();</span><br><span class="line"><span class="title function_">save</span>();</span><br></pre></td></tr></table></figure><p><strong>注意：这时的程序无法运行的，因为ES6的模块化无法在Node.js中执行，需要用Babel编辑成ES5后再执行。</strong> 转换es5即可运行</p><h4 id="3-2、es6模块化（2）"><a href="#3-2、es6模块化（2）" class="headerlink" title="3.2、es6模块化（2）"></a>3.2、es6模块化（2）</h4><p>01.js 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义方法 设置哪些方法可以被其他的js调用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="title function_">getList</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getList&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;update&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>02.js 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用01.js方法 引入01.js 调用</span></span><br><span class="line"><span class="keyword">import</span> m <span class="keyword">from</span> <span class="string">&#x27;./01.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">m.<span class="property">getList</span>;</span><br><span class="line">m.<span class="property">update</span>;</span><br></pre></td></tr></table></figure><p>同样需要转化为es5在node.js运行</p><h2 id="七、webpack"><a href="#七、webpack" class="headerlink" title="七、webpack"></a>七、webpack</h2><h4 id="1、webpack是什么"><a href="#1、webpack是什么" class="headerlink" title="1、webpack是什么"></a>1、webpack是什么</h4><p>Webpack 是一个前端资源加载&#x2F;打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。 从图中我们可以看出，Webpack 可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求。 <img src="https://i.loli.net/2020/10/29/pLHRUQv3scewX1n.png" alt="img"></p><h4 id="2、webpack安装"><a href="#2、webpack安装" class="headerlink" title="2、webpack安装"></a>2、webpack安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局安装</span></span><br><span class="line">npm install -g webpack webpack-cli</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看版本</span></span><br><span class="line">webpack -v</span><br></pre></td></tr></table></figure><h4 id="3、webpack打包js文件"><a href="#3、webpack打包js文件" class="headerlink" title="3、webpack打包js文件"></a>3、webpack打包js文件</h4><p>src&#x2F;common.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">info</span> = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src&#x2F;utils.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src&#x2F;main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./common,js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>);</span><br><span class="line"></span><br><span class="line">common.<span class="title function_">info</span>(<span class="string">&#x27;hello 123&#x27;</span> + utils.<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>创建webpack配置文件，配置打包信息 webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>); <span class="comment">//Node.js内置模块</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>, <span class="comment">//配置入口文件</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>), <span class="comment">//输出路径，__dirname：当前文件所在路径</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span> <span class="comment">//输出文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用命令执行打包操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">webpack #有黄色警告</span><br><span class="line">webpack --mode=development #没有警告</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行后查看bundle.js 里面包含了上面两个js文件的内容并惊醒了代码压缩</span></span><br></pre></td></tr></table></figure><h4 id="4、webpack打包css文件"><a href="#4、webpack打包css文件" class="headerlink" title="4、webpack打包css文件"></a>4、webpack打包css文件</h4><p>style.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.js引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./style.css&#x27;</span>);</span><br></pre></td></tr></table></figure><p>安装<strong>style-loader和 css-loader</strong></p><blockquote><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。 Loader 可以理解为是模块和资源的转换器。 首先我们需要安装相关Loader插件，css-loader 是将 css 装载到 javascript；style-loader 是让 javascript 认识css</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader </span><br></pre></td></tr></table></figure><p>修改webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>); <span class="comment">//Node.js内置模块</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//...,</span></span><br><span class="line">    <span class="attr">output</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,    <span class="comment">//打包规则应用到以css结尾的文件上</span></span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;  </span><br><span class="line">        ]  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、搭建项目前端环境"><a href="#八、搭建项目前端环境" class="headerlink" title="八、搭建项目前端环境"></a>八、搭建项目前端环境</h2><h4 id="1、vue-admin-template"><a href="#1、vue-admin-template" class="headerlink" title="1、vue-admin-template"></a>1、vue-admin-template</h4><p>vue-element-admin是基于element-ui 的一套后台管理系统集成方案。 </p><p><strong>GitHub地址：</strong><a href="https://github.com/PanJiaChen/vue-element-admin">https://github.com/PanJiaChen/vue-element-admin</a> </p><p><strong>项目在线预览：</strong><a href="https://panjiachen.gitee.io/vue-element-admin/#/login?redirect=%2Fdashboard">https://panjiachen.gitee.io/vue-element-admin</a></p><h4 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压压缩包</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入目录</span></span><br><span class="line">cd vue-element-admin-master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动。执行后，浏览器自动弹出并访问http://localhost:9527/</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h4 id="3、项目基本结构"><a href="#3、项目基本结构" class="headerlink" title="3、项目基本结构"></a>3、项目基本结构</h4><p><img src="https://i.loli.net/2020/10/29/dKCcEh7FSHMJza9.png" alt="image-20201029145622822"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">. </span><br><span class="line">├── build <span class="comment">// 构建脚本</span></span><br><span class="line">├── config <span class="comment">// 全局配置 </span></span><br><span class="line">├── node_modules <span class="comment">// 项目依赖模块</span></span><br><span class="line">├── src <span class="comment">//项目源代码</span></span><br><span class="line">├── <span class="keyword">static</span> <span class="comment">// 静态资源</span></span><br><span class="line">└── package.<span class="property">jspon</span> <span class="comment">// 项目信息和依赖配置</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">src </span><br><span class="line">├── api <span class="comment">// 各种接口 </span></span><br><span class="line">├── assets <span class="comment">// 图片等资源 </span></span><br><span class="line">├── components <span class="comment">// 各种公共组件，非公共组件在各自view下维护 </span></span><br><span class="line">├── icons <span class="comment">//svg icon </span></span><br><span class="line">├── router <span class="comment">// 路由表 </span></span><br><span class="line">├── store <span class="comment">// 存储 </span></span><br><span class="line">├── styles <span class="comment">// 各种样式 </span></span><br><span class="line">├── utils <span class="comment">// 公共工具，非公共工具，在各自view下维护 </span></span><br><span class="line">├── views <span class="comment">// 各种layout</span></span><br><span class="line">├── <span class="title class_">App</span>.<span class="property">vue</span> <span class="comment">//***项目顶层组件*** </span></span><br><span class="line">├── main.<span class="property">js</span> <span class="comment">//***项目入口文件***</span></span><br><span class="line">└── permission.<span class="property">js</span> <span class="comment">//认证入口</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day03</title>
      <link href="/article/429c765f.html"/>
      <url>/article/429c765f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>es6</p><p>vue入门</p></blockquote><span id="more"></span><p><img src="https://i.loli.net/2020/10/26/gkMJH9wX8RldApu.png" alt="image-20201026123546467"></p><h2 id="一、特定异常处理"><a href="#一、特定异常处理" class="headerlink" title="一、特定异常处理"></a>一、特定异常处理</h2><p>捕获 ArithmeticException 并处理 在GlobalExceptionHandler 添加以下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//特定异常处理</span></span><br><span class="line"><span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">error</span><span class="params">(ArithmeticException e)</span> &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> R.error().message(<span class="string">&quot;执行了ArithmeticException异常处理..&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、自定义异常处理"><a href="#二、自定义异常处理" class="headerlink" title="二、自定义异常处理"></a>二、自定义异常处理</h2><p><strong>1、创建自定义异常类，继承RuntimeException， 写异常属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//生成有参数的构造方法</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//生成无参数的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuliException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//状态码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、在GlobalExceptionHandler 添加以下方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常处理</span></span><br><span class="line"><span class="meta">@ExceptionHandler(GuliException.class)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">error</span><span class="params">(GuliException e)</span> &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> R.error().code(e.getCode()).message(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、执行自定义异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GuliException</span>(<span class="number">20001</span>,<span class="string">&quot;执行了自定义异常处理&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、统一日志处理"><a href="#三、统一日志处理" class="headerlink" title="三、统一日志处理"></a>三、统一日志处理</h2><p><strong>1、配置日志级别</strong> 日志记录器（Logger）的行为是分等级的。如下表所示： 分为：OFF、FATAL、<strong>ERROR、WARN、INFO、DEBUG</strong>、ALL 默认情况下，spring boot从控制台打印出来的日志级别只有INFO及以上级别，可以配置日志级别</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置日志级别</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">INFO</span></span><br></pre></td></tr></table></figure><p>这种方式只能<strong>将日志打印在控制台上</strong> <strong>2、Logback日志配置</strong> spring boot内部使用Logback作为日志实现的框架 （1）删除application.properties中的日志配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mybatis日志</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>（2）resources创建 logback-spring.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration  scan=&quot;true&quot; scanPeriod=&quot;10 seconds&quot;&gt;</span><br><span class="line">    &lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span><br><span class="line">    &lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span><br><span class="line">    &lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span><br><span class="line">    &lt;!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;contextName&gt;logback&lt;/contextName&gt;</span><br><span class="line">    &lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span><br><span class="line">    &lt;property name=&quot;log.path&quot; value=&quot;D:/guli_log/edu&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 彩色日志 --&gt;</span><br><span class="line">    &lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt;</span><br><span class="line">    &lt;!-- magenta:洋红 --&gt;</span><br><span class="line">    &lt;!-- boldMagenta:粗红--&gt;</span><br><span class="line">    &lt;!-- cyan:青色 --&gt;</span><br><span class="line">    &lt;!-- white:白色 --&gt;</span><br><span class="line">    &lt;!-- magenta:洋红 --&gt;</span><br><span class="line">    &lt;property name=&quot;CONSOLE_LOG_PATTERN&quot;</span><br><span class="line">              value=&quot;%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) %highlight(%-5level) %blue(%thread) %blue(%file:%line) %green(%logger) %cyan(%msg%n)&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--输出到控制台--&gt;</span><br><span class="line">    &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span><br><span class="line">        &lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;INFO&lt;/level&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;Pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/Pattern&gt;</span><br><span class="line">            &lt;!-- 设置字符集 --&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--输出到文件--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span><br><span class="line">    &lt;appender name=&quot;INFO_FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;log.path&#125;/log_info.log&lt;/file&gt;</span><br><span class="line">        &lt;!--日志文件输出格式--&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!-- 每天日志归档路径以及格式 --&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;maxHistory&gt;15&lt;/maxHistory&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录info级别的 --&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;INFO&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span><br><span class="line">    &lt;appender name=&quot;WARN_FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;log.path&#125;/log_warn.log&lt;/file&gt;</span><br><span class="line">        &lt;!--日志文件输出格式--&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;!-- 此处设置字符集 --&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;maxHistory&gt;15&lt;/maxHistory&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录warn级别的 --&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;warn&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span><br><span class="line">    &lt;appender name=&quot;ERROR_FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;log.path&#125;/log_error.log&lt;/file&gt;</span><br><span class="line">        &lt;!--日志文件输出格式--&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;!-- 此处设置字符集 --&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;maxHistory&gt;15&lt;/maxHistory&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;ERROR&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span><br><span class="line">        &lt;logger&gt;仅有一个name属性，</span><br><span class="line">        一个可选的level和一个可选的addtivity属性。</span><br><span class="line">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span><br><span class="line">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span><br><span class="line">              如果未设置此属性，那么当前logger将会继承上级的级别。</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span><br><span class="line">        第一种把&lt;root level=&quot;INFO&quot;&gt;改成&lt;root level=&quot;DEBUG&quot;&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span><br><span class="line">        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;!--开发环境:打印控制台--&gt;</span><br><span class="line">    &lt;springProfile name=&quot;dev&quot;&gt;</span><br><span class="line">        &lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span><br><span class="line">        &lt;logger name=&quot;com.guli&quot; level=&quot;INFO&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--</span><br><span class="line">            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span><br><span class="line">            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG</span><br><span class="line">            可以包含零个或多个appender元素。</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;INFO_FILE&quot; /&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;WARN_FILE&quot; /&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;ERROR_FILE&quot; /&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">    &lt;/springProfile&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--生产环境:输出到文件--&gt;</span><br><span class="line">    &lt;springProfile name=&quot;pro&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;DEBUG_FILE&quot; /&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;INFO_FILE&quot; /&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;ERROR_FILE&quot; /&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;WARN_FILE&quot; /&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">    &lt;/springProfile&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><strong>3、异常信息输出到文件</strong> （1）全局异常处理类加注解 @Slf4j</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br></pre></td></tr></table></figure><p>（2）异常输出语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.error(e.getMsg());</span><br></pre></td></tr></table></figure><p><strong>4、将日志堆栈信息输出到文件</strong> 定义工具类 guli-framework-common下创建util包，创建ExceptionUtil.java工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guli.common.util;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessage</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sw = <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">            pw = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(sw);</span><br><span class="line">            <span class="comment">// 将出错的栈信息输出到printWriter中</span></span><br><span class="line">            e.printStackTrace(pw);</span><br><span class="line">            pw.flush();</span><br><span class="line">            sw.flush();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (sw != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pw != <span class="literal">null</span>) &#123;</span><br><span class="line">                pw.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sw.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.error(ExceptionUtil.getMessage(e));</span><br></pre></td></tr></table></figure><p>GuliException中创建toString方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;GuliException&#123;&quot;</span> +</span><br><span class="line">        <span class="string">&quot;message=&quot;</span> + <span class="built_in">this</span>.getMessage() +</span><br><span class="line">        <span class="string">&quot;, code=&quot;</span> + code +</span><br><span class="line">        <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、前端开发"><a href="#四、前端开发" class="headerlink" title="四、前端开发"></a>四、前端开发</h2><p><strong>1、vscode创建工作区</strong> （1）创建空文件夹 （2）使用vscode打开创建的空文件夹 （3）把文件夹保存为工作区</p><h2 id="五、ES6-入门"><a href="#五、ES6-入门" class="headerlink" title="五、ES6 入门"></a>五、ES6 入门</h2><p><img src="https://i.loli.net/2020/10/28/sBIaNg5cUOfJj9V.png" alt="image-20201028200939426"></p><h2 id="六、vue入门"><a href="#六、vue入门" class="headerlink" title="六、vue入门"></a>六、vue入门</h2><p>vue入门1 vue入门2 <strong>1、抽取vue代码片段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;vue htm&quot;: &#123;</span><br><span class="line">        &quot;scope&quot;: &quot;html&quot;,</span><br><span class="line">        &quot;prefix&quot;: &quot;vuehtml&quot;,</span><br><span class="line">        &quot;body&quot;: [</span><br><span class="line">            &quot;&lt;!DOCTYPE html&gt;&quot;,</span><br><span class="line">            &quot;&lt;html lang=\&quot;en\&quot;&gt;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;&lt;head&gt;&quot;,</span><br><span class="line">            &quot;    &lt;meta charset=\&quot;UTF-8\&quot;&gt;&quot;,</span><br><span class="line">            &quot;    &lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1.0\&quot;&gt;&quot;,</span><br><span class="line">            &quot;    &lt;meta http-equiv=\&quot;X-UA-Compatible\&quot; content=\&quot;ie=edge\&quot;&gt;&quot;,</span><br><span class="line">            &quot;    &lt;title&gt;Document&lt;/title&gt;&quot;,</span><br><span class="line">            &quot;&lt;/head&gt;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;&lt;body&gt;&quot;,</span><br><span class="line">            &quot;    &lt;div id=\&quot;app\&quot;&gt;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;    &lt;/div&gt;&quot;,</span><br><span class="line">            &quot;    &lt;script src=\&quot;vue.min.js\&quot;&gt;&lt;/script&gt;&quot;,</span><br><span class="line">            &quot;    &lt;script&gt;&quot;,</span><br><span class="line">            &quot;        new Vue(&#123;&quot;,</span><br><span class="line">            &quot;            el: &#x27;#app&#x27;,&quot;,</span><br><span class="line">            &quot;            data: &#123;&quot;,</span><br><span class="line">            &quot;                $1&quot;,</span><br><span class="line">            &quot;            &#125;&quot;,</span><br><span class="line">            &quot;        &#125;)&quot;,</span><br><span class="line">            &quot;    &lt;/script&gt;&quot;,</span><br><span class="line">            &quot;&lt;/body&gt;&quot;,</span><br><span class="line">            &quot;&quot;,</span><br><span class="line">            &quot;&lt;/html&gt;&quot;,</span><br><span class="line">        ],</span><br><span class="line">        &quot;description&quot;: &quot;my vue template in html&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、vue组件"><a href="#七、vue组件" class="headerlink" title="七、vue组件"></a>七、vue组件</h2><p>组件（Component）是 Vue.js 最强大的功能之一。 组件可以扩展 HTML 元素，封装可重用的代码。 组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树： <img src="https://i.loli.net/2020/10/28/nILQqizpe6CB3FE.png" alt="img"> <strong>1、局部组件</strong> 定义组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="comment">// 定义局部组件，这里可以定义多个局部组件</span></span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="comment">//组件的名字</span></span><br><span class="line">        <span class="string">&#x27;Navbar&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment">//组件的内容</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;&lt;ul&gt;&lt;li&gt;首页&lt;/li&gt;&lt;li&gt;学员管理&lt;/li&gt;&lt;/ul&gt;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;Navbar&gt;&lt;/Navbar&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>2、全局组件</strong> 定义全局组件：components&#x2F;Navbar.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;Navbar&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;ul&gt;&lt;li&gt;首页&lt;/li&gt;&lt;li&gt;学员管理&lt;/li&gt;&lt;li&gt;讲师管理&lt;/li&gt;&lt;/ul&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;Navbar&gt;&lt;/Navbar&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;components/Navbar.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>3、实例的生命周期</strong> <img src="https://i.loli.net/2020/10/28/qelPIHWiAxRLG6c.png" alt="Vue å®ä¾çå½å¨æ"> <strong>重点使用：</strong></p><ul><li>before</li><li>monted</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            //页面渲染之前执行</span><br><span class="line">            created()&#123;</span><br><span class="line">                //断点</span><br><span class="line">                debugger</span><br><span class="line">                console.log(&quot;created&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            //页面渲染之后执行</span><br><span class="line">            mounted()&#123;</span><br><span class="line">                debugger</span><br><span class="line">                console.log(&quot;monted&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="八、vue路由"><a href="#八、vue路由" class="headerlink" title="八、vue路由"></a>八、vue路由</h2><p>Vue.js 路由允许我们通过不同的 URL 访问不同的内容。 通过 Vue.js 可以实现多视图的单页Web应用（single page web application，SPA）。 Vue.js 路由需要载入 vue-router 库 <strong>1、引入js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;vue.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>2、编写html</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Hello App!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;!-- 使用 router-link 组件来导航. --&gt;</span><br><span class="line">        &lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span><br><span class="line">        &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span><br><span class="line">        &lt;router-link to=&quot;/&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">        &lt;router-link to=&quot;/student&quot;&gt;会员管理&lt;/router-link&gt;</span><br><span class="line">        &lt;router-link to=&quot;/teacher&quot;&gt;讲师管理&lt;/router-link&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;!-- 路由出口 --&gt;</span><br><span class="line">    &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>3、编写js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 定义（路由）组件。</span></span><br><span class="line">    <span class="comment">// 可以从其他文件 import 进来</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Welcome</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;欢迎&lt;/div&gt;&#x27;</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Student</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;student list&lt;/div&gt;&#x27;</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Teacher</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;teacher list&lt;/div&gt;&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 定义路由</span></span><br><span class="line">    <span class="comment">// 每个路由应该映射一个组件。</span></span><br><span class="line">    <span class="keyword">const</span> routes = [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/welcome&#x27;</span> &#125;, <span class="comment">//设置默认指向的路径</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/welcome&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Welcome</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/student&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Student</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/teacher&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Teacher</span> &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">        routes <span class="comment">// （缩写）相当于 routes: routes</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 创建和挂载根实例。</span></span><br><span class="line">    <span class="comment">// 从而让整个应用都有路由功能</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        router</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 现在，应用已经启动了！</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day02</title>
      <link href="/article/359b46c9.html"/>
      <url>/article/359b46c9.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>swagger接口测试</p><p>统一返回结果与统一异常处理</p></blockquote><span id="more"></span><h2 id="1、前后端分离开发"><a href="#1、前后端分离开发" class="headerlink" title="1、前后端分离开发"></a>1、前后端分离开发</h2><p><img src="https://i.loli.net/2020/10/22/Gd9M6oRnjrHFwVt.png" alt="image-20201022213810834"></p><h2 id="2、数据库设计规约"><a href="#2、数据库设计规约" class="headerlink" title="2、数据库设计规约"></a>2、数据库设计规约</h2><p>以下规约只针对本模块，更全面的文档参考《阿里巴巴Java开发手册》：</p><p>五、MySQL数据库 </p><p>1、库名与应用名称尽量一致 </p><p>2、表名、字段名必须使用小写字母或数字，禁止出现数字开头</p><p>3、表名不使用复数名词 </p><p>4、表的命名最好是加上“业务名称_表的作用”。如，edu_teacher </p><p>5、表必备三字段：id, gmt_create, gmt_modified 说明： 其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。 （如果使用分库分表集群部署，则id类型为verchar，非自增，业务中使用分布式id生成器） gmt_create, gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被 动更新。 </p><p>6、单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。 说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。 </p><p>7、表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint （1 表示是，0 表示否）。 说明：任何字段如果为非负数，必须是 unsigned。 注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的 命名方式是为了明确其取值含义与取值范围。 正例：表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。 </p><p>8、小数类型为 decimal，禁止使用 float 和 double。 说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不 正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。 </p><p>9、如果存储的字符串长度几乎相等，使用 char 定长字符串类型。 </p><p>10、varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索 引效率。 </p><p>11、唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。 说明：uk_ 即 unique key；idx_ 即 index 的简称 12、不得使用外键与级联，一切外键概念必须在应用层解决。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p><h2 id="3、创建项目结构——父工程"><a href="#3、创建项目结构——父工程" class="headerlink" title="3、创建项目结构——父工程"></a>3、创建项目结构——父工程</h2><p><img src="https://i.loli.net/2020/10/22/ri8eG6IOKvVPs4J.png" alt="image-20201022230515811"> 1、创建springboot项目 guli_parent 2、删除src目录 3、配置pom.xml <strong>修改版本为 ：2.2.1.RELEASE</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;version&gt;2.2.1.RELEASE&lt;/version&gt;</span><br></pre></td></tr></table></figure><p><strong>节点后面添加 pom类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;guli_parent&lt;/artifactId&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><p><strong>删除pom.xml中的****<code>&lt;dependencies&gt;内容</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 以下内容删除 --&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>添加 确定依赖的版本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;guli.version&gt;0.0.1-SNAPSHOT&lt;/guli.version&gt;</span><br><span class="line">    &lt;mybatis-plus.version&gt;3.0.5&lt;/mybatis-plus.version&gt;</span><br><span class="line">    &lt;velocity.version&gt;2.0&lt;/velocity.version&gt;</span><br><span class="line">    &lt;swagger.version&gt;2.7.0&lt;/swagger.version&gt;</span><br><span class="line">    &lt;aliyun.oss.version&gt;2.8.3&lt;/aliyun.oss.version&gt;</span><br><span class="line">    &lt;jodatime.version&gt;2.10.1&lt;/jodatime.version&gt;</span><br><span class="line">    &lt;poi.version&gt;3.17&lt;/poi.version&gt;</span><br><span class="line">    &lt;commons-fileupload.version&gt;1.3.1&lt;/commons-fileupload.version&gt;</span><br><span class="line">    &lt;commons-io.version&gt;2.6&lt;/commons-io.version&gt;</span><br><span class="line">    &lt;httpclient.version&gt;4.5.1&lt;/httpclient.version&gt;</span><br><span class="line">    &lt;jwt.version&gt;0.7.0&lt;/jwt.version&gt;</span><br><span class="line">    &lt;aliyun-java-sdk-core.version&gt;4.3.3&lt;/aliyun-java-sdk-core.version&gt;</span><br><span class="line">    &lt;aliyun-sdk-oss.version&gt;3.1.0&lt;/aliyun-sdk-oss.version&gt;</span><br><span class="line">    &lt;aliyun-java-sdk-vod.version&gt;2.15.2&lt;/aliyun-java-sdk-vod.version&gt;</span><br><span class="line">    &lt;aliyun-java-vod-upload.version&gt;1.4.11&lt;/aliyun-java-vod-upload.version&gt;</span><br><span class="line">    &lt;aliyun-sdk-vod-upload.version&gt;1.4.11&lt;/aliyun-sdk-vod-upload.version&gt;</span><br><span class="line">    &lt;fastjson.version&gt;1.2.28&lt;/fastjson.version&gt;</span><br><span class="line">    &lt;gson.version&gt;2.8.2&lt;/gson.version&gt;</span><br><span class="line">    &lt;json.version&gt;20170516&lt;/json.version&gt;</span><br><span class="line">    &lt;commons-dbutils.version&gt;1.7&lt;/commons-dbutils.version&gt;</span><br><span class="line">    &lt;canal.client.version&gt;1.1.0&lt;/canal.client.version&gt;</span><br><span class="line">    &lt;docker.image.prefix&gt;zx&lt;/docker.image.prefix&gt;</span><br><span class="line">    &lt;cloud-alibaba.version&gt;0.2.2.RELEASE&lt;/cloud-alibaba.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p><strong>配置 锁定依赖的版本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--Spring Cloud--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;Hoxton.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;cloud-alibaba.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--mybatis-plus 持久层--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;mybatis-plus.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;velocity.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--swagger--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;swagger.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--swagger ui--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;swagger.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--aliyunOSS--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;aliyun.oss.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--日期时间工具--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;joda-time&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;joda-time&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;jodatime.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--xls--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--xlsx--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--文件上传--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;commons-fileupload.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--commons-io--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;commons-io.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--httpclient--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;httpclient.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;gson.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- JWT --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;jwt.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--aliyun--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;aliyun-java-sdk-core.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;aliyun-sdk-oss.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aliyun-java-sdk-vod&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;aliyun-java-sdk-vod.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aliyun-java-vod-upload&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;aliyun-java-vod-upload.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aliyun-sdk-vod-upload&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;aliyun-sdk-vod-upload.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.json&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;json&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;json.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-dbutils&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-dbutils&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;commons-dbutils.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.otter&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;canal.client&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;canal.client.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><h2 id="4、创建项目结构——service模块"><a href="#4、创建项目结构——service模块" class="headerlink" title="4、创建项目结构——service模块"></a>4、创建项目结构——service模块</h2><p>1、创建maven项目 service 2、 节点后面添加 pom类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、删除src 4、添加项目所需要的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--hystrix依赖，主要是用  @HystrixCommand --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--服务注册--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--服务调用--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--mybatis-plus--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--mysql--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--swagger--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--xls--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--httpclient--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--commons-io--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--gson--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>5、在service下再创建maven子模块 <strong>完成创建后的项目目录结构</strong> <img src="https://i.loli.net/2020/10/22/gj9XmdPzqlxLH87.png" alt="image-20201022231508942"></p><h2 id="5、开发讲师管理模块"><a href="#5、开发讲师管理模块" class="headerlink" title="5、开发讲师管理模块"></a>5、开发讲师管理模块</h2><p><strong>1、创建application.properties配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 服务名 (spring-cloud用到)</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">service-edu</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 环境设置：dev、test、prod</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># mysql数据库连接</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/guli?</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#mybatis日志</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p><strong>2、编写controller service mapper 代码内容</strong> <strong>mp提供代码生成器，生成相关代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建代码生成器</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="comment">/*String projectPath = System.getProperty(&quot;user.dir&quot;);*/</span></span><br><span class="line">        <span class="comment">//推荐使用绝对路径</span></span><br><span class="line">        gc.setOutputDir(<span class="string">&quot;G:\\idea_project\\gulixueyuan\\guli_parent\\service\\service_edu&quot;</span> + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;liaotao&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>); <span class="comment">//生成后是否打开资源管理器</span></span><br><span class="line">        gc.setFileOverride(<span class="literal">false</span>); <span class="comment">//重新生成时文件是否覆盖</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>); <span class="comment">//去掉Service接口的首字母I</span></span><br><span class="line">        gc.setIdType(IdType.ID_WORKER); <span class="comment">//主键策略</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);<span class="comment">//定义生成的实体类中日期类型</span></span><br><span class="line">        gc.setSwagger2(<span class="literal">true</span>);<span class="comment">//开启Swagger2模式</span></span><br><span class="line"></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/guli&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;eduservice&quot;</span>); <span class="comment">//模块名</span></span><br><span class="line">        pc.setParent(<span class="string">&quot;com.cyfwlp&quot;</span>);</span><br><span class="line">        <span class="comment">//生成 com.cyfwlp.eduservice</span></span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        <span class="comment">//加表的名称</span></span><br><span class="line">        strategy.setInclude(<span class="string">&quot;edu_teacher&quot;</span>);</span><br><span class="line"></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表映射到实体的命名策略</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>); <span class="comment">//生成实体时去掉表前缀</span></span><br><span class="line"></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表字段映射到实体的命名策略</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>); <span class="comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span></span><br><span class="line"></span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>); <span class="comment">//restful api风格控制器</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>); <span class="comment">//url中驼峰转连字符</span></span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、编写controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/eduservice/teacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EduTeacherController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入service</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EduTeacherService teacherService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.查询讲师表中的所有数据</span></span><br><span class="line">    <span class="comment">//rest风格</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;EduTeacher&gt; <span class="title function_">findAllTeacher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacherService.list(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、编写springboot启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EduApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EduApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、编写配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.cyfwlp.eduservice.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EduConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、统一返回的json时间格式</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回json的全局时间格式</span></span><br><span class="line"><span class="attr">spring.jackson.date-format</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="attr">spring.jackson.time-zone</span>=<span class="string">GMT+8</span></span><br></pre></td></tr></table></figure><h2 id="6、整合swagger进行接口测试"><a href="#6、整合swagger进行接口测试" class="headerlink" title="6、整合swagger进行接口测试"></a>6、整合swagger进行接口测试</h2><p>前后端分离开发模式中，api文档是最好的沟通方式。 Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><ol><li>及时性 (接口变更后，能够及时准确地通知相关前后端开发人员)</li><li>规范性 (并且保证接口的规范性，如接口的地址，请求方式，参数及响应格式和错误信息)</li><li>一致性 (接口信息一致，不会出现因开发人员拿到的文档版本不一致，而出现分歧)</li><li>可测性 (直接在接口文档上进行测试，以方便理解业务)</li></ol><p><strong>1、guli_parent下建立子模块common，common再创建子模块service_base</strong> common引入相关依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;provided &lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--mybatis-plus--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;provided &lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;provided &lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--swagger--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;provided &lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;provided &lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- redis --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- spring2.X集成redis所需common-pool2</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;--&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>2、在模块service-base中，创建swagger的配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">webApiConfig</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;webApi&quot;</span>)</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/admin/.*&quot;</span>)))</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/error.*&quot;</span>)))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">webApiInfo</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;网站-课程中心API文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;本文档描述了课程中心微服务接口定义&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;Helen&quot;</span>, <span class="string">&quot;http://atguigu.com&quot;</span>, <span class="string">&quot;55317332@qq.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、service_edu引入service_base</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.cyfwlp&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;service_base&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>4、启动类添加 @ComponentScan注解，设置包扫描的规则</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.cyfwlp&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EduApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EduApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、访问swagger</strong> <a href="http://localhost:8002/swagger-ui.html/">http://localhost:8002/swagger-ui.html/</a> 参数说明 定义在类上：@Api 定义在方法上：@ApiOperation 定义在参数上：@ApiParam</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(description=&quot;讲师管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/edu/teacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherAdminController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TeacherService teacherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;所有讲师列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Teacher&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacherService.list(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;根据ID删除讲师&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@ApiParam(name = &quot;id&quot;, value = &quot;讲师ID&quot;, required = true)</span></span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> String id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacherService.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、统一返回数据格式"><a href="#7、统一返回数据格式" class="headerlink" title="7、统一返回数据格式"></a>7、统一返回数据格式</h2><p>项目中我们会将响应封装成json返回，一般我们会将所有接口的数据格式统一， 使前端(iOS Android, Web)对数据的操作更一致、轻松。一般情况下，统一返回数据格式没有固定的格式，只要能描述清楚返回的数据状态以及要返回的具体数据就可以。但是一般会包含状态码、返回消息、数据这几部分内容 例如，我们的系统要求返回的基本数据格式如下： <strong>列表：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">20000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;刘德华&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;intro&quot;</span><span class="punctuation">:</span> <span class="string">&quot;毕业于师范大学数学系，热爱教育事业，执教数学思维6年有余&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>分页：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">20000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;刘德华&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;intro&quot;</span><span class="punctuation">:</span> <span class="string">&quot;毕业于师范大学数学系，热爱教育事业，执教数学思维6年有余&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>没有返回数据：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">20000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>失败：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">20001</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;失败&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>因此，我们定义统一结果</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> 布尔<span class="punctuation">,</span> <span class="comment">//响应是否成功</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> 数字<span class="punctuation">,</span> <span class="comment">//响应码</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> 字符串<span class="punctuation">,</span> <span class="comment">//返回消息</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> HashMap <span class="comment">//返回数据，放在键值对中</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>1、在common模块创建子模块 common_utils 2、创建interface，定义数据返回状态码 （或者使用枚举类）</p><ul><li>成功 20000</li><li>失败 20001</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResultCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">SUCCESS</span> <span class="operator">=</span> <span class="number">20000</span>; <span class="comment">//成功</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">ERROR</span> <span class="operator">=</span> <span class="number">20001</span>; <span class="comment">//失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、定义返回的数据格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;是否成功&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">R</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.setSuccess(<span class="literal">true</span>);</span><br><span class="line">        r.setCode(ResultCode.SUCCESS);</span><br><span class="line">        r.setMessage(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        r.setCode(ResultCode.ERROR);</span><br><span class="line">        r.setMessage(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">success</span><span class="params">(Boolean success)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setSuccess(success);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">message</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">code</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">data</span><span class="params">(String key, Object value)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">data</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setData(map);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、使用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;所有讲师列表&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">findAllTeacher</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;EduTeacher&gt; list = teacherService.list(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//链式编程</span></span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;items&quot;</span>,list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、全局异常处理"><a href="#8、全局异常处理" class="headerlink" title="8、全局异常处理"></a>8、全局异常处理</h2><p>在service-base中创建统一异常处理类GlobalExceptionHandler.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定出现什么异常执行这个方法</span></span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">//为了返回数据</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">error</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> R.error().message(<span class="string">&quot;执行了全局异常处理..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院开发day01</title>
      <link href="/article/ac921773.html"/>
      <url>/article/ac921773.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>项目简介、mybatisPlus</p></blockquote><span id="more"></span><h2 id="1、项目功能模块"><a href="#1、项目功能模块" class="headerlink" title="1、项目功能模块"></a>1、项目功能模块</h2><p><img src="https://i.loli.net/2020/10/21/YEe5wgdvnxkFmlb.png" alt="image-20201021214203595"></p><h2 id="2、项目使用的技术"><a href="#2、项目使用的技术" class="headerlink" title="2、项目使用的技术"></a>2、项目使用的技术</h2><p><img src="https://i.loli.net/2020/10/21/lmgKYdqvU4QusO9.png" alt="image-20201021214214734"></p><h2 id="3、MybatisPlus"><a href="#3、MybatisPlus" class="headerlink" title="3、MybatisPlus"></a>3、MybatisPlus</h2><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生</p><h3 id="（1）mybatisPlus快速入门"><a href="#（1）mybatisPlus快速入门" class="headerlink" title="（1）mybatisPlus快速入门"></a>（1）mybatisPlus快速入门</h3><p><strong>spingboot版本：2.1.1</strong> 1、引入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mybatis-plus--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--mysql--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.32&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--lombok用来简化实体类--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2、配置application.properties <strong>注意mysql版本不同对应的驱动类名不同</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql数据库连接</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis_plus</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>3、编写代码 <strong>@Data注解，不需要手动写get，set方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mapper继承 BaseMapper接口，不需要编写xxxMapper.xml</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseMapper</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(T var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Serializable var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByMap</span><span class="params">(<span class="meta">@Param(&quot;cm&quot;)</span> Map&lt;String, Object&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteBatchIds</span><span class="params">(<span class="meta">@Param(&quot;coll&quot;)</span> Collection&lt;? extends Serializable&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@Param(&quot;et&quot;)</span> T var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(&quot;et&quot;)</span> T var1, <span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; var2)</span>;</span><br><span class="line"></span><br><span class="line">    T <span class="title function_">selectById</span><span class="params">(Serializable var1)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(&quot;coll&quot;)</span> Collection&lt;? extends Serializable&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectByMap</span><span class="params">(<span class="meta">@Param(&quot;cm&quot;)</span> Map&lt;String, Object&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    T <span class="title function_">selectOne</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    Integer <span class="title function_">selectCount</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMaps</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Object&gt; <span class="title function_">selectObjs</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    IPage&lt;T&gt; <span class="title function_">selectPage</span><span class="params">(IPage&lt;T&gt; var1, <span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; var2)</span>;</span><br><span class="line"></span><br><span class="line">    IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMapsPage</span><span class="params">(IPage&lt;T&gt; var1, <span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; var2)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动类指定扫描mappers位置</strong> @MapperScan注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.tao.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mpdemo1010Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Mpdemo1010Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查看sql日志</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mybatis日志</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h3 id="（2）主键策略"><a href="#（2）主键策略" class="headerlink" title="（2）主键策略"></a>（2）主键策略</h3><p><strong>1、自动增长 anto increment</strong> 分表：用户表数据过于庞大，分到几张表中进行存储 <img src="https://i.loli.net/2020/10/21/YstfITrauOj6QAP.png" alt="image-20201021230158974"> 缺点：在新的表添加数据时需要查询到上一张表最后一条数据id <strong>2、UUID 每次操作生成随机的唯一的值</strong> <img src="https://i.loli.net/2020/10/21/yISfbRxCDmv6r1a.png" alt="image-20201021230313887"> 缺点：排序不方便 <strong>3、Redis实现</strong> ​ 当使用数据库来生成ID性能不够要求的时候，我们可以尝试使用Redis来生成ID。这主要依赖于Redis是单线程的，所以也可以用生成全局唯一的ID。可以用Redis的原子操作 INCR和INCRBY来实现。 <strong>4、Twitter的snowflake（雪花）算法（mp使用）</strong> ​ snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。具体实现的代码可以参看<a href="https://github.com/twitter/snowflake%E3%80%82">https://github.com/twitter/snowflake。</a> <strong>配置主键策略</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line"><span class="comment">//IdType</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">IdType</span> &#123;</span><br><span class="line">    AUTO(<span class="number">0</span>),<span class="comment">//自动增长</span></span><br><span class="line">    NONE(<span class="number">1</span>),<span class="comment">//输入</span></span><br><span class="line">    INPUT(<span class="number">2</span>),<span class="comment">//设置id值</span></span><br><span class="line">    UUID(<span class="number">4</span>),<span class="comment">//使用uuid</span></span><br><span class="line">    <span class="comment">//mp自带策略</span></span><br><span class="line">    ID_WORKER(<span class="number">3</span>), <span class="comment">//mp自带策略，默认策略，会生成19位值，数字类型使用这种策略</span></span><br><span class="line">    ID_WORKER_STR(<span class="number">5</span>);<span class="comment">//mp自带策略，会生成19位值，字符串类型使用这种策略</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）自动填充"><a href="#（3）自动填充" class="headerlink" title="（3）自动填充"></a>（3）自动填充</h3><p> 项目中经常会遇到一些数据，每次都使用相同的方式填充，例如记录的<strong>创建时间</strong>，<strong>更新时间</strong>等。我们可以使用MyBatis Plus的自动填充功能，完成这些字段的赋值工作。 原始方式：手动设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">user.setUpdateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br></pre></td></tr></table></figure><p>mp方式： <strong>1、在实体类里面进行需要自动填充的属性上面加注解 @TableField</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure><p><strong>2、创建类，实现接口MetaObjectHandler，实现接口里的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用mp进行插入操作时，这个方法执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">////使用mp进行修改操作时，这个方法执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在实际开发中选择使用，实现功能即可</p></blockquote><h3 id="（4）乐观锁"><a href="#（4）乐观锁" class="headerlink" title="（4）乐观锁"></a>（4）乐观锁</h3><p>悲观锁：串行 乐观锁：</p><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时， set version &#x3D; newVersion where version &#x3D; oldVersion</li><li>如果version不对，就更新失败</li></ul><p>使用场景：12306抢火车票 mp使用乐观锁： 1、实体类对应version属性添加@Version注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;<span class="comment">//版本号</span></span><br></pre></td></tr></table></figure><p>2、配置乐观锁插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.tao.mapper&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 乐观锁插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OptimisticLockerInterceptor <span class="title function_">optimisticLockerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、修改时需先查询再修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOptimisticLocker</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//需先查询再修改</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1319239623661387777L</span>);</span><br><span class="line">    user.setAge(<span class="number">200</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">    System.out.println(row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（5）分页查询"><a href="#（5）分页查询" class="headerlink" title="（5）分页查询"></a>（5）分页查询</h3><p>mp实现分页查询 1、配置分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写分页代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectPage</span><span class="params">()</span> &#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;User&gt;(<span class="number">1</span>,<span class="number">3</span>); <span class="comment">//参数 当前页，每页记录数</span></span><br><span class="line">    userMapper.selectPage(page, <span class="literal">null</span>);<span class="comment">// 第二个参数条件</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;当前页&quot;</span> +  page.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;页数&quot;</span> +  page.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前数据&quot;</span> + page.getRecords());</span><br><span class="line">    System.out.println(<span class="string">&quot;每页大小&quot;</span> + page.getSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;总条数&quot;</span> + page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否下一页 &quot;</span>+page.hasNext());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否前一页&quot;</span> + page.hasPrevious());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（6）逻辑删除"><a href="#（6）逻辑删除" class="headerlink" title="（6）逻辑删除"></a>（6）逻辑删除</h3><p>1、数据表添加字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `deleted` <span class="type">boolean</span></span><br></pre></td></tr></table></figure><p>2、属性上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted; <span class="comment">//逻辑删除</span></span><br></pre></td></tr></table></figure><p>3、配置逻辑删除插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ISqlInjector <span class="title function_">sqlInjector</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LogicSqlInjector</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果： 删除时执行update</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">userMapper.deleteById(<span class="number">1319249424579670018L</span>);</span><br><span class="line"></span><br><span class="line">==&gt;  Preparing: UPDATE user SET deleted=<span class="number">1</span> WHERE id=? AND deleted=<span class="number">0</span> </span><br><span class="line">==&gt; Parameters: <span class="number">1319249424579670018</span>(Long)</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>查询时加上条件where deleted &#x3D; 0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">Preparing: SELECT id,name,age,email,create_time,update_time,version,deleted FROM user WHERE deleted=<span class="number">0</span> </span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==      Total: <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="（7）性能分析"><a href="#（7）性能分析" class="headerlink" title="（7）性能分析"></a>（7）性能分析</h3><p>1、配置性能分析插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * SQL 执行性能分析插件</span></span><br><span class="line"><span class="comment">    * 开发环境使用，线上不推荐。 maxTime 指的是 sql 最大执行时长</span></span><br><span class="line"><span class="comment">    * 项目开发的环境</span></span><br><span class="line"><span class="comment">    * dev： 开发环境</span></span><br><span class="line"><span class="comment">    * test：测试环境</span></span><br><span class="line"><span class="comment">    * prod：生产环境</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//表示当前插件对什么环境起作用</span></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span><span class="comment">// 设置 dev test 环境开启</span></span><br><span class="line"><span class="keyword">public</span> PerformanceInterceptor <span class="title function_">performanceInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">PerformanceInterceptor</span> <span class="variable">performanceInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PerformanceInterceptor</span>();</span><br><span class="line">    performanceInterceptor.setMaxTime(<span class="number">100</span>);<span class="comment">//ms，超过此处设置的ms则sql不执行</span></span><br><span class="line">    performanceInterceptor.setFormat(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、设置springboot dev环境</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#环境设置：dev、test、prod</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure><h3 id="（8）复杂条件查询"><a href="#（8）复杂条件查询" class="headerlink" title="（8）复杂条件查询"></a>（8）复杂条件查询</h3><p>使用<strong>QueryWrapper</strong>构建查询条件 ge gt le lr ： &gt;&#x3D; &gt; &lt;&#x3D; &lt; eq ne ： &#x3D;&#x3D; &lt;&gt; like： 模糊查询 orderByDesc： 排序 between ： 范围 last ：在sql语句的最后拼接一段sql语句 select：查询指定列的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//创建QueryWrapper对象</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//通过QueryWrapper设置查询条件</span></span><br><span class="line">    <span class="comment">// ge,gt,le,lt</span></span><br><span class="line">    <span class="comment">// 查询age&gt;=30的记录</span></span><br><span class="line">    <span class="comment">/*wrapper.ge(&quot;age&quot;,30);*/</span></span><br><span class="line">    <span class="comment">// eq,ne == !=</span></span><br><span class="line">    <span class="comment">/*wrapper.eq(&quot;name&quot;,&quot;lisi&quot;);*/</span></span><br><span class="line">    <span class="comment">// between</span></span><br><span class="line">    <span class="comment">/*wrapper.between(&quot;age&quot;,10,100);*/</span></span><br><span class="line">    <span class="comment">// like</span></span><br><span class="line">    <span class="comment">/*wrapper.like(&quot;name&quot;,&quot;东方&quot;);*/</span></span><br><span class="line">    <span class="comment">// orderByDesc</span></span><br><span class="line">    <span class="comment">// last 直接拼接到sql</span></span><br><span class="line">    <span class="comment">/*wrapper.last(&quot;limit 1&quot;);*/</span></span><br><span class="line">    <span class="comment">// select 查询指定的列</span></span><br><span class="line">    wrapper.select(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 谷粒学院项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多路查找树</title>
      <link href="/article/5e27b8bd.html"/>
      <url>/article/5e27b8bd.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>二叉树与B树，2-3树，B树</p></blockquote><span id="more"></span><h2 id="1、二叉树与B树"><a href="#1、二叉树与B树" class="headerlink" title="1、二叉树与B树"></a>1、二叉树与B树</h2><p><img src="https://i.loli.net/2020/10/22/geum4RNv37xYIFK.png" alt="image-20201022103150182"> <img src="https://i.loli.net/2020/10/22/ZGwiKPaBbogOQdf.png" alt="image-20201022103319598"> <img src="https://i.loli.net/2020/10/22/rzWSh4jmve2HPK5.png" alt="image-20201022103941002"></p><h2 id="2、2-3树"><a href="#2、2-3树" class="headerlink" title="2、2-3树"></a>2、2-3树</h2><p><img src="https://i.loli.net/2020/10/22/EgcXOBnL12Z7mtC.png" alt="image-20201022104304006"> <strong>构建2-3树</strong> <img src="https://i.loli.net/2020/10/22/rh2LsYRUqO41Gl9.png" alt="image-20201022104525287"></p><h2 id="3、B树"><a href="#3、B树" class="headerlink" title="3、B树"></a>3、B树</h2><p><img src="https://i.loli.net/2020/10/22/dJyAiPSwxBO7ual.png" alt="image-20201022110013427"> <img src="https://i.loli.net/2020/10/22/XW6EFws8uYgUaOK.png" alt="image-20201022110330587"> <img src="https://i.loli.net/2020/10/22/zliu4HjWD62B8Aw.png" alt="image-20201022111542987"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡二叉树</title>
      <link href="/article/4263f441.html"/>
      <url>/article/4263f441.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>平衡二叉树（AVL树）</p></blockquote><span id="more"></span><h2 id="1、平衡二叉树简介"><a href="#1、平衡二叉树简介" class="headerlink" title="1、平衡二叉树简介"></a>1、平衡二叉树简介</h2><p><img src="https://i.loli.net/2020/10/21/jIEa2JBZXGcsRMn.png" alt="image-20201021125903798"></p><h2 id="2、单旋转（左旋转）"><a href="#2、单旋转（左旋转）" class="headerlink" title="2、单旋转（左旋转）"></a>2、单旋转（左旋转）</h2><p><img src="https://i.loli.net/2020/10/21/UPE1IT2wL4dy6QF.png" alt="image-20201021135409952"> 代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左旋转方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建新的结点，以当前根节点的值</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.value);</span><br><span class="line">    <span class="comment">//新结点的左子树设置为当前节点的左子树</span></span><br><span class="line">    newNode.left = left;</span><br><span class="line">    <span class="comment">//把新的结点的右子树设置为当前节点的右子树的左子树</span></span><br><span class="line">    newNode.right = right.left;</span><br><span class="line">    <span class="comment">//当前节点的值替换换成右子节点的值</span></span><br><span class="line">    value = right.value;</span><br><span class="line">    <span class="comment">//把当前节点的右子树设置为右子树的右子树</span></span><br><span class="line">    right = right.right;</span><br><span class="line">    <span class="comment">//把当前节点的左子树设置为新的结点</span></span><br><span class="line">    left = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、单旋转（右旋转）"><a href="#3、单旋转（右旋转）" class="headerlink" title="3、单旋转（右旋转）"></a>3、单旋转（右旋转）</h2><p><img src="https://i.loli.net/2020/10/21/QKTzfvxXjan4qoP.png" alt="image-20201021143814287"> 代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//右旋转方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">    newNode.right = right;</span><br><span class="line">    newNode.left = left.right;</span><br><span class="line">    value = left.value;</span><br><span class="line">    left = left.left;</span><br><span class="line">    right = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、双旋转"><a href="#4、双旋转" class="headerlink" title="4、双旋转"></a>4、双旋转</h2><p><img src="https://i.loli.net/2020/10/21/u6OAsPB7HaKJTdn.png" alt="image-20201021150312605"> 问题分析：<strong>符合右旋转条件时，如果它的左子树的右子树的高度大于它的左子树的高度，先对当前节点的左节点进行左旋转，再对当前节点进行右旋转</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断传入节点的值和当前子树的根节点的值的关系</span></span><br><span class="line">    <span class="keyword">if</span> (node.value &lt; <span class="built_in">this</span>.value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//当前节点左子节点为空，直接挂上去</span></span><br><span class="line">            <span class="built_in">this</span>.left = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//递归的向左子树添加</span></span><br><span class="line">            <span class="built_in">this</span>.left.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.right = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.right.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加完后判断是否需要旋转</span></span><br><span class="line">    <span class="comment">//1.右子树的高度比左子树的高度大1 =&gt; 左旋转</span></span><br><span class="line">    <span class="keyword">if</span> (rightHeight() - leftHeight() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> (right != <span class="literal">null</span> &amp;&amp; right.leftHeight() &gt; right.rightHeight()) &#123;</span><br><span class="line">            right.rightRotate();</span><br><span class="line">        &#125;</span><br><span class="line">        leftRotate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.左子树的高度比右子树大1 =&gt; 右旋转</span></span><br><span class="line">    <span class="keyword">if</span> (leftHeight() - rightHeight() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; left.rightHeight() &gt; left.leftHeight()) &#123;</span><br><span class="line">            <span class="comment">//先对当前节点的左子树进行左旋转</span></span><br><span class="line">            left.leftRotate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再对当前节点进行右旋转</span></span><br><span class="line">        rightRotate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>完整代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.avl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/21 13:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AvlTreeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*int[] arr = &#123;4,3,6,5,7,8&#125;;*/</span></span><br><span class="line">        <span class="comment">/*int[] arr = &#123;10,12,8,9,7,6&#125;;*/</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="type">AvlTree</span> <span class="variable">avlTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AvlTree</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            avlTree.add(<span class="keyword">new</span> <span class="title class_">Node</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;高度 ：&quot;</span> + avlTree.getRoot().height());</span><br><span class="line">        System.out.println(<span class="string">&quot;左子树高度 ：&quot;</span> + avlTree.getRoot().leftHeight());</span><br><span class="line">        System.out.println(<span class="string">&quot;右子树高度 ：&quot;</span> + avlTree.getRoot().rightHeight());</span><br><span class="line">        System.out.println(<span class="string">&quot;当前根节点&quot;</span> + avlTree.getRoot());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AvlTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getRoot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加结点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            root.infinxOrder();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;二叉排序树为空，不能遍历&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左旋转方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建新的结点，以当前根节点的值</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.value);</span><br><span class="line">        <span class="comment">//新结点的左子树设置为当前节点的左子树</span></span><br><span class="line">        newNode.left = left;</span><br><span class="line">        <span class="comment">//把新的结点的右子树设置为当前节点的右子树的左子树</span></span><br><span class="line">        newNode.right = right.left;</span><br><span class="line">        <span class="comment">//当前节点的值替换换成右子节点的值</span></span><br><span class="line">        value = right.value;</span><br><span class="line">        <span class="comment">//把当前节点的右子树设置为右子树的右子树</span></span><br><span class="line">        right = right.right;</span><br><span class="line">        <span class="comment">//把当前节点的左子树设置为新的结点</span></span><br><span class="line">        left = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//右旋转方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        newNode.right = right;</span><br><span class="line">        newNode.left = left.right;</span><br><span class="line">        value = left.value;</span><br><span class="line">        left = left.left;</span><br><span class="line">        right = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回以当前节点为根节点树的高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(left == <span class="literal">null</span> ? <span class="number">0</span> : left.height(),right == <span class="literal">null</span> ? <span class="number">0</span> : right.height()) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取左子树高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leftHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> left.height();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取右子树的高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rightHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> right.height();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加结点的方法</span></span><br><span class="line">    <span class="comment">//递归的形式添加结点，需要满足二叉排序树的要求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断传入节点的值和当前子树的根节点的值的关系</span></span><br><span class="line">        <span class="keyword">if</span> (node.value &lt; <span class="built_in">this</span>.value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.left == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//当前节点左子节点为空，直接挂上去</span></span><br><span class="line">                <span class="built_in">this</span>.left = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//递归的向左子树添加</span></span><br><span class="line">                <span class="built_in">this</span>.left.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.right = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.right.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加完后判断是否需要旋转</span></span><br><span class="line">        <span class="comment">//1.右子树的高度比左子树的高度大1 =&gt; 左旋转</span></span><br><span class="line">        <span class="keyword">if</span> (rightHeight() - leftHeight() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span> (right != <span class="literal">null</span> &amp;&amp; right.leftHeight() &gt; right.rightHeight()) &#123;</span><br><span class="line">                right.rightRotate();</span><br><span class="line">            &#125;</span><br><span class="line">            leftRotate();</span><br><span class="line">            <span class="comment">// ???</span></span><br><span class="line"> <span class="comment">/*           return;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.左子树的高度比右子树大1 =&gt; 右旋转</span></span><br><span class="line">        <span class="keyword">if</span> (leftHeight() - rightHeight() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; left.rightHeight() &gt; left.leftHeight()) &#123;</span><br><span class="line">                <span class="comment">//先对当前节点的左子树进行左旋转</span></span><br><span class="line">                left.leftRotate();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//再对当前节点进行右旋转</span></span><br><span class="line">            rightRotate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infinxOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.left.infinxOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.right.infinxOrder();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉排序树</title>
      <link href="/article/e5052ecb.html"/>
      <url>/article/e5052ecb.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>二叉排序树的概念、创建、遍历、删除</p></blockquote><span id="more"></span><h2 id="1、二叉排序树介绍"><a href="#1、二叉排序树介绍" class="headerlink" title="1、二叉排序树介绍"></a>1、二叉排序树介绍</h2><p><img src="https://i.loli.net/2020/10/20/mdwfXiFG38RJNx9.png" alt="image-20201020151052672"></p><h2 id="2、二叉排序树的创建与遍历"><a href="#2、二叉排序树的创建与遍历" class="headerlink" title="2、二叉排序树的创建与遍历"></a>2、二叉排序树的创建与遍历</h2><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.binarysorttree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/20 15:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySortTreeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,&#125;;</span><br><span class="line">        <span class="type">BinarySortTree</span> <span class="variable">binarySortTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySortTree</span>();</span><br><span class="line">        <span class="comment">//循环的添加结点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> value : arr) &#123;</span><br><span class="line">            binarySortTree.add(<span class="keyword">new</span> <span class="title class_">Node</span>(value));</span><br><span class="line">        &#125;</span><br><span class="line">        binarySortTree.infixOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉排序树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySortTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加结点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            root.infinxOrder();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;二叉排序树为空，不能遍历&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Node节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加结点的方法</span></span><br><span class="line">    <span class="comment">//递归的形式添加结点，需要满足二叉排序树的要求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断传入节点的值和当前子树的根节点的值的关系</span></span><br><span class="line">        <span class="keyword">if</span> (node.value &lt; <span class="built_in">this</span>.value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.left == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//当前节点左子节点为空，直接挂上去</span></span><br><span class="line">                <span class="built_in">this</span>.left = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//递归的向左子树添加</span></span><br><span class="line">                <span class="built_in">this</span>.left.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.right = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.right.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infinxOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.left.infinxOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.right.infinxOrder();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、二叉排序树的删除"><a href="#3、二叉排序树的删除" class="headerlink" title="3、二叉排序树的删除"></a>3、二叉排序树的删除</h2><p><img src="https://i.loli.net/2020/10/20/Xr1YoIAZF2DBxUH.png" alt="image-20201020153343135"> <strong>思路分析：</strong> 1）删除叶子节点</p><ol><li>先去定位要删除的结点 targetNode</li><li>找到targetNode的父节点parent（考虑是否存在父节点）</li><li>targetNode是父节点的左子节点还是右子节点</li><li>根据前面的情况对应删除</li></ol><p>2）删除只有一颗子树的结点</p><ol><li><p>先去定位要删除的结点 targetNode</p></li><li><p>找到targetNode的父节点 parent</p></li><li><p>判断target的子节点是左子节点还是右子节点</p></li><li><p>targetNode是parent的左子节点还是右子节点</p></li><li><p>如果targetNode是parent的左子节点</p><ol><li><p>targetNode的子节点是左子节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parent.left = targetNode.left</span><br></pre></td></tr></table></figure></li><li><p>targetNode的子节点是右子节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parent.left = targetNode.right</span><br></pre></td></tr></table></figure></li></ol></li><li><p>如果targetNodes是parent的右子节点</p><ol><li><p>targetNode的子节点是左子节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parent.right = targetNode.left</span><br></pre></td></tr></table></figure></li><li><p>targetNode的子节点是右子节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parent.right = targetNode.right</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>3）删除有两个子树的结点</p><ol><li>先去定位要删除的结点 targetNode</li><li>找到targetNode的父节点 parent</li><li>从targetNode的<strong>右子树</strong>找到<strong>最小的结点</strong></li><li>临时变量temp保存最小节点的值</li><li>删除最小结点</li><li>target.value &#x3D; temp</li></ol><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询节点</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">search</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.search(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询父节点</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.searchParent(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到最小值并删除，返回最小结点的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delRightTreeMin</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">target</span> <span class="operator">=</span> node;</span><br><span class="line">    <span class="comment">//循环的查找左节点，就会找到最小值</span></span><br><span class="line">    <span class="keyword">while</span> (target.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        target = target.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这是target就指向了最小的结点</span></span><br><span class="line">    <span class="comment">//删除最小结点</span></span><br><span class="line">    delNode(target.value);</span><br><span class="line">    <span class="keyword">return</span> target.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">targetNode</span> <span class="operator">=</span> search(value);</span><br><span class="line">        <span class="keyword">if</span> (targetNode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//没有找到要删除的结点</span></span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到要删除的结点&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//targetNode没有父节点</span></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找targetNode父节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> searchParent(value);</span><br><span class="line">        <span class="comment">//要删除的结点是叶子节点</span></span><br><span class="line">        <span class="keyword">if</span> (targetNode.left == <span class="literal">null</span> &amp;&amp; targetNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//叶子节点</span></span><br><span class="line">            <span class="comment">//判断targetNode是父节点的左子节点还是右子节点</span></span><br><span class="line">            <span class="keyword">if</span> (parent.left != <span class="literal">null</span> &amp;&amp; parent.left.value == value) &#123;</span><br><span class="line">                <span class="comment">//左子节点</span></span><br><span class="line">                parent.left = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parent.right != <span class="literal">null</span> &amp;&amp; parent.right.value == value) &#123;</span><br><span class="line">                <span class="comment">//右子节点</span></span><br><span class="line">                parent.right = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetNode.left != <span class="literal">null</span> &amp;&amp; targetNode.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//targetNode两颗子树</span></span><br><span class="line">            targetNode.value = delRightTreeMin(targetNode.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//只有一颗子树</span></span><br><span class="line">            <span class="keyword">if</span> (targetNode.left != <span class="literal">null</span>) &#123; <span class="comment">//如果要删除的结点有左子节点</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent.left.value == value) &#123;</span><br><span class="line">                        parent.left = targetNode.left;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        parent.right = targetNode.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    root = targetNode.left;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent.left.value == value) &#123; <span class="comment">//如果要删除的结点有右子节点</span></span><br><span class="line">                        parent.left = targetNode.right;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        parent.right = targetNode.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    root = targetNode.right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>课后作业：</strong> 在删除有两个子树的结点时，从targetNode的左子树找到最大节点进行替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//课后作业代码实现</span></span><br><span class="line"><span class="comment">// 从targetNode的左子树找到最大节点进行替换</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delLeftTreeMin</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">target</span> <span class="operator">=</span> node;</span><br><span class="line">    <span class="keyword">while</span> (target.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        target = target.right;</span><br><span class="line">    &#125;</span><br><span class="line">    delNode(target.value);</span><br><span class="line">    <span class="keyword">return</span> target.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树结构的实际应用 ——赫夫曼树</title>
      <link href="/article/58b0824a.html"/>
      <url>/article/58b0824a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>赫夫曼树</p></blockquote><span id="more"></span><h2 id="1、赫夫曼树"><a href="#1、赫夫曼树" class="headerlink" title="1、赫夫曼树"></a>1、赫夫曼树</h2><p>赫夫曼树 ： wpl(带权路径)最小的树就是赫夫曼树</p><h3 id="1、赫夫曼树的构建"><a href="#1、赫夫曼树的构建" class="headerlink" title="1、赫夫曼树的构建"></a>1、赫夫曼树的构建</h3><p><img src="https://i.loli.net/2020/09/29/7CYBOU34xzPkhoA.png" alt="image-20200929163951311"> 代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.huffmantree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/9/29 16:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuffmanTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">29</span>,<span class="number">6</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">root</span> <span class="operator">=</span> createHuffmanTree(arr);</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        preOrder(root);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 18:23 2020/9/29</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 创建赫夫曼树的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [arr]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">createHuffmanTree</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Node&gt; nodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Node&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> value : arr) &#123;</span><br><span class="line">            nodes.add(<span class="keyword">new</span> <span class="title class_">Node</span>(value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (nodes.size() != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//从小到大排序</span></span><br><span class="line">            Collections.sort(nodes);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取出根节点最小的两个二叉树</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">leftNode</span> <span class="operator">=</span> nodes.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">Node</span> <span class="variable">rightNode</span> <span class="operator">=</span> nodes.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//构建一颗新的二叉树</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(leftNode.getValue() + rightNode.getValue());</span><br><span class="line">            parent.setLeft(leftNode);</span><br><span class="line">            parent.setRight(rightNode);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//删除原先的最小两个节点</span></span><br><span class="line">            nodes.remove(leftNode);</span><br><span class="line">            nodes.remove(rightNode);</span><br><span class="line"></span><br><span class="line">            nodes.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回赫夫曼树的root节点</span></span><br><span class="line">        <span class="keyword">return</span> nodes.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            root.preOrder();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空树！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 17:15 2020/9/29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 创建节点类</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Node&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value; <span class="comment">//节点的权值</span></span><br><span class="line">    <span class="keyword">private</span> Node left;</span><br><span class="line">    <span class="keyword">private</span> Node right;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Node o)</span> &#123;</span><br><span class="line">        <span class="comment">//对权值进行比较</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value - o.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.getLeft() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.getLeft().preOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.getRight() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.getRight().preOrder();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、定长编码与变长编码"><a href="#2、定长编码与变长编码" class="headerlink" title="2、定长编码与变长编码"></a>2、定长编码与变长编码</h3><p>1、定长编码 <img src="https://i.loli.net/2020/10/01/mVdkDU17jFw5rXR.png" alt="image-20201001122654677"> 2、变长编码 <img src="https://i.loli.net/2020/10/01/KSzToXrqIJtdLUF.png" alt="image-20201001122455823"></p><h3 id="3、赫夫曼编码"><a href="#3、赫夫曼编码" class="headerlink" title="3、赫夫曼编码"></a>3、赫夫曼编码</h3><p>压缩文本 ： i like like like java do you like a java 步骤：</p><ol><li>Node { data(存放数据)，weight(权重),left,right }</li><li>字符串对应的byte[] 数组</li><li>编写一个方法将准备构建赫夫曼树的结点放到一个list</li></ol><p>代码实现： （确实略有难度）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.huffmantree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * 实现赫夫曼编码压缩字符串，并解码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/16 17:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuffmanTreeMy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Byte,String&gt; huffmanCodes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">//赫夫曼编码表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//要进行转换的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;i like like like java do you like a java&quot;</span>;</span><br><span class="line">        <span class="comment">//赫夫曼编码压缩</span></span><br><span class="line">        <span class="type">byte</span>[] huffmanZip = huffmanZip(str.getBytes());</span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">        <span class="type">byte</span>[] decode = decode(huffmanZip);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(decode));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] decode(<span class="type">byte</span>[] huffmanBytes) &#123;</span><br><span class="line">        <span class="comment">//得到二进制字符串</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; huffmanBytes.length; i++) &#123;</span><br><span class="line">            <span class="comment">//最后一个数不进行补全</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> (i == huffmanBytes.length - <span class="number">1</span>);</span><br><span class="line">            stringBuilder.append(byteToBinaryString(!flag,huffmanBytes[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//构建赫夫曼解码表</span></span><br><span class="line">        Map&lt;String,Byte&gt; decode = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Byte, String&gt; entry : huffmanCodes.entrySet()) &#123;</span><br><span class="line">            decode.put(entry.getValue(),entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用赫夫曼解码表进行解码</span></span><br><span class="line">        ArrayList&lt;Byte&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stringBuilder.length();) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="type">Byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> stringBuilder.substring(i,i+count);</span><br><span class="line">                b = decode.get(str);</span><br><span class="line">                <span class="keyword">if</span> (b == <span class="literal">null</span>) &#123;</span><br><span class="line">                    count +=<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(b);</span><br><span class="line">            i += count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] result = <span class="keyword">new</span> <span class="title class_">byte</span>[list.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            result[i] = list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 18:54 2020/10/19</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 将一个byte转为一个二进制的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [b] flag标识是否为最后一个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">byteToBinaryString</span><span class="params">(<span class="type">boolean</span> flag,<span class="type">byte</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> b;</span><br><span class="line">        <span class="comment">//如果是正数我们存在补高位的问题</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            temp = <span class="number">256</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Integer.toBinaryString(temp);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">return</span> str.substring(str.length() - <span class="number">8</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 压缩部分 ------------------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] huffmanZip(<span class="type">byte</span>[] contentBytes) &#123;</span><br><span class="line">        <span class="comment">//统计出现次数</span></span><br><span class="line">        List&lt;NodeMy&gt; nodes = getNodes(contentBytes);</span><br><span class="line">        <span class="comment">//构建赫夫曼树</span></span><br><span class="line">        <span class="type">NodeMy</span> <span class="variable">huffmanNode</span> <span class="operator">=</span> builtHuffmanTree(nodes);</span><br><span class="line">        <span class="comment">//得到赫夫曼编码表</span></span><br><span class="line">        getHuffmanCodes(huffmanNode);</span><br><span class="line">        <span class="comment">//压缩</span></span><br><span class="line">        <span class="keyword">return</span> zip(contentBytes);</span><br><span class="line">        <span class="comment">//解压</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 15:19 2020/10/19</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 统计字符出现的次数，构建节点列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [contentBytes]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List&lt;com.cyfwlp.huffmantree.NodeMy&gt;</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;NodeMy&gt; <span class="title function_">getNodes</span><span class="params">(<span class="type">byte</span>[] contentBytes)</span> &#123;</span><br><span class="line">        List&lt;NodeMy&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Byte,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//lambda表达式</span></span><br><span class="line"><span class="comment">/*        for (byte key : contentBytes) &#123;</span></span><br><span class="line"><span class="comment">            map.merge(key, 1, Integer::sum);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> key : contentBytes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(key) == <span class="literal">null</span>) &#123;</span><br><span class="line">                map.put(key,<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(key,map.get(key) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Byte, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">NodeMy</span>(entry.getKey(),entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 15:32 2020/10/19</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 构建赫夫曼树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [nodes] 节点列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.cyfwlp.huffmantree.NodeMy 赫夫曼树的根节点</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> NodeMy <span class="title function_">builtHuffmanTree</span><span class="params">(List&lt;NodeMy&gt; nodes)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (nodes.size() != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//排序</span></span><br><span class="line">            Collections.sort(nodes);</span><br><span class="line">            <span class="comment">//拿出最小的两个结点</span></span><br><span class="line">            <span class="type">NodeMy</span> <span class="variable">left</span> <span class="operator">=</span> nodes.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">NodeMy</span> <span class="variable">right</span> <span class="operator">=</span> nodes.get(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//组成新的二叉树</span></span><br><span class="line">            <span class="type">NodeMy</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NodeMy</span>(<span class="literal">null</span>,left.getWeight() + right.getWeight());</span><br><span class="line">            temp.setLeft(left);</span><br><span class="line">            temp.setRight(right);</span><br><span class="line">            <span class="comment">//新的二叉树加入数组，删除最小的两个</span></span><br><span class="line">            nodes.add(temp);</span><br><span class="line">            nodes.remove(left);</span><br><span class="line">            nodes.remove(right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前序遍历方便测试</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(NodeMy root)</span> &#123;</span><br><span class="line">        System.out.println(root);</span><br><span class="line">        <span class="keyword">if</span> (root.getLeft() != <span class="literal">null</span>) &#123;</span><br><span class="line">            preOrder(root.getLeft());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.getLeft() != <span class="literal">null</span>) &#123;</span><br><span class="line">            preOrder(root.getRight());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 15:45 2020/10/19</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 根据赫夫曼得地赫夫曼编码表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [huffmanNode] 赫夫曼树根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getHuffmanCodes</span><span class="params">(NodeMy huffmanNode)</span> &#123;</span><br><span class="line">        getCodes(huffmanNode,<span class="string">&quot;&quot;</span>,<span class="keyword">new</span> <span class="title class_">StringBuilder</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getCodes</span><span class="params">(NodeMy node,String code,StringBuilder stringBuilder)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(stringBuilder);</span><br><span class="line">        stringBuilder1.append(code);</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.getValue() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//非叶子节点</span></span><br><span class="line">                <span class="comment">//递归遍历</span></span><br><span class="line">                getCodes(node.getLeft(),<span class="string">&quot;0&quot;</span>,stringBuilder1);</span><br><span class="line">                getCodes(node.getRight(),<span class="string">&quot;1&quot;</span>,stringBuilder1);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                huffmanCodes.put(node.getValue(),stringBuilder1.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 16:02 2020/10/19</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 进行数据压缩</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [contentByte] 压缩前的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> byte[] 压缩后的字节数组</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] zip(<span class="type">byte</span>[] contentByte) &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">//利用哈夫曼编码将byte转为二进制字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : contentByte) &#123;</span><br><span class="line">            stringBuilder.append(huffmanCodes.get(b));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*System.out.println(stringBuilder.toString() + &quot;压缩时长度为&quot; + stringBuilder.length());*/</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">strLength</span> <span class="operator">=</span> stringBuilder.length();</span><br><span class="line">        <span class="comment">//把这个二进制字符串转为字节数组</span></span><br><span class="line">        <span class="comment">//1.字节数组的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> strLength % <span class="number">8</span> == <span class="number">0</span> ? strLength/<span class="number">8</span> : strLength/<span class="number">8</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="type">byte</span>[] result = <span class="keyword">new</span> <span class="title class_">byte</span>[length];</span><br><span class="line">        <span class="comment">//2.遍历进行转换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strLength; i+=<span class="number">8</span>) &#123;</span><br><span class="line">            String str;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">8</span> &gt; strLength) &#123;</span><br><span class="line">                <span class="comment">//循环到最后不足八位</span></span><br><span class="line">                str = stringBuilder.substring(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str = stringBuilder.substring(i,i+<span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            result[index] = (<span class="type">byte</span>) Integer.parseInt(str,<span class="number">2</span>);</span><br><span class="line">            index ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NodeMy</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;NodeMy&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Byte value;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> weight; <span class="comment">//权重</span></span><br><span class="line">    <span class="keyword">private</span> NodeMy left;</span><br><span class="line">    <span class="keyword">private</span> NodeMy right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NodeMy</span><span class="params">(Byte value, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Byte <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Byte value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(<span class="type">int</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> NodeMy <span class="title function_">getLeft</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeft</span><span class="params">(NodeMy left)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> NodeMy <span class="title function_">getRight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRight</span><span class="params">(NodeMy right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NodeMy&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&quot;, weight=&quot;</span> + weight +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(NodeMy o)</span> &#123;</span><br><span class="line">        <span class="comment">//从小到大排序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.weight - o.weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、实践-文件压缩"><a href="#2、实践-文件压缩" class="headerlink" title="2、实践-文件压缩"></a>2、实践-文件压缩</h2><p>使用赫夫曼编码压缩图片文件 核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用了上个代码的部分方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">zipFile</span><span class="params">(String srcFile,String dstFile)</span>&#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">        <span class="comment">//创建一个和源文件大小一样的byte[];</span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">        is.read(b);</span><br><span class="line">        <span class="comment">//使用赫夫曼编码进行编码</span></span><br><span class="line">        <span class="type">byte</span>[] huffmanBytes = huffmanZip(b);</span><br><span class="line">        <span class="comment">//创建文件输出流</span></span><br><span class="line">        os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dstFile);</span><br><span class="line">        <span class="comment">//创建一个和文件输出流关键的ObjectOutStream</span></span><br><span class="line">        oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(os);</span><br><span class="line">        <span class="comment">//写入自己数组</span></span><br><span class="line">        oos.writeObject(huffmanBytes);</span><br><span class="line">        <span class="comment">//对象流的方式写入赫夫曼编码，是为了以后解压的时候使用</span></span><br><span class="line">        oos.writeObject(huffmanCodes);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is.close();</span><br><span class="line">            os.close();</span><br><span class="line">            oos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unZipFile</span><span class="params">(String zipFile,String dstFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//定义文件的输入输出流</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(zipFile);</span><br><span class="line">        <span class="comment">//创建和is关联的对象输入流</span></span><br><span class="line">        ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(is);</span><br><span class="line">        <span class="comment">// 读取byte数组</span></span><br><span class="line">        <span class="type">byte</span>[] huffmanBytes = (<span class="type">byte</span>[]) ois.readObject();</span><br><span class="line">        <span class="comment">// 读取赫夫曼编码表</span></span><br><span class="line">        Map&lt;Byte,String&gt; codes = (Map&lt;Byte, String&gt;) ois.readObject();</span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = decode(huffmanBytes,huffmanCodes);</span><br><span class="line">        <span class="comment">//写入目标文件</span></span><br><span class="line">        os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dstFile);</span><br><span class="line">        os.write(bytes);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        is.close();</span><br><span class="line">        os.close();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制的原码，补码，反码</title>
      <link href="/article/9b6873a3.html"/>
      <url>/article/9b6873a3.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>在学习数据结构与算法赫夫曼编码时，发现对二进制一些的知识有所欠缺，现进行简单的补充</p></blockquote><span id="more"></span><h2 id="字节与位"><a href="#字节与位" class="headerlink" title="字节与位"></a>字节与位</h2><p>bit (位) ：数据存储的最小单元，在计算机二进制系统中，位，简记为b，也称为比特(bit)，每个二进制的数字0或1就是一个位(bit)，其中1 byte (字节)&#x3D; 8 bit(位) java中int类型占4个字节，即就是需要32个二进制位表示</p><h2 id="无符号数与有符号数"><a href="#无符号数与有符号数" class="headerlink" title="无符号数与有符号数"></a>无符号数与有符号数</h2><p>在计算机中参与运算的数有两大类 ： 无符号数和有符号数<br>(1) 有符号数 ​ 对于有符号数而言，符号的正、负机器是无法识别的，但由于“正、负”恰好是两种截然不同的状态，如果用“0”表示“正”，用“1”表示“符”，这样符号也被数字化了，并且规定将它放在有效数字的前面，即组成了有符号数。所以，在二进制中使用最高位（第一位）来表示符号，最高位是0，表示正数；最高位是1，表示负数。<br>(2) 无符号数 ​ 无符号数是针对<a href="http://baike.baidu.com/view/18536.htm">二进制</a>来讲的，无符号数的表数范围是非<a href="http://baike.baidu.com/view/71543.htm">负数</a>。全部二进制均代表数值（所有位都用于表示数的大小），没有符号位。即第一个”0”或”1”不表示 正负。<br><strong>例子：</strong> int number &#x3D; 1<br>在计算机中表示： 00000000 00000000 00000000 00000001<br>同理 -1 ：10000000 00000000 00000000 00000001 （最高位是符号位，正数为0，负数为1）</p><h2 id="二进制中的原码，反码，补码"><a href="#二进制中的原码，反码，补码" class="headerlink" title="二进制中的原码，反码，补码"></a>二进制中的原码，反码，补码</h2><p>对于有符号数而言：<br>（1）二进制的最高位是符号位：0表示正数，1表示负数；<br>（2）<strong>正数的原码，反码，补码都一样；</strong><br>（3）<strong>负数的补码 &#x3D; 它的原码符号位不变，其他位取反；</strong><br>（4）<strong>负数的补码 &#x3D; 它的反码 + 1；</strong><br>（5）0的反码，补码都是0；<br>（6）在计算机底层进行计算的时候，都是以补码的方式来运算的； 例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestByteToBitString</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 将一个byte转成一个二进制的字符串</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">56</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">456</span>;</span><br><span class="line">        b = (<span class="type">byte</span>) a;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> Integer.toBinaryString(a); <span class="comment">//得到的是二进制的补码</span></span><br><span class="line">        String str2= Integer.toBinaryString(b);</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         b = -56</span></span><br><span class="line"><span class="comment">         补码：1100 1000</span></span><br><span class="line"><span class="comment">         反码：补码 -1 = 1100 0111</span></span><br><span class="line"><span class="comment">         源码：0011 1000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         b = 56</span></span><br><span class="line"><span class="comment">         补码：0011 1000</span></span><br><span class="line"><span class="comment">         源码：0011 1000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         a = 456</span></span><br><span class="line"><span class="comment">         a : 0000 0000 0000 0000 ...... 001 1100 1000 （32位）</span></span><br><span class="line"><span class="comment">         b = (byte) a; //强类型转换，直接截取后8位</span></span><br><span class="line"><span class="comment">         b : 1100 1000 (补码)</span></span><br><span class="line"><span class="comment">         b = -56;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>连续搞了半个月的小项目终于有时间继续更新博客了！冲冲冲</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树结构的实际应用 - 堆排序</title>
      <link href="/article/42e4af02.html"/>
      <url>/article/42e4af02.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>堆排序算法</p></blockquote><span id="more"></span><h2 id="1、堆排序"><a href="#1、堆排序" class="headerlink" title="1、堆排序"></a>1、堆排序</h2><p><img src="https://i.loli.net/2020/09/26/xnNiC78fe2lA456.png" alt="image-20200926204646690"> 堆排序的基本思想：</p><ol><li>将待排序的序列构造成一个大顶堆</li><li>此时，整个序列的最大值就是堆顶的根节点</li><li>将其与末尾的元素进行交换。此时末尾就为最大值</li><li>然后将剩余n-1个元素重新构造成一个堆，这样就会得到n个元素的次小值，如此反复的执行，就能得到一个有序的序列</li></ol><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//将数组升序排列</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="comment">/*int[] arr = &#123;4,6,8,5,9&#125;;*/</span></span><br><span class="line">        heapSort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;堆排序&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分布完成</span></span><br><span class="line"><span class="comment">/*        adjustHeap(arr,1,arr.length);</span></span><br><span class="line"><span class="comment">        System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment">        adjustHeap(arr,0,arr.length);</span></span><br><span class="line"><span class="comment">        System.out.println(Arrays.toString(arr));*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建大顶堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length /<span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">            adjustHeap(arr,i,arr.length);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> arr.length-<span class="number">1</span>; j &gt; <span class="number">0</span> ; j--) &#123;</span><br><span class="line">            <span class="comment">//交换</span></span><br><span class="line">            temp = arr[j];</span><br><span class="line">            arr[j] = arr[<span class="number">0</span>];</span><br><span class="line">            arr[<span class="number">0</span>] = temp;</span><br><span class="line"></span><br><span class="line">            adjustHeap(arr,<span class="number">0</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个数组构造成一个大顶堆</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 待调整的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 表示非叶子节点的在数组中的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 表示对多少个元素进行跳转，length 是在逐渐的减少</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">adjustHeap</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> i,<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span>  <span class="operator">=</span> arr[i]; <span class="comment">//取出当前元素的值保存在临时变量temp</span></span><br><span class="line">        <span class="comment">//调整</span></span><br><span class="line">        <span class="comment">// k = i * 2 + 1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i * <span class="number">2</span> + <span class="number">1</span>; k &lt; length; k = k * <span class="number">2</span> + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k+<span class="number">1</span> &lt; length &amp;&amp; arr[k] &lt; arr[k+<span class="number">1</span>]) &#123;</span><br><span class="line">                k++;<span class="comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[k] &gt; temp) &#123;</span><br><span class="line">                arr[i] = arr[k]; <span class="comment">//较大的值赋给当前节点</span></span><br><span class="line">                i = k; <span class="comment">//i指向k,继续循环比较</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">// ??</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for循环结束，已经将以i为根节点的数的最大值放在了最顶上</span></span><br><span class="line">        arr[i] = temp; <span class="comment">//将temp放在调整后的位置</span></span><br><span class="line">        System.out.println(<span class="string">&quot;此次调整结果&quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树结构</title>
      <link href="/article/270c6601.html"/>
      <url>/article/270c6601.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>树  二叉树</p></blockquote><span id="more"></span><h2 id="1、为什么需要树这种数据结构"><a href="#1、为什么需要树这种数据结构" class="headerlink" title="1、为什么需要树这种数据结构"></a>1、为什么需要树这种数据结构</h2><h3 id="1、数组存储方式的分析"><a href="#1、数组存储方式的分析" class="headerlink" title="1、数组存储方式的分析"></a>1、数组存储方式的分析</h3><p> 优点：通过下标访问，速度快；对于有序数组，使用二分查找提高检索速度 ​ 缺点：检索某个值或者插入值，将整体移动数组，效率较低 <img src="https://i.loli.net/2020/09/22/uqXVfD3Ts91lnRy.png" alt="image-20200922164349664"></p><h3 id="2、链式存储方式的分析"><a href="#2、链式存储方式的分析" class="headerlink" title="2、链式存储方式的分析"></a>2、链式存储方式的分析</h3><p> 优点：插入，删除节点的效率较高 ​ 缺点：在进行检索时，效率依然较低</p><h3 id="3、树存储方式"><a href="#3、树存储方式" class="headerlink" title="3、树存储方式"></a>3、树存储方式</h3><p> 能提高数据的<strong>存储，读取</strong>的效率，使用二叉排序树，既可以保证数据的检索速度，同时可以保证数据的插入，删除，修改的速度</p><h2 id="2、树的常用术语"><a href="#2、树的常用术语" class="headerlink" title="2、树的常用术语"></a>2、树的常用术语</h2><p><img src="https://i.loli.net/2020/09/22/5YXiIxS7Uu9RrGF.png" alt="image-20200922171138429"></p><h2 id="3、二叉树"><a href="#3、二叉树" class="headerlink" title="3、二叉树"></a>3、二叉树</h2><h3 id="1、二叉树的概念"><a href="#1、二叉树的概念" class="headerlink" title="1、二叉树的概念"></a>1、二叉树的概念</h3><p>1）、每个节点最多只能有两个子节点的一种树称为二叉树<br>2）、二叉树的子节点分为左节点和右节点<br>3）、如果该二叉树的所有<strong>叶子节点都在最后一层</strong>，并且<strong>节点总数 &#x3D; 2 ^ n - 1</strong>（n为层数），则我们称为<strong>满二叉树</strong><br>4）、如果二叉树的所有叶子节点都在最后一层或者倒数第二层，且最后一层的叶子节点在左边连续，倒数第二层的叶子节点在右边连续，我们称为<strong>完全二叉树</strong></p><h3 id="2、二叉树的遍历"><a href="#2、二叉树的遍历" class="headerlink" title="2、二叉树的遍历"></a>2、二叉树的遍历</h3><p><img src="https://i.loli.net/2020/09/22/XlNFSZ65c8Udiwn.png" alt="image-20200922172239535"> 代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTreeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建二叉树</span></span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">binaryTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        <span class="comment">//创建需要的节点</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>, <span class="string">&quot;宋江&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>, <span class="string">&quot;吴用&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>, <span class="string">&quot;卢俊义&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">5</span>, <span class="string">&quot;关胜&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先手动创建，后面以递归的方式创建二叉树</span></span><br><span class="line">        node1.setLeft(node2);</span><br><span class="line">        node1.setRight(node3);</span><br><span class="line">        node3.setRight(node4);</span><br><span class="line">        node3.setLeft(node5);</span><br><span class="line">        binaryTree.setRoot(node1);</span><br><span class="line"></span><br><span class="line">        binaryTree.preOrder(); <span class="comment">// 1 2 3 5 4</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        binaryTree.infixOrder(); <span class="comment">//  2 1 5 3 4</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        binaryTree.postOrder(); <span class="comment">// 2 5 4 3 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义二叉树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HeroNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(HeroNode root)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.preOrder();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.infixOrder();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.postOrder();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建HeroNode节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> HeroNode left;</span><br><span class="line">    <span class="keyword">private</span> HeroNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">getLeft</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeft</span><span class="params">(HeroNode left)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">getRight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRight</span><span class="params">(HeroNode right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序遍历方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//输出当前节点（父节点）</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//向左子数前序遍历</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.left.preOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向右子树前序遍历</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.right.preOrder();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//向左子数中序遍历</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.left.infixOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出当前节点（父节点）</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//向右子树前序遍历</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.right.infixOrder();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后续遍历方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.left.postOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.right.postOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出当前节点（父节点）</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、二叉树的查找"><a href="#3、二叉树的查找" class="headerlink" title="3、二叉树的查找"></a>3、二叉树的查找</h3><p><img src="https://i.loli.net/2020/09/22/G7bEeLWqnHzxMiT.png" alt="image-20200922194738750"> 代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTreeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建二叉树</span></span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">binaryTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        <span class="comment">//创建需要的节点</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>, <span class="string">&quot;宋江&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>, <span class="string">&quot;吴用&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>, <span class="string">&quot;卢俊义&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">5</span>, <span class="string">&quot;关胜&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先手动创建，后面以递归的方式创建二叉树</span></span><br><span class="line">        node1.setLeft(node2);</span><br><span class="line">        node1.setRight(node3);</span><br><span class="line">        node3.setRight(node4);</span><br><span class="line">        node3.setLeft(node5);</span><br><span class="line">        binaryTree.setRoot(node1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历查找&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">heroNode</span> <span class="operator">=</span> binaryTree.postOrderSearch(<span class="number">5</span>);</span><br><span class="line">        System.out.println(heroNode);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义二叉树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HeroNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(HeroNode root)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序遍历查找</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">preOrderSearch</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.preOrderSearch(no);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">infixOrderSearch</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.infixOrderSearch(no);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">postOrderSearch</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.postOrderSearch(no);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建HeroNode节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> HeroNode left;</span><br><span class="line">    <span class="keyword">private</span> HeroNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">getLeft</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeft</span><span class="params">(HeroNode left)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">getRight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRight</span><span class="params">(HeroNode right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序遍历查找</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> no</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 没找到返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">preOrderSearch</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入前序遍历&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.no == no) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">resNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            resNode = <span class="built_in">this</span>.left.preOrderSearch(no);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//说明左子树找到了</span></span><br><span class="line">            <span class="keyword">return</span> resNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            resNode = <span class="built_in">this</span>.right.preOrderSearch(no);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到或者没找到都直接返回</span></span><br><span class="line">        <span class="keyword">return</span> resNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历查找</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">infixOrderSearch</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">resNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            resNode = <span class="built_in">this</span>.left.infixOrderSearch(no);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//说明左子树找到了</span></span><br><span class="line">            <span class="keyword">return</span> resNode;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;进行中续遍历查找&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.no == no) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            resNode = <span class="built_in">this</span>.right.infixOrderSearch(no);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到或者没找到都直接返回</span></span><br><span class="line">        <span class="keyword">return</span> resNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后续遍历查找</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">postOrderSearch</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">resNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            resNode = <span class="built_in">this</span>.left.postOrderSearch(no);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//说明左子树找到了</span></span><br><span class="line">            <span class="keyword">return</span> resNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            resNode = <span class="built_in">this</span>.right.postOrderSearch(no);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//说明右子树找到了</span></span><br><span class="line">            <span class="keyword">return</span> resNode;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;进行后续遍历查找&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.no == no) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、删除节点"><a href="#4、删除节点" class="headerlink" title="4、删除节点"></a>4、删除节点</h3><p>要求： 1）、删除叶子节点直接删除 2）、删除子节点删除子树 <img src="https://i.loli.net/2020/09/22/fCUv5YSTV3MLncO.png" alt="image-20200922204706451"> 代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTreeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建二叉树</span></span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">binaryTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        <span class="comment">//创建需要的节点</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>, <span class="string">&quot;宋江&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>, <span class="string">&quot;吴用&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>, <span class="string">&quot;卢俊义&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">5</span>, <span class="string">&quot;关胜&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先手动创建，后面以递归的方式创建二叉树</span></span><br><span class="line">        node1.setLeft(node2);</span><br><span class="line">        node1.setRight(node3);</span><br><span class="line">        node3.setRight(node4);</span><br><span class="line">        node3.setLeft(node5);</span><br><span class="line">        binaryTree.setRoot(node1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试删除结点</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除前&quot;</span>);</span><br><span class="line">        binaryTree.preOrder();</span><br><span class="line">        binaryTree.deleteNode(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除后&quot;</span>);</span><br><span class="line">        binaryTree.preOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义二叉树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HeroNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(HeroNode root)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.preOrder();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除结点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.getNo() == no)&#123;</span><br><span class="line">                root = <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                root.deleteNode(no);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空树不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建HeroNode节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> HeroNode left;</span><br><span class="line">    <span class="keyword">private</span> HeroNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get，set方法省略</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序遍历方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//输出当前节点（父节点）</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//向左子数前序遍历</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.left.preOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向右子树前序遍历</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.right.preOrder();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> no</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.no == no) &#123;</span><br><span class="line">            <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.no == no) &#123;</span><br><span class="line">            <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.left.deleteNode(no);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.right.deleteNode(no);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>课后作业： <img src="https://i.loli.net/2020/09/22/XwfnIRo3C6cATLU.png" alt="image-20200922221527368"> 代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.ws.handler.HandlerResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现树结点的删除</span></span><br><span class="line"><span class="comment"> * 1）删除结点如果是非叶子节点，不希望将该节点为根节点的子树删除，规定</span></span><br><span class="line"><span class="comment"> * 2）如果非叶子节点A下只有一个子节点B，则子节点B替代子节点A</span></span><br><span class="line"><span class="comment"> * 3）如果该叶子节点A有左节点B和右节点C，则让左子节点B代替节点A</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTreeHomeWork1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">BinaryTree1</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree1</span>();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="string">&quot;宋江&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="string">&quot;吴用&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">3</span>, <span class="string">&quot;卢俊义&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">5</span>, <span class="string">&quot;关胜&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先手动创建，后面以递归的方式创建二叉树</span></span><br><span class="line">        node1.setLeft(node2);</span><br><span class="line">        node1.setRight(node3);</span><br><span class="line">        node3.setRight(node4);</span><br><span class="line">        node3.setLeft(node5);</span><br><span class="line">        tree.setRoot(node1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;删除前&quot;</span>);</span><br><span class="line">        tree.preOrder();</span><br><span class="line">        tree.deleteNode(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除后&quot;</span>);</span><br><span class="line">        tree.preOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;树为空，不能遍历&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.preOrder();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root.getNo() == no) &#123;</span><br><span class="line">            root = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            root.deleteNode(no);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Node left;</span><br><span class="line">    <span class="keyword">private</span> Node right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> no, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set,get方法省略</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.left.preOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.right.preOrder();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果非叶子节点A下只有一个子节点B，则子节点B替代子节点A</span></span><br><span class="line"><span class="comment">     * 如果该叶子节点A有左节点B和右节点C，则让左子节点B代替节点A</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> no</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.getLeft() != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.getLeft().getNo() == no) &#123;</span><br><span class="line">            <span class="comment">//找到左节点是需要删除</span></span><br><span class="line">            <span class="comment">//判断需要删除的结点有几个子节点</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.getLeft().getLeft() != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.getLeft().getRight() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//有两个结点</span></span><br><span class="line">                <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="built_in">this</span>.getLeft().getRight();</span><br><span class="line">                <span class="built_in">this</span>.setLeft(<span class="built_in">this</span>.getLeft().getLeft());</span><br><span class="line">                <span class="built_in">this</span>.getLeft().setRight(temp);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.getLeft().getLeft() == <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.getLeft().getRight() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//没有结点</span></span><br><span class="line">                <span class="built_in">this</span>.setLeft(<span class="literal">null</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//有一个结点</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.getLeft().getLeft() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.setLeft(<span class="built_in">this</span>.getLeft().getLeft());</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.setLeft(<span class="built_in">this</span>.getLeft().getRight());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.getRight() != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.getRight().getNo() == no) &#123;</span><br><span class="line">            <span class="comment">//右节点需要删除</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.getRight().getLeft() != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.getRight().getRight() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//有两个结点</span></span><br><span class="line">                <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="built_in">this</span>.getRight().getRight();</span><br><span class="line">                <span class="built_in">this</span>.setRight(<span class="built_in">this</span>.getRight().getLeft());</span><br><span class="line">                <span class="built_in">this</span>.getRight().setRight(temp);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.getRight().getLeft() == <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.getRight().getRight() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//没有结点</span></span><br><span class="line">                <span class="built_in">this</span>.setRight(<span class="literal">null</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//有一个结点</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.getRight().getLeft() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.setRight(<span class="built_in">this</span>.getRight().getLeft());</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.setRight(<span class="built_in">this</span>.getRight().getRight());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//未找到。继续遍历</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.getLeft() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.getLeft().deleteNode(no);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.getRight() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.getRight().deleteNode(no);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、顺序存储二叉树"><a href="#5、顺序存储二叉树" class="headerlink" title="5、顺序存储二叉树"></a>5、顺序存储二叉树</h3><p><img src="https://i.loli.net/2020/09/24/F4c3RuDeWY6BqP1.png" alt="image-20200924161219993"> 顺序二二叉树的特点： ​<br>1）顺序二叉树通常只考虑完全二叉树 ​<br>2） 第n个元素的左子节点为 <strong>2*n+1</strong> ​<br>3） 第n个元素的右子节点为 <strong>2*n+2</strong> ​<br>4） 第n个元素的父节点为 <strong>(n-1)&#x2F;2</strong> <img src="https://i.loli.net/2020/09/24/O3LSZChztoYmdIG.png" alt="image-20200924162014965"> 代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayBinaryTreeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="type">ArrayBinaryTree</span> <span class="variable">arrayBinaryTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBinaryTree</span>(arr);</span><br><span class="line">        arrayBinaryTree.preOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayBinaryTree</span> &#123;</span><br><span class="line">    <span class="comment">//存储数据节点的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayBinaryTree</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个方法，完成顺序存储二叉树的一个前序遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        preOrder(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 数组的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//如果数组为空或者arr.length == 0</span></span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>  arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组为空，不能按照二叉树的前序遍历&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出当前的数组元素</span></span><br><span class="line">        System.out.print(arr[index] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">//向左递归遍历</span></span><br><span class="line">        <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">1</span>) &lt; arr.length) &#123;</span><br><span class="line">            preOrder(index * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">2</span>) &lt; arr.length) &#123;</span><br><span class="line">            preOrder(index * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>课后作业代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixOrder</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">//如果数组为空或者arr.length == 0</span></span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span>  arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数组为空，不能按照二叉树的前序遍历&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">1</span>) &lt; arr.length) &#123;</span><br><span class="line">        infixOrder(index * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出当前的数组元素</span></span><br><span class="line">    System.out.print(arr[index] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">2</span>) &lt; arr.length) &#123;</span><br><span class="line">        infixOrder(index * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">//如果数组为空或者arr.length == 0</span></span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span>  arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数组为空，不能按照二叉树的前序遍历&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">1</span>) &lt; arr.length) &#123;</span><br><span class="line">        postOrder(index * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">2</span>) &lt; arr.length) &#123;</span><br><span class="line">        postOrder(index * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出当前的数组元素</span></span><br><span class="line">    System.out.print(arr[index] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、线索二叉树"><a href="#6、线索二叉树" class="headerlink" title="6、线索二叉树"></a>6、线索二叉树</h3><p><img src="https://i.loli.net/2020/09/24/nfFzrhcjBs7dmtJ.png" alt="image-20200924183227683"> <strong>案例：将如图所示的二叉树依次进行中序线索二叉树，并遍历线索二叉树</strong> <strong>课后作业：进行前序，后续线索二叉树，并遍历线索二叉树</strong> <img src="https://i.loli.net/2020/09/24/sehaG2CW1vxN4JT.png" alt="image-20200924203243186"> 代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.tree.threadedbinarytree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadedBinaryTreeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//测试中序线索二叉树</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">6</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">8</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">10</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">14</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立关系（后面递归创建，现在手动创建）</span></span><br><span class="line">        node1.setLeft(node2);</span><br><span class="line">        node1.setRight(node3);</span><br><span class="line">        node2.setLeft(node4);</span><br><span class="line">        node2.setRight(node5);</span><br><span class="line">        node3.setLeft(node6);</span><br><span class="line"></span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">binaryTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        binaryTree.setRoot(node1);</span><br><span class="line"></span><br><span class="line">        binaryTree.threadNode();</span><br><span class="line"></span><br><span class="line">        binaryTree.threadList();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HeroNode root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现线索化，创建指向当前节点前驱节点的引用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">HeroNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编写对二叉树进行中序线索化的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 当前需要线索化的结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">threadNode</span><span class="params">(HeroNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.线索化左子树</span></span><br><span class="line">        threadNode(node.getLeft());</span><br><span class="line">        <span class="comment">//2.线索化当前节点</span></span><br><span class="line">        <span class="comment">//2.1 处理左节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.getLeft() == <span class="literal">null</span>) &#123;</span><br><span class="line">            node.setLeft(pre);</span><br><span class="line">            node.setLeftType(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.2处理右节点</span></span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">null</span> &amp;&amp; pre.getRight() == <span class="literal">null</span>) &#123;</span><br><span class="line">            pre.setRight(node);</span><br><span class="line">            pre.setRightType(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pre = node;</span><br><span class="line">        <span class="comment">//3.线索化右子树</span></span><br><span class="line">        threadNode(node.getRight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历线索化二叉树的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">threadList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (node.getLeftType() != <span class="number">1</span>) &#123;</span><br><span class="line">                node = node.getLeft();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(node);</span><br><span class="line">            <span class="keyword">if</span> (node.getRightType() == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(node.getRight());</span><br><span class="line">                node = node.getRight();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.getRight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建HeroNode节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> HeroNode left;</span><br><span class="line">    <span class="keyword">private</span> HeroNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> leftType; <span class="comment">//leftType = 0 指向左子树 leftType = 1 指向的是前驱节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rightType; <span class="comment">// rightType = 0 指向左子树 rightType = 1 指向的是后驱节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get,set方法省略</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>课后作业关键代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 前序线索二叉树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preThreadedNode</span><span class="params">(HeroNode node)</span> &#123;</span><br><span class="line">    <span class="comment">//!!!退出条件</span></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线索化当前节点</span></span><br><span class="line">    <span class="comment">//操作左节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.getLeft() == <span class="literal">null</span>) &#123;</span><br><span class="line">        node.setLeft(pre);</span><br><span class="line">        node.setLeftType(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//操作右节点</span></span><br><span class="line">    <span class="keyword">if</span> (pre != <span class="literal">null</span> &amp;&amp; pre.getRight() == <span class="literal">null</span>) &#123;</span><br><span class="line">        pre.setRight(node);</span><br><span class="line">        pre.setRightType(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pre = node;</span><br><span class="line">    <span class="comment">//线索化左子树</span></span><br><span class="line">    <span class="keyword">if</span> (node.getLeftType() == <span class="number">0</span>)&#123;</span><br><span class="line">        preThreadedNode(node.getLeft());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线索化右子树</span></span><br><span class="line">    <span class="keyword">if</span> (node.getRightType() == <span class="number">0</span>) &#123;</span><br><span class="line">        preThreadedNode(node.getRight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**前序遍历线索二叉树</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preThreadedList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">HeroNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    System.out.println(node);</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (node.getLeftType() == <span class="number">0</span>) &#123;</span><br><span class="line">            node = node.getLeft();</span><br><span class="line">            System.out.println(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.getRightType() == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(node.getRight());</span><br><span class="line">            node = node.getRight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序线索二叉树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postThreadedNode</span><span class="params">(HeroNode node)</span> &#123;</span><br><span class="line">    <span class="comment">//!!!退出条件</span></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线索化左子树</span></span><br><span class="line">    postThreadedNode(node.getLeft());</span><br><span class="line">    <span class="comment">//线索化右子树</span></span><br><span class="line">    postThreadedNode(node.getRight());</span><br><span class="line">    <span class="comment">//序列换当前节点</span></span><br><span class="line">    <span class="comment">//操作左节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.getLeft() == <span class="literal">null</span>) &#123;</span><br><span class="line">        node.setLeft(pre);</span><br><span class="line">        node.setLeftType(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//操作右节点</span></span><br><span class="line">    <span class="keyword">if</span> (pre != <span class="literal">null</span> &amp;&amp; pre.getRight() == <span class="literal">null</span>) &#123;</span><br><span class="line">        pre.setRight(node);</span><br><span class="line">        pre.setRightType(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pre = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**后序遍历线索二叉树</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postThreadedList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//有点复杂，回头探讨</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="/article/c6654282.html"/>
      <url>/article/c6654282.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>递归，迷宫问题，八皇后问题</p></blockquote><span id="more"></span><h3 id="一-递归的应用场景"><a href="#一-递归的应用场景" class="headerlink" title="一.递归的应用场景"></a>一.递归的应用场景</h3><p>迷宫问题</p><h3 id="二-递归的概念"><a href="#二-递归的概念" class="headerlink" title="二.递归的概念"></a>二.递归的概念</h3><p>简单的说：递归就是方法自己调用自己，每次调用时传入不同的变量，递归有助于编程者解决复杂的问题，同时可以让代码变得简洁</p><h3 id="三-递归的调用机制"><a href="#三-递归的调用机制" class="headerlink" title="三.递归的调用机制"></a>三.递归的调用机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        test(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;n = &quot;</span> + n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main方法中调用test(4)的输出结果： n &#x3D; 2 n &#x3D; 3 n &#x3D; 4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阶乘问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        test(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;n = &quot;</span> + n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归的调用规则</p><ol><li><strong>当程序执行到一个方法时，就会开辟一个独立的空间（栈）</strong></li><li><strong>每个空间的数据（局部变量），是独立的</strong></li></ol><h3 id="四-递归可以解决什么样的问题"><a href="#四-递归可以解决什么样的问题" class="headerlink" title="四.递归可以解决什么样的问题"></a>四.递归可以解决什么样的问题</h3><p>递归可以解决的问题</p><ol><li>各种数学问题：8皇后问题，汉诺塔，阶乘问题，迷宫问题，球和篮子问题（Google编程大赛）</li><li>各种算法中使用:快速排序，归并排序，二分查找，分治算法</li><li>使用栈解决的问题-&gt;使用递归代码比较简洁</li></ol><p>递归需要遵循的重要原则</p><ol><li>执行一个方法时，就会创建一个受保护的独立空间（栈空间）</li><li>方法中的局部变量是相互独立的，不会相互影响</li><li>如果方法中使用的是引用类型的变量，就会共享该引用类型的数据</li><li>递归必须向退出递归的条件逼近，否则就是无限递归，出现StackOverFlowError</li><li>当一个方法执行完毕，或者遇到return，就会返回，遵守谁先调用，就将结果返回给谁，同时当方法执行完毕或返回时，该方法也就执行完毕</li></ol><h3 id="五-递归-迷宫问题"><a href="#五-递归-迷宫问题" class="headerlink" title="五.递归-迷宫问题"></a>五.递归-迷宫问题</h3><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiGongMy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//数组模拟迷宫</span></span><br><span class="line">        <span class="type">int</span>[][] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line">        <span class="comment">//填充墙周围</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">            map[<span class="number">5</span>][i] = <span class="number">1</span>;</span><br><span class="line">            map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            map[i][<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//中间墙</span></span><br><span class="line">        map[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//打印地图</span></span><br><span class="line">        System.out.println(<span class="string">&quot;初始迷宫&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : map) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//开始找路</span></span><br><span class="line">        setWay(map,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//打印找路后的迷宫</span></span><br><span class="line">        System.out.println(<span class="string">&quot;找路后的迷宫&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : map) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路径</span></span><br><span class="line"><span class="comment">     * 约定：</span></span><br><span class="line"><span class="comment">     * 1. 0表示未探测  1表示墙 2表示可以走 3表示四路</span></span><br><span class="line"><span class="comment">     * 2. 探测顺序为 ↓ → ← ↑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 需要设置路径的地图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i   横坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j   纵坐标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">setWay</span><span class="params">(<span class="type">int</span>[][] map ,<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="comment">//递归退出条件</span></span><br><span class="line">        <span class="keyword">if</span> (map[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//假设这个点可以走</span></span><br><span class="line">                map[i][j] = <span class="number">2</span>;</span><br><span class="line">                <span class="comment">//按照探测顺序进行探测</span></span><br><span class="line">                <span class="keyword">if</span> (setWay(map,i,j+<span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (setWay(map,i+<span class="number">1</span>,j))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (setWay(map,i,j-<span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (setWay(map,i-<span class="number">1</span>,j))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//这个点为死路</span></span><br><span class="line">                    map[i][j] = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">//map[i][j] 的值可能为1 2 3 分别对应 1：为墙不能走 2：已经走过不能回去 3：已经判断过是死路</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六-八皇后问题"><a href="#六-八皇后问题" class="headerlink" title="六.八皇后问题"></a>六.八皇后问题</h3><p>八皇后问题算法思路分析:</p><ol><li>第一个皇后先放在第一行第一列</li><li>第二个皇后放在第二行第一列，然后判断是否ok，如果不ok，继续放在第二列，第三列，依次把所有的列放完，找到一个合适的位置</li><li>继续第三个皇后，还是第一列，第二列…直到第8个皇后也能放在一个不冲突的位置，算是得到了一个正确的解</li><li>在得到一个正确的解时，栈回退到上一个栈，就会开始回溯，将第一个皇后放到第一行第一列的全部解得到</li><li>然后将第一个皇后放到 第一行第二列，再循环执行1 2 3 4</li></ol><p><strong>说明</strong>：理论上应该创建一个二维数组来表示棋盘，但实际上可以通过算法，用一个一维数组解决问题 代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue8</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义最多有多少个皇后</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    <span class="comment">//定义皇后摆放位置的结果</span></span><br><span class="line">    <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[max];</span><br><span class="line">    <span class="comment">//统计解法的次数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//统计judge方法调用次数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">judge</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Queue8</span> <span class="variable">queue8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Queue8</span>();</span><br><span class="line">        queue8.check(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;一共有&quot;</span> + count + <span class="string">&quot;解法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;判断冲突的次数&quot;</span> + judge);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法，将皇后摆放的位置输出</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        count ++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : array) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//放置第n个皇后</span></span><br><span class="line">    <span class="comment">//特别注意:check 是每一次递归时，进入到check方法中都有一次for循环，因此会有回溯</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span>  <span class="title function_">check</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">// n == 8 相对于在放第九个皇后</span></span><br><span class="line">        <span class="keyword">if</span> (n == max)&#123;</span><br><span class="line">            print();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//依次放入皇后并判断是否冲突</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">            <span class="comment">//先把当前的皇后n 放到该行的第一列</span></span><br><span class="line">            array[n] = i;</span><br><span class="line">            <span class="comment">//放置第n个皇后到第i列时是否冲突</span></span><br><span class="line">            <span class="keyword">if</span> (judge(n))&#123;</span><br><span class="line">                <span class="comment">//不冲突，接着放n+1个</span></span><br><span class="line">                check(n + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果冲突 继续循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否冲突</span></span><br><span class="line">    <span class="comment">//当我们放置第n个皇后时，需要检测该皇后是否和前面已经摆放的皇后位置冲突</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">judge</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        judge ++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//说明</span></span><br><span class="line">            <span class="comment">//array[i] == array[n] 第n个皇后是否和前面n-1个皇后是否在同一列</span></span><br><span class="line">            <span class="comment">//Math.abs(n-i) == Math.abs(array[n] - array[i]) 第n个皇后是否和前面n-1个皇后是否在同一斜线</span></span><br><span class="line">            <span class="keyword">if</span> (array[i] == array[n]  Math.abs(n-i) == Math.abs(array[n] - array[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="/article/1f4ac2fb.html"/>
      <url>/article/1f4ac2fb.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>栈</p></blockquote><span id="more"></span><h3 id="一-栈的一个实际需求"><a href="#一-栈的一个实际需求" class="headerlink" title="一.栈的一个实际需求"></a>一.栈的一个实际需求</h3><p>输入一个表达式 计算结果 -&gt; 计算器底层原理</p><h3 id="二-栈的介绍"><a href="#二-栈的介绍" class="headerlink" title="二.栈的介绍"></a>二.栈的介绍</h3><ol><li>栈的英文 stack</li><li>先入后出的有序列表</li><li>允许插入和删除的一端称为栈顶，不动的一端称为栈底</li><li>栈的应用场景<ol><li>子程序的调用</li><li>递归调用</li><li>表达式的转化（中缀表达式转后缀表达式）与求值（实际应用）</li><li>二叉树的遍历</li><li>图的深度优先遍历算法</li></ol></li></ol><h3 id="三-栈的快速入门"><a href="#三-栈的快速入门" class="headerlink" title="三.栈的快速入门"></a>三.栈的快速入门</h3><h5 id="1-数组模拟栈，进行入栈，出栈，遍历等操作"><a href="#1-数组模拟栈，进行入栈，出栈，遍历等操作" class="headerlink" title="1.数组模拟栈，进行入栈，出栈，遍历等操作"></a>1.数组模拟栈，进行入栈，出栈，遍历等操作</h5><p>思路分析</p><ol><li>使用数组模拟栈</li><li>定义top表示栈顶，初始化为-1</li><li>入栈 top++ stack[top] &#x3D; data;</li><li>出栈 int value &#x3D; stack[top] ; top–</li></ol><p>课后作业：实现链式栈 代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayStackDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayStack</span> <span class="variable">arrayStack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayStack</span>(<span class="number">4</span>);</span><br><span class="line">        arrayStack.push(<span class="number">1</span>);</span><br><span class="line">        arrayStack.push(<span class="number">2</span>);</span><br><span class="line">        arrayStack.push(<span class="number">3</span>);</span><br><span class="line">        arrayStack.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;出栈&quot;</span> + arrayStack.pop());</span><br><span class="line">        System.out.println(<span class="string">&quot;出栈&quot;</span> + arrayStack.pop());</span><br><span class="line">        arrayStack.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示栈结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayStack</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;<span class="comment">//最大大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] stack;<span class="comment">//数组模拟栈，数据放在数组中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">//栈顶</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayStack</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断栈满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">top</span> <span class="operator">=</span>= maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断栈空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">top</span> <span class="operator">=</span>= -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;栈满&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        top++;</span><br><span class="line">        stack[top] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈空,没有数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> stack[top];</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把原来的栈销毁了</span></span><br><span class="line"><span class="comment">/*        while (top != -1)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(pop());</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top; i &gt;-<span class="number">1</span>; i--) &#123;</span><br><span class="line">            System.out.println(stack[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>课后作业代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedStackDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LinkedStack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedStack</span>();</span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line">        stack.pop();</span><br><span class="line">        stack.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedStack</span>&#123;</span><br><span class="line">    Node top;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">top</span> <span class="operator">=</span>= <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        <span class="keyword">if</span>(top == <span class="literal">null</span>)&#123;</span><br><span class="line">            top = newNode;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            newNode.next = top;</span><br><span class="line">            top = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (top != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(top);</span><br><span class="line">            top = top.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> top.value;</span><br><span class="line">        top = top.next;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">     <span class="type">int</span> value;</span><br><span class="line">     Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-栈实现综合计算器"><a href="#四-栈实现综合计算器" class="headerlink" title="四.栈实现综合计算器"></a>四.栈实现综合计算器</h3><p>思路</p><ol><li>两个栈 数栈（numStack）：存放数字 符号栈(operStack)：存放运算符</li><li>通过一个index值（索引）遍历表达式 发现index得到<strong>数字</strong>就入数字栈 发现index是<strong>操作符</strong> 1.如果发现当前的<strong>符号栈为空就直接入栈</strong> 2.如果发现栈中有操作符，进行比较，如果<strong>当前的操作符的优先级小于或等于栈中的操作符</strong>，就需要从数栈中pop出来个数，再从符号栈pop出一个运算符，进行运算，得到结果，入数栈，然后将这个操作符入符号栈 3.<strong>当前的操作符优先级大于栈顶的操作符</strong>，直接入符号栈 4.<strong>当扫描完毕之后，顺序的从数栈和符号栈中pop出相应的数和符号并运算</strong> 5.<strong>最后数栈只有一个数字就是表达式的结果</strong></li></ol><p>3.课后练习，给表达式加上小括号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NamingContextExtPackage.StringNameHelper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器</span></span><br><span class="line"><span class="comment"> * 输入表达式，计算出值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorMy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//定义字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;70+20*6-4&quot;</span>;<span class="comment">//</span></span><br><span class="line">        <span class="comment">//定义数字栈和符号栈</span></span><br><span class="line">        <span class="type">ArrStack</span> <span class="variable">numStack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrStack</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="type">ArrStack</span> <span class="variable">operStack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrStack</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//定义相关变量</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span>  <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">oper</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="comment">//遍历字符串进行相关的操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            ch = str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (operStack.isOper(ch))&#123;</span><br><span class="line">                <span class="comment">//是运算符，判断栈空？</span></span><br><span class="line">                <span class="keyword">if</span> (operStack.isEmpty())&#123;</span><br><span class="line">                    operStack.push(ch);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//比较这个运算符与栈顶元素的优先级</span></span><br><span class="line">                    <span class="comment">//判断括号</span></span><br><span class="line">                    <span class="keyword">if</span> (operStack.priority(ch) &lt;= operStack.priority((<span class="type">char</span>) operStack.peek()))&#123;</span><br><span class="line">                        num1 = numStack.pop();</span><br><span class="line">                        num2 = numStack.pop();</span><br><span class="line">                        oper = (<span class="type">char</span>) operStack.pop();</span><br><span class="line">                        numStack.push(operStack.cal(num1,num2,oper));</span><br><span class="line">                        <span class="keyword">if</span> (operStack.priority(ch) == <span class="number">0</span>)&#123;</span><br><span class="line">                            operStack.pop();</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            operStack.push(ch);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        operStack.push(ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//解决多位数问题是数字，判断下一位是不是数字</span></span><br><span class="line">                <span class="comment">//分析：</span></span><br><span class="line">                <span class="comment">//1.多位数时不能发现是一个数时就立即入数栈</span></span><br><span class="line">                <span class="comment">//2.在处理数时，应该再看一位，如果是符号直接入栈，数字则进行拼接</span></span><br><span class="line">                <span class="comment">//3,定义字符串变量</span></span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                num.append(ch);</span><br><span class="line">                <span class="comment">//ch是字符串的最后一位，直接入栈</span></span><br><span class="line">                <span class="keyword">if</span> (i == str.length() -<span class="number">1</span>)&#123;</span><br><span class="line">                    numStack.push(Integer.parseInt(num.toString()));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (operStack.isOper(str.charAt(i + <span class="number">1</span>)))&#123;</span><br><span class="line">                        <span class="comment">//后面一位是操作符，入栈</span></span><br><span class="line">                        numStack.push(Integer.parseInt(num.toString()));</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        num.append(str.charAt(i + <span class="number">1</span>));</span><br><span class="line">                        i++;</span><br><span class="line">                        numStack.push(Integer.parseInt(num.toString()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!operStack.isEmpty())&#123;</span><br><span class="line">            num1 = numStack.pop();</span><br><span class="line">            num2 = numStack.pop();</span><br><span class="line">            oper = (<span class="type">char</span>) operStack.pop();</span><br><span class="line">            numStack.push(operStack.cal(num1,num2,oper));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(str + <span class="string">&quot;=&quot;</span> + numStack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组模拟栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrStack</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSizes;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] stack;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> top;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrStack</span><span class="params">(<span class="type">int</span> maxSizes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSizes = maxSizes;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">int</span>[maxSizes];</span><br><span class="line">        top = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">top</span> <span class="operator">=</span>= -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">top</span> <span class="operator">=</span>= maxSizes -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;栈满，无法入栈&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        top ++;</span><br><span class="line">        stack[top] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈空,无法出栈&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> stack[top];</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拿到栈顶的数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈空,无法出栈&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> stack[top];</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈空,无法出栈&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top; i &gt; -<span class="number">1</span>; i--) &#123;</span><br><span class="line">            System.out.println(stack[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是不是运算符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOper</span><span class="params">(<span class="type">char</span> ch)</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">ch</span> <span class="operator">=</span>= <span class="string">&#x27;+&#x27;</span>  ch == <span class="string">&#x27;-&#x27;</span>  ch == <span class="string">&#x27;*&#x27;</span>  ch == <span class="string">&#x27;/&#x27;</span>  ch == <span class="string">&#x27;)&#x27;</span>  ch == <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断运算符的优先级</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">priority</span><span class="params">(<span class="type">char</span> ch)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>  ch == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;*&#x27;</span>  ch == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> num1 ,<span class="type">int</span> num2, <span class="type">char</span> oper)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (oper)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                result = num2 + num1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                result = num2 - num1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                result = num2 * num1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                result = num2 / num1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-前缀，中缀，后缀表达式（逆波兰表达式）"><a href="#五-前缀，中缀，后缀表达式（逆波兰表达式）" class="headerlink" title="五.前缀，中缀，后缀表达式（逆波兰表达式）"></a>五.前缀，中缀，后缀表达式（逆波兰表达式）</h3><h5 id="1-前缀表达式（波兰表达式）"><a href="#1-前缀表达式（波兰表达式）" class="headerlink" title="1.前缀表达式（波兰表达式）"></a>1.前缀表达式（波兰表达式）</h5><p>前缀表达式：</p><ol><li>前缀表达式又称波兰式，前缀表达式的运算符位于操作数之前</li><li>举例（3+4)*5-6 对应的前缀表达式就是 - * + 3 4 5 6</li></ol><p>前缀表达式的计算机求值： <strong>从右到左</strong>扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们进行相应的运算（<strong>栈顶元素和次顶元素</strong>），并将结果入栈；重复上述过程直到表达式的最左端，最后运算出的值即为表达式的结果</p><h5 id="2-中缀表达式"><a href="#2-中缀表达式" class="headerlink" title="2.中缀表达式"></a>2.中缀表达式</h5><p>中缀表达式：</p><ol><li>中缀表达式就是常见的运算表达式</li><li>中缀表达式是我们所熟悉的，但对于计算机来说不好操作，因此在计算结果时，往往会将中缀表达式转化为其他表达式来操作（一般转为后缀表达式）</li></ol><h5 id="3-后缀表达式-逆波兰表达式"><a href="#3-后缀表达式-逆波兰表达式" class="headerlink" title="3.后缀表达式(逆波兰表达式)"></a>3.后缀表达式(逆波兰表达式)</h5><p>后缀表达式：</p><ol><li>与前缀表达式类似，只是运算符位于操作数之后</li><li>举例：（3+4)*5-6对应的后缀表达式 3 4 + 5 * 6 -</li></ol><p>后缀表达式的计算机求值： <strong>从左到右</strong>扫描表达式，遇到数字时将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们进行相应的计算（<strong>次顶元素和栈顶元素</strong>），并将结果入栈；重复上述结果直到表达式的最有端，最后的结果即为表达式的结果 逆波兰计算器 完成一个逆波兰计算器，需求</p><ol><li>输入一个逆波兰表达式，使用栈(Stack),计算显示结果</li><li>支持小括号和多位整数，（由于主要是数据结构，只支持整数的计算）</li></ol><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getListString</span><span class="params">(String suffixExpression)</span>&#123;</span><br><span class="line">    String[] split = suffixExpression.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">        list.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成对逆波兰表达式的计算</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(List&lt;String&gt; list)</span>&#123;</span><br><span class="line">    <span class="comment">//创建栈，只需要一个栈</span></span><br><span class="line">    Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;();</span><br><span class="line">    <span class="comment">//遍历list</span></span><br><span class="line">    <span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">        <span class="comment">//使用正则表达式来判断数</span></span><br><span class="line">        <span class="keyword">if</span> (item.matches(<span class="string">&quot;\\d+&quot;</span>))&#123;</span><br><span class="line">            stack.push(item);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//pop出两个数，并运算,再入栈</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(stack.pop());</span><br><span class="line">            <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> Integer.parseInt(stack.pop());</span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (item.equals(<span class="string">&quot;+&quot;</span>))&#123;</span><br><span class="line">                res = num1 + num2;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;-&quot;</span>))&#123;</span><br><span class="line">                res = num2 - num1;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;*&quot;</span>))&#123;</span><br><span class="line">                res = num1 * num2;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">                res = num2/num1;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;运算符有问题&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(String.valueOf(res));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Integer.parseInt(stack.pop());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-中缀表达式转后缀表达式"><a href="#5-中缀表达式转后缀表达式" class="headerlink" title="5.中缀表达式转后缀表达式"></a>5.中缀表达式转后缀表达式</h5><p>具体步骤： <strong>打比方：学习降龙十八掌 两种选择：</strong><br>**1.想洪七公学习武功，使用 **<br><strong>2.自创武功然后使用</strong><br>**算法：1.理解算法，灵活的应用算法解决问题 **<br><strong>2.自己设计一个算法，应用</strong></p><ol><li>初始化两个栈，运算符s1和存储中间结果的栈s2</li><li>从左到右扫描中缀表达式</li><li>遇到数字时，直接压入s2</li><li>遇到操作符时，比较其与s1栈顶元素的优先级 1.若s1为空，或栈顶的运算符为”(“，直接压入s1 2.否则，若优先级比栈顶元素的高,直接入栈 3.否则，将s1栈顶的符号弹出并压入到s2栈，再次回到4.1与s1中新的栈顶元素比较</li><li>遇到括号时： 1.如果是左括号”(“，直接压入s1 2.如果是右括号”)”，则依次弹出s1栈顶的运算符到s2中，直到遇到左括号为止，此时将这一对括号去掉</li><li>重复步骤2-5，直到表达式的最右边</li><li>将s1中剩余的元素依次压入s2</li><li>依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式</li></ol><p>代码实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolandNotation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中缀表达式转为后缀表达式</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1.1+((2+3)*4)-5 -&gt; 1 2 3 + 4 * + 5 -</span></span><br><span class="line">        <span class="comment">//2.因为对字符串进行扫描不方便，因此先将字符串转成一个中缀的list（ArrayList）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="string">&quot;1+((2+3)*4)-5&quot;</span>;</span><br><span class="line">        List&lt;String&gt; list = toInfixExpressionList(expression);</span><br><span class="line">        <span class="comment">//3.将得到的中缀表达式对应的list 转成后缀表达式对应的list</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list1 = parseSuffixExpressionList(list);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义逆波兰表达式</span></span><br><span class="line"><span class="comment">/*        String suffixExpression = &quot;1 2 3 + 4 * + 5 -&quot;;</span></span><br><span class="line"><span class="comment">        List&lt;String&gt; listString = getListString(suffixExpression);</span></span><br><span class="line"><span class="comment">        System.out.println( suffixExpression + &quot;  =  &quot; + calculate(listString));*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将逆波兰数据和运算符放到一个ArrayList</span></span><br><span class="line">    <span class="comment">//比遍历字符串简单，需判断空格啊等等</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getListString</span><span class="params">(String suffixExpression)</span>&#123;</span><br><span class="line">        String[] split = suffixExpression.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">            list.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完成对逆波兰表达式的计算</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(List&lt;String&gt; list)</span>&#123;</span><br><span class="line">        <span class="comment">//创建栈，只需要一个栈</span></span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;();</span><br><span class="line">        <span class="comment">//遍历list</span></span><br><span class="line">        <span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">            <span class="comment">//使用正则表达式来判断数</span></span><br><span class="line">            <span class="keyword">if</span> (item.matches(<span class="string">&quot;\\d+&quot;</span>))&#123;</span><br><span class="line">                stack.push(item);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//pop出两个数，并运算,再入栈</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(stack.pop());</span><br><span class="line">                <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> Integer.parseInt(stack.pop());</span><br><span class="line">                <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (item.equals(<span class="string">&quot;+&quot;</span>))&#123;</span><br><span class="line">                    res = num1 + num2;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;-&quot;</span>))&#123;</span><br><span class="line">                    res = num2 - num1;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;*&quot;</span>))&#123;</span><br><span class="line">                    res = num1 * num2;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">                    res = num2/num1;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;运算符有问题&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(String.valueOf(res));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将中缀表达式转成对应的list</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">toInfixExpressionList</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//遍历的索引</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();<span class="comment">//进行拼接</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            ch = s.charAt(i);</span><br><span class="line">            <span class="comment">//如果是非数字，我们就需要加入到list</span></span><br><span class="line">            <span class="keyword">if</span> (ch &lt; <span class="number">48</span>  ch &gt;  <span class="number">57</span>)&#123;</span><br><span class="line">                list.add(String.valueOf(ch));</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//是数字，进行拼接是</span></span><br><span class="line">                num = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">while</span> (i&lt;s.length() &amp;&amp; s.charAt(i) &gt;= <span class="number">48</span> &amp;&amp; s.charAt(i) &lt;=  <span class="number">57</span>)&#123;</span><br><span class="line">                    num += s.charAt(i);</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span> (i&lt;s.length());</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中缀表达式对应的list 转成后缀表达式对应的list</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">parseSuffixExpressionList</span><span class="params">(List&lt;String&gt; ls)</span>&#123;</span><br><span class="line">        <span class="comment">//定义两个栈</span></span><br><span class="line">        Stack&lt;String&gt; s1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;();<span class="comment">//符号栈</span></span><br><span class="line">        <span class="comment">//s2的栈在整个操作过程没有pop操作，而且还需要逆序输出，使用list代替之</span></span><br><span class="line">        List&lt;String&gt; s2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();<span class="comment">//存放中间结果的栈</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历ls</span></span><br><span class="line">        <span class="keyword">for</span> (String item : ls) &#123;</span><br><span class="line">            <span class="comment">//如果是数，就加入s2</span></span><br><span class="line">            <span class="keyword">if</span> (item.matches(<span class="string">&quot;\\d+&quot;</span>))&#123;</span><br><span class="line">                s2.add(item);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;(&quot;</span>))&#123;</span><br><span class="line">                s1.push(item);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;)&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">//s1 弹出 s2 加入直到 遇到&quot;(&quot;</span></span><br><span class="line">                <span class="keyword">while</span> (!s1.peek().equals(<span class="string">&quot;(&quot;</span>))&#123;</span><br><span class="line">                    s2.add(s1.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将&quot;(&quot;弹出</span></span><br><span class="line">                s1.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//item &lt;= s1.peek() 优先级</span></span><br><span class="line">                <span class="comment">//确少一个比较优先级高低的方法</span></span><br><span class="line">                <span class="keyword">while</span> (s1.size() != <span class="number">0</span> &amp;&amp; Operation.getValue(item) &lt;= Operation.getValue(s1.peek()))&#123;</span><br><span class="line">                    s2.add(s1.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将item入栈</span></span><br><span class="line">                s1.push(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将s1中剩余的依次加入s2</span></span><br><span class="line">        <span class="keyword">while</span> (s1.size() != <span class="number">0</span>)&#123;</span><br><span class="line">            s2.add(s1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个类Operation,可以返回一个运算符对应的优先级</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Operation</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ADD</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">SUB</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MUL</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">DIV</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用一个方法返回优先级的数字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">(String operation)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (operation)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                result = ADD;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                result = SUB;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                result = MUL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                result = DIV;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">             <span class="keyword">default</span>:</span><br><span class="line">                 System.out.println(<span class="string">&quot;不存在该运算符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/article/2362a8ea.html"/>
      <url>/article/2362a8ea.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>链表</p></blockquote><span id="more"></span><h3 id="一-链表介绍"><a href="#一-链表介绍" class="headerlink" title="一.链表介绍"></a>一.链表介绍</h3><ol><li>链表是以节点的方式来存储，链式存储</li><li>每个节点包含data域（存数据），next域（指向下一个节点）</li><li>链表的各个节点不一定是连续存放的</li><li>链表分为带头节点的链表和没有头节点的链表，根据实际的需求来确定</li></ol><h3 id="二-单链表"><a href="#二-单链表" class="headerlink" title="二.单链表"></a>二.单链表</h3><h5 id="head-头节点"><a href="#head-头节点" class="headerlink" title="head 头节点"></a>head 头节点</h5><ol><li>不存放具体的数据</li><li>表示单链表头</li></ol><h5 id="创建（添加）"><a href="#创建（添加）" class="headerlink" title="创建（添加）"></a>创建（添加）</h5><ol><li>创建一个头节点，表示单链表的头</li><li>后面每添加一个节点，就直接加入到链表的最后</li><li>通过一个辅助变量，完成遍历整个单链表</li></ol><h5 id="添加（按照编号顺序）"><a href="#添加（按照编号顺序）" class="headerlink" title="添加（按照编号顺序）"></a>添加（按照编号顺序）</h5><ol><li>找到新添加节点的位置，通过一个辅助变量</li><li>找到待添加节点的前一个节点</li><li>新的节点的.next &#x3D; temp.next</li><li>temp.next &#x3D; 新的节点</li></ol><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><ol><li>辅助节点</li><li>找到待修改节点（并非前一个）</li><li>修改</li></ol><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><ol><li>找到需要删除节点到的前一个节点</li><li>让temp.next &#x3D; temp.next.next</li><li>被删除的节点将不会有其他引用指向，会被垃圾回收机制回收(不需要手动回收)</li></ol><h5 id="代码实现-水浒英雄的管理"><a href="#代码实现-水浒英雄的管理" class="headerlink" title="代码实现 水浒英雄的管理"></a>代码实现 水浒英雄的管理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.linkedlistmy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SingleList</span> <span class="variable">singleList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleList</span>();</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>,<span class="string">&quot;宋江&quot;</span>,<span class="string">&quot;及时雨&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>,<span class="string">&quot;林冲&quot;</span>,<span class="string">&quot;豹子头&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>,<span class="string">&quot;鲁智深&quot;</span>,<span class="string">&quot;花和尚&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>,<span class="string">&quot;吴用&quot;</span>,<span class="string">&quot;智多星&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero4_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>,<span class="string">&quot;吴用用——&quot;</span>,<span class="string">&quot;QQ星&quot;</span>);</span><br><span class="line">        singleList.addHead(hero1);</span><br><span class="line">        singleList.addHead(hero2);</span><br><span class="line">        singleList.addHead(hero3);</span><br><span class="line">        singleList.addHead(hero4);</span><br><span class="line">        singleList.printHero();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">HeroNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">0</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾插</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addHero</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//找到最后一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (temp.getNext()!= <span class="literal">null</span>) &#123;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入</span></span><br><span class="line">        temp.setNext(heroNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按顺序添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addHeroByorder</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (temp.getNext() != <span class="literal">null</span> &amp;&amp; heroNode.getNo() &lt; temp.getNo() ) &#123;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入</span></span><br><span class="line">        heroNode.setNext(temp.getNext());</span><br><span class="line">        temp.setNext(heroNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头插</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addHead</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line">        <span class="comment">//直接插</span></span><br><span class="line">        heroNode.setNext(head.getNext());</span><br><span class="line">        head.setNext(heroNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除,根据序号删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//是否找到</span></span><br><span class="line">        <span class="comment">//找到删除前一个位置</span></span><br><span class="line">        <span class="keyword">while</span> (temp.getNext() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.getNext().getNo() == no) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            temp.setNext(temp.getNext().getNext());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到需要删除的英雄节点&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//是否找到</span></span><br><span class="line">        <span class="comment">//找到修改的位置</span></span><br><span class="line">        <span class="keyword">while</span> (temp.getNext() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.getNo() == heroNode.getNo()) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">//进行修改</span></span><br><span class="line">            temp.setName(heroNode.getName());</span><br><span class="line">            temp.setNickName(heroNode.getNickName());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到需要删除的英雄节点&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printHero</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.getNext();</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> HeroNode next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNickName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNickName</span><span class="params">(String nickName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(HeroNode next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name, String nickName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, nickName=&#x27;&quot;</span> + nickName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-单链表面试题（新浪，百度，腾讯）"><a href="#三-单链表面试题（新浪，百度，腾讯）" class="headerlink" title="三.单链表面试题（新浪，百度，腾讯）"></a>三.单链表面试题（新浪，百度，腾讯）</h3><ol><li>求单链表中有效节点的个数</li><li>查找单链表的倒数第k个节点【新浪面试题】</li><li>单链表的反转【腾讯面试题】</li><li>从尾到头打印单链表【百度面试题。要求方式1：反向遍历 方式2 stack栈】</li><li>合并两个有序的链表，合并后链表依然有序【课后练习】</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 求单链表中有效节点的个数</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> singleList</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(SingleList1 singleList)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//计数</span></span><br><span class="line">     <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> singleList.getHead().getNext();</span><br><span class="line">     <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">         count += <span class="number">1</span>;</span><br><span class="line">         temp = temp.getNext();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> count;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *查找单链表的倒数第k个节点</span></span><br><span class="line"><span class="comment">  * 思路：倒数第n个，就是正数 k - n + 1 个</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> singleList</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findNode</span><span class="params">(SingleList1 singleList,<span class="type">int</span> index)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> count(singleList);</span><br><span class="line">     <span class="keyword">if</span> (index &lt; <span class="number">0</span> &amp;&amp; index &gt; length) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">     <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> singleList.getHead().getNext();</span><br><span class="line">     <span class="keyword">while</span> (temp.getNext() != <span class="literal">null</span> &amp;&amp; count != length - index + <span class="number">1</span>) &#123;</span><br><span class="line">         temp = temp.getNext();</span><br><span class="line">         count += <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> temp.getValue();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 单链表的反转</span></span><br><span class="line"><span class="comment">  * 思路：</span></span><br><span class="line"><span class="comment">  * 1.遍历每个节点，头插法插入</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> singleList</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(SingleList1 singleList)</span> &#123;</span><br><span class="line">     <span class="type">SingleList1</span> <span class="variable">singleList1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleList1</span>();</span><br><span class="line">     <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> singleList.getHead().getNext();</span><br><span class="line">     <span class="keyword">while</span> (temp!= <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="type">Node</span> <span class="variable">insert</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(temp.getValue());</span><br><span class="line">         singleList1.addHead(insert);</span><br><span class="line">         temp = temp.getNext();</span><br><span class="line">     &#125;</span><br><span class="line">     singleList.setHead(singleList1.getHead());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 从尾到头打印单链表(使用栈)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> singleList</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reversePrint</span><span class="params">(SingleList1 singleList)</span> &#123;</span><br><span class="line">     <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> singleList.getHead().getNext();</span><br><span class="line">     Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">     <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">         stack.push(temp.getValue());</span><br><span class="line">         temp = temp.getNext();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">         System.out.println(stack.pop());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 合并两个有序的链表，合并后链表依然有序</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> singleList1</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> singleList2</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> SingleList1 <span class="title function_">merge</span><span class="params">(SingleList1 singleList1,SingleList1 singleList2)</span> &#123;</span><br><span class="line">     <span class="type">SingleList1</span> <span class="variable">singleList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleList1</span>();</span><br><span class="line">     <span class="type">Node</span> <span class="variable">temp1</span> <span class="operator">=</span> singleList1.getHead().getNext();</span><br><span class="line">     <span class="type">Node</span> <span class="variable">temp2</span> <span class="operator">=</span> singleList2.getHead().getNext();</span><br><span class="line">     <span class="keyword">while</span> (temp1.getNext() != <span class="literal">null</span> &amp;&amp; temp2.getNext() != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (temp1.getValue() &lt; temp2.getValue()) &#123;</span><br><span class="line">             <span class="type">Node</span> <span class="variable">insert</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(temp1.getValue());</span><br><span class="line">             insert(singleList,insert);</span><br><span class="line">             temp1 = temp1.getNext();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (temp1.getValue() &gt; temp2.getValue()) &#123;</span><br><span class="line">             <span class="type">Node</span> <span class="variable">insert</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(temp2.getValue());</span><br><span class="line">             insert(singleList,insert);</span><br><span class="line">             temp2 = temp2.getNext();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (temp1 != <span class="literal">null</span>) &#123;</span><br><span class="line">         insert(singleList,temp1);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (temp2 != <span class="literal">null</span>) &#123;</span><br><span class="line">         insert(singleList,temp2);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>  singleList;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//尾插</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(SingleList1 singleList,Node insert)</span> &#123;</span><br><span class="line">     <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> singleList.getHead();</span><br><span class="line">     <span class="keyword">while</span> (temp.getNext() != <span class="literal">null</span>) &#123;</span><br><span class="line">         temp = temp.getNext();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//找到最后位置</span></span><br><span class="line">     temp.setNext(insert);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="四-双链表"><a href="#四-双链表" class="headerlink" title="四.双链表"></a>四.双链表</h3><h5 id="单链表的缺点"><a href="#单链表的缺点" class="headerlink" title="单链表的缺点"></a>单链表的缺点</h5><ol><li>查找方向只能是一个方向，而双向链表可以向前或向后查找</li><li>单链表不能自我删除，需要靠辅助节点，而双向链表可以自我删除（单链表删除时需找到待删除节点的前一个节点）</li></ol><h5 id="双向链表的遍历，添加，删除，修改的操作思路"><a href="#双向链表的遍历，添加，删除，修改的操作思路" class="headerlink" title="双向链表的遍历，添加，删除，修改的操作思路"></a>双向链表的遍历，添加，删除，修改的操作思路</h5><ul><li>遍历 遍历的方式和单链表一样，只是可以向前查找也可以向后查找</li><li>添加 (尾插) 1.先找到双向链表的最后这个节点 temp 2.temp.next &#x3D; newNode 3.newNode.pre &#x3D; temp</li><li>添加 （按照顺序比如从小到大） 1.两种结果，要么在最后，要么在中间 2.在中间的情况 newNode.no &lt; temp.next.no 添加在temp后面 3.在最后的情况 temp移动到最后，newNode.no 一直大于 temp.no</li><li>修改 思路和单链表一样</li><li>删除 1.直接找到待删除的节点 temp 2.temp.pre.next &#x3D; temp.next 3.temp.next.pre &#x3D; temp.pre</li></ul><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleLinkedListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DoubleLinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleLinkedList</span>();</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">1</span>,<span class="string">&quot;宋江&quot;</span>,<span class="string">&quot;及时雨&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">2</span>,<span class="string">&quot;卢俊义&quot;</span>,<span class="string">&quot;玉麒麟&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">3</span>,<span class="string">&quot;吴用&quot;</span>,<span class="string">&quot;智多星&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">4</span>,<span class="string">&quot;林冲&quot;</span>,<span class="string">&quot;豹子头&quot;</span>);</span><br><span class="line">        linkedList.addByOrder(hero1);</span><br><span class="line">        linkedList.addByOrder(hero4);</span><br><span class="line">        linkedList.addByOrder(hero3);</span><br><span class="line">        linkedList.addByOrder(hero2);</span><br><span class="line">        linkedList.list();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除...个后&quot;</span>);</span><br><span class="line">        linkedList.delete(<span class="number">4</span>);</span><br><span class="line">        linkedList.list();</span><br><span class="line">        System.out.println(<span class="string">&quot;修改节点1&quot;</span>);</span><br><span class="line">        linkedList.update(<span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">1</span>,<span class="string">&quot;小宋&quot;</span>,<span class="string">&quot;及时雨及时雨————&quot;</span>));</span><br><span class="line">        linkedList.list();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创一个双向链表的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLinkedList</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">HeroNode2</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">0</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HeroNode2 <span class="title function_">getHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHead</span><span class="params">(HeroNode2 head)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历双向链表的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//辅助变量</span></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加（尾插法）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode2 heroNode)</span> &#123;</span><br><span class="line">        <span class="comment">//找到最后一个变量</span></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = heroNode;</span><br><span class="line">        heroNode.pre = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加 （按照大小）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addByOrder</span><span class="params">(HeroNode2 heroNode)</span>&#123;</span><br><span class="line">        <span class="comment">//辅助节点</span></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//标记no是否已经存在</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.next == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//没找到或添加第一个元素</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(heroNode.no &lt; temp.next.no)&#123;</span><br><span class="line">                <span class="comment">//需要中间插入</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(heroNode.no == temp.no)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;待插入的英雄已经已存在&quot;</span>);</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="comment">//是否是最后</span></span><br><span class="line">            <span class="keyword">if</span>(temp.next != <span class="literal">null</span>)&#123;</span><br><span class="line">                heroNode.next = temp.next;</span><br><span class="line">                temp.next.pre = heroNode;</span><br><span class="line">            &#125;</span><br><span class="line">            temp.next = heroNode;</span><br><span class="line">            heroNode.pre = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> no)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//直接找到需要删除的节点</span></span><br><span class="line">        <span class="comment">//找到后自我删除</span></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//标记是否找到变量</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//未找到</span></span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;未找到需要删除的节点&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.no == no)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="comment">//删除操作</span></span><br><span class="line">            temp.pre.next = temp.next;</span><br><span class="line">            <span class="comment">//判断是不是最后一个节点</span></span><br><span class="line">            <span class="keyword">if</span>(temp.next != <span class="literal">null</span>)&#123;</span><br><span class="line">                temp.next.pre = temp.pre;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HeroNode2 heroNode)</span>&#123;</span><br><span class="line">        <span class="comment">//直接找到修改</span></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//标记是否找到变量</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//未找到</span></span><br><span class="line">                System.out.println(<span class="string">&quot;未找到需要修改的节点&quot;</span>);</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.no == heroNode.no)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="comment">//修改</span></span><br><span class="line">            temp.no = heroNode.no;</span><br><span class="line">            temp.name = heroNode.name;</span><br><span class="line">            temp.nickName = heroNode.nickName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nickName;</span><br><span class="line">    <span class="keyword">public</span> HeroNode2 next;</span><br><span class="line">    <span class="comment">//指向前一个节点</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode2 pre;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode2</span><span class="params">(<span class="type">int</span> no, String name, String nickName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode2&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, nickName=&#x27;&quot;</span> + nickName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="五-单向环形链表"><a href="#五-单向环形链表" class="headerlink" title="五.单向环形链表"></a>五.单向环形链表</h3><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p>约瑟夫环问题 设编号为1,2…n的n个人围成一圈，约定编号为k(1&lt;&#x3D;k&lt;&#x3D;n)的人从1开始报数，数到m的人出列,他的下一位又开始从1报数，数到m的人那个人又出列，依次类推，直到所有的人都出列为止，产生一个出队编号的序列 分析： 使用一个不带头节点的单向环形链表 构建的思路：</p><ol><li>先创建第一个节点，让first指向该节点。并形成环状</li><li>后面当我们创建一个新的节点，就把该节点加入到新的环形链表中</li></ol><p>遍历的思路：</p><ol><li>先让辅助变量指向first</li><li>while(temp.next !&#x3D; first)</li></ol><p>根据用户的输入，生成小孩出圈的顺序</p><ol><li>需要创建一个辅助指针，先指向环形链表的最后一个节点</li><li>报数前 将first移动到k位置</li><li>当报数时，让first和helper指针同时移动（m-1）次</li><li>出圈 将first指向的小孩节点出圈<ol><li>先前移first</li><li>helper.next &#x3D; first</li></ol></li><li>原来节点没有任何引用，被回收</li></ol><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Josephu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CircleSingleLinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CircleSingleLinkedList</span>();</span><br><span class="line">        linkedList.addBoy(<span class="number">41</span>);</span><br><span class="line">        linkedList.countBoy(<span class="number">1</span>,<span class="number">3</span>,<span class="number">41</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建环形链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircleSingleLinkedList</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个first节点，当前还没有值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boy</span> <span class="variable">first</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//添加小孩节点，构建成环形链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBoy</span><span class="params">(<span class="type">int</span> nums)</span>&#123;</span><br><span class="line">        <span class="comment">//数据校验</span></span><br><span class="line">        <span class="keyword">if</span>(nums&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;nums不正确&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Boy</span> <span class="variable">curBoy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= nums; i++) &#123;</span><br><span class="line">            <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>)&#123;</span><br><span class="line">                first = boy;</span><br><span class="line">                first.setNext(first);</span><br><span class="line">                <span class="comment">//curBoy指向第一个小孩</span></span><br><span class="line">                curBoy = first;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//添加</span></span><br><span class="line">                curBoy.setNext(boy);</span><br><span class="line">                boy.setNext(first);</span><br><span class="line">                curBoy = curBoy.getNext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Boy</span> <span class="variable">temp</span> <span class="operator">=</span> first;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            <span class="keyword">if</span>(temp.getNext() == first)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户的输入，计算小孩出圈的顺序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> starNo 从第几个小孩开始数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> countNum 数几下</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 表示最开始有几个小孩</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k 第几个小孩开始报数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countBoy</span><span class="params">(<span class="type">int</span> starNo, <span class="type">int</span> countNum, <span class="type">int</span> nums,<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="comment">//数据进行校验</span></span><br><span class="line">        <span class="keyword">if</span>(first == <span class="literal">null</span>  starNo &lt; <span class="number">1</span>  starNo &gt; nums)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数输入有误，请重新输入&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//helper复制指针</span></span><br><span class="line">        <span class="type">Boy</span> <span class="variable">help</span> <span class="operator">=</span> first;</span><br><span class="line">        <span class="comment">//让复制指针指向最后</span></span><br><span class="line">        <span class="keyword">while</span> (help.getNext() != first)&#123;</span><br><span class="line">            help = help.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//移动</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            first = first.getNext();</span><br><span class="line">            help = help.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//报数，出圈</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (first == help)&#123;</span><br><span class="line">                <span class="comment">//圈中只有一个人</span></span><br><span class="line">                System.out.println(<span class="string">&quot;最后留在圈中的小孩&quot;</span> + first);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//让first和helper同时移动，出圈</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; countNum - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                first = first.getNext();</span><br><span class="line">                help = help.getNext();</span><br><span class="line">                <span class="comment">//first指向的小孩就是需要出圈的节点</span></span><br><span class="line">                System.out.println(<span class="string">&quot;出圈&quot;</span> + first);</span><br><span class="line">                <span class="comment">//将first指向的小孩出圈</span></span><br><span class="line">                first = first.getNext();</span><br><span class="line">                help.setNext(first);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boy</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> Boy next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Boy</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boy <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Boy next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Boy&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github上传自己的项目</title>
      <link href="/article/8f610a4b.html"/>
      <url>/article/8f610a4b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>之前将完成的一些项目保存在本地，一是分享的时候需要打包再发送，二是怕重装系统什么的搞没了，虽然都是小项目，但还是花费了不少的时间编写，还是有必要把项目托管到github上。（ps:据说前几个月github把一批代码埋到了北极，保存1000年，<a href="https://archiveprogram.github.com/">详情</a>，要是之前上传过还可以吹一波什么emmmm…）</p></blockquote><span id="more"></span><p>1、进入gethub首页，点击 New repository 新建一个项目 <img src="https://i.loli.net/2020/09/20/qF1phYw6I25nWtB.png" alt="image-20200920134308245"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Repository</span> <span class="string">name : 项目名</span></span><br><span class="line"><span class="attr">Description</span> : <span class="string">项目描述</span></span><br><span class="line"><span class="attr">Public/Private</span>:<span class="string">所有可见/指定人可见</span></span><br><span class="line"><span class="attr">Add</span> <span class="string">a README file : 在项目里自动添加readme.md文件</span></span><br><span class="line"><span class="attr">gitignore</span>: <span class="string">创建一个gitigore文件用于存放git忽略的文件，如maven的target目录，.idea目录等</span></span><br><span class="line"><span class="attr">license</span>: <span class="string">开源许可证，这玩意分类挺多，选MIT协议就行，它允许别人用你的代码做任何事情，但必须保证你的所有权，并且你无须承担代码使用产生的风险，参考自 https://zhuanlan.zhihu.com/p/51331026</span></span><br></pre></td></tr></table></figure><p>完成输入选择后点击Create repository 2、点击Code获取到一个地址，复制它备用 <img src="https://i.loli.net/2020/09/20/2UrhIAdNxOGC4eT.png" alt="image-20200920134437245"> 3、本地操作，需下载git工具 <a href="https://git-for-windows.github.io/">下载链接</a>，没有梯子会比较慢，附上一个<a href="https://git-for-windows.github.io/">蓝奏云链接</a> 找到你的项目，点击右键 <img src="https://i.loli.net/2020/09/20/CuDs8ndMRi39eNI.png" alt="image-20200920134902547"> 弹出操作框 将前面复制到的地址拿过来 git clone <a href="https://github.com/liaotao421/-.git">https://github.com/liaotao421/-.git</a> 这时发现问文件目录多了一个文件夹，文件夹名就是github上的项目名 将项目复制到这个文件内（我的项目名莫名其妙变成了-…） cd 项目名 &#x2F;&#x2F;进入项目文件夹 配置git上的用户名和邮箱 git cinfig –global user.name “liaotao421” git cinfig –global user.email <a href="mailto:&#x31;&#57;&#56;&#x34;&#52;&#53;&#x37;&#54;&#53;&#57;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;">&#x31;&#57;&#56;&#x34;&#52;&#53;&#x37;&#54;&#53;&#57;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;</a> 依次输入 git add .&#x2F;&#x2F;注意点之前的空格! git commit -m “first commit” git push -u orgin master git push -u origin master &#x2F;&#x2F;此时弹出登录框登录 刷新发现项目已经成功上传 <img src="https://i.loli.net/2020/09/20/3uBVsteUFiSYkXR.png" alt="image-20200920140645978"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网易云解锁变灰歌曲（解锁会员？）</title>
      <link href="/article/882e53a2.html"/>
      <url>/article/882e53a2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>最近发现一款很强的插件，先附上<a href="https://github.com/nondanee/UnblockNeteaseMusic" title="原项目地址">原项目地址</a>，对原理不做过多探究</p></blockquote><span id="more"></span><h3 id="1、点击下载，下载完成是一个-exe程序，点击运行就会一直监听本地8080端口"><a href="#1、点击下载，下载完成是一个-exe程序，点击运行就会一直监听本地8080端口" class="headerlink" title="1、点击下载，下载完成是一个.exe程序，点击运行就会一直监听本地8080端口"></a>1、点击下载，下载完成是一个.exe程序，点击运行就会一直监听本地8080端口</h3><p><a href="https://wwa.lanzous.com/iMUI9gquf1i" title="点我下载">点我下载</a> 若不进行开发一般应用不会使用8080端口 <img src="https://i.loli.net/2020/09/18/dInv94OkFGu1CRa.png" alt="image-20200918225106319"></p><h3 id="2、运行网易云，在设置-工具里找到自定义代理服务器"><a href="#2、运行网易云，在设置-工具里找到自定义代理服务器" class="headerlink" title="2、运行网易云，在设置-工具里找到自定义代理服务器"></a>2、运行网易云，在设置-工具里找到自定义代理服务器</h3><p><img src="https://i.loli.net/2020/09/18/a8AHDo5Z2rKj1TB.png" alt="image-20200918225427963"> 填入服务器地址与端口号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务器：127.0.0.1</span><br><span class="line">端口：8080</span><br></pre></td></tr></table></figure><h3 id="3、根据提示重启网易云"><a href="#3、根据提示重启网易云" class="headerlink" title="3、根据提示重启网易云"></a>3、根据提示重启网易云</h3><p><strong>运行前：</strong> <img src="https://i.loli.net/2020/09/18/9fsUvLjiOhu3wEn.png" alt="image-20200918230251005"> <strong>运行后：</strong> <img src="https://i.loli.net/2020/09/18/JVCefFsOq39Drmj.png" alt="image-20200918225624874"> <strong>发现没有之前没有版权的歌又可以听了！而且有些会员歌曲也可以听</strong> 注意：软件需一直处于运行状态 ​ 于此同时可以下载歌曲，下载后不再是辣鸡网易云的.cnm格式（只能在网易云上播放），这种格式也可以使用在线转换根据进行转换，我也没有使用过，不知道效果如何 <img src="https://i.loli.net/2020/09/18/1y5XxIODMfzhSvr.png" alt="image-20200918225928007"></p><h3 id="4、服务器部署"><a href="#4、服务器部署" class="headerlink" title="4、服务器部署"></a>4、服务器部署</h3><p> 当然我也在第一时间想到把这个部署在服务器上这样就可以不用每次都在电脑上后台运行，然而不知道是因为服务器性能太弱还是操作不当使用起来贼慢，附上<a href="https://www.52pojie.cn/thread-1017175-1-1.html">作者部署教程</a>，各位可进行尝试！</p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门（二）</title>
      <link href="/article/56a9c9b0.html"/>
      <url>/article/56a9c9b0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>第二部分的入门主要是通过axios(应该没拼错)通过调用接口拿到数据在展示在页面上，在开发中较为多的使用</p></blockquote><span id="more"></span><h2 id="1、axios"><a href="#1、axios" class="headerlink" title="1、axios"></a>1、axios</h2><p>axios简单使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送get请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;https://autumnfish.cn/api/joke/list?num=1&quot;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//发送post请求</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.post&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&quot;https://autumnfish.cn/api/user/reg&quot;</span>,&#123;<span class="attr">username</span>:<span class="string">&quot;西蓝花嘤嘤嘤&quot;</span>&#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、案例-天气预报"><a href="#2、案例-天气预报" class="headerlink" title="2、案例-天气预报"></a>2、案例-天气预报</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">  &lt;title&gt;天知道&lt;/title&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/reset.css&quot; /&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/index.css&quot; /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;wrap&quot; id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;search_form&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;logo&quot;&gt;&lt;img src=&quot;img/logo.png&quot; alt=&quot;logo&quot; /&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;form_group&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model = &quot;city&quot; class=&quot;input_txt&quot; placeholder=&quot;请输入查询的天气&quot; @keyup.enter=&quot;weatherSerach&quot; /&gt;</span><br><span class="line">        &lt;button class=&quot;input_sub&quot; @click=&quot;weatherSerach&quot;&gt;</span><br><span class="line">          搜 索</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;hotkey&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; @click=&quot;search(&#x27;北京&#x27;)&quot;&gt;北京&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; @click=&quot;search(&#x27;上海&#x27;)&quot;&gt;上海&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; @click=&quot;search(&#x27;广州&#x27;)&quot;&gt;广州&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:;&quot; @click=&quot;search(&#x27;深圳&#x27;)&quot;&gt;深圳&lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;ul class=&quot;weather_list&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in weatherList&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;info_type&quot;&gt;&lt;span class=&quot;iconfont&quot;&gt;&#123;&#123; item.type &#125;&#125;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;info_temp&quot;&gt;</span><br><span class="line">          &lt;b&gt;&#123;&#123; item.low &#125;&#125;&lt;/b&gt;</span><br><span class="line">          ~</span><br><span class="line">          &lt;b&gt;&#123;&#123; item.high &#125;&#125;&lt;/b&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;info_date&quot;&gt;&lt;span&gt;&#123;&#123; item.date &#125;&#125;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!-- 官网提供的 axios 在线地址 --&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!-- 自己的js --&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">      el:&quot;#app&quot;,</span><br><span class="line">      data:&#123;</span><br><span class="line">        city:&quot; &quot;,</span><br><span class="line">        weatherList:[],</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        weatherSerach()&#123;</span><br><span class="line">          var that = this;</span><br><span class="line">          axios.get(&#x27;http://wthrcdn.etouch.cn/weather_mini?city=&#x27;+this.city).then(function(res)&#123;</span><br><span class="line">            console.log(res.data.data.forecast);</span><br><span class="line">            that.weatherList = res.data.data.forecast;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        search(city)&#123;</span><br><span class="line">          this.city = city;</span><br><span class="line">          this.weatherSerach();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3、案例-音乐播放器"><a href="#3、案例-音乐播放器" class="headerlink" title="3、案例-音乐播放器"></a>3、案例-音乐播放器</h2><p>挺有意思的一个小项目， <a href="http://212.64.71.101:8887/">运行地址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">  &lt;title&gt;悦听player&lt;/title&gt;</span><br><span class="line">  &lt;!-- 样式 --&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/index.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    &lt;!-- 播放器主体区域 --&gt;</span><br><span class="line">    &lt;div class=&quot;play_wrap&quot; id=&quot;player&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;search_bar&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;images/player_title.png&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">        &lt;!-- 搜索歌曲 --&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; autocomplete=&quot;off&quot; v-model=&quot;query&quot; @keyup.enter=&quot;searchMusic&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;center_con&quot;&gt;</span><br><span class="line">        &lt;!-- 搜索歌曲列表 --&gt;</span><br><span class="line">        &lt;div class=&#x27;song_wrapper&#x27;&gt;</span><br><span class="line">          &lt;ul class=&quot;song_list&quot;&gt;</span><br><span class="line">           &lt;li v-for=&quot;item in musicList&quot;&gt;&lt;a href=&quot;javascript:;&quot; @click=&quot;playMusci(item.id)&quot;&gt;&lt;/a&gt; &lt;b&gt;&#123;&#123;item.name&#125;&#125;&lt;/b&gt; &lt;span @click=&quot;playMv(item.mvid)&quot; v-if=&quot;item.mvid!=0&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">          &lt;img src=&quot;images/line.png&quot; class=&quot;switch_btn&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 歌曲信息容器 --&gt;</span><br><span class="line">        &lt;div class=&quot;player_con&quot; :class=&quot;&#123;playing:isPlaying&#125;&quot;&gt;</span><br><span class="line">          &lt;img src=&quot;images/player_bar.png&quot; class=&quot;play_bar&quot; /&gt;</span><br><span class="line">          &lt;!-- 黑胶碟片 --&gt;</span><br><span class="line">          &lt;img src=&quot;images/disc.png&quot; class=&quot;disc autoRotate&quot; /&gt;</span><br><span class="line">          &lt;img :src=&quot;musicSrc&quot; class=&quot;cover autoRotate&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 评论容器 --&gt;</span><br><span class="line">        &lt;div class=&quot;comment_wrapper&quot;&gt;</span><br><span class="line">          &lt;h5 class=&#x27;title&#x27;&gt;热门留言&lt;/h5&gt;</span><br><span class="line">          &lt;div class=&#x27;comment_list&#x27;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;dl v-for=&quot;item in hotComments&quot;&gt;</span><br><span class="line">              &lt;dt&gt;&lt;img :src=&quot;item.user.avatarUrl&quot; alt=&quot;&quot;&gt;&lt;/dt&gt;</span><br><span class="line">              &lt;dd class=&quot;name&quot;&gt;&#123;&#123; item.user.nickname &#125;&#125;&lt;/dd&gt;</span><br><span class="line">              &lt;dd class=&quot;detail&quot;&gt;</span><br><span class="line">                &#123;&#123;item.content&#125;&#125;</span><br><span class="line">              &lt;/dd&gt;</span><br><span class="line">            &lt;/dl&gt;</span><br><span class="line"></span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;img src=&quot;images/line.png&quot; class=&quot;right_line&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;audio_con&quot;&gt;</span><br><span class="line">        &lt;audio @play=&quot;play&quot; @pause=&quot;pause&quot; ref=&#x27;audio&#x27;  :src=&quot;musicUrl&quot; controls autoplay loop class=&quot;myaudio&quot;&gt;&lt;/audio&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;video_con&quot;  v-show=&quot;isShow&quot; style=&quot;display: none;&quot;&gt;</span><br><span class="line">        &lt;video :src=&quot;mvUrl&quot; controls=&quot;controls&quot; &gt;&lt;/video&gt;</span><br><span class="line">        &lt;div class=&quot;mask&quot; @click=&quot;hide&quot; &gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!-- 官网提供的 axios 在线地址 --&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">   var app = new Vue(&#123;</span><br><span class="line">     el:&quot;#player&quot;,</span><br><span class="line">     data:&#123;</span><br><span class="line">       query:&quot;&quot;,</span><br><span class="line">       musicList:[ ],</span><br><span class="line">       musicUrl:&quot;&quot;,</span><br><span class="line">       musicSrc:&quot;&quot;,</span><br><span class="line">       hotComments:[],</span><br><span class="line">       isPlaying:false,</span><br><span class="line">       isShow:false,</span><br><span class="line">       mvUrl:&quot;&quot;</span><br><span class="line"></span><br><span class="line">     &#125;,</span><br><span class="line">     methods:&#123;</span><br><span class="line">       searchMusic:function()&#123;</span><br><span class="line">         var that = this;</span><br><span class="line">         axios.get(&quot;https://autumnfish.cn/search?keywords=&quot;+this.query).then(function(res)&#123;</span><br><span class="line">            that.musicList =res.data.result.songs;</span><br><span class="line">            console.log(that.musicList);</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;,</span><br><span class="line">       playMusci:function(id)&#123;</span><br><span class="line">         var that = this;</span><br><span class="line">         axios.get(&quot;https://autumnfish.cn/song/url?id=&quot;+id).then(function(res)&#123;</span><br><span class="line">            // console.log(res.data.data[0].url)</span><br><span class="line">            that.musicUrl = res.data.data[0].url;</span><br><span class="line">         &#125;)</span><br><span class="line">         //https://autumnfish.cn/playlist/detail?id=24381616</span><br><span class="line">         axios.get(&quot;https://autumnfish.cn/song/detail?ids=&quot;+id).then(function(res)&#123;</span><br><span class="line">          // console.log(res.data.songs[0].al.picUrl)</span><br><span class="line">          that.musicSrc = res.data.songs[0].al.picUrl;</span><br><span class="line">          // console.log(that.musicSrc);</span><br><span class="line">         &#125;)</span><br><span class="line">         // /comment/music?id=186016&amp;limit=1 获取歌曲评论</span><br><span class="line">         axios.get(&quot;https://autumnfish.cn/comment/music?id=&quot;+id+&quot;&amp;limit=1&quot;).then(function(res)&#123;</span><br><span class="line">          // console.log(res.data.songs[0].al.picUrl)</span><br><span class="line">            console.log(res.data.hotComments);</span><br><span class="line">            that.hotComments = res.data.hotComments;</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;,</span><br><span class="line">       play:function()&#123;</span><br><span class="line">         console.log(&quot;play&quot;);</span><br><span class="line">         this.isPlaying = true;</span><br><span class="line">       &#125;,</span><br><span class="line">       pause:function()&#123;</span><br><span class="line">        console.log(&quot;pause&quot;);</span><br><span class="line">         this.isPlaying = false;</span><br><span class="line">       &#125;,</span><br><span class="line">       playMv:function(id)&#123;</span><br><span class="line">        var that = this;</span><br><span class="line">        axios.get(&quot;https://autumnfish.cn/mv/url?id=&quot;+id).then(function(res)&#123;</span><br><span class="line">        console.log(&quot;------------------------------------&quot;)</span><br><span class="line">        console.log(res.data.data.url);</span><br><span class="line">        that.mvUrl = res.data.data.url;</span><br><span class="line">        that.isShow = true;</span><br><span class="line">      &#125;)</span><br><span class="line">       &#125;,</span><br><span class="line">       hide:function()&#123;</span><br><span class="line">         this.isShow = false;</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>简简单单四小时的入门结束！，现在考虑将假期未实现的魔方比赛系统使用springboot + vue 重构，并实现未实现的功能。使用软件工程的方法来设计这个系统</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门（一）</title>
      <link href="/article/66bf2568.html"/>
      <url>/article/66bf2568.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>入门springboot之后，模板引擎themeleaf，jsp等开发方式可能已经被时代抛弃，大势所趋的前后端分离使得不得不学习一点Vue,以便开发小型的项目继续，在b站发现<a href="https://www.bilibili.com/video/BV12J411m7MG">黑马某四小时快速入门课</a>，确实感觉使用起来很方便。（有点类似微信小程序，或者说微信小程序开发有点类似Vue,微信小程序早忘了<img src="https://i.loli.net/2020/09/17/Sj1D7dhyCaWBwu4.jpg" alt="img">）入门较为简单，只记录代码</p></blockquote><span id="more"></span><h2 id="1、vue基础"><a href="#1、vue基础" class="headerlink" title="1、vue基础"></a>1、vue基础</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#x27;Hello Vue!&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="2、挂载点"><a href="#2、挂载点" class="headerlink" title="2、挂载点"></a>2、挂载点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;p class=&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">        &#123;&#123; message &#125;&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el:&quot;.app&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                message:&quot;cyfwlp&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3、数据对象"><a href="#3、数据对象" class="headerlink" title="3、数据对象"></a>3、数据对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &#123;&#123; message &#125;&#125;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; school.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &#123;&#123; campus[<span class="number">0</span>] &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="type">var</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">            el:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">            data:&#123;</span><br><span class="line">                message:<span class="string">&quot;你好，小黑！&quot;</span>,</span><br><span class="line">                school:&#123;</span><br><span class="line">                    name:<span class="string">&quot;黑马程序员&quot;</span>,</span><br><span class="line">                    mobile:<span class="string">&quot;3234232131&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                campus:[<span class="string">&quot;111&quot;</span>,<span class="string">&quot;222&quot;</span>,<span class="string">&quot;333&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="4、v-text指令"><a href="#4、v-text指令" class="headerlink" title="4、v-text指令"></a>4、v-text指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2 v-text=&quot;message + &#x27;就这就这&#x27;&quot;&gt;1111&lt;/h2&gt;</span><br><span class="line">    &lt;h2 v-text=&quot;info + &#x27;就这就这&#x27;&quot;&gt;1111&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; message +&#x27;就这就这&#x27;&#125;&#125;1111&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:&quot;你好，小黑！!!&quot;,</span><br><span class="line">            info:&quot;cyfwlp&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="5、v-html指令"><a href="#5、v-html指令" class="headerlink" title="5、v-html指令"></a>5、v-html指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2 v-html=&quot;info&quot;&gt;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                message:&quot;你好，小黑！!!&quot;,</span><br><span class="line">                info:&quot;&lt;a href = &#x27;www.baidu.com&#x27;&gt;cyfwlp&lt;/a&gt;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="6、v-on指令"><a href="#6、v-on指令" class="headerlink" title="6、v-on指令"></a>6、v-on指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;事件绑定1&quot; @click=&quot;changeFood&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; food &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                food:&quot;西蓝花&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                dolt:function()&#123;</span><br><span class="line">                    alert(&quot;1111&quot;)</span><br><span class="line">                &#125;,</span><br><span class="line">                changeFood:function()&#123;</span><br><span class="line">                    console.log(this.food);</span><br><span class="line">                    this.food += &quot;好吃&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="7、案例-计数器"><a href="#7、案例-计数器" class="headerlink" title="7、案例-计数器"></a>7、案例-计数器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;input-num&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;sub&quot;&gt;</span><br><span class="line">            -</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; number &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;button @click=&quot;add&quot;&gt;</span><br><span class="line">            +</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                number:1</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                add:function()&#123;</span><br><span class="line">                    if(this.number&lt;10)&#123;</span><br><span class="line">                        this.number++;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        alert(&quot;最大了&quot;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                sub:function()&#123;</span><br><span class="line">                    if(this.number&gt;0)&#123;</span><br><span class="line">                        this.number--;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        alert(&quot;最小了&quot;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="8、v-show指令"><a href="#8、v-show指令" class="headerlink" title="8、v-show指令"></a>8、v-show指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;change&quot; value=&quot;change&quot;&gt;change&lt;/button&gt;</span><br><span class="line">        &lt;img v-show = &quot;isShow&quot; src=&quot;http://www.67373upup.xyz:88/wordpress/wp-content/uploads/2020/09/36593305aeb94dbfee9a57128578369a.jpg&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                isShow:true</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                change:function()&#123;</span><br><span class="line">                    this.isShow = !this.isShow</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="9、v-if指令"><a href="#9、v-if指令" class="headerlink" title="9、v-if指令"></a>9、v-if指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;p v-if=&quot;isShow&quot;&gt;这是一个标签&lt;/p&gt;</span><br><span class="line">        &lt;button @click=&quot;change&quot;&gt;change&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                isShow:true</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                change:function()&#123;</span><br><span class="line">                    this.isShow = ! this.isShow</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="10、v-bind指令"><a href="#10、v-bind指令" class="headerlink" title="10、v-bind指令"></a>10、v-bind指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .active&#123;</span><br><span class="line">        border:1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;img :src = &quot;imgSrc&quot; :title=&quot;imgTitle&quot; :class = &quot;&#123;active:isActive&#125;&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;change&quot;&gt;dwdw&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                imgSrc:&quot;http://www.67373upup.xyz:88/wordpress/wp-content/uploads/2020/09/36593305aeb94dbfee9a57128578369a.jpg&quot;,</span><br><span class="line">                imgTitle:&quot;springboot&quot;,</span><br><span class="line">                isActive:false</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                change:function()&#123;</span><br><span class="line">                    this.isActive = ! this.isActive;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="11、案例-图片切换"><a href="#11、案例-图片切换" class="headerlink" title="11、案例-图片切换"></a>11、案例-图片切换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;img :src=&quot;imgArr[index]&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:void(0)&quot; @click=&quot;prev&quot; v-show = &quot;index != 0&quot;&gt;上一张&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;javascript:void(0)&quot; @click=&quot;next&quot; v-show = &quot;index != imgArr.length - 1&quot;&gt;下一张&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                imgArr:[&quot;./images/1.JPG&quot;,</span><br><span class="line">                        &quot;./images/2.JPG&quot;,</span><br><span class="line">                        &quot;./images/3.JPG&quot;,</span><br><span class="line">                        &quot;./images/4.JPG&quot;],</span><br><span class="line">                index:0</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                prev:function()&#123;</span><br><span class="line">                    this.index--;</span><br><span class="line">                &#125;,</span><br><span class="line">                next:function()&#123;</span><br><span class="line">                    this.index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="12、v-for指令"><a href="#12、v-for指令" class="headerlink" title="12、v-for指令"></a>12、v-for指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(item,index) in arr&quot;&gt;</span><br><span class="line">                &#123;&#123; index + 1 &#125;&#125; 黑马校区：&#123;&#123; item &#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;h2 v-for = &quot;item in vegetavles&quot;&gt;</span><br><span class="line">            &#123;&#123; item.name &#125;&#125;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;button @click= &quot;add&quot;&gt;add&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;push&quot;&gt;push&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                arr:[&quot;北京&quot;,&quot;上海&quot;,&quot;广州&quot;,&quot;深圳&quot;],</span><br><span class="line">                vegetavles:[</span><br><span class="line">                    &#123;name:&quot;111&quot;&#125;,</span><br><span class="line">                    &#123;name:&quot;222&quot;&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                add:function()&#123;</span><br><span class="line">                    this.vegetavles.push(&#123;name:&quot;333&quot;&#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">                push:function()&#123;</span><br><span class="line">                    this.vegetavles.shift();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="13、v-on指令补充"><a href="#13、v-on指令补充" class="headerlink" title="13、v-on指令补充"></a>13、v-on指令补充</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;点击&quot; @click=&quot;doit(666,&#x27;老谭&#x27;)&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            doit:function(p1,p2)&#123;</span><br><span class="line">                alert(p2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="14、v-model指令"><a href="#14、v-model指令" class="headerlink" title="14、v-model指令"></a>14、v-model指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;</span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">        &lt;button @click=&quot;change&quot;&gt;&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,//挂载</span><br><span class="line">            data:&#123;</span><br><span class="line">                message:&quot;cyfwlp&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                change:function()&#123;</span><br><span class="line">                    this.message = &quot;1111111&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="15、案例-记事本"><a href="#15、案例-记事本" class="headerlink" title="15、案例-记事本"></a>15、案例-记事本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br><span class="line">    &lt;title&gt;小黑记事本&lt;/title&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;robots&quot; content=&quot;noindex, nofollow&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;googlebot&quot; content=&quot;noindex, nofollow&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./css/index.css&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;!-- 主体区域 --&gt;</span><br><span class="line">    &lt;section id=&quot;todoapp&quot;&gt;</span><br><span class="line">      &lt;!-- 输入框 --&gt;</span><br><span class="line">      &lt;header class=&quot;header&quot;&gt;</span><br><span class="line">        &lt;h1&gt;小黑记事本&lt;/h1&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          autofocus=&quot;autofocus&quot;</span><br><span class="line">          autocomplete=&quot;off&quot;</span><br><span class="line">          placeholder=&quot;请输入任务&quot;</span><br><span class="line">          class=&quot;new-todo&quot;</span><br><span class="line">          v-model=&quot;inputValue&quot;</span><br><span class="line">          @keyup.enter = &quot;add&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">      &lt;!-- 列表区域 --&gt;</span><br><span class="line">      &lt;section class=&quot;main&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line">          &lt;li class=&quot;todo&quot; v-for=&quot;(item,index) in list&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;index&quot;&gt;&#123;&#123; index+1 &#125;&#125;.&lt;/span&gt; &lt;label&gt;&#123;&#123; item &#125;&#125;&lt;/label&gt;</span><br><span class="line">              &lt;button class=&quot;destroy&quot; @click=&quot;remove(index)&quot;&gt;&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">      &lt;!-- 统计和清空 --&gt;</span><br><span class="line">      &lt;footer class=&quot;footer&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;todo-count&quot; v-show=&quot;list.length != 0&quot;&gt; &lt;strong&gt;&#123;&#123;list.length&#125;&#125;&lt;/strong&gt; items left &lt;/span&gt;</span><br><span class="line">        &lt;button class=&quot;clear-completed&quot; @click=&quot;destory&quot; v-show=&quot;list.length != 0&quot;&gt;</span><br><span class="line">          Clear</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/footer&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">    &lt;!-- 底部 --&gt;</span><br><span class="line">    &lt;footer class=&quot;info&quot;&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        &lt;a href=&quot;http://www.itheima.com/&quot;</span><br><span class="line">          &gt;&lt;img src=&quot;./img/black.png&quot; alt=&quot;&quot;</span><br><span class="line">        /&gt;&lt;/a&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">    &lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">          el:&quot;#todoapp&quot;,</span><br><span class="line">          data:&#123;</span><br><span class="line">            list:[&quot;写代码&quot;,&quot;吃饭饭&quot;,&quot;睡觉觉&quot;],</span><br><span class="line">            inputValue:&quot;好好学习，天天睡觉&quot;,</span><br><span class="line">          &#125;,</span><br><span class="line">          methods:&#123;</span><br><span class="line">            add:function()&#123;</span><br><span class="line">              this.list.push(this.inputValue);</span><br><span class="line">            &#125;,</span><br><span class="line">            remove:function(index)&#123;</span><br><span class="line">              this.list.splice(index,1);</span><br><span class="line">            &#125;,</span><br><span class="line">            destory:function()&#123;</span><br><span class="line">              this.list = [];</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote><p>在springboot折磨了几天后看前端是真轻松不得不说哈哈</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、springboot与数据访问</title>
      <link href="/article/be1ecb79.html"/>
      <url>/article/be1ecb79.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>springboot与数据访问</p></blockquote><span id="more"></span><h2 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///jdbc</span></span><br></pre></td></tr></table></figure><p>效果： ​ 默认使用：com.zaxxer.hikari.HikariDataSource 数据源 ​ 数据源的相关配置都在DataSourceProprtties 1、可以使用spring.datasource.type改变默认数据源 2、springboot支持的数据源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.apache.commons.dbcp2.BasicDataSource</span><br><span class="line">com.zaxxer.hikari.HikariDataSource</span><br><span class="line">org.apache.tomcat.jdbc.pool.DataSource</span><br></pre></td></tr></table></figure><p>3.自定义数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;DataSource.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">    name = &#123;&quot;spring.datasource.type&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Generic</span> &#123;</span><br><span class="line">    Generic() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DataSource <span class="title function_">dataSource</span><span class="params">(DataSourceProperties properties)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、整合druid数据源"><a href="#2、整合druid数据源" class="headerlink" title="2、整合druid数据源"></a>2、整合druid数据源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">druid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1.配置一个管理后台的Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">statViewServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ServletRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(<span class="keyword">new</span> <span class="title class_">StatViewServlet</span>(),<span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        initParams.put(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.配置一个监控的filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">webStatFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        filter.setFilter(<span class="keyword">new</span> <span class="title class_">WebStatFilter</span>());</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filter.setInitParameters(initParams);</span><br><span class="line">        filter.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、整合Mybatis"><a href="#3、整合Mybatis" class="headerlink" title="3、整合Mybatis"></a>3、整合Mybatis</h2><p>配置文件版：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="string">指定全局配置文件的位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span>  <span class="string">指定sql映射文件的位置</span></span><br></pre></td></tr></table></figure><p>更多使用参照 <a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" title="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>五、Docker</title>
      <link href="/article/7ff872e6.html"/>
      <url>/article/7ff872e6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>docker 简单使用</p></blockquote><span id="more"></span><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>Docker是一个开源的应用容器引擎； Docker支持将软件编写成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，使用者可以直接使用这个镜像 运行中的这个镜像称为容器，容器启动是非常快速的</p><h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机（Host）：安装了Docker程序的机器（Docker直接按照在操作系统之上） docker客户端（Client）：客户端通过命令行或其他工具连接Docker主机进行操作 docker仓库（Registy）：Docker仓库用来存放镜像 docker容器（Container）：镜像启动之后的实例；容器是独立运行的一个或一组应用 <img src="https://i.loli.net/2020/09/17/EPWtvAzO2jscBM1.png"> 使用Docker步骤： 1、安装Docker 2、去Docker仓库找到软件的镜像 3、使用Docker运行镜像，镜像生成一个容器 4、对容器的启动停止就是对软件的启动，停止</p><h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><p>直接使用云服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、检查内核版本，必须是3.10及以上</span><br><span class="line">uname -r</span><br><span class="line">2、安装docker</span><br><span class="line">yum install docker</span><br><span class="line">3、输入y确认安装</span><br><span class="line">4、启动docker</span><br><span class="line">[root@localhost ~]# systemctl start docker</span><br><span class="line">[root@localhost ~]# docker -v</span><br><span class="line">Docker version 1.12.6, build 3e8e77d/1.12.6</span><br><span class="line">5、开机启动docker</span><br><span class="line">[root@localhost ~]# systemctl enable docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">6、停止docker</span><br><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>使用阿里云的镜像加速，否则下载镜像很慢 <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" title="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><p>操作</p><p>命令</p><p>说明</p><p>检索</p><p>docker search 关键字 eg：docker search redis</p><p>我们经常去docker hub上检索镜像的详细信息，如镜像的TAG。</p><p>拉取</p><p>docker pull 镜像名:tag</p><p>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</p><p>列表</p><p>docker images</p><p>查看所有本地镜像</p><p>删除</p><p>docker rmi image-id</p><p>删除指定的本地镜像</p><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）； 步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1、搜索镜像</span><br><span class="line">[root@localhost ~]# docker search tomcat</span><br><span class="line">2、拉取镜像</span><br><span class="line">[root@localhost ~]# docker pull tomcat</span><br><span class="line">3、根据镜像启动容器</span><br><span class="line">docker run --name mytomcat -d tomcat:latest</span><br><span class="line">4、docker ps  </span><br><span class="line">查看运行中的容器</span><br><span class="line">5、 停止运行中的容器</span><br><span class="line">docker stop  容器的id</span><br><span class="line">6、查看所有的容器</span><br><span class="line">docker ps -a</span><br><span class="line">7、启动容器</span><br><span class="line">docker start 容器id</span><br><span class="line">8、删除一个容器</span><br><span class="line"> docker rm 容器id</span><br><span class="line">9、启动一个做了端口映射的tomcat</span><br><span class="line">[root@localhost ~]# docker run -d -p 8888:8080 tomcat</span><br><span class="line">-d：后台运行</span><br><span class="line">-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</span><br><span class="line"></span><br><span class="line">10、为了演示简单关闭了linux的防火墙</span><br><span class="line">service firewalld status ；查看防火墙状态</span><br><span class="line">service firewalld stop：关闭防火墙</span><br><span class="line">11、查看容器的日志</span><br><span class="line">docker logs container-name/container-id</span><br><span class="line"></span><br><span class="line">更多命令参看</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/docker/</span><br><span class="line">可以参考每一个镜像的文档</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>错误的启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -d mysql</span><br><span class="line">42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846</span><br><span class="line"></span><br><span class="line">mysql退出了</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES</span><br><span class="line">42f09819908b        mysql               &quot;docker-entrypoint.sh&quot;   34 seconds ago      Exited (1) 33 seconds ago                            mysql01</span><br><span class="line">538bde63e500        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       compassionate_</span><br><span class="line">goldstine</span><br><span class="line">c4f1ac60b3fc        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       lonely_fermi</span><br><span class="line">81ec743a5271        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//错误日志</span><br><span class="line">[root@localhost ~]# docker logs 42f09819908b</span><br><span class="line">error: database is uninitialized and password option is not specified </span><br><span class="line">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span><br></pre></td></tr></table></figure><p>正确的启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">b874c56bec49        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</span><br></pre></td></tr></table></figure><p>做了端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">ad10e4bc5c6a        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</span><br></pre></td></tr></table></figure><p>进入容器 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 实例id bash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、springboot web开发</title>
      <link href="/article/54b47222.html"/>
      <url>/article/54b47222.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>springboot web开发</p></blockquote><span id="more"></span><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>使用springboot；</p><ol><li><strong>创建springboot应用，选中需要的模块</strong></li><li><strong>springboot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></li><li><strong>自己编写业务代码</strong></li></ol><p><strong>自动配置原理？</strong> 这个场景springboot帮我们配置了什么？能不能修改？能修改哪些配置？拓展….</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxxAutoConfiguration 帮我们给容器中自动配置组件</span><br><span class="line">xxxProporties 配置类来封装配置文件的内容</span><br></pre></td></tr></table></figure><h2 id="2、springboot对静态资源的映射规则"><a href="#2、springboot对静态资源的映射规则" class="headerlink" title="2、springboot对静态资源的映射规则"></a>2、springboot对静态资源的映射规则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.resources&quot;,</span></span><br><span class="line"><span class="meta">    ignoreUnknownFields = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceProperties</span> &#123;</span><br><span class="line">    <span class="comment">//可以设置和资源有关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure><p>WebMvcAutoConfiguration 部分代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Duration</span> <span class="variable">cachePeriod</span> <span class="operator">=</span> <span class="built_in">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">        <span class="type">CacheControl</span> <span class="variable">cacheControl</span> <span class="operator">=</span> <span class="built_in">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/webjars/**&quot;</span>&#125;).addResourceLocations(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>&#125;).setCachePeriod(<span class="built_in">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">staticPathPattern</span> <span class="operator">=</span> <span class="built_in">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;staticPathPattern&#125;).addResourceLocations(WebMvcAutoConfiguration.getResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="built_in">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置欢迎页映射</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title function_">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;</span><br><span class="line">    <span class="type">WelcomePageHandlerMapping</span> <span class="variable">welcomePageHandlerMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WelcomePageHandlerMapping</span>(<span class="keyword">new</span> <span class="title class_">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, <span class="built_in">this</span>.getWelcomePage(), <span class="built_in">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(<span class="built_in">this</span>.getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    welcomePageHandlerMapping.setCorsConfigurations(<span class="built_in">this</span>.getCorsConfigurations());</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>)1、所有&#x2F;webjars&#x2F;**，都去classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F;找资源； webjars：以jar包的方式引入静态资源 <a href="https://www.webjars.org/">https://www.webjars.org/</a> <img src="https://i.loli.net/2020/09/14/7uVJhTaCGiobgPx.png"> 访问jQuery ：<a href="localhost/webjars/jquery3.5.1/jquery.js">localhost&#x2F;webjars&#x2F;jquery3.5.1&#x2F;jquery.js</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--jquery webjar--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.webjars&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jquery&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>)2、”&#x2F;**“ 访问当前项目的任何资源（静态资源的文件夹）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;classpath:/META-INF/resources/&quot;,</span><br><span class="line">&quot;classpath:/resources/&quot;, </span><br><span class="line">&quot;classpath:/static/&quot;, </span><br><span class="line">&quot;classpath:/public/&quot;</span><br></pre></td></tr></table></figure><p>localhost&#x2F;abc 去静态资源文件下找abc )3、欢迎页；静态资源文件夹下的index.html页面，被“&#x2F;**”映射 localhost 找index.html</p><h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP,Velocity,Freemarker,… <img src="https://i.loli.net/2020/09/14/7uVJhTaCGiobgPx.png" alt="image-20200913220306282"> springboot 推荐的Thymeleaf； 语法更简单，功能更强大；</p><h3 id="1、引入thymeleaf"><a href="#1、引入thymeleaf" class="headerlink" title="1、引入thymeleaf"></a>1、引入thymeleaf</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--模板引擎--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>新版本springboot无需修改thymeleaf版本</p><h3 id="2、Thymeleaf使用-amp-语法"><a href="#2、Thymeleaf使用-amp-语法" class="headerlink" title="2、Thymeleaf使用&amp;语法"></a>2、Thymeleaf使用&amp;语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThymeleafProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">checkTemplate</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">checkTemplateLocation</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">mode</span> <span class="operator">=</span> <span class="string">&quot;HTML&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1、导入thymeleaf名称空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br></pre></td></tr></table></figure><p>2、thymeleaf语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--th:text将div里的文本内容设置为指定的值--&gt;</span><br><span class="line">&lt;div th:text=&quot;$&#123;hello&#125;&quot;&gt;</span><br><span class="line">    这是显示欢迎界面</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><p>1、th:text;改变当前元素里面的文本内容 ​ th：任意html属性；来替换原生属性的值 <img src="https://i.loli.net/2020/09/14/7uVJhTaCGiobgPx.png" alt="image-20200914171255166"> 2、表达式</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Simple</span> <span class="string">expressions:</span></span><br><span class="line">    <span class="attr">Variable</span> <span class="string">Expressions: $&#123;...&#125; 获取变量值；OGNL;</span></span><br><span class="line">        <span class="attr">1、获取对象的属性、调用方法</span></span><br><span class="line">        <span class="attr">2、使用内置的基本对象：</span></span><br><span class="line"><span class="comment">            #ctx : the context object.</span></span><br><span class="line"><span class="comment">            #vars: the context variables.</span></span><br><span class="line"><span class="comment">            #locale : the context locale.</span></span><br><span class="line"><span class="comment">            #request : (only in Web Contexts) the HttpServletRequest object.</span></span><br><span class="line"><span class="comment">            #response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class="line"><span class="comment">            #session : (only in Web Contexts) the HttpSession object.</span></span><br><span class="line"><span class="comment">            #servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class="line">        <span class="attr">3.内置的工具对象</span></span><br><span class="line"><span class="comment">            #execInfo : information about the template being processed.</span></span><br><span class="line"><span class="comment">            #messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span></span><br><span class="line"><span class="comment">            #uris : methods for escaping parts of URLs/URIs</span></span><br><span class="line"><span class="comment">            #conversions : methods for executing the configured conversion service (if any).</span></span><br><span class="line"><span class="comment">            #dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class="line"><span class="comment">            #calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class="line"><span class="comment">            #numbers : methods for formatting numeric objects.</span></span><br><span class="line"><span class="comment">            #strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class="line"><span class="comment">            #objects : methods for objects in general.</span></span><br><span class="line"><span class="comment">            #bools : methods for boolean evaluation.</span></span><br><span class="line"><span class="comment">            #arrays : methods for arrays.</span></span><br><span class="line"><span class="comment">            #lists : methods for lists.</span></span><br><span class="line"><span class="comment">            #sets : methods for sets.</span></span><br><span class="line"><span class="comment">            #maps : methods for maps.</span></span><br><span class="line"><span class="comment">            #aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class="line"><span class="comment">            #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span></span><br><span class="line">    <span class="attr">Selection</span> <span class="string">Variable Expressions: *&#123;...&#125; 选择表达式 和$&#123;&#125; 在功能上是一样的</span></span><br><span class="line">        <span class="attr">补充：配合</span> <span class="string">th:object 使用</span></span><br><span class="line">    <span class="attr">Message</span> <span class="string">Expressions: #&#123;...&#125; 获取国际化内容</span></span><br><span class="line">    <span class="attr">Link</span> <span class="string">URL Expressions: @&#123;...&#125; 帮我们定义url链接</span></span><br><span class="line">    <span class="attr">Fragment</span> <span class="string">Expressions: ~&#123;...&#125; 片段引用表达式</span></span><br><span class="line"><span class="attr">Literals</span></span><br><span class="line">    <span class="attr">Text</span> <span class="string">literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…</span></span><br><span class="line">    <span class="attr">Number</span> <span class="string">literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class="line">    <span class="attr">Boolean</span> <span class="string">literals: true , false</span></span><br><span class="line">    <span class="attr">Null</span> <span class="string">literal: null</span></span><br><span class="line">    <span class="attr">Literal</span> <span class="string">tokens: one , sometext , main ,…</span></span><br><span class="line"><span class="attr">Text</span> <span class="string">operations:</span></span><br><span class="line">    <span class="attr">String</span> <span class="string">concatenation: +</span></span><br><span class="line">    <span class="attr">Literal</span> <span class="string">substitutions: The name is $&#123;name&#125;</span></span><br><span class="line">    <span class="attr">Arithmetic</span> <span class="string">operations:</span></span><br><span class="line">    <span class="attr">Binary</span> <span class="string">operators: + , - , * , / , %</span></span><br><span class="line">    <span class="attr">Minus</span> <span class="string">sign (unary operator): -</span></span><br><span class="line"><span class="attr">Boolean</span> <span class="string">operations:</span></span><br><span class="line">    <span class="attr">Binary</span> <span class="string">operators: and , or</span></span><br><span class="line">    <span class="attr">Boolean</span> <span class="string">negation (unary operator): ! , not</span></span><br><span class="line">    <span class="attr">Comparisons</span> <span class="string">and equality:</span></span><br><span class="line">    <span class="attr">Comparators</span>: <span class="string">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class="line">    <span class="attr">Equality</span> <span class="string">operators: == , != ( eq , ne )</span></span><br><span class="line"><span class="attr">Conditional</span> <span class="string">operators:</span></span><br><span class="line">    <span class="attr">If-then</span>: <span class="string">(if) ? (then)</span></span><br><span class="line">    <span class="attr">If-then-else</span>: <span class="string">(if) ? (then) : (else)</span></span><br><span class="line">    <span class="attr">Default</span>: <span class="string">(value) ?: (defaultvalue)</span></span><br><span class="line"><span class="attr">Special</span> <span class="string">tokens:</span></span><br><span class="line">    <span class="attr">No-Operation</span>: <span class="string">_</span></span><br></pre></td></tr></table></figure><h2 id="4、springMVC自动配置"><a href="#4、springMVC自动配置" class="headerlink" title="4、springMVC自动配置"></a>4、springMVC自动配置</h2><h3 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC 以下是SpringBoot对SpringMVC的默认配置:<strong>WebMvcAutoConfiguration</strong></p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li>=&#x3D;如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；&#x3D;&#x3D;</li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p></li><li><p>Static <code>index.html</code> support. 静态首页访问</p></li><li><p>Custom <code>Favicon</code> support (see below). favicon.ico</p></li><li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li>Converter：转换器； public String hello(User user)：类型转换使用Converter</li><li><code>Formatter</code> 格式化器； 2017.12.17&#x3D;&#x3D;&#x3D;Date；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)</span><span class="comment">//在文件中配置日期格式化的规则</span></span><br><span class="line"><span class="keyword">public</span> Formatter&lt;Date&gt; <span class="title function_">dateFormatter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DateFormatter</span>(<span class="built_in">this</span>.mvcProperties.getDateFormat());<span class="comment">//日期格式化组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> &#x3D;&#x3D;自己添加的格式化器转换器，我们只需要放在容器中即可&#x3D;&#x3D;</p><ul><li><p>Support for <code>HttpMessageConverters</code> (see below).</p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p></li></ul><p>=&#x3D;自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）&#x3D;&#x3D;</p></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below). &#x3D;&#x3D;我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化WebDataBinder；</span><br><span class="line">请求数据=====JavaBean；</span><br></pre></td></tr></table></figure></li></ul><p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong> If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components. If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><h3 id="2、拓展SpringMvc"><a href="#2、拓展SpringMvc" class="headerlink" title="2、拓展SpringMvc"></a>2、拓展SpringMvc</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:view-controller path=&quot;/hello&quot; view-name=&quot;success&quot;/&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;mvc:mapping path=&quot;/hello&quot;/&gt;</span><br><span class="line">        &lt;bean&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><p>编写一和配置类（@Configuration）,是<code>WebMvcConfigurerAdapter</code>类型；不能标注<code>@EnableWebMvc</code> 既保留了所有的自动配置，也可以使用我们拓展的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//浏览器发送cyfwlp请求也到success</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/cyfwlp&quot;</span>).setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理 ​ 1、WebMvcAutoConfiguration 是 springboot的自动配置类 ​ 源码变了，暂时不看</p><h3 id="3、全面接管springMVC"><a href="#3、全面接管springMVC" class="headerlink" title="3、全面接管springMVC"></a>3、全面接管springMVC</h3><p>springboot对springboot的自动配置都不需要了，所有都是我们自己配置 只需要在配置类中添加@EnableWebMvc</p><h2 id="5、如何修改springboot的默认配置"><a href="#5、如何修改springboot的默认配置" class="headerlink" title="5、如何修改springboot的默认配置"></a>5、如何修改springboot的默认配置</h2><p>模式：</p><ol><li>springboot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@bean @Componentttttttttttttttttt）如果有就使用用户配置的，如果没有就自动配置；如果这些组件可以有多个，将用户配置的和自己的组合起来（ViewResolver）</li><li>在springboot中会有非常多的<strong>xxxConfigurer</strong>帮助我们进行拓展配置</li><li>xxxCustomizer帮助我们进行定制配置</li></ol><h2 id="6、RestulCRUD"><a href="#6、RestulCRUD" class="headerlink" title="6、RestulCRUD"></a>6、RestulCRUD</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><h3 id="3）、登录"><a href="#3）、登录" class="headerlink" title="3）、登录"></a>3）、登录</h3><h3 id="4）、拦截器进行登录检查"><a href="#4）、拦截器进行登录检查" class="headerlink" title="4）、拦截器进行登录检查"></a>4）、拦截器进行登录检查</h3><h3 id="5）、CRUD—员工列表"><a href="#5）、CRUD—员工列表" class="headerlink" title="5）、CRUD—员工列表"></a>5）、CRUD—员工列表</h3><p>实验要求： 1）、RestululCRUD：CRUD满足Resu风格 URI:&#x2F;资源名称&#x2F;资源标识 HTTP请求方式区分对资源crud操作</p><p>普通crud(uri来区分操作)</p><p>RestululCRUD</p><p>查询</p><p>getEmp</p><p>emp — GET</p><p>添加</p><p>addEmp?xxxxxxx</p><p>emp — POST</p><p>修改</p><p>updateEmp?xxxxxx</p><p>emp&#x2F;{id} — PUT</p><p>删除</p><p>deleteEmp?xxxxx</p><p>emp&#x2F;{id} — DELETE</p><p>2）、实验的请求架构</p><p>请求URI</p><p>请求方式</p><p>查询所有员工</p><p>emps</p><p>GET</p><p>查询某个员工</p><p>emp&#x2F;{id}</p><p>GET</p><p>来到添加页面</p><p>emp</p><p>GET</p><p>添加员工</p><p>emp</p><p>POST</p><p>来到修改页面</p><p>emp&#x2F;{id}</p><p>GET</p><p>修改员工</p><p>emp</p><p>PUT</p><p>删除员工</p><p>emp&#x2F;{id}</p><p>DELETE</p><p>3）、员工列表 <strong>thymeleaf公共页面元素抽取</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、抽取公共片段</span><br><span class="line">&lt;div th:fragment=&quot;copy&quot;&gt;</span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">2、引入公共片段</span><br><span class="line">&lt;div th:insert=&quot;~&#123;footer :: copy&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">~&#123;templatename::selector&#125; ：模板名::选择器</span><br><span class="line">~&#123;templatename::fragmentname&#125;：模板名::片段名</span><br><span class="line">3、默认效果</span><br><span class="line">insert的功能片段在div标签中</span><br></pre></td></tr></table></figure><p>三种引入公共片段的th属性 th:insert：将公共片段整个插入到指定元素中 th:replace：将声明引入的元素替换为公共部分 th:include：将被引入片段的内容包含进这个标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer th:fragment=&quot;copy&quot;&gt;</span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line">&lt;/footer&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">...</span><br><span class="line">&lt;div th:insert=&quot;footer :: copy&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div th:replace=&quot;footer :: copy&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div th:include=&quot;footer :: copy&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">…will result in:</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">...</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">        &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line">&lt;/footer&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>提交的数据格式不对；生日；日期； 默认日期是按照&#x2F;的方式；</p><h2 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h2><h3 id="1、springboot默认的错误处理机制"><a href="#1、springboot默认的错误处理机制" class="headerlink" title="1、springboot默认的错误处理机制"></a>1、springboot默认的错误处理机制</h3><p>默认效果： ​ 1.返回一个错误界面<img src="https://i.loli.net/2020/09/16/ZR6vaxgTf3c12Fq.png" alt="image-20200916135413057"> <img src="https://i.loli.net/2020/09/16/tlMhybAnQFB4T52.png" alt="image-20200916142107847"> 2.如果其他客户端访问，默认响应json数据 <img src="https://i.loli.net/2020/09/16/u62AFJImZ9kGQEO.png" alt="image-20200916140357287"> <img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20200916142022496.png" alt="image-20200916142022496"> 原理： ​ 可以参照：ErrorMvcAutoConfiguration ；错误处理的自动配置； ​ 给容器中添加了以下组件： ​ 1、DefaultErrorAttributes ： ​ 2、BasicErrorController ： 处理&#x2F;error请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&#123;&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicErrorController</span> <span class="keyword">extends</span> <span class="title class_">AbstractErrorController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping( //产生html，浏览器发送的请求到这个方法处理</span></span><br><span class="line"><span class="meta">        produces = &#123;&quot;text/html&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">HttpStatus</span> <span class="variable">status</span> <span class="operator">=</span> <span class="built_in">this</span>.getStatus(request);</span><br><span class="line">        Map&lt;String, Object&gt; model = Collections.unmodifiableMap(<span class="built_in">this</span>.getErrorAttributes(request, <span class="built_in">this</span>.getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class="line">        response.setStatus(status.value());</span><br><span class="line">        <span class="comment">//去哪个界面作为错误界面方法</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="built_in">this</span>.resolveErrorView(request, response, status, model);</span><br><span class="line">        <span class="keyword">return</span> modelAndView != <span class="literal">null</span> ? modelAndView : <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;error&quot;</span>, model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span> <span class="comment">//产生json 其他客户端出现的错误到这个方法处理</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">error</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">HttpStatus</span> <span class="variable">status</span> <span class="operator">=</span> <span class="built_in">this</span>.getStatus(request);</span><br><span class="line">        <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>(status);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; body = <span class="built_in">this</span>.getErrorAttributes(request, <span class="built_in">this</span>.getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>(body, status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 3、ErrorPageCustomizer ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;error.path:/error&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/error&quot;</span>;<span class="comment">//系统出现错误以后来到error请求进行处理；（web.xml注册的错误界面）</span></span><br></pre></td></tr></table></figure><p> 4、DefaultErrorViewResolver ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> &#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="built_in">this</span>.resolve(String.valueOf(status.value()), model);</span><br><span class="line">    <span class="keyword">if</span> (modelAndView == <span class="literal">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">        modelAndView = <span class="built_in">this</span>.resolve((String)SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ModelAndView <span class="title function_">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> &#123;</span><br><span class="line">    <span class="comment">//默认springboot可以找到一个页面？error/404</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">errorViewName</span> <span class="operator">=</span> <span class="string">&quot;error/&quot;</span> + viewName;</span><br><span class="line">    <span class="comment">//模板引擎可以解析这个视图就用模板引擎解析</span></span><br><span class="line">    <span class="type">TemplateAvailabilityProvider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="built_in">this</span>.templateAvailabilityProviders.getProvider(errorViewName, <span class="built_in">this</span>.applicationContext);</span><br><span class="line">    <span class="comment">//模板引擎可用就返回到errorViewName指定的视图地址</span></span><br><span class="line">    <span class="comment">//模板引擎不可用，就在静态文件夹下找到errorViewName对应的页面 error/404</span></span><br><span class="line">    <span class="keyword">return</span> provider != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(errorViewName, model) : <span class="built_in">this</span>.resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 步骤： ​ 一旦系统出现4xx或5xx之类的错误，ErrorPageCustomizer就会生效（定制错误的响应规则） ​ 就会被<strong>BasicErrorController</strong>处理 ​ 1.响应页面：去哪个界面是由DefaultErrorViewResolver解析得到的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> ModelAndView <span class="title function_">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">this</span>.errorViewResolvers.iterator();</span><br><span class="line">        ModelAndView modelAndView;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!var5.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">ErrorViewResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> (ErrorViewResolver)var5.next();</span><br><span class="line">            modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">        &#125; <span class="keyword">while</span>(modelAndView == <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2、如何定制错误响应："><a href="#2、如何定制错误响应：" class="headerlink" title="2、如何定制错误响应："></a>2、如何定制错误响应：</h3><p> 1、如何定制错误的界面 ​ 1、<strong>有模板引擎的情况下</strong>；error&#x2F;状态码 将错误界面命名为 错误状态码.html 放在模板引擎文件夹下面的error文件夹下，发送次状态错误就会来到对应的错误界面；可以使用4xx 和 5XX 作为错误界面的文件名来匹配所有错误，优先寻找精确的界面 ​ 2、没有模板引擎（模板引擎找不到这个错误），默认在静态资源文件夹下找 ； ​ 3、模板引擎和静态资源文件夹下都没有，来到springboot默认的错误提示界面 ​ 2、如何定制错误的json数据 ​ 跳了，用的时候再回来看</p><h2 id="8、配置嵌入式Servlet容器"><a href="#8、配置嵌入式Servlet容器" class="headerlink" title="8、配置嵌入式Servlet容器"></a>8、配置嵌入式Servlet容器</h2><h3 id="1、如何定制和修改Servlet容器相关配置"><a href="#1、如何定制和修改Servlet容器相关配置" class="headerlink" title="1、如何定制和修改Servlet容器相关配置"></a>1、如何定制和修改Servlet容器相关配置</h3><p>springboot默认使用的是嵌入式的Servlet容器（Tomcat） <img src="https://i.loli.net/2020/09/16/Z6WAfHnT3GSz9sj.png" alt="image-20200916145229069"> 问题？ 1、如何定制和修改servlet容器的相关配置 ​ 修改和server有关的配置(ServerProperties)；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/crud</span></span><br><span class="line"><span class="attr">server.tomcat.uri-encoding</span>=<span class="string">utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//通用的Servlet容器配置</span></span><br><span class="line"><span class="attr">server.xxx</span></span><br><span class="line"><span class="attr">//Tomcat配置</span></span><br><span class="line"><span class="attr">server.tomcat.xxx</span></span><br></pre></td></tr></table></figure><p>2、springboot能不能支持其他的Servlet容器</p><h3 id="2、注册Servlet三大组件【Servlet-Filter-Listener】"><a href="#2、注册Servlet三大组件【Servlet-Filter-Listener】" class="headerlink" title="2、注册Servlet三大组件【Servlet,Filter,Listener】"></a>2、注册Servlet三大组件【Servlet,Filter,Listener】</h3><p>由于springboot默认是jar包的方式启动嵌入式的tomcat，没有web.xml配置文件，所以注册组件使用 以下方式 ServletRegistrationBean FilterRegistrationBean ListenerRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//注册三大组件</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">myServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ServletRegistrationBean</span> <span class="variable">servletRegistrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(<span class="keyword">new</span> <span class="title class_">MyServlet</span>(), <span class="string">&quot;/myServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springboot 配置 springMVC的时候，自动注册了前端控制器（DispacherServlet）</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、springboot与日志</title>
      <link href="/article/fbe4c5bd.html"/>
      <url>/article/fbe4c5bd.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>springboot与日志</p><p>SLF4J  + Logback</p></blockquote><span id="more"></span><h1 id="三、springboot与日志"><a href="#三、springboot与日志" class="headerlink" title="三、springboot与日志"></a>三、springboot与日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p>小张；开发一个大型系统； ​ 1、System.out.println(“”);将关键数据打印在控制台；去掉？写在一个文件？ ​ 2、框架来记录系统的一些运行时信息；日志框架；zhanglogging.jar ​ 3、高大上的几个功能？异步模式？自动归档？……………… zhanglogging-good.jar ​ 4、将以前框架卸下，换上新的框架，重新修改api ​ 5、JDBC – 数据库驱动； ​ 写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar ​ 给项目中导入具体的日志实现就可以了；我们之前的日志框架都是实现的抽象层 市面上的日志框架； ​ JUL、JCL、Jboss-logging、log4j、slf4J…… ​ <img src="https://i.loli.net/2020/09/13/gxktqMao47HQDPe.png" alt="image-20200913161146191"> 左边选一个门面（抽象层），右边选一个实现； 日志门面 ：SLF4J 日志实现：Logback springboot：底层是spring框架，spring框架默认使用的是JCL; ​ <strong>springboot选用的是SLF4J和Logback</strong></p><h2 id="2、SLF4J使用"><a href="#2、SLF4J使用" class="headerlink" title="2、SLF4J使用"></a>2、SLF4J使用</h2><h3 id="1、如何在系统中使用SLF4J"><a href="#1、如何在系统中使用SLF4J" class="headerlink" title="1、如何在系统中使用SLF4J"></a>1、如何在系统中使用SLF4J</h3><p>以后开发的时候，日志记录方法的调用，不应该直接调用日志的实现类，而是调用抽象层里的方法； 给系统导入SLF4J的jar 和 logback的实现jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/09/13/7bQlwiYrEjDO8pN.png" alt="image-20200913162448520"> ​ 每一个日志的实现框架都有自己的配置文件，使用SLF4J以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件</strong></p><h3 id="2、遗留问题"><a href="#2、遗留问题" class="headerlink" title="2、遗留问题"></a>2、遗留问题</h3><p>a (slf4j + logback) : spring(commons-logginf) Hibernate(jboss-logginf),mybatis………… 统一日志记录，即使别的框架和我们一起使用slf4j进行输出？ <img src="https://i.loli.net/2020/09/13/itXerU97A8OdmFs.png"> <strong>如何让系统中所有的日志都统一到slf4j；</strong></p><ol><li>将系统中其他日志框架先排除出去；</li><li>用中间包来替换原有的日志框架；</li><li>我们再来导入slf4j其他的实现</li></ol><h2 id="3、springboot日志关系"><a href="#3、springboot日志关系" class="headerlink" title="3、springboot日志关系"></a>3、springboot日志关系</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>springboot使用它来做日志功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.3.3.RELEASE&lt;/version&gt;</span><br><span class="line">  &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>底层依赖关系（新版本不一样啊。。。） <img src="https://i.loli.net/2020/09/13/Y4PxCUTf19QI8Nr.png" alt="image-20200913164733009"> 总结：</p><ol><li><p>springboot底层也是使用slf4j+ logback的方式进行日志记录</p></li><li><p>springboot也把其他的日志都替换成了slf4j</p></li><li><p>中间替换包</p></li><li><p>如果我们要引入其他框架？一定要移除框架的默认日志依赖 ​ spring框架使用的是commons-logging ​ 新版本不一样（吐血）</p></li></ol><p><strong>spring能自动适应所有的日志而且底层使用的是slf4j + logback的方式记录日志，引入其他框架时，只需要把这个框架依赖的日志框架排除掉</strong></p><h2 id="4、日志使用"><a href="#4、日志使用" class="headerlink" title="4、日志使用"></a>4、日志使用</h2><h3 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h3><p>spring默认帮我们配置好了日志；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//System.out.println();</span></span><br><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="comment">//日志的级别;</span></span><br><span class="line"><span class="comment">//由低到高 trace debug info warn error</span></span><br><span class="line"><span class="comment">//可以调整需要输出的日志级别;日志就只会在这个级别以及以后的高级别生效</span></span><br><span class="line"><span class="comment">//springboot默认info级别</span></span><br><span class="line">logger.trace(<span class="string">&quot;这是trance日志&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;这是debug日志&quot;</span>);</span><br><span class="line">logger.info(<span class="string">&quot;这是info日志&quot;</span>);</span><br><span class="line">logger.warn(<span class="string">&quot;这是warn日志&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;这是error日志&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h2><p>看饱了，直接跳</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="/article/850f2080.html"/>
      <url>/article/850f2080.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>哈希表</p></blockquote><span id="more"></span><h1 id="9、哈希表"><a href="#9、哈希表" class="headerlink" title="9、哈希表"></a>9、哈希表</h1><p>哈希表（散列）- goole上机题 看一个实际需求，google公司的一个上机题; 有一个公司,当有新的员工来报道时,要求将该员工的信息加入(id,性别,年龄,住址..)当输入该员工的id时,要求查找到该员工的所有信息. 要求:不使用数据库,尽量节省内存,速度越快越好&#x3D;&gt;哈希表(散列) <img src="https://i.loli.net/2020/09/13/HOFidB35TtpfQDN.png" alt="image-20200913140241055"></p><h2 id="1、哈希表的基本介绍"><a href="#1、哈希表的基本介绍" class="headerlink" title="1、哈希表的基本介绍"></a>1、哈希表的基本介绍</h2><p><img src="https://i.loli.net/2020/09/13/URewtaiqFS2kOQX.png" alt="image-20200913140429936"></p><h2 id="2、goole上机题"><a href="#2、goole上机题" class="headerlink" title="2、goole上机题"></a>2、goole上机题</h2><p>使用哈希表管理雇员信息 <img src="https://i.loli.net/2020/09/13/BdChZ4z3pA9klcm.png" alt="image-20200913141655584"> 代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.HashTable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashTableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建哈希表</span></span><br><span class="line">        <span class="type">HashTable</span> <span class="variable">hashTable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashTable</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写一个菜单</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;add 添加雇员&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;list 显示雇员&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;find 查找&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;delete 删除&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;exit 退出&quot;</span>);</span><br><span class="line"></span><br><span class="line">            key = scanner.next();</span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入id&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入名字&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(id,name);</span><br><span class="line">                    hashTable.add(emp);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;list&quot;</span>:</span><br><span class="line">                    hashTable.list();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;find&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入要查找的id&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">searchId</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                    System.out.println(hashTable.findEmpById(searchId));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;delete&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入要删除的id&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">deleteId</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                    System.out.println(hashTable.deleteEmpById(deleteId));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">                    scanner.close();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示一个雇员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Emp next; <span class="comment">//next默认为空</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Emp</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个EmpLinkedList，表示链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmpLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">//头指针，指向第一个Emp,无头结点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Emp</span> <span class="variable">head</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">//默认为空</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加雇员到链表</span></span><br><span class="line">    <span class="comment">//说明：</span></span><br><span class="line">    <span class="comment">//1.假定添加雇员的时候就是添加在最后（id自增长的）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Emp emp)</span> &#123;</span><br><span class="line">        <span class="comment">//第一个雇员</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            head = emp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不是第一个</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Emp</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">while</span> (temp.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">            temp.next = emp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历链表的雇员信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+no+<span class="string">&quot;为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        System.out.print(<span class="string">&quot;第&quot;</span>+no+<span class="string">&quot;为 &quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print( <span class="string">&quot;=&gt;&quot;</span> +temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 没找到返回空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Emp <span class="title function_">findEmpById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.id == id) &#123;</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除雇员</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除成功返回1 未找到返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">//删除需要前一个节点</span></span><br><span class="line">        <span class="comment">//删除的是第一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (head.id == id) &#123;</span><br><span class="line">            head = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除的不是第一个节点</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//是否找到</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.next.id == id) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            temp.next = temp.next.next;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个HashTable,表示哈希表，管理多条链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashTable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EmpLinkedList[] empLinkedListArray;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size; <span class="comment">//表示有多少条链表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashTable</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化数组</span></span><br><span class="line">        empLinkedListArray = <span class="keyword">new</span> <span class="title class_">EmpLinkedList</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; empLinkedListArray.length; i++) &#123;</span><br><span class="line">            empLinkedListArray[i] = <span class="keyword">new</span> <span class="title class_">EmpLinkedList</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        <span class="comment">//?? 有坑！！！！</span></span><br><span class="line">        <span class="comment">//不要忘了分别初始化每一条链表</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加雇员</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Emp emp)</span> &#123;</span><br><span class="line">        <span class="comment">//根据员工的id，得到该员工应该添加到哪条链表</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">empLinkedListNo</span> <span class="operator">=</span> hashFun(emp.id);</span><br><span class="line">        <span class="comment">//将Emp加入到对应的链表中</span></span><br><span class="line">        empLinkedListArray[empLinkedListNo].add(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历所有的链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; empLinkedListArray.length; i++) &#123;</span><br><span class="line">            empLinkedListArray[i].list(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个散列函数，使用简单的取模法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashFun</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id % size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id 查找雇员</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 没找到返回空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Emp <span class="title function_">findEmpById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">//使用散列函数确定到哪条链表查找</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">empLinkedListNo</span> <span class="operator">=</span> hashFun(id);</span><br><span class="line">        <span class="keyword">return</span>  empLinkedListArray[empLinkedListNo].findEmpById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteEmpById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">empLinkedListNo</span> <span class="operator">=</span> hashFun(id);</span><br><span class="line">        <span class="keyword">return</span> empLinkedListArray[empLinkedListNo].delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、配置文件</title>
      <link href="/article/2d9963a8.html"/>
      <url>/article/2d9963a8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>springboot 配置文件</p></blockquote><span id="more"></span><h1 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>springboot使用的一个全局配置文件,配置文件的名称是固定的</p><ul><li>application.properties</li><li>application.yml</li></ul><p>配置文件的作用：修改springboot自动配置的默认值 springboot在底层都已经给我们配置好了 YAML (YAML Ain’t Markup Language) 标记语言： ​ 以前的配置文件,大多都是.xml文件； ​ 以数据为中心，比json，xml更适合做配置文件； ​ YAML:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h2 id="2、YAML语法"><a href="#2、YAML语法" class="headerlink" title="2、YAML语法"></a>2、YAML语法</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:空格v：表示一对键值对（空格必须有） 以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>属性和值大小写敏感</p><h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）；"><a href="#字面量：普通的值（数字，字符串，布尔）；" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）；"></a>字面量：普通的值（数字，字符串，布尔）；</h4><p> k: v:字面直接来写： ​ 字符串默认不用加上单引号或双引号： ​ “ ”：双引号：不会转义字符串里的特殊字符；特殊字符作为本身想表示的意思 ​ ’ ‘：单引号：会转义特殊字符，特殊字符最终只是一个普通的字符串输出</p><h4 id="对象：（属性和值）（键值对）；"><a href="#对象：（属性和值）（键值对）；" class="headerlink" title="对象：（属性和值）（键值对）；"></a>对象：（属性和值）（键值对）；</h4><p> k: v :在下一行写属性和值的关系；注意缩进 ​ 对象还是k: v的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">friend：</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">friend：&#123;name:</span> <span class="string">zhangsan,age:</span> <span class="number">20</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="数组：（list，set）"><a href="#数组：（list，set）" class="headerlink" title="数组：（list，set）;"></a>数组：（list，set）;</h4><p> 用- 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure><h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>配置文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2018</span><span class="string">/12/12</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">key1:</span> <span class="string">v1</span>,<span class="attr">key2:</span> <span class="number">12</span>&#125;</span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">wangwu</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">wangwang</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>javabean: <strong>@ConfigurationProperties(prefix &#x3D; “person”)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件配置每个属性的值映射到组件中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastName</span><span class="params">(String lastName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getBoss</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBoss</span><span class="params">(Boolean boss)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.boss = boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirth</span><span class="params">(Date birth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getMaps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;Object&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">getDog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;lastName=&#x27;&quot;</span> + lastName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, boss=&quot;</span> + boss +</span><br><span class="line">                <span class="string">&quot;, birth=&quot;</span> + birth +</span><br><span class="line">                <span class="string">&quot;, maps=&quot;</span> + maps +</span><br><span class="line">                <span class="string">&quot;, list=&quot;</span> + list +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以导入配置文件处理器，以后编写配置就有提示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="1、-Value获取值和-ConfigurationProperties获取值比较"><a href="#1、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="1、@Value获取值和@ConfigurationProperties获取值比较"></a>1、@Value获取值和@ConfigurationProperties获取值比较</h3><p>@ConfigurationProperties</p><p>@Value</p><p>功能</p><p>批量注入配置文件中的属性</p><p>一个个指定</p><p>松散绑定（松散语法）</p><p>支持(lastName —- last-name)</p><p>不支持</p><p>SpEL</p><p>不支持</p><p>支持</p><p>JSR303数据校验</p><p>支持</p><p>不支持</p><p>复杂类型封装</p><p>支持</p><p>不支持</p><p>配置文件是yml还是properties都能获取到值； 如果说我们只是在某个业务逻辑中获取一下配置文件中的某项值，就是用@Value 如果说我们专门编写了一个javabean来和配置文件进行映射，那么使用@ConfigurationProperties</p><h3 id="2、配置文件注入值数据校验"><a href="#2、配置文件注入值数据校验" class="headerlink" title="2、配置文件注入值数据校验"></a>2、配置文件注入值数据校验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br></pre></td></tr></table></figure><h3 id="3、-PropertySource-与-ImportResource"><a href="#3、-PropertySource-与-ImportResource" class="headerlink" title="3、@PropertySource 与 @ImportResource"></a>3、@PropertySource 与 @ImportResource</h3><p><strong>@PropertySource</strong> 用于加载指定的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@ImportResource</strong> 导入spring的配置文件，让配置文件里面的内容生效 springboot里面没有spring的注解，我们自己编写的配置文件也不能自动识别 想让spring的配合文件生效，加载进来。**@ImportResource**标注在一个配置类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(locations = &#123;&quot;classpath:bean.xml&quot;&#125;)</span></span><br><span class="line"><span class="comment">//导入spring的配置文件</span></span><br></pre></td></tr></table></figure><p>springboot推荐给容器中添加组件的方式；使用全注解的方式</p><ol><li>配置类 – spring配置文件</li><li>@Bean注解 将方法的返回值加到spring容器中 id默认为方法名</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span> 指明当前类是一个配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myconfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中;容器中默认id方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HelloService <span class="title function_">helloService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HelloService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、配置文件的占位符"><a href="#4、配置文件的占位符" class="headerlink" title="4、配置文件的占位符"></a>4、配置文件的占位符</h2><h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="attr">$&#123;random.int&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2、占位符获取之间配置的值，如果没有可以使用冒号设置默认值"><a href="#2、占位符获取之间配置的值，如果没有可以使用冒号设置默认值" class="headerlink" title="2、占位符获取之间配置的值，如果没有可以使用冒号设置默认值"></a>2、占位符获取之间配置的值，如果没有可以使用冒号设置默认值</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person.last-name</span>=<span class="string">zhangsan$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="attr">person.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="attr">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">person.birth</span>=<span class="string">2020/1/1</span></span><br><span class="line"><span class="attr">person.maps.k1</span> = <span class="string">12</span></span><br><span class="line"><span class="attr">person.maps.k2</span> = <span class="string">11</span></span><br><span class="line"><span class="attr">person.dog.name</span> = <span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br></pre></td></tr></table></figure><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在编写配置文件的时候，文件名可以是 application - {profile}.properties&#x2F;yml 默认使用的是application.properties&#x2F;yml</p><h3 id="2、YML支持对文档块方式"><a href="#2、YML支持对文档块方式" class="headerlink" title="2、YML支持对文档块方式"></a>2、YML支持对文档块方式</h3><p>只需写一个配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">product</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">product</span> <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure><h3 id="3、激活指定的profile"><a href="#3、激活指定的profile" class="headerlink" title="3、激活指定的profile"></a>3、激活指定的profile</h3><ol><li><p>在配置文件中指定 spring.prifiles.active &#x3D; dev</p></li><li><p>命令行： –spring.properties.active &#x3D; dev 可以直接在测试的时候，传入命令行参数</p></li><li><p>虚拟机参数： -Dspring.properties.active &#x3D; dev</p></li></ol><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>spring 启动会扫描以下位置的application.properties或者application.yml文件作为springboot的默认配置文件 -file: .&#x2F;config&#x2F; -file: .&#x2F; -classpath: &#x2F;config&#x2F; -classpath: &#x2F; 优先级由高到低，高优先级的配置会覆盖低优先级的配置； springboot会从这四个位置全部加载主配置文件；<strong>互补配置</strong> 我们可以通过<strong>spring.config.locatio</strong>n来改变默认配置文件路径 已经将项目打包后，命令行参数启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的配置文件共同起作用，形成互补配置</p><h2 id="7、外部配置的加载顺序"><a href="#7、外部配置的加载顺序" class="headerlink" title="7、外部配置的加载顺序"></a>7、外部配置的加载顺序</h2><p>springboot也可以从以下位置加载配置；优先级从高到低；<strong>互补配置；</strong></p><ol><li>命令行参数 加载多个参数使用空格隔开</li><li>优先加载带profile jar包外向jar包内</li><li>@Configuration注解类上的@PropertySource</li></ol><p>所有支持配置的加载参考官方文档</p><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html">配置文件能配置的属性参照</a></p><h3 id="1、自动配置原理：（springboot版本不一样，与课程有所不同）"><a href="#1、自动配置原理：（springboot版本不一样，与课程有所不同）" class="headerlink" title="1、自动配置原理：（springboot版本不一样，与课程有所不同）"></a><strong>1、自动配置原理：</strong>（springboot版本不一样，与课程有所不同）</h3><p>1）、springboot启动的时候，加载主配置类，开启了自动配置功能**@EnableAutoConfiguration** 2）、@EnableAutoConfiguration 作用： ​ 利用AutoConfigurationImportSelector为容器中导入一些组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure><p> 可以查看getAutoConfigurationEntry方法内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; configurations = <span class="built_in">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line"><span class="comment">//获取候选的配置</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/09/13/MJiKbqz4WONe13k.png" alt="image-20200913110124574"> ​ 进入 getCandidateConfigurations 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(...);</span><br></pre></td></tr></table></figure><p> 进入loadFactoryNames 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br></pre></td></tr></table></figure><p> 调用了loadSpringFactories方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;URL&gt; urls = classLoader != <span class="literal">null</span> ? classLoader.getResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>) : ClassLoader.getSystemResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>);</span><br></pre></td></tr></table></figure><p> 扫描所有jar包路径下 META-INF&#x2F;spring.factories ​ 把扫描到的文件的这些内容包装成properties对象 ​ 从properties中获取到EnableAutoConfiguration对应的值添加到容器中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p> <strong>将类路径下 META-INF&#x2F;spring.factories 里面所有配置了EnableAutoConfiguration的值加入到容器中</strong> 3）、每一个自动配置类进行自动配置功能 4）、以 <strong>HttpEncodingAutoConfiguration</strong> 为例解释自动配置原理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration( //这是一个配置类 可以给容器中添加组件</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;ServerProperties.class&#125;)</span> <span class="comment">//</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication( //Spring底层@Conditional注解 根据不同的条件，如果只满足指定的条件，整个配置类的配置才会生效 判断当前应用是否是web应用</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span> <span class="comment">//判断当前项目有没有这个类</span></span><br><span class="line"><span class="comment">//CharacterEncodingFilter :springMVC进行乱码解决的过滤器</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(  //配置文件是否存在某个配置 如果不存在，帕努单也是成立</span></span><br><span class="line"><span class="meta">    prefix = &quot;server.servlet.encoding&quot;,</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class="line"><span class="meta">    matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpEncodingAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有一个有参构造器的情况下，参数的值就从容器中拿</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HttpEncodingAutoConfiguration</span><span class="params">(ServerProperties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.properties = properties.getServlet().getEncoding();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> CharacterEncodingFilter <span class="title function_">characterEncodingFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderedCharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="built_in">this</span>.properties.getCharset().name());</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>根据当前的不同条件判断，决定这个配置类是否生效</strong> 一旦这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的； 5）、所有在配置文件能配置的属性都是在xxxProperties类封装着；配置文件能配置是什么可以参照这个功能对应的这个属性类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(           //从配置文件获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="meta">    prefix = &quot;server&quot;,</span></span><br><span class="line"><span class="meta">    ignoreUnknownFields = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerProperties</span> &#123;</span><br></pre></td></tr></table></figure><p>精髓：</p><ol><li><strong>springboot启动会加载大量的自动配置类</strong></li><li><strong>我们需要的功能有没有springboot写好的默认配置类</strong></li><li><strong>我们再来看这些配置类中配置了哪些组件；（有要使用的，就不需要再配置）</strong></li><li><strong>给容器中自动配置类添加组件，会从properties类中获取某些属性，我们就可以在配置文件中指定这些属性的值</strong></li></ol><p> <strong>xxxAutoConfiguration : 自动配置类；给容器中添加组件</strong> ​ <strong>xxxProperties:封装配置文件中的相关属性；</strong></p><h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（spring注解版原生的-Conditional）"><a href="#1、-Conditional派生注解（spring注解版原生的-Conditional）" class="headerlink" title="1、@Conditional派生注解（spring注解版原生的@Conditional）"></a>1、@Conditional派生注解（spring注解版原生的@Conditional）</h4><p>作用：必须是Condition指定的条件成立，才给容器添加组件，配置里面的内容才生效；</p><p>@Conditional扩展注解</p><p>作用（判断是否满足当前指定条件）</p><p>@ConditionalOnJava</p><p>系统的java版本是否符合要求</p><p>@ConditionalOnBean</p><p>容器中存在指定Bean；</p><p>@ConditionalOnMissingBean</p><p>容器中不存在指定Bean；</p><p>@ConditionalOnExpression</p><p>满足SpEL表达式指定</p><p>@ConditionalOnClass</p><p>系统中有指定的类</p><p>@ConditionalOnMissingClass</p><p>系统中没有指定的类</p><p>@ConditionalOnSingleCandidate</p><p>容器中只有一个指定的Bean，或者这个Bean是首选Bean</p><p>@ConditionalOnProperty</p><p>系统中指定的属性是否有指定的值</p><p>@ConditionalOnResource</p><p>类路径下是否存在指定资源文件</p><p>@ConditionalOnWebApplication</p><p>当前是web环境</p><p>@ConditionalOnNotWebApplication</p><p>当前不是web环境</p><p>@ConditionalOnJndi</p><p>JNDI存在指定项</p><p><strong>自动配置类必须在一定的条件下才能生效；</strong> 我们怎么知道哪些自动配置类生效了？ 我们可以通过debug &#x3D; true 让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">============================</span><br><span class="line">CONDITIONS <span class="type">EVALUATION</span> <span class="variable">REPORT</span></span><br><span class="line"><span class="operator">=</span>===========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnProperty</span> (spring.aop.auto=<span class="literal">true</span>) matched (OnPropertyCondition)</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration.ClassProxyingConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnMissingClass</span> did not find unwanted class <span class="string">&#x27;org.aspectj.weaver.Advice&#x27;</span> (OnClassCondition)</span><br><span class="line">      - <span class="meta">@ConditionalOnProperty</span> (spring.aop.proxy-target-class=<span class="literal">true</span>) matched (OnPropertyCondition)</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnClass</span> found required class <span class="string">&#x27;org.springframework.web.servlet.DispatcherServlet&#x27;</span> (OnClassCondition)</span><br><span class="line">      - found <span class="string">&#x27;session&#x27;</span> scope (OnWebApplicationCondition)</span><br><span class="line"></span><br><span class="line">Negative matches:（没有启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   ActiveMQAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - <span class="meta">@ConditionalOnClass</span> did not find required class <span class="string">&#x27;javax.jms.ConnectionFactory&#x27;</span> (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration.AspectJAutoProxyingConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - <span class="meta">@ConditionalOnClass</span> did not find required class <span class="string">&#x27;org.aspectj.weaver.Advice&#x27;</span> (OnClassCondition)</span><br><span class="line"></span><br><span class="line">   ArtemisAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - <span class="meta">@ConditionalOnClass</span> did not find required class <span class="string">&#x27;javax.jms.ConnectionFactory&#x27;</span> (OnClassCondition)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Spring Boot 入门</title>
      <link href="/article/8175c19e.html"/>
      <url>/article/8175c19e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>Spring Boot 入门</p></blockquote><span id="more"></span><h1 id="一、Spring-Boot-入门"><a href="#一、Spring-Boot-入门" class="headerlink" title="一、Spring Boot 入门"></a>一、Spring Boot 入门</h1><h2 id="1、SpringBoot-简介"><a href="#1、SpringBoot-简介" class="headerlink" title="1、SpringBoot 简介"></a>1、SpringBoot 简介</h2><blockquote><p>简化spring开发的一个框架 整个spring技术栈的一个整合 J2EE的一站式解决方案</p></blockquote><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，Martin Fowler 微服务：架构风格 一个应用应该是一组小型服务；可以通过HTTP的方式进行互通 每一个功能元素最终都是一个可独立替换和独立升级的软件单元 <a href="https://martinfowler.com/microservices/">详细参照微服务文档</a></p><h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><h3 id="1、MAVEN设置"><a href="#1、MAVEN设置" class="headerlink" title="1、MAVEN设置"></a>1、MAVEN设置</h3><p>给maven 的settings.xml配置文件的<strong>profiles标签</strong>添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;profile&gt;</span><br><span class="line">  &lt;id&gt;jdk-1.8&lt;/id&gt;</span><br><span class="line">  &lt;activation&gt;</span><br><span class="line">    &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">    &lt;jdk&gt;1.8&lt;/jdk&gt;</span><br><span class="line">  &lt;/activation&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">&lt;/profile&gt;</span><br></pre></td></tr></table></figure><h3 id="2、idea设置"><a href="#2、idea设置" class="headerlink" title="2、idea设置"></a>2、idea设置</h3><p>设置maven</p><h2 id="4、Spring-Boot-HelloWorld"><a href="#4、Spring-Boot-HelloWorld" class="headerlink" title="4、Spring Boot HelloWorld"></a>4、Spring Boot HelloWorld</h2><p>一个功能： 浏览器发送hello请求，服务器接收并处理，响应Hello World字符串</p><h3 id="1、创建一个maven工程"><a href="#1、创建一个maven工程" class="headerlink" title="1、创建一个maven工程"></a>1、创建一个maven工程</h3><h3 id="2、导入spring-boot相关的依赖"><a href="#2、导入spring-boot相关的依赖" class="headerlink" title="2、导入spring boot相关的依赖"></a>2、导入spring boot相关的依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="3、编写主程序：启动spring-boot应用"><a href="#3、编写主程序：启动spring-boot应用" class="headerlink" title="3、编写主程序：启动spring boot应用"></a>3、编写主程序：启动spring boot应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 标注一个主程序，说明这是一个spring boot的应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWordMainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWordMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、编写相关的controller-service"><a href="#4、编写相关的controller-service" class="headerlink" title="4、编写相关的controller,service"></a>4、编写相关的controller,service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HelloWorld!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><p>如果需要更改端口号 在src&#x2F;resources 新建文件 application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>= <span class="string">xxx</span></span><br></pre></td></tr></table></figure><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><p>将应用打包为jar包 直接使用java -jar运行</p><h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">它的父项目是</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath&gt;../../spring-boot-dependencies&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">它来真正管理Spring Boot应用里面的所有依赖版本</span><br><span class="line">&lt;!-- Dependency versions --&gt;</span><br><span class="line">    &lt;activemq.version&gt;5.14.5&lt;/activemq.version&gt;</span><br><span class="line">    &lt;antlr2.version&gt;2.7.7&lt;/antlr2.version&gt;</span><br><span class="line">    &lt;appengine-sdk.version&gt;1.9.59&lt;/appengine-sdk.version&gt;</span><br><span class="line">    &lt;artemis.version&gt;1.5.5&lt;/artemis.version&gt;</span><br><span class="line">    &lt;aspectj.version&gt;1.8.13&lt;/aspectj.version&gt;</span><br><span class="line">    &lt;assertj.version&gt;2.6.0&lt;/assertj.version&gt;</span><br><span class="line">    &lt;atomikos.version&gt;3.9.3&lt;/atomikos.version&gt;</span><br><span class="line">    &lt;bitronix.version&gt;2.1.4&lt;/bitronix.version&gt;</span><br><span class="line">    &lt;caffeine.version&gt;2.3.5&lt;/caffeine.version&gt;</span><br><span class="line">    ...................</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Spring Boot的版本仲裁中心： 以后我们导入依赖默认是不需要写版本(没有在dependencies里面管理的依赖自然需要声明版本)</p><h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong>-web ​ spring-boot-starter：spring-boot的场景启动器；帮我们导入了web某块正常运行所相关的依赖 Spring-Boot将所有的功能场景都抽取出来，做成一个个的starter(启动器)：只需要在项目中引入这些starter就可以导入相关的依赖</p><h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 标注一个主程序，说明这是一个spring boot的应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWordMainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWordMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@SpringBootApplication</strong> ：说明这个类是springboot的主配置类，springboot就应该运行这个类的main方法来启动spring应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure><p><strong>@SpringBootConfiguration</strong>：springboot的配置类 ​ 标注在某个类上，表示这是一个springboot的配置类 ​ <strong>@Configuration</strong>：配置类上标注这个配置类 ​ 配置类 —– 配置文件；配置类也是容器中的一个组件 <strong>@EnableAutoConfiguration</strong>： ​ 以前我们需要配置的东西，springboot帮我们自动配置；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;EnableAutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure><p> <strong>@AutoConfigurationPackage</strong>：自动配置包 ​ @<strong>Import</strong>({Registrar.class})； ​ spring的底层注解@Import,给容器中导入一个组件； ​ 将主配置类（@SpringBootApplication 标注的类）所在的包下面以及所有子包里面的所有组件扫描到spring容器； ​ <strong>@Import({EnableAutoConfigurationImportSelector.class})</strong> ​ 给容器中导入组件 ​ EnableAutoConfigurationImportSelector ：导入哪些组件的选择器； ​ 将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中； ​ 会给容器中导入非常多的自动配置类（xxxAutoConfiguration）;就是给容器中导入这个场景需要的所有组件，并配置好这些组件； <img src="https://i.loli.net/2020/09/12/DfyGUXCQrtbKimk.png" alt="自动配置类"> 有了自动配置类，免去了手动编写配置和注入功能组件等工作 ​ SpringFactoriesLoader(EnableAutoConfiguration.class,classLoader); ​ springboot在启动的时候从类路径下的META-INF&#x2F;spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入容器中，自动配置类自动生效，帮我们进行自动配置的工作;以前我们需要自己配置的东西，自动帮我们配置了 J2EE的整体解决方案和自动配置都在springframework\boot\spring-boot-autoconfigure\1.5.9.RELEASE\spring-boot-autoconfigure-1.5.9.RELEASE.jar</p><h2 id="6、使用Spring-Initializer-快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer-快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer 快速创建Spring Boot项目"></a>6、使用Spring Initializer 快速创建Spring Boot项目</h2><p>IDE 都支持使用springboot项目创建向导快速创建一个spring boot项目 选择我们需要的某块：向导会联网创建springboot项目 默认生成的sprinboot</p><ul><li>主程序已经生成好了，我们只需要写自己的逻辑</li><li>resources文件夹目录结构<ul><li>static：保存所有的静态资源</li><li>templates:保存所有的模板引擎（springboot默认jar包使用嵌入式的tomcat，默认不支持jsp页面）；可以使用模板引擎（freemarker,thymeleaf）；</li><li>application.properties：springboot的应用的配置文件；可以修改一些默认配置</li></ul></li></ul><p> ​ ​</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找算法</title>
      <link href="/article/aad2137f.html"/>
      <url>/article/aad2137f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>常见查找算法，顺序查找、二分查找、插值查找、斐波那契查找</p></blockquote><span id="more"></span><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h4 id="1、查找算法介绍"><a href="#1、查找算法介绍" class="headerlink" title="1、查找算法介绍"></a>1、查找算法介绍</h4><p>在java中，常用的查找有四种</p><ol><li>顺序查找（线性查找）</li><li>二分查找（折半查找）</li><li>插值查找</li><li>斐波那契查找</li></ol><h4 id="2、顺序查找"><a href="#2、顺序查找" class="headerlink" title="2、顺序查找"></a>2、顺序查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeqSearch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">9</span>,<span class="number">11</span>,-<span class="number">1</span>,<span class="number">34</span>,<span class="number">89</span>&#125;;<span class="comment">//没有顺序的数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> seqSearch(arr,<span class="number">11</span>);</span><br><span class="line">        System.out.println(index);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现的线性查找是找到一个满足条件的值就返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">seqSearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="comment">//线性查找是逐一比对，发现有相同的值时就返回下标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == value) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、二分查找"><a href="#3、二分查找" class="headerlink" title="3、二分查找"></a>3、二分查找</h4><p>二分查找的思路分析</p><ol><li><p>首先确定该数组的中间的下标 mid &#x3D; (left + right)&#x2F;2</p></li><li><p>然后比较findVal与arr[mid]比较 findVal &gt; arr[mid] 递归向右查找 findVal &lt; arr[mid] 递归向左查找 findVal &#x3D; arr[mid] 返回</p></li></ol><p>什么时候结束递归？ 1、找到就结束递归 2、找不到(递归完整个数组都没有找到) -&gt; <strong>left &gt; right</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：使用二分查找的前提是该数组是有序的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">89</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1234</span>&#125;;</span><br><span class="line"><span class="comment">/*        int resultIndex = binarySearch(arr,0,arr.length - 1,1000);</span></span><br><span class="line"><span class="comment">        System.out.println(resultIndex);*/</span></span><br><span class="line">        ArrayList&lt;Integer&gt; integers = binarySearch2(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : integers) &#123;</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left 左边索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右边索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> findVal 要查找的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 找到返回下标，没有找到返回 -1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> findVal)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当left &gt; right 时，说明递归整个数组，但是没有找到</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">midValue</span> <span class="operator">=</span> arr[mid];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (findVal &gt; midValue) &#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearch(arr,mid + <span class="number">1</span>,right,findVal);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (findVal &lt; midValue) &#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearch(arr,left,mid - <span class="number">1</span>,findVal);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//课后思考题，当一个有序数组有多个值时，查询到所有得到值</span></span><br><span class="line">    <span class="comment">//思路：</span></span><br><span class="line">    <span class="comment">//在找到mid值时不要马上返回</span></span><br><span class="line">    <span class="comment">//向mid索引值的左边扫描，将所有满足1000的下标加入到集合ArrayList</span></span><br><span class="line">    <span class="comment">//向mid索引值的右边扫描，将所有满足1000的下标加入到集合ArrayList</span></span><br><span class="line">    <span class="comment">//返回ArrayList</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left 左边索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右边索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> findVal 要查找的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 没找到返回空列表 找到返回列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title function_">binarySearch2</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> findVal)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当left &gt; right 时，说明递归整个数组，但是没有找到</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">midValue</span> <span class="operator">=</span> arr[mid];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (findVal &gt; midValue) &#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearch2(arr,mid + <span class="number">1</span>,right,findVal);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (findVal &lt; midValue) &#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearch2(arr,left,mid - <span class="number">1</span>,findVal);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; resultIndexList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp &lt; <span class="number">0</span>  arr[temp] != findVal) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//否则就把temp放入集合</span></span><br><span class="line">                resultIndexList.add(temp);</span><br><span class="line">                temp -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            resultIndexList.add(mid);</span><br><span class="line">            temp = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp &gt; arr.length - <span class="number">1</span>  arr[temp] != findVal) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//否则就把temp放入集合</span></span><br><span class="line">                resultIndexList.add(temp);</span><br><span class="line">                temp += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> resultIndexList;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、插值查找"><a href="#4、插值查找" class="headerlink" title="4、插值查找"></a>4、插值查找</h4><p>若使用二分查找算法，数组{1,2…,20}，查找1需要四次 插值查找原理介绍：</p><ol><li>插值查找类似于二分查找，不同的是每次要从<strong>自适应的mid</strong>处开始查找</li><li>将折半查找的mid索引公式改为 <strong>mid &#x3D;（high-low）*（key-arr[low]）&#x2F;（arr[high]-arr[low]）</strong></li></ol><p>若使用插值查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertValueSearch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            arr[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> insertValueSearch(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写插值查找算法</span></span><br><span class="line">    <span class="comment">//原理基于二分查找，也要求数据有序</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 传入的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left 左边的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右边的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> findVal 查找的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 找到返回下标，没找到返回 -1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">insertValueSearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> findVal)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;插值查找被调用&quot;</span>);</span><br><span class="line">        <span class="comment">//注意：</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right  findVal &lt; arr[<span class="number">0</span>]  findVal &gt; arr[arr.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">midValue</span> <span class="operator">=</span> arr[mid];</span><br><span class="line">        <span class="keyword">if</span> (findVal &gt; midValue) &#123;</span><br><span class="line">            <span class="keyword">return</span> insertValueSearch(arr,mid + <span class="number">1</span>,right,findVal);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (findVal &lt; midValue) &#123;</span><br><span class="line">            <span class="keyword">return</span> insertValueSearch(arr,left,mid - <span class="number">1</span>,findVal);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>对于数据量较大，关键字分布比较均匀的查找表来说，采用插值查找，速度较快。</li><li>关键字分布不均匀的情况下，该方法不一定比折半查找要好</li></ol><h4 id="4、斐波那契（黄金分割法）查找算法"><a href="#4、斐波那契（黄金分割法）查找算法" class="headerlink" title="4、斐波那契（黄金分割法）查找算法"></a>4、斐波那契（黄金分割法）查找算法</h4><p> 黄金分割点 ：0.168 ​ 斐波那契数列：1,1,2,3,5,8,13,21…. 发现斐波那契数列的两个相邻数的比利，无限接近黄金分割值0.168 ​ 斐波那契原理分析： <strong>斐波那契查找</strong>的原理与前两种相似，仅仅改变mid的位置，mid不再是中间或者插值得到的，而是位于黄金分割点附近，即 <strong>mid &#x3D; low + F(k-1) - 1</strong> 对F(k - 1) -1 的理解：</p><ol><li><p>由斐波那契数列F(k) &#x3D; F(k-1) + F(k - 2)的性质，可以得到 F([k] - 1) &#x3D; F([k - 1] - 1) + F([k -2] - 1)。该式说明：只要顺序表长度为F(k) - 1，则可以将该表分成长度为F(k - 1) - 1和 F(k - 2) - 1 的两段 ，中间位置 mid &#x3D; low + F(k - 1) - 1;</p></li><li><p>类似的，每一个字段也可以用相同的方式分割</p></li><li><p>但是顺序表的长度不一定刚好等于F([k] - 1)，所以需要将原来的顺序表的长度n增加为F([k] - 1)。这里的k值只要能能使得F([k] - 1) 恰好大于或等于n即可，由以下代码得到，顺序表长度增加后，新增的位置（从n+1到F[k -1] 位置），都赋值为n位置的值即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(n &gt; fib(k-<span class="number">1</span>)) &#123;</span><br><span class="line">k ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FibonacciSearch</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">89</span>,<span class="number">1000</span>,<span class="number">1234</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> fibSearch(arr,<span class="number">8</span>);</span><br><span class="line">        System.out.println(index);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用非递归的方式得到一个得波那契数列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] fib() &#123;</span><br><span class="line">        <span class="type">int</span>[] fib = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">        fib[<span class="number">0</span>] = fib[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; maxSize; i++) &#123;</span><br><span class="line">            fib[i] = fib[i-<span class="number">1</span>] + fib[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fib;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写斐波那契查找算法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用非递归的方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 需要查找的关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 找到返回下标，没找到返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibSearch</span><span class="params">(<span class="type">int</span>[] a,<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> a.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//斐波那契分割数值的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//存放mid</span></span><br><span class="line">        <span class="type">int</span> f[] = fib();<span class="comment">//获取斐波那契数列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取k (分割数组的下标)</span></span><br><span class="line">        <span class="keyword">while</span> (a.length &gt; f[k]) &#123;</span><br><span class="line">            k ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为f[k]的值可能大于数组a的长度,因此需要一个构造一个新数组，并指向a</span></span><br><span class="line">        <span class="comment">//不足会用0填充</span></span><br><span class="line">        <span class="type">int</span>[] temp = Arrays.copyOf(a,f[k]);</span><br><span class="line">        <span class="comment">//实际上需要使用a数组最后的数填充数组temp</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> high + <span class="number">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            temp[i] = a[high];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用while循环循环处理（代替递归）</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = low + f[k-<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; temp[mid]) &#123; <span class="comment">//向左查找</span></span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 为什么是k--</span></span><br><span class="line"><span class="comment">                 * 1.全部元素 = 前面的元素 + 后面的元素</span></span><br><span class="line"><span class="comment">                 * 2.f[k] = f[k-1] + f[k-2]</span></span><br><span class="line"><span class="comment">                 * 因为前面有f[k-1]个元素，所以可以继续拆分 f[k-1] = f[k-2] + f[k -3];</span></span><br><span class="line"><span class="comment">                 * 即在f[k-1]的前面继续查找 k--</span></span><br><span class="line"><span class="comment">                 * 即下次循环 mid = f[k-1-1] - 1</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                k --; <span class="comment">//????????????</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (key &gt; temp[mid]) &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 1.全部元素 = 前面的元素 + 后面的元素</span></span><br><span class="line"><span class="comment">                 * 2.f[k] = f[k-1] + f[k-2]</span></span><br><span class="line"><span class="comment">                 * 因为后面有f[k-2]个元素 所以可以继续拆分f[k-1]  = f[k-3] + f[k-4]</span></span><br><span class="line"><span class="comment">                 * 即在f[k-2]的前面进行查找k-=2</span></span><br><span class="line"><span class="comment">                 * 即下次循环mid = f[k-1-2] -2</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                k -= <span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//需要确定，返回的是哪个下标</span></span><br><span class="line">                <span class="keyword">if</span> (mid &lt; high) &#123;</span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> high;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/article/2f57a694.html"/>
      <url>/article/2f57a694.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>正则表达式</p></blockquote><span id="more"></span><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h4 id="近期在复习jsp考试的时候，需要复习前端表单校验时使用到的正则表达式，之前都是网上找现成的用，不是很理解，现对常用的正则表达式进行学习整理"><a href="#近期在复习jsp考试的时候，需要复习前端表单校验时使用到的正则表达式，之前都是网上找现成的用，不是很理解，现对常用的正则表达式进行学习整理" class="headerlink" title="近期在复习jsp考试的时候，需要复习前端表单校验时使用到的正则表达式，之前都是网上找现成的用，不是很理解，现对常用的正则表达式进行学习整理"></a>近期在复习jsp考试的时候，需要复习前端表单校验时使用到的正则表达式，之前都是网上找现成的用，不是很理解，现对常用的正则表达式进行学习整理</h4><h3 id="一-概念"><a href="#一-概念" class="headerlink" title="一.概念"></a>一.概念</h3><p>正则表达式（Regular Expression）是用于描述一组字符串特征的模式，用来匹配特定的字符串。通过<strong>特殊字符+普通字符</strong>来进行模式描述，从而达到文本匹配目的工具。</p><h3 id="二-语法"><a href="#二-语法" class="headerlink" title="二.语法"></a>二.语法</h3><h4 id="1-普通字符"><a href="#1-普通字符" class="headerlink" title="1.普通字符"></a>1.普通字符</h4><p>[ABC] 匹配 […] 中的所有字符，例如 [aeiou] 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。 [^ABC] 匹配除了 […] 中字符的所有字符，例如 [^aeiou] 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。 [A-Z] [A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。 . 匹配除换行符（\n、\r）之外的任何单个字符，相等于 [^\n\r]。 [\s\S] 匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，包括换行。 \w 匹配字母、数字、下划线。等价于 [A-Za-z0-9_]</p><h4 id="2-特殊字符"><a href="#2-特殊字符" class="headerlink" title="2.特殊字符"></a>2.特殊字符</h4><p>$ 匹配输入字符串的结尾位置 ^ 匹配输入字符串的开始位置 “*“ 匹配前面的子表达式零次或多次 “+” 匹配前面的子表达式一次或多次 ? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。 \ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。 {n} n 是一个非负整数。匹配确定的 n 次。 {n,} n 是一个非负整数。至少匹配n 次 {n,m} m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。 <em>*<em>\*</em>*</em> 和 *<em>+*</em> 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。</p><h4 id="3-Jquery的使用"><a href="#3-Jquery的使用" class="headerlink" title="3.Jquery的使用"></a>3.Jquery的使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> grade = $(<span class="string">&quot;#grade&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line"><span class="keyword">var</span> rep = <span class="regexp">/^[0-9]*&#123;4&#125;$/</span></span><br><span class="line">rep.<span class="title function_">test</span>(grade) <span class="comment">//匹配返回true，不匹配返回false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>五.I/O设备</title>
      <link href="/article/f9c0efcf.html"/>
      <url>/article/f9c0efcf.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>I&#x2F;O设备</p></blockquote><span id="more"></span><h2 id="五-设备管理"><a href="#五-设备管理" class="headerlink" title="五.设备管理"></a>五.设备管理</h2><h3 id="5-1-1-I-x2F-O设备的基本概念和分类"><a href="#5-1-1-I-x2F-O设备的基本概念和分类" class="headerlink" title="5.1_1 I&#x2F;O设备的基本概念和分类"></a>5.1_1 I&#x2F;O设备的基本概念和分类</h3><h5 id="（1）什么是I-x2F-O设备"><a href="#（1）什么是I-x2F-O设备" class="headerlink" title="（1）什么是I&#x2F;O设备"></a>（1）什么是I&#x2F;O设备</h5><p>“I&#x2F;o”就是“输入&#x2F;输出”(Input&#x2F;Output） I&#x2F;O设备就是可以将数据输入到计算机，或者可以接收计算机输出数据的外部设备，属于计算机中的 硬件部件。</p><p>Unix系统将外部设备抽象为一种特殊的文件。用户可以使用与文件操作相同的方式对外部设备进行操作</p><h5 id="（2）I-x2F-O设备的分类——按使用特性分类"><a href="#（2）I-x2F-O设备的分类——按使用特性分类" class="headerlink" title="（2）I&#x2F;O设备的分类——按使用特性分类"></a>（2）I&#x2F;O设备的分类——按使用特性分类</h5><p><img src="https://i.loli.net/2020/09/04/1zeqI8pTimSaPko.png" alt="image-20200904174700429"></p><h5 id="（3）I-x2F-O设备的分类——按传输速率分类"><a href="#（3）I-x2F-O设备的分类——按传输速率分类" class="headerlink" title="（3）I&#x2F;O设备的分类——按传输速率分类"></a>（3）I&#x2F;O设备的分类——按传输速率分类</h5><p><img src="https://i.loli.net/2020/09/04/n1U7reFCmkKsS4G.png" alt="image-20200904174742101"></p><h5 id="（3）I-x2F-O设备的分类——按信息交换的单位分类"><a href="#（3）I-x2F-O设备的分类——按信息交换的单位分类" class="headerlink" title="（3）I&#x2F;O设备的分类——按信息交换的单位分类"></a>（3）I&#x2F;O设备的分类——按信息交换的单位分类</h5><p><img src="https://i.loli.net/2020/09/04/hieTIG1rVRo2cOn.png" alt="image-20200904174850812"></p><h3 id="5-1-2-I-x2F-O控制器"><a href="#5-1-2-I-x2F-O控制器" class="headerlink" title="5.1_2 I&#x2F;O控制器"></a>5.1_2 I&#x2F;O控制器</h3><p>I&#x2F;O设备的机械部件主要是用来执行具体的I&#x2F;O操作，如我们看得见摸得着的鼠标&#x2F;键盘的按钮…. I&#x2F;O设备的电子部件通常是一块插入主板扩充槽的印刷电路板</p><h5 id="（1）I-x2F-O设备的电子部件（I-x2F-O控制器）"><a href="#（1）I-x2F-O设备的电子部件（I-x2F-O控制器）" class="headerlink" title="（1）I&#x2F;O设备的电子部件（I&#x2F;O控制器）"></a>（1）I&#x2F;O设备的电子部件（I&#x2F;O控制器）</h5><p>CPU无法直接控制I&#x2F;o设备的机械部件，因此I&#x2F;o设备还要有一个电子部件作为CPU和I&#x2F;o设备机械部 件之间的“中介”，用于实现CPU对设备的控制。 这个电子部件就是I&#x2F;o控制器，又称设备控制器。CPU可控制I&#x2F;o控制器，又由I&#x2F;o控制器来控制设备 的机械部件。 <img src="https://i.loli.net/2020/09/04/1qopykCPFRrlfda.png" alt="image-20200904175625184"></p><h5 id="（2）I-x2F-O控制器的组成"><a href="#（2）I-x2F-O控制器的组成" class="headerlink" title="（2）I&#x2F;O控制器的组成"></a>（2）I&#x2F;O控制器的组成</h5><p><img src="https://i.loli.net/2020/09/04/UJtO5VheWB6Srpc.png" alt="image-20200904185809342"></p><h5 id="（3）内存映像I-x2F-O-寄存器独立编址"><a href="#（3）内存映像I-x2F-O-寄存器独立编址" class="headerlink" title="（3）内存映像I&#x2F;O 寄存器独立编址"></a>（3）内存映像I&#x2F;O 寄存器独立编址</h5><p>内存映射I&#x2F;O，控制器中的寄存器与内存地址统一编址 寄存器独立编址，控制器中的的寄存器使用单独的地址</p><h3 id="5-1-3-I-x2F-O控制方式"><a href="#5-1-3-I-x2F-O控制方式" class="headerlink" title="5.1_3 I&#x2F;O控制方式"></a>5.1_3 I&#x2F;O控制方式</h3><p>需要注意的问题：</p><ol><li>完成一次读写操作的流程</li><li>cpu干预的频率</li><li>数据传送的单位</li><li>数据的流向</li><li>主要缺点和优点</li></ol><h5 id="（1）程序直接控制方式"><a href="#（1）程序直接控制方式" class="headerlink" title="（1）程序直接控制方式"></a>（1）程序直接控制方式</h5><p><strong>keyword : 轮询</strong> ① 完成一次读&#x2F;写的流程 <img src="https://i.loli.net/2020/09/05/qWFTrXPpgZmHG9L.png" alt="image-20200905083002017"> ② cpu干预的频率： cpu需要不断的轮询检查，干预频率很频繁 ③ 数据的传送单位：每次读&#x2F;写一个字 ④ 数据流向： 读：I&#x2F;O设备 - cpu - 内存 写：内存 - cpu - I&#x2F;O设备 ⑤ 主要的缺点和优点 优点：实现简单 缺点：CPU和I&#x2F;O设备只能串行工作。cpu需要一直轮询检查，长期处于忙等状态，cpu利用率低</p><h5 id="（2）中断驱动方式"><a href="#（2）中断驱动方式" class="headerlink" title="（2）中断驱动方式"></a>（2）中断驱动方式</h5><p><img src="https://i.loli.net/2020/09/05/GWqum3zKFcQUl6h.png" alt="image-20200905084103753"> ① 完成一次读&#x2F;写的流程 除了引入中断和程序控制方式大同小异 ② cpu干预的频率： 每次I&#x2F;O操作开始前，完成后需要cpu介入 等待I&#x2F;O时cpu可以切换到别的进程执行 ③ 数据的传送单位： 每次读&#x2F;写一个字 ④ 数据流向： 读：I&#x2F;O设备 - cpu - 内存 写：内存 - cpu - I&#x2F;O设备 ⑤ 主要的缺点和优点 优点：引入了中断技术可以让cpu和I&#x2F;O设备并行的工作，提高了cpu利用率 缺点：频繁的中断处理会消耗较多的cpu时间</p><h5 id="（3）DMA（直接存储器存取）方式"><a href="#（3）DMA（直接存储器存取）方式" class="headerlink" title="（3）DMA（直接存储器存取）方式"></a>（3）DMA（直接存储器存取）方式</h5><p>DMA也是一种I&#x2F;O控制器 ① 完成一次读&#x2F;写的流程 <img src="https://i.loli.net/2020/09/05/Ga46c7o2edLiSnl.png" alt="image-20200905085352199"> ② cpu干预的频率： 仅在传送了一个或多个数据块的开始或结束时，才需要CPU干预 ③ 数据的传送单位：每次读&#x2F;写一个块或多个块（注意：多个块只能是连续的多个块，且这些块读入内存也必须是连续的） ④ 数据流向： 读：内存 - I&#x2F;O设备 写：I&#x2F;O设备 - 内存 ⑤ 主要的缺点和优点 优点：数据传输以“块”为单位，cpu介入频率进一步降低。传输的数据不再需要先经过cpu再写入内存，数据的传输效率提升，cpu和I&#x2F;O设备的并行性提升 缺点：cpu每发出一条I&#x2F;O指令，只能读&#x2F;写一个或多个数据块</p><h5 id="（4）通道控制方式"><a href="#（4）通道控制方式" class="headerlink" title="（4）通道控制方式"></a>（4）通道控制方式</h5><p>通道：一种硬件，可以理解为“弱鸡版的cpu”。通道可以识别并执行一系列的通道指令 通道程序：任务清单 ① 完成一次读&#x2F;写的流程 <img src="https://i.loli.net/2020/09/05/YO5s4pgSKxnHRJa.png" alt="image-20200905085951371"> ② cpu干预的频率： 极低，通道会根据cpu的指示执行相应的通道查询 ③ 数据的传送单位：每次读&#x2F;写一组数据块 ④ 数据流向： 读：内存 - I&#x2F;O设备 写：I&#x2F;O设备 - 内存 ⑤ 主要的缺点和优点 缺点：实现复杂，需要专门的通道硬件支持 优点：资源利用率极高</p><h3 id="5-1-4-I-x2F-O软件层次结构"><a href="#5-1-4-I-x2F-O软件层次结构" class="headerlink" title="5.1_4 I&#x2F;O软件层次结构"></a>5.1_4 I&#x2F;O软件层次结构</h3><h5 id="（1）用户层软件"><a href="#（1）用户层软件" class="headerlink" title="（1）用户层软件"></a>（1）用户层软件</h5><p>用户层软件实现了与用户交互的接口，用户可以直接提供该层提供的，与I&#x2F;O设备相关的库函数对设备进场操作 用户层软件将用户请求翻译成格式化的I&#x2F;O请求，并通过系统调用请求操作系统内核服务</p><h5 id="（2）设备独立性软件，（又称设备无关性软件）"><a href="#（2）设备独立性软件，（又称设备无关性软件）" class="headerlink" title="（2）设备独立性软件，（又称设备无关性软件）"></a>（2）设备独立性软件，（又称设备无关性软件）</h5><p>向上层实现统一的调用接口 对设备的保护（Unix操作系统设备看作文件，考虑权限问题） 差错处理 对设备的错误进行处理 设备的分配与回收 数据缓冲区管理 建立逻辑设备名到物理设备名的映射关系；根据设备类型调用相应的驱动程序 “逻辑设备表”</p><h5 id="（3）设备驱动程序"><a href="#（3）设备驱动程序" class="headerlink" title="（3）设备驱动程序"></a>（3）设备驱动程序</h5><p><img src="https://i.loli.net/2020/09/05/QWgZmURAvh6VNiw.png"> 主要负责对硬件设备的具体控制，将上层发出的一系列指令命令转换成特定设备“听的懂”的一系列操作。包括设置设备寄存器；检查设备状态等</p><h5 id="（4）中断处理程序"><a href="#（4）中断处理程序" class="headerlink" title="（4）中断处理程序"></a>（4）中断处理程序</h5><p><img src="https://i.loli.net/2020/09/05/A23UuOKSeyz1r7c.png" alt="image-20200905091949362"></p><h3 id="5-1-5-I-x2F-O核心子系统"><a href="#5-1-5-I-x2F-O核心子系统" class="headerlink" title="5.1_5 I&#x2F;O核心子系统"></a>5.1_5 I&#x2F;O核心子系统</h3><p>i&#x2F;o核心子系统： 设备独立性软件 设备驱动程序 中断处理程序 <img src="https://i.loli.net/2020/09/05/BRfHw3OgXpYmjct.png" alt="image-20200905092717535"></p><h5 id="1-I-x2F-O调度"><a href="#1-I-x2F-O调度" class="headerlink" title="(1) I&#x2F;O调度"></a>(1) I&#x2F;O调度</h5><p>用某种算法确定一个好的顺序来处理各个I&#x2F;O请求</p><h5 id="2-设备保护"><a href="#2-设备保护" class="headerlink" title="(2) 设备保护"></a>(2) 设备保护</h5><p>操作系统需要实现文件保护功能 Unix操作系统把设备看做文件，每个设备也会有对应的FCB</p><h3 id="5-1-6-假脱机技术（SPOOLing技术）"><a href="#5-1-6-假脱机技术（SPOOLing技术）" class="headerlink" title="5.1_6 假脱机技术（SPOOLing技术）"></a>5.1_6 假脱机技术（SPOOLing技术）</h3><h5 id="（1）什么是脱机技术"><a href="#（1）什么是脱机技术" class="headerlink" title="（1）什么是脱机技术"></a>（1）什么是脱机技术</h5><p>批处理阶段引入了脱机输入&#x2F;输出技术（用磁带完成） 脱机：脱离主机的控制</p><h5 id="（2）假脱机技术"><a href="#（2）假脱机技术" class="headerlink" title="（2）假脱机技术"></a>（2）假脱机技术</h5><p>“假脱机技术”又称SPOOLing技术是用软件的方式模拟脱机技术 <img src="https://i.loli.net/2020/09/05/kf4MtGwTAmCOdi3.png" alt="image-20200905093345470"> 输入进程模拟脱机输入时的外围控制机 输出进程模拟脱机输出时的外围控制机 缓冲区：数据的中转站</p><h5 id="（3）共享打印机原理分析"><a href="#（3）共享打印机原理分析" class="headerlink" title="（3）共享打印机原理分析"></a>（3）共享打印机原理分析</h5><p>独占式设备：各进程串行的使用 共享设备：各进程同时的使用 打印机 通过 SPOOLing技术 改造为 共享设备</p><h3 id="5-1-7-设备的分配与回收"><a href="#5-1-7-设备的分配与回收" class="headerlink" title="5.1_7 设备的分配与回收"></a>5.1_7 设备的分配与回收</h3><h5 id="（1）设备分配时应该考虑的因素"><a href="#（1）设备分配时应该考虑的因素" class="headerlink" title="（1）设备分配时应该考虑的因素"></a>（1）设备分配时应该考虑的因素</h5><p><strong>设备的固有属性</strong>：独占设备，共享设备，虚拟设备 独占设备：一个时段只能分配给一个进程 共享设备：可以分配给多个进程使用（如磁盘），共享往往是宏观上的 虚拟设备：通过SPOOLing技术将独占设备改为虚拟的共享设备 <strong>设备的分配算法</strong>： 先来先服务 短任务优先 … <strong>进程运行的安全性</strong> 安全分配方式：为进程分配一个设备后就将进程阻塞，本次I&#x2F;O完成后才能将进程唤醒 优点：破坏了“请求和保持”条件，不会死锁 缺点：对于一个进程来说，cpu和I&#x2F;O设备只能串行的工作 不安全分配方式：进程发出I&#x2F;O请求后，进程不会被阻塞。进程可以继续执行，之后还可以发出新的I&#x2F;O请求 优点：效率高，进程的任务可以和I&#x2F;O任务进行并行处理 缺点：不安全，可能导致死锁（死锁的检测与解除 银行家算法）</p><h5 id="（2）静态分配与动态分配"><a href="#（2）静态分配与动态分配" class="headerlink" title="（2）静态分配与动态分配"></a>（2）静态分配与动态分配</h5><p>静态分配：进程运行前为其分配全部所需资源，运行结束后归还资源 动态分析：进程运行过程中动态的申请设备资源</p><h5 id="（3）设备分配管理中的数据结构"><a href="#（3）设备分配管理中的数据结构" class="headerlink" title="（3）设备分配管理中的数据结构"></a>（3）设备分配管理中的数据结构</h5><p><img src="https://i.loli.net/2020/09/05/Zh2NTi1e8nUpzO4.png" alt="image-20200905095620873"> <strong>设备控制表（DCT）</strong>用于记录设备的使用情况 <img src="https://i.loli.net/2020/09/05/9xdw37kMB1buCTD.png" alt="image-20200905095921147"> <strong>控制器控制表（coct）</strong>每个设备控制器会对应一张COCT,对控制器进行管理 <img src="https://i.loli.net/2020/09/05/gkVzfKpQJFheOGy.png" alt="image-20200905100148714"> <strong>通道控制表（CHCT）</strong>操作系统对通道进行操作和管理 <img src="https://i.loli.net/2020/09/05/EieCOwf9rnzaPDX.png" alt="image-20200905100243434"> <strong>系统控制表（SDT）</strong>记录设备中全部设备的情况，每个设备对应一个表目 <img src="https://i.loli.net/2020/09/05/WDmhwufZcvUdMot.png" alt="image-20200905100340895"></p><h5 id="（4）设备分配的步骤"><a href="#（4）设备分配的步骤" class="headerlink" title="（4）设备分配的步骤"></a>（4）设备分配的步骤</h5><ol><li>根据进程请求的物理设备名查找SDT（注:物理设备名是进程请求分配设备时提供的参数)</li><li>根据SDT找到DCT，若设备忙碌则将进程PCB挂到设备等待队列中，不忙碌则将设备分配给进程。</li><li>根据DCT找到coCT，若控制器忙碌则将进程PCB挂到控制器等待队列中，不忙碌则将控制器分配给进程</li><li>根据COCT找到CHCT，若通道忙碌则将进程PCB挂到通道等待队列中，不忙碌则将通道分配给进程</li></ol><p>只有设备，控制器，通道都分配成功时，才是I&#x2F;O设备分配成功 缺点： 用户编程必须使用“物理设备名”，底层细节对用户不透明，不方便编程 若更换物理设备，程序无法运行 若进程请求的设备正在忙碌，则及时系统中还有同类型的设备，进程也必须阻塞等待</p><h5 id="（5）设备分配步骤的改进"><a href="#（5）设备分配步骤的改进" class="headerlink" title="（5）设备分配步骤的改进"></a>（5）设备分配步骤的改进</h5><ol><li>根据进程请求的<strong>逻辑设备名</strong>查找SDT</li><li>查找SDT，找到用户进程指定类型的、并且空闲的设备，将其分配给该进程。操作系统在逻辑设备表（LUT）中新增一个表项。</li><li>同上面的步骤</li><li>……</li></ol><h3 id="5-1-8-缓冲区管理"><a href="#5-1-8-缓冲区管理" class="headerlink" title="5.1_8 缓冲区管理"></a>5.1_8 缓冲区管理</h3><h5 id="（1）什么是缓冲区，有什么作用"><a href="#（1）什么是缓冲区，有什么作用" class="headerlink" title="（1）什么是缓冲区，有什么作用"></a>（1）什么是缓冲区，有什么作用</h5><p><img src="https://i.loli.net/2020/09/05/ho9QIvp5YmFRbOV.png" alt="image-20200905101535069"></p><h5 id="（2）单缓冲"><a href="#（2）单缓冲" class="headerlink" title="（2）单缓冲"></a>（2）单缓冲</h5><p>假设某用户进程请求某种块设备读入若干块的数据。若采用单缓冲的策略，操作系统会在主存中为其<strong>分配一个缓冲区</strong>（若题目中没有特别说明，一个缓冲区的大小就是一个块）。 <strong>注意:当缓冲区数据非空时，不能往缓冲区冲入数据，只能从缓冲区把数据传出;当缓冲区为空时，可以往缓冲区冲入数据，但必须把缓冲区充满以后，才能从缓冲区把数据传出。</strong> <img src="https://i.loli.net/2020/09/05/bPuE3Cj5OYDy82a.png" alt="image-20200905102505463"></p><h5 id="（3）双缓冲"><a href="#（3）双缓冲" class="headerlink" title="（3）双缓冲"></a>（3）双缓冲</h5><p>操作系统在主内存分配两个缓冲区 <img src="https://i.loli.net/2020/09/05/975fUpPq4kGezX3.png" alt="image-20200905103050301"></p><h5 id="4-使用单-x2F-双缓冲在通信时的区别"><a href="#4-使用单-x2F-双缓冲在通信时的区别" class="headerlink" title="(4) 使用单&#x2F;双缓冲在通信时的区别"></a>(4) 使用单&#x2F;双缓冲在通信时的区别</h5><p><img src="https://i.loli.net/2020/09/05/nos6iVx7wOhdFby.png" alt="image-20200905103150922"> 在任何一个时刻只能实现数据的单向传输 若使用双缓冲区可以实现同一时刻的双向数据传输</p><h5 id="（5）循环缓冲区"><a href="#（5）循环缓冲区" class="headerlink" title="（5）循环缓冲区"></a>（5）循环缓冲区</h5><p>将多个大小相等的缓冲区链接成一个循环队列</p><h5 id="（6）缓冲池"><a href="#（6）缓冲池" class="headerlink" title="（6）缓冲池"></a>（6）缓冲池</h5><p><strong>缓冲池</strong>由系统中共用的缓冲区组成。这些缓冲区按使用状况可以分为:空缓冲队列、装满输入数据的缓冲队列（输入队列）、装满输出数据的缓冲队列（输出队列）。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四.文件与磁盘</title>
      <link href="/article/e6df91e.html"/>
      <url>/article/e6df91e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>文件与磁盘</p></blockquote><span id="more"></span><h2 id="四-文件与磁盘"><a href="#四-文件与磁盘" class="headerlink" title="四.文件与磁盘"></a>四.文件与磁盘</h2><h3 id="4-1-1-初识文件管理"><a href="#4-1-1-初识文件管理" class="headerlink" title="4.1_1 初识文件管理"></a>4.1_1 初识文件管理</h3><h5 id="（1）文件属性"><a href="#（1）文件属性" class="headerlink" title="（1）文件属性"></a>（1）文件属性</h5><p>文件：一组有意义的信息的集合</p><p>一个文件有哪些属性？ </p><p><strong>文件名：</strong>由创建文件的用户决定文件名，主要是为了方便用户找到文件 </p><p><strong>标识符</strong>：一个系统内的各文件标识符唯一，对用户来说毫无可读性，因此标识符只能是操作系统用于区分各个文件还能的一种内部名称 </p><p><strong>类型：</strong>指明文件的类型 位置：文件的存放路径（让用户使用），在外存中的地址（操作系统使用，对用户不可见） </p><p><strong>大小：</strong>指明文件的大小 </p><p><strong>创建时间</strong>，<strong>上次修改时间</strong>，<strong>文件所有者信息</strong> <strong>保护信</strong>息：对文件进行保护的访问控制信息</p><h5 id="（2）文件内部的数据应该怎样组织起来"><a href="#（2）文件内部的数据应该怎样组织起来" class="headerlink" title="（2）文件内部的数据应该怎样组织起来"></a>（2）文件内部的数据应该怎样组织起来</h5><p><img src="https://i.loli.net/2020/09/02/36SsperAQ4WqElw.png" alt="image-20200902164301728"></p><h5 id="（3）文件之间应该怎样组织起来"><a href="#（3）文件之间应该怎样组织起来" class="headerlink" title="（3）文件之间应该怎样组织起来"></a>（3）文件之间应该怎样组织起来</h5><p><img src="https://i.loli.net/2020/09/02/rkitC3Rj57ZBJfa.png" alt="image-20200902164629916"></p><h5 id="（4）操作系统应该向上提供哪些功能？"><a href="#（4）操作系统应该向上提供哪些功能？" class="headerlink" title="（4）操作系统应该向上提供哪些功能？"></a>（4）操作系统应该向上提供哪些功能？</h5><p>操作系统向上提供的几个最基本的功能</p><ul><li>创建文件（create系统调用）</li><li>删除文件（delete系统调用）</li><li>读文件（read系统调用）</li><li>写文件（write系统调用）</li><li>打开文件（open系统调用）</li><li>关闭文件（close系统调用）</li></ul><h5 id="（5）从上往下看，文件应该如何存放在外存"><a href="#（5）从上往下看，文件应该如何存放在外存" class="headerlink" title="（5）从上往下看，文件应该如何存放在外存"></a>（5）从上往下看，文件应该如何存放在外存</h5><p><img src="https://i.loli.net/2020/09/02/rsAbuneHRD3aQg6.png" alt="image-20200902165715687"></p><h5 id="（6）其他需要由操作系统实现的文件管理功能"><a href="#（6）其他需要由操作系统实现的文件管理功能" class="headerlink" title="（6）其他需要由操作系统实现的文件管理功能"></a>（6）其他需要由操作系统实现的文件管理功能</h5><p>文件共享：使多个用户可以共享的使用一个文件 文件保护：如何保证不同用户对文件有不同的访问权限</p><h3 id="4-1-2-文件的逻辑结构"><a href="#4-1-2-文件的逻辑结构" class="headerlink" title="4.1_2 文件的逻辑结构"></a>4.1_2 文件的逻辑结构</h3><h5 id="（1）有结构文件"><a href="#（1）有结构文件" class="headerlink" title="（1）有结构文件"></a>（1）有结构文件</h5><p>按文件是否有结构分类，可以分为无结构文件，有结构文件两种。 <strong>无结构文件</strong>：文件内部的数据就是一系列二进制流或字符流组成，又称为“流式文件”。如windows操作系统中的.txt文件 <strong>有结构文件</strong>：由一组相似的记录组成，又称“<strong>记录式文件</strong>”。每条记录由若干个数据项组成;如数据库表文件。一般来说，每条记录有一个数据项可以作为<strong>关键字</strong>。根据各条记录的长度（占用的内存空间）是否相等，又可以分为<strong>定长记录</strong>和<strong>可变长记录</strong>两种。</p><h5 id="（2）顺序文件"><a href="#（2）顺序文件" class="headerlink" title="（2）顺序文件"></a>（2）顺序文件</h5><p>顺序文件：文件中的记录一个接一个的顺序排列（逻辑上），记录可以是定长的或可变长得，各个记录在物理上可以顺序存储或者链式存储 顺序文件按照顺序与关键字是否有关又可以分为</p><ul><li>串结构 记录之间的顺序与关键字无关</li><li>顺序结构 记录之间的顺序与关键字有关</li></ul><p>一般来说，<strong>考试题目中所说的“顺序文件”指的都是顺序存储的顺序文件</strong>，缺点是增加&#x2F;删除一个记录比较困难 <strong>随机存取</strong>的实现：可变长记录不能实现而定长记录可以实现 <strong>快速检索</strong>的实现：顺序结构可以实现（二分查找），串结构不能实现</p><h5 id="（3）索引文件"><a href="#（3）索引文件" class="headerlink" title="（3）索引文件"></a>（3）索引文件</h5><p>对于可变长记录的文件，要找到第i个记录，必须先顺序查找第i-1个记录，但是对于很多场景又必须使用可变长记录，如何解决这个问题？ <img src="https://i.loli.net/2020/09/02/e2BdjpHJFbf5kGs.png" alt="image-20200902172907334"></p><h5 id="（4）索引顺序文件"><a href="#（4）索引顺序文件" class="headerlink" title="（4）索引顺序文件"></a>（4）索引顺序文件</h5><p>每个记录对应一个索引表项，因此索引表可能会很大。比如：文件的每个记录平均只占8B，而每个索引表项占32个字节，那么索引表都要比文件本身的内容大8倍，这样对存储空间的利用率很低 <img src="https://i.loli.net/2020/09/02/VZawY5DRHsp1QET.png" alt="image-20200902173411039"> 若一个顺序文件有10000个记录，则根据关键字检索文件，只能从头开始开始顺序查找，需平均查找5000个记录 若采用索引顺序文件结构，可以把10000个记录分为100组，每组100个数据，先查找分组，需要平均查找50次，找到分组再查找目标文件，平均查找50次，平均次数减少为 50 + 50 &#x3D; 100次 文件数目再多时可以采用多级索引顺序文件</p><h3 id="4-1-3-文件目录"><a href="#4-1-3-文件目录" class="headerlink" title="4.1_3 文件目录"></a>4.1_3 文件目录</h3><h5 id="（1）文件控制块-FCB"><a href="#（1）文件控制块-FCB" class="headerlink" title="（1）文件控制块(FCB)"></a>（1）文件控制块(FCB)</h5><p><img src="https://i.loli.net/2020/09/03/iDcolBZ7pJnbI8Y.png" alt="image-20200903100807404"> FCB的有序集合称为“文件目录”，一个FCB就是一个文件目录项。 FCB中包含了文件的基本信息（文件名、物理地址、逻辑结构、物理结构等），存取控制信息（是否可读&#x2F;可写、禁止访问的用户名单等），使用信息（如文件的建立时间、修改时间等）。最重要，最基本的还是文件名、文件存放的物理地址。</p><h5 id="（2）目录结构–单级目录结构"><a href="#（2）目录结构–单级目录结构" class="headerlink" title="（2）目录结构–单级目录结构"></a>（2）目录结构–单级目录结构</h5><p>早期的操作系统并不支持多级目录，整个系统中只建立一张目录表，每个文件占一个目录项 <img src="https://i.loli.net/2020/09/03/ceaWX1AnBTx4M2u.png" alt="image-20200903101852986"></p><h5 id="（2）目录结构–两级目录结构"><a href="#（2）目录结构–两级目录结构" class="headerlink" title="（2）目录结构–两级目录结构"></a>（2）目录结构–两级目录结构</h5><p>早期的多用户操作系统，采用两级目录结构。分为<strong>主文件目录</strong>（MFD,Master File Dictory）和<strong>用户文件目录</strong>(UFD，User File Dictory) <img src="https://i.loli.net/2020/09/03/SuyYIs9Ovd1Jrbk.png" alt="image-20200903102523715"></p><h5 id="（3）目录结构–多级目录结构（树形目录结构）"><a href="#（3）目录结构–多级目录结构（树形目录结构）" class="headerlink" title="（3）目录结构–多级目录结构（树形目录结构）"></a>（3）目录结构–多级目录结构（树形目录结构）</h5><p><img src="https://i.loli.net/2020/09/03/Oe5qol2wcUWFK9L.png" alt="image-20200903102814153"> 当用户想访问某个文件，可以使用当前目录出发的“相对路径” 引入当前目录和相对路径后，减少了磁盘i&#x2F;o此次数，提高系统的效率 树形目录结构可以方便的对文件进程分类，层次结构清晰，也能够有效的对文件进行管理和保护，但是，树形结构不便于实现文件的共享。为此，提出了“无环图目录结构”</p><h5 id="（4）目录结构–无环图目录结构"><a href="#（4）目录结构–无环图目录结构" class="headerlink" title="（4）目录结构–无环图目录结构"></a>（4）目录结构–无环图目录结构</h5><p><img src="https://i.loli.net/2020/09/03/QvIkhKxTLygVBsA.png" alt="image-20200903103442794"></p><h5 id="（5）索引结点（FCB的改进）"><a href="#（5）索引结点（FCB的改进）" class="headerlink" title="（5）索引结点（FCB的改进）"></a>（5）索引结点（FCB的改进）</h5><p><img src="https://i.loli.net/2020/09/03/VqL4iCvQltJRmD9.png"> 存放在外存中的索引结点称为“磁盘索引结点”，当索引结点放入内存后称为“内存索引结点”。相比之下内存索引结点中需要增加一些信息，比如：文件是否被修改，此时有几个进程正在访问该文件等</p><h3 id="4-1-4-文件的物理结构（文件分配方式-上）"><a href="#4-1-4-文件的物理结构（文件分配方式-上）" class="headerlink" title="4.1_4 文件的物理结构（文件分配方式 上）"></a>4.1_4 文件的物理结构（文件分配方式 上）</h3><p>文件数据应该怎样存放在外存中？</p><h5 id="（1）文件块，磁盘块"><a href="#（1）文件块，磁盘块" class="headerlink" title="（1）文件块，磁盘块"></a>（1）文件块，磁盘块</h5><p>类似于内存分页，磁盘中的存储单元也会被分成一个个“块&#x2F;磁盘块&#x2F;物理块”。很多操作系统中，<strong>磁盘块的大小与内存块，页面的大小相同</strong> 文件的逻辑地址空间也被分为一个一个的文件“块” 于是文件的逻辑地址也可以表示为（逻辑块号，块内地址）的形式</p><h5 id="（2）文件分配方式——连续分配"><a href="#（2）文件分配方式——连续分配" class="headerlink" title="（2）文件分配方式——连续分配"></a>（2）文件分配方式——连续分配</h5><p><strong>连续分配</strong>方式要求<strong>每个文件在磁盘上占有一组连续的块</strong> 文件目录中记录存放的起始块号和长度（总共占用了几个块） <img src="https://i.loli.net/2020/09/03/iIVhmCxJD2WkHqc.png" alt="image-20200903105552647"> 读取某个磁盘块时，需要移动磁头。访问的两个磁盘块相隔越远，移动磁头所需的时间就越长 结论：<strong>连续分配的文件在顺序读&#x2F;写时速度最快</strong> 缺点： 物理上采用<strong>连续分配的文件不方便拓展</strong> 存储空间利用率低，会产生难以利用的<strong>磁盘碎片</strong> 。可以利用紧凑来处理碎片，但是要耗费很大的时间代价</p><h5 id="（3）文件分配方式——链接分配"><a href="#（3）文件分配方式——链接分配" class="headerlink" title="（3）文件分配方式——链接分配"></a>（3）文件分配方式——链接分配</h5><p><strong>链接分配</strong>采取离散分配的方式，可以为文件分配离散的磁盘块。分为<strong>显式链接</strong>和<strong>隐式链接</strong>两种 <strong>隐式链接</strong> 目录中记录了文件存放的起始块号和结束块号 采用链式分配（隐式链接）方式的文件，只支持顺序访问，不支持随机访问，查找效率低。另外，指向下一个盘块的指针也需要耗费少量的存储空间。 优点：很方便拓展文件，不会有碎片，外存利用率高 缺点：只能顺序访问，不支持随机访问，查找效率低，指向下一个磁盘块的指针也要耗费少量的存储空间 <strong>显式链接</strong> 把用于链接各物理块的指针显示的存放在一张表中，即文件分配表 <img src="https://i.loli.net/2020/09/03/7KDQqavCdJi6ZI5.png" alt="image-20200903111525754"> 注意：一个磁盘仅设置一张FAT。开机时，将FAT存入内存，并且常驻内存。（物理块号字段隐含） 逻辑地址到物理地址的转换 <img src="https://i.loli.net/2020/09/03/leW2qAQ5XRyiE3w.png" alt="image-20200903112112709"> 优点：很方便拓展，不会有碎片问题，外存利用率高，支持随机访问。相比隐式链接来说，地址转换不需要访问磁盘，文件的访问效率更高 缺点：FAT表需要占用一定的内存空间 <strong>注意：考试题目中未声明显式&#x2F;隐式的“链接分配”默认是隐式链接</strong></p><h3 id="4-1-5-文件的物理结构（文件分配方式-下）"><a href="#4-1-5-文件的物理结构（文件分配方式-下）" class="headerlink" title="4.1_5 文件的物理结构（文件分配方式 下）"></a><strong>4.1_5</strong> 文件的物理结构（文件分配方式 下）</h3><h5 id="（1）文件分配管理——索引分配"><a href="#（1）文件分配管理——索引分配" class="headerlink" title="（1）文件分配管理——索引分配"></a>（1）文件分配管理——索引分配</h5><p><strong>索引分配</strong>允许文件离散地分配在各个磁盘块中，系统会<strong>为每个文件建立一张索引表</strong>，索引表中<strong>记录了文</strong> <strong>件的各个逻辑块对应的物理块</strong>（索引表的功能类似于内存管理中的页表—―建立逻辑页面到物理页之间 的映射关系)。索引表存放的磁盘块称为<strong>索引块</strong>。文件数据存放的磁盘块称为<strong>数据块</strong>. <img src="https://i.loli.net/2020/09/03/Axb793EfQ1hC8lq.png" alt="image-20200903215635254"> 索引分配可以支持随机访问，文件拓展也很容易实现（只需给文件分配一个空闲块，增加一个索引表项即可） 但是索引表需要占用一定的存储空间</p><h5 id="（2）索引表太大的解决方案"><a href="#（2）索引表太大的解决方案" class="headerlink" title="（2）索引表太大的解决方案"></a>（2）索引表太大的解决方案</h5><p><strong>链接方案</strong>：如果索引表太大，一个索引块装不下，那么可以将多个索引块链接起来存放。 缺点：如果文件很大，会导致索引表很长，由于不能随机存取，导致查找效率低下 <strong>多层索引</strong>：建立多层索引（类似于多级页表）。使第一层的索引块指向第二层的索引块，还可以根据文件的大小建立第三层，第四层…. 缺点：对小文件的访问任然需要多次的I&#x2F;O操作 <strong>混合索引</strong>：多种索引分配方式相结合。例如，一个文件的顶级索引表中，既包含<strong>直接地址索引</strong>（直接指向数据块），又包含<strong>一级间接索引</strong>（指向单层索引表），还包含<strong>两级间接索引</strong>（指向两层索引表） <strong>超级超级超级重要的考点</strong>：</p><ol><li>要会根据多层索引，混合索引的结构计算出文件的最大长度（key:各级索引表最大不能超过一个块）</li><li>要能分析访问某个数据块所需要读磁盘的次数（key:FCB中会存有指向顶级索引块的指针，因此根据FCB可以读入顶级索引块，每次读入下一级的索引块都要进行一次磁盘操作，另外要注意题目条件——顶级索引块是否已经调入内存）</li></ol><h3 id="4-1-6-文件存储空间管理"><a href="#4-1-6-文件存储空间管理" class="headerlink" title="4.1_6 文件存储空间管理"></a>4.1_6 文件存储空间管理</h3><h5 id="（1）存储空间的划分和初始化"><a href="#（1）存储空间的划分和初始化" class="headerlink" title="（1）存储空间的划分和初始化"></a>（1）存储空间的划分和初始化</h5><p>按照windows操作系统的时候，一个必经的步骤是——为磁盘分区（C：盘,D:盘,E:盘） 存储空间的划分：将物理磁盘划分成一个一个的<strong>文件卷</strong>（逻辑卷，逻辑盘） <strong>目录区</strong>：主要存放文件目录信息（PCB）和磁盘存储空间管理的信息 <strong>文件区</strong>：存放文件数据</p><h5 id="（2）存储空间管理——空闲表法"><a href="#（2）存储空间管理——空闲表法" class="headerlink" title="（2）存储空间管理——空闲表法"></a>（2）存储空间管理——空闲表法</h5><p>适用于“连续分配方式” <img src="https://i.loli.net/2020/09/04/Uok5jiH6erpCBc8.png" alt="image-20200904091741314"></p><h5 id="（3）存储空间管理——空闲链表法"><a href="#（3）存储空间管理——空闲链表法" class="headerlink" title="（3）存储空间管理——空闲链表法"></a>（3）存储空间管理——空闲链表法</h5><p>空闲盘块链适用于离散分配结构 空闲盘区链适用于离散&#x2F;连续分配结构 <img src="https://i.loli.net/2020/09/04/94ZjHAC1r5dpQRK.png" alt="image-20200904092058825"></p><h5 id="（4）存储空间管理——位示图法"><a href="#（4）存储空间管理——位示图法" class="headerlink" title="（4）存储空间管理——位示图法"></a>（4）存储空间管理——位示图法</h5><p>连续&#x2F;离散分配都适用 <img src="https://i.loli.net/2020/09/04/t3R72OYSuUEDzGs.png" alt="image-20200904092715258"></p><h5 id="（5）成组链接法"><a href="#（5）成组链接法" class="headerlink" title="（5）成组链接法"></a>（5）成组链接法</h5><p>空闲表，空闲链表法不适用于大型文件系统，因为空闲表或空闲链表可能很大,uinx操作系统中采用了成组链接法对磁盘空闲块进行管理 文件卷的目录区专门有一个磁盘块作为“超级块”，当系统启动时将超级块读入内存。并且要保证内存与外存中的“超级块”数据一致 <img src="https://i.loli.net/2020/09/04/QcKmb1o8ANdDjt2.png" alt="image-20200904093544108"></p><h3 id="4-1-7-文件的基本操作"><a href="#4-1-7-文件的基本操作" class="headerlink" title="4.1_7 文件的基本操作"></a>4.1_7 文件的基本操作</h3><h5 id="（1）-创建文件"><a href="#（1）-创建文件" class="headerlink" title="（1） 创建文件"></a>（1） 创建文件</h5><p><img src="https://i.loli.net/2020/09/04/FWIHyrpfJ3Znivm.png" alt="image-20200904094654797"></p><h5 id="（2）删除文件"><a href="#（2）删除文件" class="headerlink" title="（2）删除文件"></a>（2）删除文件</h5><p><img src="https://i.loli.net/2020/09/04/m7Osj1UbrdezQEi.png" alt="image-20200904094842816"></p><h5 id="（3）打开文件"><a href="#（3）打开文件" class="headerlink" title="（3）打开文件"></a>（3）打开文件</h5><p><img src="https://i.loli.net/2020/09/04/FsRGWIn7ZON2YSa.png" alt="image-20200904095118188"> <img src="https://i.loli.net/2020/09/04/WMjFnyt4ad6kmsP.png" alt="image-20200904095315407"></p><h5 id="（4）关闭文件"><a href="#（4）关闭文件" class="headerlink" title="（4）关闭文件"></a>（4）关闭文件</h5><p><img src="https://i.loli.net/2020/09/04/dSqNcYj4VZnyuhr.png" alt="image-20200904095545810"></p><h5 id="（5）读文件"><a href="#（5）读文件" class="headerlink" title="（5）读文件"></a>（5）读文件</h5><p><img src="https://i.loli.net/2020/09/04/LPR8EZvqXSyUdjI.png" alt="image-20200904095759870"></p><h5 id="（6）写文件"><a href="#（6）写文件" class="headerlink" title="（6）写文件"></a>（6）写文件</h5><p><img src="https://i.loli.net/2020/09/04/zlyhIadC2O8qMvA.png" alt="image-20200904095956756"></p><h3 id="4-1-8-文件共享"><a href="#4-1-8-文件共享" class="headerlink" title="4.1_8 文件共享"></a>4.1_8 文件共享</h3><p>注意：多个用户共享同一个文件，意味着系统中只有一份文件（注意与复制的区别）</p><h5 id="（1）基于索引结点的共享方式（硬链接）"><a href="#（1）基于索引结点的共享方式（硬链接）" class="headerlink" title="（1）基于索引结点的共享方式（硬链接）"></a>（1）基于索引结点的共享方式（硬链接）</h5><p><img src="https://i.loli.net/2020/09/04/VeHoTKj6vLXO4SW.png" alt="image-20200904100651198"></p><h5 id="（2）基于符号链的共享方式（软链接）"><a href="#（2）基于符号链的共享方式（软链接）" class="headerlink" title="（2）基于符号链的共享方式（软链接）"></a>（2）基于符号链的共享方式（软链接）</h5><p><img src="https://i.loli.net/2020/09/04/LPogt9aUsRfxF6w.png" alt="image-20200904100939326"></p><h3 id="4-1-9-文件保护"><a href="#4-1-9-文件保护" class="headerlink" title="4.1_9 文件保护"></a>4.1_9 文件保护</h3><h5 id="（1）口令保护"><a href="#（1）口令保护" class="headerlink" title="（1）口令保护"></a>（1）口令保护</h5><p>为文件设置一个口令，用户请求访问该文件时必须提供”口令“（口令存储在FCB或索引节点中） 优点：保存口令的开销空间不多，验证口令的时间开销也很少 群点：正确口令存放在系统内部，不顾安全</p><h5 id="（2）加密保护"><a href="#（2）加密保护" class="headerlink" title="（2）加密保护"></a>（2）加密保护</h5><p>使用某个“密码”对文件进行加密，在访问文件时需要提供正确的“密码”才能对文件进行正确的解密 eg:异或加密 优单：保密性强，不需要在系统中存储密码 缺点：编码&#x2F;译码或者说加密&#x2F;解密要花费一定的时间</p><h5 id="（3）访问控制"><a href="#（3）访问控制" class="headerlink" title="（3）访问控制"></a>（3）访问控制</h5><p>在每个文件的FCB(或索引节点)增加一个访问控制表，该表记录了各个用户可以对文件执行哪些操作 <img src="https://i.loli.net/2020/09/04/hgOw5D8NBIS76zr.png" alt="image-20200904102232133"> 精简的访问列表：一个系统的用户很多时，对用户进行分组 如：系统管理员，文件主，文件主的伙伴…… 优点：实现灵活，可以实现复杂的文件保护功能</p><h3 id="4-1-10-文件系统的层级结构"><a href="#4-1-10-文件系统的层级结构" class="headerlink" title="4.1_10 文件系统的层级结构"></a>4.1_10 文件系统的层级结构</h3><p><img src="https://i.loli.net/2020/09/04/A2uaW7IlPpo9JUG.png" alt="image-20200904103452518"> 例子辅助记忆：假设某用户请求删除“D&#x2F;学生信息.xlsx”的最后100条记录 <img src="https://i.loli.net/2020/09/04/JxLWcnwv2zTR8Is.png" alt="image-20200904103838676"></p><h3 id="4-2-1-磁盘的结构"><a href="#4-2-1-磁盘的结构" class="headerlink" title="4.2_1 磁盘的结构"></a>4.2_1 磁盘的结构</h3><h5 id="（1）磁盘，磁道，扇区"><a href="#（1）磁盘，磁道，扇区" class="headerlink" title="（1）磁盘，磁道，扇区"></a>（1）磁盘，磁道，扇区</h5><p><img src="https://i.loli.net/2020/09/04/563Cq4gVynMrKUs.png" alt="image-20200904105605078"></p><h5 id="（2）如何在磁盘中读-x2F-写数据"><a href="#（2）如何在磁盘中读-x2F-写数据" class="headerlink" title="（2）如何在磁盘中读&#x2F;写数据"></a>（2）如何在磁盘中读&#x2F;写数据</h5><p>需要把“磁头”移动到想要读&#x2F;写的扇区所在的磁道，磁盘会转起来，让目标扇区从磁头下面划过，才能完成对扇区的读&#x2F;写操作</p><h5 id="（3）盘面，柱面"><a href="#（3）盘面，柱面" class="headerlink" title="（3）盘面，柱面"></a>（3）盘面，柱面</h5><p><img src="https://i.loli.net/2020/09/04/vC6cElysRXpDYMA.png" alt="image-20200904110115393"> <strong>磁盘的物理地址 （柱面号，盘面号，扇区号）</strong></p><h5 id="（4）磁盘的分类"><a href="#（4）磁盘的分类" class="headerlink" title="（4）磁盘的分类"></a>（4）磁盘的分类</h5><p>按磁头是否可以移动：移动头磁盘，固定头磁盘 盘片是否可以更换：固定盘磁盘，可换盘磁盘</p><h3 id="4-2-2-磁盘调度算法"><a href="#4-2-2-磁盘调度算法" class="headerlink" title="4.2_2 磁盘调度算法"></a>4.2_2 磁盘调度算法</h3><h5 id="（1）一次磁盘读-x2F-写操作需要的时间"><a href="#（1）一次磁盘读-x2F-写操作需要的时间" class="headerlink" title="（1）一次磁盘读&#x2F;写操作需要的时间"></a>（1）一次磁盘读&#x2F;写操作需要的时间</h5><p>**寻找时间（寻道时间）T(s)**：(s为下标，并非括号)在读&#x2F;写数据前，将磁头移动到指定磁道所花的时间 ① <strong>启动磁头臂</strong>需要的时间 假设耗时为 s ② <strong>移动磁头</strong>也是需要时间的，假设磁头均匀移动，每跨过一个磁道耗时为m，总共需要跨越n条磁道 寻道时间 T(s) &#x3D; s + m * n **延迟时间T(R)**：通过旋转磁盘，使磁头定位到目标扇区所需的时间。设磁盘转速为r(单位：转&#x2F;秒)则平均所需要的延迟时间 T(R) &#x3D; (1&#x2F;2) * (1&#x2F;r) &#x3D; 1&#x2F;2r **传输时间T(t)**：从磁盘读出或向磁盘写入数据所经历的时间，假设磁盘转速为r，此时读&#x2F;写的字节数为b,每个磁道上的字节为N。则传输时间 T(t) &#x3D; (1&#x2F;r)*(b&#x2F;n) &#x3D; b&#x2F;(rN)</p><h5 id="（2）先来先服务算法（FCFS）"><a href="#（2）先来先服务算法（FCFS）" class="headerlink" title="（2）先来先服务算法（FCFS）"></a>（2）先来先服务算法（FCFS）</h5><p>根据进程请求访问磁盘的先后顺序进行调度 <img src="https://i.loli.net/2020/09/08/wDqEGckp5uW9vHe.png" alt="image-20200904111943459"></p><h5 id="（3）最短寻找时间优先（SSTF）"><a href="#（3）最短寻找时间优先（SSTF）" class="headerlink" title="（3）最短寻找时间优先（SSTF）"></a>（3）最短寻找时间优先（SSTF）</h5><p>SSTF算法会优先处理的磁道是与当前磁头最近的磁道。可以保证每次的寻道时间最短，但不能保证总的寻道时间最短（贪心算法思想，只选择眼前最优，但是总体未必最优） <img src="https://i.loli.net/2020/09/04/MdURWJCOciSr4Fq.png" alt="image-20200904135914671"></p><h5 id="（4）扫描算法（SCAN）"><a href="#（4）扫描算法（SCAN）" class="headerlink" title="（4）扫描算法（SCAN）"></a>（4）扫描算法（SCAN）</h5><p>SSTF算法会产生饥饿的原因在于:磁头有可能在一个小区域内来回来去地移动。为了防止这个问题， 可以规定，只有<strong>磁头移动到最外侧磁道的时候才能往内移动</strong>，<strong>移动到最内侧磁道的时候才能往外移</strong> <strong>动</strong>。这就是<strong>扫描算法（SCAN）</strong>的思想。由于磁头移动的方式很像电梯，因此也叫<strong>电梯算法</strong>。 <img src="https://i.loli.net/2020/09/04/X8oUjhPVkCElWfT.png" alt="image-20200904140425773"></p><h5 id="（5）LOOK-调度算法"><a href="#（5）LOOK-调度算法" class="headerlink" title="（5）LOOK 调度算法"></a>（5）LOOK 调度算法</h5><p>扫描算法（SCAN）中，只有到达最边上的磁道时才能改变磁头移动方向，事实上，处理了184号磁 道的访问请求之后就不需要再往右移动磁头了。LOOK调度算法就是为了解决这个问题，<strong>如果在磁</strong> <strong>头移动方向上已经没有别的请求，就可以立即改变磁头移动方向</strong>。(边移动边观察，因此叫LOOK) <img src="https://i.loli.net/2020/09/04/bdhyTAi62a7U3uG.png" alt="image-20200904140558121"></p><h5 id="（6）循环扫描算法（C-SCAN）"><a href="#（6）循环扫描算法（C-SCAN）" class="headerlink" title="（6）循环扫描算法（C-SCAN）"></a>（6）循环扫描算法（C-SCAN）</h5><p>SCAN算法对于各个位置磁道的响应频率不平均，而<strong>C-SCAN</strong>算法就是为了解决这个问题。规定只有 磁头朝某个特定方向移动时才处理磁道访问请求，而<strong>返回时直接快速移动至起始端而不处理任何请</strong> <strong>求。</strong> <img src="https://i.loli.net/2020/09/04/NRpsyZIumA3EGbV.png" alt="image-20200904140926271"></p><h5 id="（7）C-LOOK-算法"><a href="#（7）C-LOOK-算法" class="headerlink" title="（7）C-LOOK 算法"></a>（7）C-LOOK 算法</h5><p>C-SCAN算法的主要缺点是只有到达最边上的磁道时才能改变磁头移动方向，并且磁头返回时不一定 需要返回到最边缘的磁道上。C-LOOK算法就是为了解决这个问题。如果磁头移动的方向上已经没有 磁道访问请求了，就可以立即让磁头返回，并且磁头只需要返回到有磁道访问请求的位置即可。</p><h3 id="4-2-3-减少延迟时间的方法"><a href="#4-2-3-减少延迟时间的方法" class="headerlink" title="4.2_3 减少延迟时间的方法"></a>4.2_3 减少延迟时间的方法</h3><p><img src="https://i.loli.net/2020/09/04/scK4f7knrxNQAjI.png" alt="image-20200904141542819"></p><h5 id="（1）减少延迟时间的方法：交替编号"><a href="#（1）减少延迟时间的方法：交替编号" class="headerlink" title="（1）减少延迟时间的方法：交替编号"></a>（1）减少延迟时间的方法：交替编号</h5><p>让逻辑上相邻的扇区在物理上有一定的间隔，可以使读取连续的逻辑扇区所需要的延迟时间更少</p><h5 id="（2）磁盘地址结构设计"><a href="#（2）磁盘地址结构设计" class="headerlink" title="（2）磁盘地址结构设计"></a>（2）磁盘地址结构设计</h5><p>读取地址连续的磁盘块时，采用（柱面号，盘面号，扇区号）的地址结构可以减少磁头移动消耗的时间</p><h5 id="（3）减少延迟时间的方法：错位命名"><a href="#（3）减少延迟时间的方法：错位命名" class="headerlink" title="（3）减少延迟时间的方法：错位命名"></a>（3）减少延迟时间的方法：错位命名</h5><p><img src="https://i.loli.net/2020/09/04/5yMhUtZOnwjsv31.png" alt="image-20200904142841311"></p><h3 id="4-2-4-磁盘的管理"><a href="#4-2-4-磁盘的管理" class="headerlink" title="4.2_4 磁盘的管理"></a>4.2_4 磁盘的管理</h3><h5 id="（1）磁盘初始化"><a href="#（1）磁盘初始化" class="headerlink" title="（1）磁盘初始化"></a>（1）磁盘初始化</h5><p><img src="https://i.loli.net/2020/09/04/xndMuyCFl6pHbct.png" alt="image-20200904151035019"></p><h5 id="（2）引导块"><a href="#（2）引导块" class="headerlink" title="（2）引导块"></a>（2）引导块</h5><p><img src="https://i.loli.net/2020/09/08/d36EeD4alfoYAqF.png" alt="image-20200904153156103"></p><h5 id="（3）坏块的管理"><a href="#（3）坏块的管理" class="headerlink" title="（3）坏块的管理"></a>（3）坏块的管理</h5><p>简单磁盘：逻辑格式化时将坏块标记出来 复杂的磁盘：磁盘控制块维护一个坏块链，并管理备用扇区</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三.内存</title>
      <link href="/article/1535395b.html"/>
      <url>/article/1535395b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>内存基础知识</p><p>基本分页存储</p><p>基本分段存储</p><p>虚拟内存 - 页面置换算法</p></blockquote><span id="more"></span><h3 id="3-1-1-内存的基础知识"><a href="#3-1-1-内存的基础知识" class="headerlink" title="3.1_1 内存的基础知识"></a>3.1_1 内存的基础知识</h3><h5 id="（1）什么是内存，有什么作用"><a href="#（1）什么是内存，有什么作用" class="headerlink" title="（1）什么是内存，有什么作用"></a>（1）什么是内存，有什么作用</h5><p>内存是用于<strong>存放数据的硬件</strong>。程序在执行前需要先放到内存中才能被CPU处理</p><p>思考：在多道处理环境下，系统中会有多个程序并发执行，也就是会有多个程序的数据需要存放到内存中，那么如何区分各个程序的数据是放在什么地方的呢？</p><p>补充知识：几个常用的数量单位</p><p>一台手机&#x2F;电脑有4GB的内存，是什么意思？</p><p>是指该内存中可以存放4 * 2^30 个字节，如果是按字节址的话，也就是有 2^32个“小房间”</p><blockquote><p>2^10 &#x3D; 1k</p><p>2^10 &#x3D; 1M</p><p>2^30 &#x3D; 1G</p></blockquote><p>有些题目会告诉我们内存的大小，让我们确定地址长度应该是多少（即需要多少个二进制位才能表示对应数目的存储单元）</p><h5 id="（2）逻辑地址-VS-物理地址"><a href="#（2）逻辑地址-VS-物理地址" class="headerlink" title="（2）逻辑地址 VS 物理地址"></a>（2）逻辑地址 VS 物理地址</h5><p>编译时产生的指令只关心“相对地址”，实际放入内存中再想办法根据起始位置得到“绝对地址”</p><h5 id="（3）写程序到程序运行"><a href="#（3）写程序到程序运行" class="headerlink" title="（3）写程序到程序运行"></a>（3）写程序到程序运行</h5><p>编译：由编译程序将用户源代码编译成若干个<strong>目标模块</strong>（编译就是把<strong>高级语言翻译为机器语言</strong>）</p><p>链接：由链接程序将编译后形成的一组目标模块，以及所需库函数一起，形成一个完整的<strong>装入模块</strong>（可执行文件）</p><p>装入（装载）：由装入程序将装入模块放入内存运行</p><h5 id="（4）装入的三种方式"><a href="#（4）装入的三种方式" class="headerlink" title="（4）装入的三种方式"></a>（4）装入的三种方式</h5><p>（三种完成逻辑地址到物理地址的转换）</p><p>1.绝对定位</p><p><strong>绝对装入</strong>，在编译时，如果知道程序将放到内存中的哪个位置，编译程序将产生绝对地址的目标代码，装入程序按照装入模板中的地址，将程序装入内存。</p><p>绝对装入只使用与单道批处理系统，程序中使用的绝对地址，可在编译或汇编时给出，也可由程序员直接赋予。通常情况下都是编译或汇编的时候转换为绝对地址</p><p>2.静态重定位</p><p>静态重定位:又称<strong>可重定位装入</strong>。编译、链接后的装入模块的地址都是从o开始的，指令中使用的地址、数据存放的地址都是相对于起始地址而言的逻辑地址。可根据内存的当前情况，将装入模块装入到内存的适当位置。装入时对地址进行“<strong>重定位</strong>”，将逻辑地址变换为物理地址（地址变换是在装入时一次完成的）。</p><p>静态重定位的特点时作业在装入内存时，必须分配其要求的全部内存空间，如果没有足够的内存，就不能装入该作业。作业一旦进入内存后，在运行期间就不能移动，也不能申请内存空间。</p><p>3.动态重定位</p><p>动态重定位:又称<strong>动态运行时装入</strong>。编译、链接后的装入模块的地址都是从o开始的。装入程序把装入模块装入内存后，并不会立即把逻辑地址转换为物理地址，而是把<strong>地址转换推迟到程序真正要执行</strong>时才进行。因此装入内存后所有的地址依然是逻辑地址。这种方式需要一个重定位寄存器的支持。</p><p>采用动态重定位时允许程序在内存中发生移动</p><p>并且可将程序分配到不连续的存储区中;在程序运行前只需装入它的部分代码即可投入运行，然后在程序运行期间，根据需要动态中请分配内存;便于程序段的共享，可以向用户提供一个比存储空间大得多的地址空间。</p><h5 id="（5）链接的三种方式"><a href="#（5）链接的三种方式" class="headerlink" title="（5）链接的三种方式"></a>（5）链接的三种方式</h5><p>1.静态链接</p><p>在程序运行之前，先将各目标模块及它们所需要的库函数连接成一个完整的可执行文件（装入模块），之后不再拆开</p><p>2.装入时动态链接</p><p>将各目标模块装入内存时，边装入边链接的链接方式</p><p>3.运行时动态链接</p><p>在程序执行中需要改目标模块时，才对它进行链接。其优点是便于修改和更新，便于实现对目标模块的共享</p><h3 id="3-1-2-内存管理的概念"><a href="#3-1-2-内存管理的概念" class="headerlink" title="3.1_2 内存管理的概念"></a>3.1_2 内存管理的概念</h3><ol><li><p>操作系统负责<strong>内存空间的分配与回收</strong></p></li><li><p>操作系统需要提供某种技术从逻辑上对<strong>内存空间进程扩充</strong></p></li><li><p>操作系统需要提供地址转换功能，负责程序的<strong>逻辑地址与物理地址的转换</strong></p></li><li><p>操作系统需要提供<strong>内存保护</strong>功能。保证各进程在各自存储空间内运行，互不干扰</p><p>内存保护的两种方法</p><p>方法1：在cpu中<strong>设置一对上，下限寄存器</strong>，存放进程的上，下限地址，进程的指令要访问某个地址时，cpu检查是否越界</p><p>方法2：采用<strong>重定位寄存器</strong>（又称基址寄存器）和<strong>界地址寄存器</strong>（又称限长寄存器）进行越界检查。重定向寄存器存放的是<strong>进程的起始物理地址</strong>，界地址寄存器存放的是<strong>进程的最大逻辑地址</strong></p></li></ol><h3 id="3-1-3-覆盖与交换"><a href="#3-1-3-覆盖与交换" class="headerlink" title="3.1_3 覆盖与交换"></a>3.1_3 覆盖与交换</h3><h5 id="（1）覆盖技术"><a href="#（1）覆盖技术" class="headerlink" title="（1）覆盖技术"></a>（1）覆盖技术</h5><p>早期的计算机内存很少，比如IBM推出的第一台PC机最大只支持1mb大小的内存，常常出现内存不够的情况</p><p>覆盖技术的思想:将程序分为多个段（多个模块）。常用的段常驻内存，不常用的段在需要时调入内存。内存中分为一个“<strong>固定区</strong>”和若干个“<strong>覆盖区</strong>”。</p><p>需要常驻内存的段放在“固定区”中，调入后就不再调出（除非运行结束）不常用的段放在“覆盖区”，需要用到时调入内存，用不到时调出内存</p><p>缺点：<strong>必须由程序员声明覆盖结构</strong>，操作系统完成自动覆盖，对<strong>用户不透明</strong>，增加了编程的负担。覆盖技术只用一早期的操作系统中，现在已经成为历史</p><h5 id="（2）交换技术"><a href="#（2）交换技术" class="headerlink" title="（2）交换技术"></a>（2）交换技术</h5><p>交换（对换）技术的设计思想:内存空间紧张时，系统将内存中某些进程暂时<strong>换出</strong>外存，把外存中某些已具备运行条件的进程<strong>换入</strong>内存（进程在内存与磁盘间动态调度）</p><p>中级调度（内存调度），就是要决定将哪个处于挂机状态的进程准备调入内存</p><p>暂时换出外存等待的进程状态称为挂起状态（挂起态）</p><p>挂起态又可以进一步的分为就绪挂起和阻塞挂起两种状态</p><p>思考？</p><p>1.应该在外存（磁盘）的什么位置保存被换出的进程？</p><p>具有对换功能的操作系统中，通常把磁盘空间分为<strong>文件区</strong>和<strong>对换区</strong>两部分。文件区主要用于存放文件，主要<strong>追求存储空间的利用率</strong>，因此对文件区空间的管理采用<strong>离散分配方式</strong>;对换区空间只占磁盘空间的小部分，被换出的进程数据就存放在对换区。由于对换的速度直接影响到系统的整体速度，因此对换区空间的管理主要<strong>追求换入换出速度</strong>，因此通常对换区<strong>采用连续分配方式</strong>（学过文件管理章节后即可理解）。总之，<strong>对换区的I&#x2F;o速度比文件区的更快。</strong></p><p>2.什么时候应该进行交换</p><p>交换通常在许多进程运行且内存吃紧时进行，而系统负荷降低就暂停。例如:在发现许多进程运行时经常发生缺页，就说明内存紧张，此时可以换出一些进程;如果缺页率明显下降，就可以暂停换出。</p><p>3.应该换出哪些进程</p><p>可优先换出阻塞进程，优先级低的进程；为了防止低优先级的进程在被调入内存后很快又被换出，有的系统还会考虑进程在内存的驻留时间（注意：<strong>PCB会常驻内存</strong>，不会被换出内存）</p><h3 id="3-1-4-连续分配管理方式"><a href="#3-1-4-连续分配管理方式" class="headerlink" title="3.1_4 连续分配管理方式"></a>3.1_4 连续分配管理方式</h3><p>连续分配：指为用户进程分配的必须是一个<strong>连续的内存空间</strong></p><h5 id="（1）单一连续分配"><a href="#（1）单一连续分配" class="headerlink" title="（1）单一连续分配"></a>（1）单一连续分配</h5><p>在单一连续分配方式中，内存被分为<strong>系统区</strong>和<strong>用户区</strong>。系统区通常位于内存的低地址部分，用于存放操作系统<br>相关数据;用户区用于存放用户进程相关数据。</p><p>内存中只能有一道用户程序，用户独占整个用户区的空间</p><p>优点：实现简单；<strong>无外部碎片</strong>；可以采用覆盖技术扩充内存；不一定需要采取内存保护（早期的PC操作系统MS-DOS）。</p><p>缺点：只能用于单用户，单任务的操作系统；有内部碎片（分配给某内存区域，没有用上的部分就是内部碎片）；存储利用率低。</p><h5 id="（2）固定分区分配"><a href="#（2）固定分区分配" class="headerlink" title="（2）固定分区分配"></a>（2）固定分区分配</h5><p>20世纪60年代出现了支持多道程序的系统，为了能在内存中装入多道程序，且这些程序之间又不会相互干扰，于是将整个<strong>用户空间</strong>划分为<strong>若干个固定大小的分区，在每个分区中只装入一道作业</strong>，这样就形成了最早的、最简单的一种可运行多道程序的内存管理方式。</p><p>分区大小相等:缺乏灵活性，但是很<strong>适合用于用一台计算机控制多个相同对象的场合</strong>（比如:钢铁厂有n个相同的炼钢炉，就可把内存分为n个大小相等的区域存放n个炼钢炉控制程序）</p><p>分区大小不等:增加了灵活性，可以满足不同大小的进程需求。根据常在系统中运行的作业大小情况进行划分（比如:划分多个小分区、适量中等分区、少量大分区）</p><p>操作系统需要建立一个数据结构―一<strong>分区说明表</strong>，来实现各个分区的分配与回收。每个表项对应一个分区，通常分区大小排列。每个表项包括对应分区的<strong>大小、起始地址、状态</strong>（是否已分配）</p><p>优点：实现简单，无外部碎片。</p><p>缺点：a.当用户程序太大时，可能所有分区都不能满足需求，此时不得不采用覆盖技术来解决，但这又会减低性能</p><p>b.会<strong>产生内部碎片</strong>，内存利用率低</p><h5 id="（3）动态分区分配"><a href="#（3）动态分区分配" class="headerlink" title="（3）动态分区分配"></a>（3）动态分区分配</h5><p>动态分区分配又称为可变分区分配。这种分配方式不会预先划分内存分区，而是在进程装入内存时，根据进程的大小动态地建立分区，并使分区的大小正好适合进程的需要。因此系统分区的大小和数目是可变的。(eg:假设某计算机内存大小为64MB，系统区8MB，用户区共56 MB…)</p><p>1.系统要用什么样的数据结构记录内存的使用情况</p><p>​    1.空闲分区表 </p><p>​    2.空闲分区链（双向链表）</p><p>2.当很多个空闲分区都满足需求时，应该分配哪个</p><p>把一个新作业装入内存时，须按照一定的<strong>动态分区分配算法</strong>，从空闲分区表（或空闲分区链）中选出一个分区分配给该作业。由于分配算法算法对系统性能有很大的影响，因此人们对它进行了广泛的研究。</p><p>3.如何进行分区的分配和回收操作</p><p>相邻的空闲区间需要合并</p><p>动态分区分配没有内部碎片，但是有外部碎片。</p><p>内部碎片：分配给某进程的内存区域中，有些部分没有用上</p><p>外部碎片：是指内存中的某些空间分区由于太小而难以利用</p><p>可以通过<strong>紧凑</strong>（拼凑，Compaction）技术来解决外部碎片</p><h3 id="3-1-5-动态分区分配算法"><a href="#3-1-5-动态分区分配算法" class="headerlink" title="3.1_5 动态分区分配算法"></a>3.1_5 动态分区分配算法</h3><p>动态分区分配算法：在动态分区分配方式中，当很多个空闲分区都能满足需求时，应该选择哪个分区进行分配？</p><h5 id="（1）首次适应算法"><a href="#（1）首次适应算法" class="headerlink" title="（1）首次适应算法"></a>（1）首次适应算法</h5><p><strong>算法思想</strong>：每次都从低地址开始查找，找到第一个能满足大小的空闲分区</p><p><strong>如何实现</strong>：<strong>空闲分区以地址递增的次序排列</strong>。每次分配内存时按顺序查找<strong>空闲分区</strong>表（空闲分区链），找到大小满足要求的<strong>第一个</strong>空闲分区</p><h5 id="（2）最佳适应算法"><a href="#（2）最佳适应算法" class="headerlink" title="（2）最佳适应算法"></a>（2）最佳适应算法</h5><p><strong>算法思想</strong>：由于动态分区是一种连续分配方式，为各进程分配的空间必须是连续的一整片区域。因此为了保证当“大进程”到来时能有连续的大片空间，可以尽可能多的留下大片的空闲区，有限选择更小的空闲区</p><p><strong>如何实现</strong>:空闲分区按<strong>容量递增次序链接</strong>。每次分配内存时顺序查找空闲分区链（或空闲分区<br>表），找到大小能满足要求的第一个空闲分区。</p><p>缺点：每次都选用最小的分区进行分配，会留下越来越多，很小的难以利用的内存块，会产生很多的外部碎片</p><h5 id="（3）最坏适应算法（最大适应算法）"><a href="#（3）最坏适应算法（最大适应算法）" class="headerlink" title="（3）最坏适应算法（最大适应算法）"></a>（3）最坏适应算法（最大适应算法）</h5><p><strong>算法思想</strong>:为了解决最佳适应算法的问题――即留下太多难以利用的小碎片，可以在每次分配时优先使用最大的连续空闲区，这样分配后剩余的空闲区就不会太小，更方便使用。<br><strong>如何实现</strong>:空闲分区按容量递减次序链接。每次分配内存时顺序查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。</p><p>缺点：没次都选用最大的分区进行分配，虽然可以让分配所留下的空闲区更大，更可用，但是这种分配方式会导致连续较大的空间被迅速用完。如果之后有“大进程”到达，就没有可以分配的内存空间了</p><h5 id="（4）邻近适应算法"><a href="#（4）邻近适应算法" class="headerlink" title="（4）邻近适应算法"></a>（4）邻近适应算法</h5><p><strong>算法思想</strong>:首次适应算法每次都从链头开始查找的。这可能会导致低地址部分出现很多小的空闲分区，而每次分配查找时，都要经过这些分区，因此也增加了查找的开销。如果每次都从上次查找结束的位置开始检索，就能解决上述问题。</p><p><strong>如何实现</strong>:空闲分区以地址递增的顺序排列（可排成一个循环链表）。每次分配内存时从上次查找结束的位置开始查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。</p><p>首次适应算法每次都要从头查找，每次都需要检索低地址的小分区。但是这种规则也决定了当低地址部分有更小的分区可以满足需求时，会更有可能用到低地址部分的小分区，也会更有可能把高地址部分的天分区保留下来（最佳适应算法的优点）<br>邻近适应算法的规则可能会导致无论低地址、高地址部分的空闲分区都有相同的概率被使用，也就导致了高地址部分的大分区更可能被使用，划分为小分区，最后导致无大分区可用（最大适应算法的缺点)</p><h3 id="3-1-6-基本分页存储管理的基本概念"><a href="#3-1-6-基本分页存储管理的基本概念" class="headerlink" title="3.1_6 基本分页存储管理的基本概念"></a>3.1_6 基本分页存储管理的基本概念</h3><p>思考：连续分配方式的缺点</p><p>1.固定分区分配：缺乏灵活性，会产生大量的内部碎片，内存利用率很低</p><p>2.动态分区分配：会产生很多外部碎片，虽然可以使用“紧凑”技术来处理，但是“紧凑”的时间代价很高</p><p>基于这一思想，产生了“非连续分配方式”，或称为“离散分配方式”</p><p>非连续分配：为用户进程分配的可以是一些<strong>分散的内存空间</strong></p><h5 id="（1）分页存储管理的基本概念"><a href="#（1）分页存储管理的基本概念" class="headerlink" title="（1）分页存储管理的基本概念"></a>（1）分页存储管理的基本概念</h5><p>将内存空间分为一个个<strong>大小相等的分区</strong>（比如:每个分区4KB），每个分区就是一个“<strong>页框</strong>”，或称“<strong>页帧</strong>”、“<strong>内存块</strong>”、<strong>“物理块</strong>”。每个页框有一个编号，即“页框号”（或者“内存块号”气、“页帧号”、“物理块号”）页框号从o开始。</p><p>将用户进程的地址空间也分为与页框大小相等的一个个区域，称为“<strong>页</strong>”或“<strong>页面</strong>”。每个页面也有一个编号，即“页号”页号也是从o开始。</p><p>操作系统以页框为单位为各个进程分配内存空间。进程的每个页面分别放入一个页框中。也就是说，进程的页面与内存的页框有一—对应的关系。</p><p>思考：如何实现地址的转换</p><p>1.计算逻辑地址对应的<strong>页号</strong></p><p>​    <strong>页号</strong> &#x3D; 逻辑地址&#x2F;页面长度（取整数部分）</p><p>2.要知道<strong>页号对应的页面在内存中的起始地址</strong></p><p>​    操作系统需要使用某种数据结构记录进程各个界面的起始位置</p><p>3.要算出逻辑地址在<strong>页面内的“偏移量”</strong></p><p>​    <strong>页内偏移量</strong> &#x3D; 逻辑地址 % 页面长度（取余数）</p><p>4.<strong>物理地址&#x3D; 页面地址 + 页内偏移量</strong></p><h5 id="（2）逻辑地址结构"><a href="#（2）逻辑地址结构" class="headerlink" title="（2）逻辑地址结构"></a>（2）逻辑地址结构</h5><p>假设用32个二进制位表示逻辑地址，页面大小为2^12 &#x3D; 4096b &#x3D; 4 kb</p><p>地址结构包换两个部分：前一部分为<strong>页号</strong>，后一部分为<strong>页内偏移量</strong>。如地址长度为32位，其中0-11为“页内偏移量”；12-31位为“页号”</p><p>结论:如果每个页面大小为2^kB，用二进制数表示逻辑地址，则末尾K位即为页内偏移量，其余部分就是页号</p><h5 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h5><p>为了知道进程的每个页面在内存中存放的位置，操作系统要为<strong>每一个进程建立一张页表</strong></p><p><img src="https://i.loli.net/2020/09/02/BR6I3hT2HJVzAcg.png" alt="image-20200901094757345"></p><p>1.一个进程对应一张页表<br>2.进程的每一页对应一个页表项<br>3.每个页表项由“页号”和“块号”组成<br>4.页表记录进程页面和实际存放的内存块之间的对应关系<br>5.每个页表项的长度是相同的，<strong>页号是“隐含”的</strong></p><h3 id="3-1-7-基本地址变换机构"><a href="#3-1-7-基本地址变换机构" class="headerlink" title="3.1_7 基本地址变换机构"></a>3.1_7 基本地址变换机构</h3><h5 id="（1）基本地址变换机构"><a href="#（1）基本地址变换机构" class="headerlink" title="（1）基本地址变换机构"></a>（1）基本地址变换机构</h5><p>基本地址变换机构可以借助进程的页表将逻辑地址转为物理地址</p><p>通常会在系统内设置一个页表寄存器（PTR）,存放页表在内存中的起始地址F和页表长度M。进程未执行时，页表的初始地址和页表长度放在进程控制块（PCB）中，当进程被调度后，操作系统内核把它们放到页表寄存器中</p><ol><li>根据逻辑地址计算出页号和页内偏移量</li><li>判断页号是否越界</li><li>查询页表，找到页号对应的页表项，确定页面存放的内存块号</li><li>用内存块号和页内偏移量得到物理地址</li><li>访问目标内存单元</li></ol><p>注意：页面的大小是2的整数幂</p><p>设页面大小为L，逻辑地址A到物理地址E的变换过程如下</p><ol><li>计算页号P和页内偏移量W</li><li>比较页号P和页表长度M，如果P&gt;&#x3D;M，则发送越界中断</li><li>页表中页号P对应的页表项地址 &#x3D; 页表项的初始地址 + 页号P * 页表项长度，取出该页表项内容b,就是内存块号</li><li>计算 E &#x3D; b * L + W,得到物理地址E访问（计算机内存块号，页面偏移量用二进制表示拼接）</li></ol><p>例：若页面大小L为1k字节，页号2对应的内存块号b&#x3D;8，将逻辑地址A&#x3D;2500转换为物理地址E</p><p>等价描述：系统<strong>按字节寻址</strong>，逻辑地址结构中，偏移量占10位</p><p>页号P &#x3D; 2500&#x2F;1024 &#x3D; 2</p><p>页内偏移量 &#x3D; 2500 % 1024 &#x3D; 452</p><p>页号2对应的内存块号b&#x3D;8</p><p>E &#x3D; 8 * 1024 + 425 &#x3D; 8644</p><p>在分页存储管理（页式管理）的系统中，只要确定了每个页面的大小，逻辑地址结构就确定了，因此，<strong>页式管理中地址是一维的</strong>，即：只要给出了一个逻辑地址，系统就可以自动的算出页号，页内偏移量两个部分，并不需要显式的告诉系统的逻辑地址中，页内偏移量占多少位</p><h5 id="（2）对页表项大小进行进一步探讨"><a href="#（2）对页表项大小进行进一步探讨" class="headerlink" title="（2）对页表项大小进行进一步探讨"></a>（2）对页表项大小进行进一步探讨</h5><p><img src="https://i.loli.net/2020/09/02/cqwPvBK47oueYlt.png" alt="image-20200901102226656"></p><h3 id="3-1-8-具有快表的地址变换机构"><a href="#3-1-8-具有快表的地址变换机构" class="headerlink" title="3.1_8 具有快表的地址变换机构"></a>3.1_8 具有快表的地址变换机构</h3><h5 id="（1）局部性原理"><a href="#（1）局部性原理" class="headerlink" title="（1）局部性原理"></a>（1）局部性原理</h5><p>时间局部性：如果只选了程序中的某条指令，那么不就后这条指令有可能再次执行；如果某个数据被访问过，不久之后数据很可能再次被访问。（因为程序中存在大量循环）</p><p>空间局部性：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也很有可能被访问（因为很多数据在内存中是连续存储的）</p><p>上小节介绍的基本地址变换机构中，每次要访问一个逻辑地址，都需要查询内存中的页表。由于局部性原理，可能连续很多次查到的都是同一个页表项。既然如此，能否利用这个特性减少访问页表的次数呢?</p><h5 id="（2）什么是快表（TLB）"><a href="#（2）什么是快表（TLB）" class="headerlink" title="（2）什么是快表（TLB）"></a>（2）什么是快表（TLB）</h5><p><strong>快表</strong>，又称<strong>联想寄存器（TLB</strong>）,是一种访问速度比内存快很多的<strong>高速缓冲器</strong>，用来存放当前访问的若干表项，以加速地址变换的过程。于此对应，内存中的页表常称为慢表</p><h5 id="（3）引入快表后，地址的变换过程"><a href="#（3）引入快表后，地址的变换过程" class="headerlink" title="（3）引入快表后，地址的变换过程"></a>（3）引入快表后，地址的变换过程</h5><p><img src="https://i.loli.net/2020/09/02/QoLguU2zXqYbivn.png" alt="image-20200901104537841"></p><h3 id="3-1-9-两级页表"><a href="#3-1-9-两级页表" class="headerlink" title="3.1_9 两级页表"></a>3.1_9 两级页表</h3><h5 id="（1）单级页表存在的问题"><a href="#（1）单级页表存在的问题" class="headerlink" title="（1）单级页表存在的问题"></a>（1）单级页表存在的问题</h5><p>问题1：页表需要连续的存放，因此当页表很大时，需要占用很多个连续的页框</p><p>​    可将长长的页表进行分组，使每个内存块刚好可以放入一个分组（比如上个例子中，页面大小为4KB，每个页表项4B，每个页面可存放1K个页表项，因此每1K个连续的页表项为一组，每组刚好占一个内存块，再将各组离散的 放到各个内存块中）</p><p>​    另外，要为离散分配的页表再建立一张页表，称为“页目录表”，或称外层页表，顶层页表</p><p>问题2：没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的界面</p><p>​    可以在需要访问页面时才把页面调入内存（虚拟存储技术）。可以在页表项增加一个标志位，用于表示该界面是否已经调入内存</p><h5 id="（2）如何实现地址变换"><a href="#（2）如何实现地址变换" class="headerlink" title="（2）如何实现地址变换"></a>（2）如何实现地址变换</h5><p>两级页表结构的逻辑地址结构分为三部分</p><p>一级页号 + 二级页号 + 页内偏移量</p><h5 id="（3）需要注意的几个细节"><a href="#（3）需要注意的几个细节" class="headerlink" title="（3）需要注意的几个细节"></a>（3）需要注意的几个细节</h5><p>1.采用多级页表机制，则<strong>各级页表的大小不能超过一个页面</strong></p><p>例：某系统按照字节寻址，采用40为逻辑地址，页面大小为4KB,页表项大小为4B，假设采用纯页式存储，则需要采用多少级页表，页内偏移量为多少位</p><p>页面大小 4KB &#x3D; 2 ^ 12 B  -&gt; 页内偏移量为12位 -&gt; 页号 28位</p><p>页面大小 2 ^ 12 B  , 页表项大小 4B - &gt; 每个页面可以存放 1024（2^10）个页表项</p><p>因此各级页表最多包含2^10个页表项，需要10位二进制才能表示2^10个页表项，每一级对应页号为10位</p><p>需要三级页表 </p><p>2.两级页表的<strong>访问次数</strong>分析（假设没有快表）</p><p>第一次：页目录表</p><p>第二次：二级页表</p><p>第三次：目标内存单元</p><h3 id="3-1-10-基本分段存储管理方式"><a href="#3-1-10-基本分段存储管理方式" class="headerlink" title="3.1_10 基本分段存储管理方式"></a>3.1_10 基本分段存储管理方式</h3><h5 id="（1）分段"><a href="#（1）分段" class="headerlink" title="（1）分段"></a>（1）分段</h5><p>进程的地址空间：按照程序<strong>自身的逻辑</strong>关系<strong>划分为若干个段</strong>，每个段都有一个段名（在低级语言中，程序员使用段名来编程），<strong>每段从0开始编址</strong></p><p>内存分配规则：以段位单位进行分配，<strong>每个段在内存中占据连续空间</strong>，但<strong>各段之间可以不相邻</strong></p><p>分段系统的逻辑地址由段号（段名）和段内地址（段内偏移量）所组成</p><p>段号的位数决定了每个进程可以分为几个段</p><p>段内地址位数决定了每个段的最大长度是多少</p><h5 id="（2）段表"><a href="#（2）段表" class="headerlink" title="（2）段表"></a>（2）段表</h5><p>为了保证程序的正常运行，必须能从物理内存中找到各个逻辑的存放位置。为此，需要为每个进程建立一张段映射表，简称“段表”</p><p><img src="https://i.loli.net/2020/09/03/UHWgnAcPza6xfiK.png" alt="image-20200903085550875"></p><p>1.每个段对应一个段表项，其中记录了该段在内存中的起始位置（又称“基址”）和段的长度</p><p>2.各个段表项的长度是相同的，因此段号可以是隐含的，不占存储空间（类似页表中的页号）</p><h5 id="（3）地址变换"><a href="#（3）地址变换" class="headerlink" title="（3）地址变换"></a>（3）地址变换</h5><p><img src="https://i.loli.net/2020/09/03/cos8SHfZMwubFJh.png" alt="image-20200903090532708"></p><h5 id="（4）分段，分页管理的对比"><a href="#（4）分段，分页管理的对比" class="headerlink" title="（4）分段，分页管理的对比"></a>（4）分段，分页管理的对比</h5><p><strong>页</strong>是信息的<strong>物理单位</strong>。分页的目的是为了实现离散分配，提高内存利用率。分页仅仅是系统管理上的需要，完全是系统行为，<strong>对用户是不可见的</strong>。</p><p><strong>段</strong>是信息的<strong>逻辑单位</strong>。分段的目的是为了更好的满足用户的需求。一个段通常包含着一组逻辑模块的信息。<strong>分段对用户是可见的</strong>，用户编程时需要显式的给出段名</p><p>页的大小固定且由系统决定，段的长度不固定，决定于用户编写的程序</p><p><strong>分页用户进程地址空间是一维的</strong>，程序员只需给出一个记忆符即可表示一个地址</p><p><strong>分段用户进程地址空间是二维的</strong>，程序员在标识一个地址时，既要给出段名，也要给出段内地址</p><p>分页比分段更容易实现<strong>信息的共享和保护</strong>（页面不是按逻辑模块划分的，很难实现共享）</p><p>不能被修改的代码称为纯代码或可重入代码（不属于临界资源），这样的代码是可以共享的。可修改的代码是不能共享的（比如，有一个代码段中有很多变量，各进程并发的访问可能造成数据不一致）</p><p><img src="https://i.loli.net/2020/09/03/KJ1H6CUXAVPojDF.png" alt="image-20200903091537263"></p><p>访问一个逻辑地址需要几次访存</p><p>也可以使用快表机制，减少内存的访问次数</p><h3 id="3-1-11-段页式管理方式"><a href="#3-1-11-段页式管理方式" class="headerlink" title="3.1_11 段页式管理方式"></a>3.1_11 段页式管理方式</h3><h5 id="（1）分页，分段的优缺点分析"><a href="#（1）分页，分段的优缺点分析" class="headerlink" title="（1）分页，分段的优缺点分析"></a>（1）分页，分段的优缺点分析</h5><p>分页管理：</p><p>优点：内存利用率高，不会产生外部碎片，只会有少量的内部碎片</p><p>缺点：不方便按照逻辑模块实现信息的共享和保护</p><p>分段管理：</p><p>优点：很方便的按照逻辑模块实现信息的共享和保护</p><p>缺点:如果段长太大，为其分配连续空间会很不方便，此外，段式管理会产生外部碎片（可以使用“紧凑”来解决）</p><h5 id="（2）分页-分段-x3D-段页式管理"><a href="#（2）分页-分段-x3D-段页式管理" class="headerlink" title="（2）分页 + 分段 &#x3D; 段页式管理"></a>（2）分页 + 分段 &#x3D; 段页式管理</h5><p><img src="https://i.loli.net/2020/09/03/5gVMbpKWdtsSGfR.png" alt="image-20200903093821088"></p><h5 id="（3）段页式管理的逻辑地址结构"><a href="#（3）段页式管理的逻辑地址结构" class="headerlink" title="（3）段页式管理的逻辑地址结构"></a>（3）段页式管理的逻辑地址结构</h5><p>段页式系统的逻辑地址由段号，页号，（页内）页内偏移量组成</p><p>段号的位数决定了每个进程最多可以分为几个段</p><p>页号决定了每个段最多有几个页</p><p>页内偏移量决定了页面大小&#x2F;内存块大小</p><h5 id="（4）段表，页表"><a href="#（4）段表，页表" class="headerlink" title="（4）段表，页表"></a>（4）段表，页表</h5><p><img src="https://i.loli.net/2020/09/03/SRwmkK9IiVxWAUC.png" alt="image-20200903094250313"></p><h5 id="5-地址转换"><a href="#5-地址转换" class="headerlink" title="(5) 地址转换"></a>(5) 地址转换</h5><p><img src="https://i.loli.net/2020/09/03/PlgqTeQS8kG9UoC.png" alt="image-20200903094714124"></p><h3 id="3-2-1-虚拟内存的基本概念"><a href="#3-2-1-虚拟内存的基本概念" class="headerlink" title="3.2_1 虚拟内存的基本概念"></a>3.2_1 虚拟内存的基本概念</h3><h5 id="（1）传统存储管理方式的特征，缺点"><a href="#（1）传统存储管理方式的特征，缺点" class="headerlink" title="（1）传统存储管理方式的特征，缺点"></a>（1）传统存储管理方式的特征，缺点</h5><p>特征</p><p><strong>一次性</strong>：<strong>作业必须一次性全部装入内存后才能开始运行</strong>，这会造成两个问题：1.作业很大时，不能全部装入内存，导致大作业无法运行；2.当大量的作业要求运行时，由于内存无法容纳所有的作业，因此只有少量作业可以运行，导致多道程序并发度下降</p><p><strong>驻留性</strong>：一旦作业被装入内存，就会<strong>一直驻留在内存</strong>中，直至作业运行结束。事实上，在一个时间段内，只需要访问作业的一小部分资源既可以正常运行，这就导致内存中会驻留大量的，暂时用不到的数据，浪费了宝贵的内存资源</p><h5 id="（2）局部性原理"><a href="#（2）局部性原理" class="headerlink" title="（2）局部性原理"></a>（2）局部性原理</h5><p>时间局部性：如果只选了程序中的某条指令，那么不就后这条指令有可能再次执行；如果某个数据被访问过，不久之后数据很可能再次被访问。（因为程序中存在大量循环）</p><p>空间局部性：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也很有可能被访问（因为很多数据在内存中是连续存储的，并且程序中的指令在内存中也是连续存放的）</p><p><strong>高速缓冲技术的思想</strong>：把近期会频繁访问的数据放到更高速的存储器中，暂时用不到的数据放在更低速的存储器中</p><p>计算机中存储器的层级结构 寄存器–高速缓冲–内存–外存（磁盘，磁带）</p><h5 id="（3）虚拟内存的定义和特征"><a href="#（3）虚拟内存的定义和特征" class="headerlink" title="（3）虚拟内存的定义和特征"></a>（3）虚拟内存的定义和特征</h5><p>基于局部性原理，在程序装入时，可以将程序中很快会用到的部分装入内存，暂时用不到的部分留在外存，就可以让程序开始执行。</p><p>在程序执行的过程中，当访问的信息不在内存时，由操作系统负责将所需要的信息从外存调入内存，然后继续执行程序</p><p>若内存空间不够，由操作系统负责将内存中暂时用不到的信息换出外存。</p><p>在操作系统的管理下，在用户看起来似乎有一个比实际内存大的多的内存，这就是虚拟内存</p><p>易混知识点：</p><p>虚拟内存的最大容量 &#x3D; 计算机的地址结构（cpu的寻址范围）确定的</p><p>虚拟内存的实际容量 &#x3D; min (内存和外存的容量之和，cpu的寻址范围)</p><p>虚拟内存有三个主要特征：</p><p>1.多次性：无需再作业运行时一次性装入内存，而是允许被分多次调入内存</p><p>2.对换性：在作业运行时无需一直常驻内存，而是允许在作业运行的过程中，将作业换入，换出</p><p>3.虚拟性从逻辑上扩充了内存的容量，使用户看到的内存容量远大于实际的容量</p><h5 id="（4）如何实现虚拟内存技术"><a href="#（4）如何实现虚拟内存技术" class="headerlink" title="（4）如何实现虚拟内存技术"></a>（4）如何实现虚拟内存技术</h5><p>虚拟内存技术，允许一个作业分多次调入内存。如果采用连续分配方式，会很不方便实现。因此，虚拟内存的实现需要建立在离散分配的内存管理方式基础上</p><p><img src="https://i.loli.net/2020/09/02/oTMsCSVrlq8W6x3.png" alt="image-20200902094244171"></p><h3 id="3-2-2-请求分页管理方式"><a href="#3-2-2-请求分页管理方式" class="headerlink" title="3.2_2 请求分页管理方式"></a>3.2_2 请求分页管理方式</h3><h5 id="（1）页表机制"><a href="#（1）页表机制" class="headerlink" title="（1）页表机制"></a>（1）页表机制</h5><p><img src="https://i.loli.net/2020/09/02/pYQXabSCnihc7J9.png" alt="image-20200902095007480"></p><h5 id="（2）缺页中断机构"><a href="#（2）缺页中断机构" class="headerlink" title="（2）缺页中断机构"></a>（2）缺页中断机构</h5><p><strong>缺页中断</strong>是因为当前执行的指令想要访问的目标界面未调入内存而产生的，<strong>属于内中断</strong></p><p>一条指令在执行期间，<strong>可能产生多次缺页中断</strong>。（如:copa A to B ,即将逻辑地址A中的数据复制到逻辑地址B，而A，B属于不同的页面，则有可能产生两次中断）</p><h5 id="（3）地址变换机构"><a href="#（3）地址变换机构" class="headerlink" title="（3）地址变换机构"></a>（3）地址变换机构</h5><p>新增步骤1：请求调页（查到页表项时进行判断）</p><p>新增步骤2：页面置换（需要调入页面，但没有空闲内存块时进行）</p><p>新增步骤3：需要修改请求页表中新增的表项</p><h3 id="3-2-3-页面置换算法"><a href="#3-2-3-页面置换算法" class="headerlink" title="3.2_3 页面置换算法"></a>3.2_3 页面置换算法</h3><h5 id="（1）最佳置换算法（OPT）"><a href="#（1）最佳置换算法（OPT）" class="headerlink" title="（1）最佳置换算法（OPT）"></a>（1）最佳置换算法（OPT）</h5><p>最佳置换算法（OPT,Optimal）：每次选择淘汰的界面将是以后不再使用，或者在最长时间内不再被访问的界面，这样可以保证最低的缺页率。</p><p><img src="https://i.loli.net/2020/09/02/S85ALgs4I7fWP3Y.png" alt="image-20200902102056535"></p><p>最佳置换算法可以保证最低的缺页率，但实际上，只有在进程执行的过程中才能知道接下来会访问到哪个界面。操作系统无法提前预判到页面的访问序列，因此，最佳置换算法是无法实现的</p><h5 id="（2）先进先出置换算法（FIFO）"><a href="#（2）先进先出置换算法（FIFO）" class="headerlink" title="（2）先进先出置换算法（FIFO）"></a>（2）先进先出置换算法（FIFO）</h5><p>先进先出置换算法（FIFO）:每次淘汰的页面是最早进入内存的界面</p><p>实现方法：那调入内存的页面根据调入的先后顺序排成一个队列，需要换出页面时选择对头页面即可。队列的最大长度取决于系统为进程分配了多少个内存块</p><p>Belady 异常 – 当为进程分配的物理块数增大时，缺页次数不增反减的异常现象</p><p>只有FIFO算法会产生Belady(贝拉迪)异常，此外，FIFO算法虽然实现简单，但是与算法实际运行时的规律不适应，因为先进入的页面也有可能被经常的访问。因此，算法性能很差</p><h5 id="（3）最近最久未使用算法（LRU）"><a href="#（3）最近最久未使用算法（LRU）" class="headerlink" title="（3）最近最久未使用算法（LRU）"></a>（3）最近最久未使用算法（LRU）</h5><p>最近最久未使用算法（LRU,least recently used）:每次淘汰的页面是<strong>最近最久未使用的页面</strong></p><p>实现方法：赋予每个页面对应的页表项中，用<strong>访问字段记录该页面上次被访问以来经历的时间t</strong>。当需要淘汰一个页面时选择现有页面中t值最大的，即最近最久未使用的页面</p><p><img src="https://i.loli.net/2020/09/08/T14ukRhtBeo5VOw.png" alt="image-20200902103617050"></p><p>该算法的实现需要专门的硬件支持，虽然算法性能好（最接近最佳置换算法），但是实现困难，开销大</p><h5 id="（4）时钟置换算法（CLOCK）"><a href="#（4）时钟置换算法（CLOCK）" class="headerlink" title="（4）时钟置换算法（CLOCK）"></a>（4）时钟置换算法（CLOCK）</h5><p>时钟置换算法（CLOCK）是一种性能和开销较均衡的算法，又称最近未用算法</p><p><strong>简单的CLOCK算法</strong>实现方法：为每一个页面设置一个<strong>访问位</strong>，再将内存中的页面通过链接指针成一个<strong>循环队列</strong>。当某页被访问时，其访问位置为1.当需要淘汰一个页面时，只需要检查页的访问位。如果是0就将该页换出；如果是1，则将它置位0，暂不换出，继续检查下一个页面，若第一轮扫描周中所有的页面都是1，则将这些页面的访问依次置位0后，再进行第二轮扫描（第二轮扫描一定会有访问位为0的页面，因此简单的clock算法选择淘汰一个页面最多会进过两轮扫描）</p><h5 id="（5）改进型的时钟置换算法"><a href="#（5）改进型的时钟置换算法" class="headerlink" title="（5）改进型的时钟置换算法"></a>（5）改进型的时钟置换算法</h5><p>简单的时钟算法仅考虑到一个页面有没有被访问过，事实上，如果淘汰的页面没有被修改过，就不需要执行I&#x2F;0操作写回外存。只有被淘汰的页面被修稿改过时，才需要写回外存。</p><p>因此，除了考虑一个页面最近有没有被访问之外，操作系统还应该考虑页面有没有修改过。<strong>在其他条件都相同时</strong>，应优先淘汰没有修改过的页面，避免I&#x2F;O操作。这就是改进型时钟置换算法的思想。</p><p>修改位 &#x3D; 1 页面被修改过 修改位 &#x3D; 0 页面没有被修改过</p><p>算法规则：将所有可能被置换的页面排成一个循环队列</p><p>第一轮:从当前位置开始扫描到第一个（0,0）的帧用于替换。本轮扫描不修改任何标志位<br>第二轮:若第一轮扫描失败，则重新扫描，查找第一个（0,1）的帧用于替换。本轮将所有扫描过的帧访问位设为0<br>第三轮:若第二轮扫描失败，则重新扫描，查找第一个(0,0）的帧用于替换。本轮扫描不修改任何标志位<br>第四轮:若第三轮扫描失败，则重新扫描，查找第一个（0,1）的帧用于替换。<br>由于第二轮已将所有帧的访问位设为o，因此经过第三轮、第四轮扫描一定会有一个帧被选中，因此<strong>改进型CLOCK置换算法</strong>选择一个淘汰页面最多<strong>会进行四轮扫描</strong>。</p><h3 id="3-2-4-页面分配策略"><a href="#3-2-4-页面分配策略" class="headerlink" title="3.2_4 页面分配策略"></a>3.2_4 页面分配策略</h3><h5 id="（1）页面分配，置换策略"><a href="#（1）页面分配，置换策略" class="headerlink" title="（1）页面分配，置换策略"></a>（1）页面分配，置换策略</h5><p><strong>驻留集</strong>：指请求分页存储管理中给进程分配的物理块的集合。</p><p>在采用了虚拟存储技术的系统中，驻留集大小一般小于进程的总大小</p><p>驻留集太小：导致缺页频繁，系统要花大量的时间来处理缺页，实际用于进程推进的时间很少</p><p>驻留集太大：会导致多道程序的并发度下降，资源利用率降低。所以应该选择一个合适的驻留集大小</p><p><strong>固定分配</strong>：操作系统为每个进程分配一组固定数目的物理块，在进程运行期间不再改变，即，驻留集大小不变</p><p><strong>可变分配</strong>：先为每个进程分配一定数目的物理块，在进程运行期间，可根据情况做适当的增加或减少，即，驻留集大小可变</p><p><strong>局部置换</strong>：发送缺页时只能选择进程自己的物理块进行置换</p><p><strong>全局置换</strong>：可以将操作系统保留的空闲物理块分配给缺页进程，也可以将别的进程持有的物理块置换到外存，再分配给缺页进程</p><p><img src="https://i.loli.net/2020/09/02/nIlAsGoD3aW6fec.png" alt="image-20200902151647112"></p><h5 id="（2）何时调入页面"><a href="#（2）何时调入页面" class="headerlink" title="（2）何时调入页面"></a>（2）何时调入页面</h5><p>1.预调页策略：根据局部性原理，一次调入若干相邻的界面可能比一次调入一个页面更高效。但如果提前调入中的页面大多数都没被访问，则又是低效的。因此可以预测不久之后就可能访问到的页面，将它们预先调入内存，但目前成功率只有50%左右。所以这种策略主要用于进程的首次调入，由程序员指出应该先调入哪些部分</p><p>2.请求调页策略：进程在运行期间发现缺页时才将所缺页面调入内存。由这种策略调入的页面一定会被访问到，但是由于每次只能调入一页，而每次调页都要磁盘I&#x2F;O操作，因此I&#x2F;O开销很大</p><h5 id="（3）从何处调入页面"><a href="#（3）从何处调入页面" class="headerlink" title="（3）从何处调入页面"></a>（3）从何处调入页面</h5><p>1.系统拥有足够的对换区空间；页面的调入，调出都是在内存与对换区之间进行的。这样可以保证页面的调入，调出速度很快。在进程运行前，需要将进程相关的数据从文件区复制到对换区</p><p>2.系统确实足够的对换空间时：凡是不会被修改的数据都直接从文件区调入，由于这些界面不会被修改，因此换出时不用写入磁盘，下次需要时直接再从文件区调出即可。对于可能被修改的部分，换出时需要写回磁盘对换区，下次需要时从对换区调入</p><p>3.unix方式：运行之前进程有关的数据全部放在文件区，因此未使用过的界面，都可以从文件区调入。若被使用过的页面需要换出，则写回对换区，下次需要时再从对换区调入</p><h5 id="（4）抖动（颠簸）现象"><a href="#（4）抖动（颠簸）现象" class="headerlink" title="（4）抖动（颠簸）现象"></a>（4）抖动（颠簸）现象</h5><p>刚刚换入的界面马上又要换出内存，这种频繁的页面调度行为称为抖动，或颠簸。产生抖动的主要原始是进程频繁访问的页面属数目高于可用的物理块数（分配给进程的物理块数不够）</p><p>物理块太少会发生抖动现象，物理块太多又会降低系统整体的并发度，降低吗，某些资源的利用率</p><p>为了研究应该为每个进程分配多少物理块，Denning提出了工作集的概念</p><h5 id="（5）工作集"><a href="#（5）工作集" class="headerlink" title="（5）工作集"></a>（5）工作集</h5><p><strong>工作集</strong>：指在某段时间间隔内，进程实际访问页面的集合</p><p><strong>驻留集</strong>：指请求分页存储管理中给进程分配的物理块的集合。</p><p>操作系统会根据“窗口尺寸”来算出工作集</p><p>工作集大小可能小于窗口尺寸，实际应用中，操作系统可以统计进程的工作集大小，根据工作集大小<br>给进程分配若干内存块。如:窗口尺寸为5，经过一段时间的监测发现某进程的工作集最大为3，那么<br>说明该进程有很好的局部性，可以给这个进程分配3个以上的内存块即可满足进程的运行需要。<br>一般来说，<strong>驻留集大小不能小于工作集大小</strong>，否则进程运行过程中将频繁缺页。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二.进程，处理机调度与死锁（二）</title>
      <link href="/article/bb449d20.html"/>
      <url>/article/bb449d20.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>进程同步，进程互斥</p><p>信号量机制，管程的概念</p><p>死锁</p></blockquote><span id="more"></span><h3 id="2-3-1-进程同步，进程互斥"><a href="#2-3-1-进程同步，进程互斥" class="headerlink" title="2.3_1 进程同步，进程互斥"></a>2.3_1 进程同步，进程互斥</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1.什么是进程同步</span><br><span class="line">    进程的异步，各个并发的进程，以各自独立的，不可预知的速度向前推进</span><br><span class="line"></span><br><span class="line">    同步亦称直接制约关系，它是指为完成某种任务而建立的两个或多个进程，这些进程因为需要在</span><br><span class="line">    某些位置上协调他们的工作次序而产生制约关系，进程间的直接制约关系就是源于他们之间的相互</span><br><span class="line">    合作</span><br><span class="line">2.什么是进程互斥</span><br><span class="line">    进程的“并发”需要“共享”的支持，各个并发执行的进程不可避免的需要共享一些系统资源（比如</span><br><span class="line">    内存，打印机，摄像头这样的I/O设备）</span><br><span class="line"></span><br><span class="line">    我们把一时间段内只允许一个进程使用的资源称为临界资源。许多物理设备（比如摄像头，打印机）</span><br><span class="line">    都属于临界资源。此外还有许多变量，数据，内存缓冲区都属于临界资源</span><br><span class="line"></span><br><span class="line">    对临界资源的访问，必须互斥的进行。互斥，亦称间接制约关系。进程互斥指当一个进程访问某临界</span><br><span class="line">    资源时，另一个想要访问该临界资源的进程必须等待。当前访问临界资源的进程访问结束时，释放</span><br><span class="line">    资源后，另一个进程才能去访问临界资源</span><br><span class="line"></span><br><span class="line">    对临界资源的互斥访问，可以在逻辑上分为四个部分</span><br><span class="line"></span><br><span class="line">    进入区 负责检查是否可以进入临界区，若可进入，则应设置正在访问临界区的标志（上锁），</span><br><span class="line">            以阻止其他进程同时进入临界区</span><br><span class="line">    临界区 访问临界资源的那段代码</span><br><span class="line">    退出区 负责解除正在访问临界资源的标志（解锁）</span><br><span class="line">    剩余区 做其他处理</span><br><span class="line"></span><br><span class="line">    为了实现对临界进程的互斥访问，同时保证系统的整体性，需要遵循以下原则</span><br><span class="line"></span><br><span class="line">    1.空闲让进。临界区空闲时，可以允许一个请求进入临界区的进程立即进入临界区</span><br><span class="line">    2.忙则等待。已经有程序进入临界区时，其他试图进入临界区的进程必须等待</span><br><span class="line">    3.有限等待。对请求访问的进程，应保证在有限的时间内进入临界区</span><br><span class="line">    4.让权等待。当进程不能进入处理机，应立即释放处理机，防止进程忙等待</span><br></pre></td></tr></table></figure><h3 id="2-3-2-进程互斥的软件实现方法"><a href="#2-3-2-进程互斥的软件实现方法" class="headerlink" title="2.3_2 进程互斥的软件实现方法"></a>2.3_2 进程互斥的软件实现方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">Tips:</span><br><span class="line">    1.理解各个算法的思想，原理</span><br><span class="line">    2.结合上小结学习“实现互斥的四个逻辑部分”，重点理解各算法在进入区，退出区都做了什么</span><br><span class="line">    3.分析各算法存在的缺陷（结合“进程互斥的四个原则”进程分析）</span><br><span class="line"></span><br><span class="line">1.单标志法</span><br><span class="line">    算法思想：两个进程在访问完临界区后会把使用临界区的权限转交给另一个进程，也就是说每个进程访问</span><br><span class="line">    临界区的权限只能由另一个进程赋予</span><br><span class="line"></span><br><span class="line">    int turn = 0; //turn 表示当前允许进入临界区的进程号</span><br><span class="line"></span><br><span class="line">    p0进程：                       p1进程</span><br><span class="line">    while(turn != 0);           while(turn != 1);</span><br><span class="line">    critical section;           critical section;</span><br><span class="line">    turn = 1;                   turn = 0;</span><br><span class="line">    remainder section;          remainder section;</span><br><span class="line"></span><br><span class="line">    对于临界区的访问，一定是按p0 -&gt; p1 -&gt; p0 -&gt; p1 这样轮流访问的。这种必须轮流访问带来的问题是</span><br><span class="line">    ，如果此时允许进入临界区的进程是p0,而p0一直不访问临界区，那么此时临界区空闲，但是并不允许p1</span><br><span class="line">    访问</span><br><span class="line"></span><br><span class="line">    因此但单标志法存在的主要问题是：违背“空闲让进”原则</span><br><span class="line"></span><br><span class="line">2.双标志先检查法</span><br><span class="line">    算法思想：设置一个布尔类型的数组flag[]，数组中的各个元素用来标记各个进程想进入临界区的意愿，</span><br><span class="line">        比如“flag[0] = ture”意味着零号进程现在想要进入临界区，每个进程在进入临界区之前先检查当前</span><br><span class="line">        有没有别的进程想进入临界区，如果没有，则把自身对应的flag[i]设置为true,之后开始访问临界区</span><br><span class="line"></span><br><span class="line">    bool flag[2]; //表示进入临界区意愿的数组</span><br><span class="line">    flag[0] = false;</span><br><span class="line">    flag[1] = false; //刚开始两个进程都不想进入临界区</span><br><span class="line"></span><br><span class="line">    p0进程：                   p1进程：</span><br><span class="line">    while(flag[1]);   1     while(flag[0]);   5</span><br><span class="line">    flag[0] = true;   2     flag[1] = true;   6</span><br><span class="line">    cirtical section; 3     critical section; 7</span><br><span class="line">    flag[0] = false;  4     flag[1] = false;  8</span><br><span class="line">    remainder section;      remainder section;</span><br><span class="line"></span><br><span class="line">    如果按照 1 5 2 6 3 7 4 8 的顺序执行，p0,p1将会同时访问临界区</span><br><span class="line">    双标志法存在的主要问题：违背“忙则等待”原则</span><br><span class="line">    原因在于，进入区的“检查”和“上锁”两个处理不是一气呵成的，“检查”后，“上锁”前可能发生进程切换</span><br><span class="line"></span><br><span class="line">3.双标志后检查法</span><br><span class="line">    算法思想：双标志先检查法，前一个算法的问题是先“检查”，后“上锁”，但是这两个操作又无法一气呵成，</span><br><span class="line">        因此导致了两个进程同时进入临界区的问题。因此，人们又想到先“上锁”后“检查”的方法来避免上述</span><br><span class="line">        问题</span><br><span class="line"></span><br><span class="line">    bool flag[2]; //表示进入临界区意愿的数组</span><br><span class="line">    flag[0] = false;</span><br><span class="line">    flag[1] = false; //刚开始两个进程都不想进入临界区</span><br><span class="line"></span><br><span class="line">    p0进程：                   p1进程：</span><br><span class="line">    flag[0] = true;   1     flag[1] = true;   5</span><br><span class="line">    while(flag[1]);   2     while(flag[0]);   6</span><br><span class="line">    cirtical section; 3     critical section; 7</span><br><span class="line">    flag[0] = false;  4     flag[1] = false;  8</span><br><span class="line">    remainder section;      remainder section;</span><br><span class="line"></span><br><span class="line">    如果按照 1 5 2 6 执行 p0和p1都无法进入临界区</span><br><span class="line"></span><br><span class="line">    双标志后检查法虽然解决了“忙则等待”的问题，但又导致了“空闲让进”，“有限等待”的原则，</span><br><span class="line">    会因各进程长期无法访问临界区资源而产生“饥饿”现象</span><br><span class="line"></span><br><span class="line">4.Peterson算法</span><br><span class="line">    算法思想：双标志后检查法中，两个进程都争着想进入临界区，但是谁也不让谁，最后都无法进入临界区。</span><br><span class="line">        Gary L.Peterson 想到了一种方法，如果双方都争着进入临界区，那可以让进程尝试“孔融让梨”，</span><br><span class="line">        主动让对方先进入临界区</span><br><span class="line"></span><br><span class="line">    bool flag[2];//表示进入临界区意愿的数组，初始值都是false</span><br><span class="line">    int turn = 0;//turn 表示优先让哪个进程进入临界区</span><br><span class="line"></span><br><span class="line">    p0进程：</span><br><span class="line">    flag[0] = true;                     1</span><br><span class="line">    turn = 1;                           2</span><br><span class="line">    while(flag[1] &amp;&amp; turn == 1);        3</span><br><span class="line">    critical section;</span><br><span class="line">    flag[0] = false;</span><br><span class="line">    remainder section;</span><br><span class="line"></span><br><span class="line">    p1进程：</span><br><span class="line">    flag[1] = ture;                     4</span><br><span class="line">    turn = 0;                           5</span><br><span class="line">    while(flag[0] &amp;&amp; turn = 0);         6</span><br><span class="line">    critical section;</span><br><span class="line">    flag[1] = false;</span><br><span class="line">    remainder section;</span><br><span class="line"></span><br><span class="line">    Peterson算法解决了进程互斥问题，遵循“空闲让进”，“忙则等待”，“有限等待”三个原则，但依然未能遵循</span><br><span class="line">    “让权等待”,想比之前三种算法，是最好的，但是依然不够好</span><br></pre></td></tr></table></figure><h3 id="2-3-3-进程互斥的硬件实现方法"><a href="#2-3-3-进程互斥的硬件实现方法" class="headerlink" title="2.3_3 进程互斥的硬件实现方法"></a>2.3_3 进程互斥的硬件实现方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Tips:</span><br><span class="line">    1.理解各个方法的原理</span><br><span class="line">    2.了解各个方法的优缺点</span><br><span class="line"></span><br><span class="line">1.自断屏蔽方法</span><br><span class="line">    利用“开/关中断指令”实现（与原语的实现思想相同，即在某进程开始访问临界区到结束访问为止都不允许被</span><br><span class="line">    中断，也就不能实现进程切换，因此避免了同时访问临界区）</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    关中断； 关中断即不允许当前进程被中断，也必然不会发生进程切换</span><br><span class="line">    临界区；</span><br><span class="line">    开中断；    直到进程访问完临界区，再执行开中断指令，才有可能别的进程上处理机并访问临界区</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    优点：简单，高效</span><br><span class="line">    缺点：不适合多处理机的操作系统；只使用与内核进程，不使用用户进程（开/关中断指令只能运行在内核态</span><br><span class="line">    这组指令让用户随意使用会很危险）</span><br><span class="line"></span><br><span class="line">2.TestAndSet</span><br><span class="line">    简称TS指令，也有地方TestAndSetLock指令，或TSL指令</span><br><span class="line">    TSL指令是硬件实现的，执行的过程不允许被中断，只能一气呵成。以下使用c语言实现的逻辑</span><br><span class="line"></span><br><span class="line">    //bool共享变量lock 表示当前临界区是否加锁</span><br><span class="line">    //true 表示已经加锁，false 表示未加锁</span><br><span class="line"></span><br><span class="line">    bool TestAndSet(bool *lock)&#123;</span><br><span class="line">        bool old;</span><br><span class="line">        old = *lock;  //old存放lock原来的值</span><br><span class="line">        *lock = true; //加锁</span><br><span class="line">        return old; //返回lock原来的值</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while(TearAndSet(&amp;lock));//上锁并检查</span><br><span class="line">    临界区代码段...</span><br><span class="line">    lock = false //解锁</span><br><span class="line">    剩余区代码段...</span><br><span class="line"></span><br><span class="line">    相比软件实现的方法，TSL指令把“上锁”和“检查”操作用硬件的方式变成了一气呵成的原子操作</span><br><span class="line">    优点：实现简单，无需像软件实现方法那样严格检查是否有逻辑漏洞；适用于多处理机环境</span><br><span class="line">    缺点：不满足“让权等待” 产生忙等现象</span><br><span class="line"></span><br><span class="line">3.Swap</span><br><span class="line">    有的地方也叫Exchange指令，或简称XCHG指令。</span><br><span class="line">    swap指令是硬件实现的执行的过程不允许被中断，只能一气呵成，以下是C语言逻辑</span><br><span class="line"></span><br><span class="line">    //Swap指令的作用是交换两个变量的值</span><br><span class="line">    Swap(bool *a,bool *b)&#123;</span><br><span class="line">        bool temp;</span><br><span class="line">        temp = *a;</span><br><span class="line">        *a = *b;</span><br><span class="line">        *b = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // bool型 lock 表示当前临界区是否被加锁</span><br><span class="line">    bool old = true;</span><br><span class="line">    while(old == true)</span><br><span class="line">        swap(&amp;lock,&amp;old);</span><br><span class="line">    临界区代码段...</span><br><span class="line">    lock = false;</span><br><span class="line">    剩余区代码段...</span><br><span class="line"></span><br><span class="line">    逻辑上个和TS无太大区别</span><br><span class="line"></span><br><span class="line">    相比软件实现的方法，SWAP指令把“上锁”和“检查”操作用硬件的方式变成了一气呵成的原子操作</span><br><span class="line">    优点：实现简单，无需像软件实现方法那样严格检查是否有逻辑漏洞；适用于多处理机环境</span><br><span class="line">    缺点：不满足“让权等待” 产生忙等现象</span><br></pre></td></tr></table></figure><h3 id="2-3-4-信号量机制"><a href="#2-3-4-信号量机制" class="headerlink" title="2.3_4 信号量机制"></a>2.3_4 信号量机制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">复习回顾+思考：之前学习的这些进程互斥的解决方案分别存在哪些问题？</span><br><span class="line"></span><br><span class="line">进程互斥的四种软件实现方式（单标志法，双标志法先检查，双标志后检查，Peterson）</span><br><span class="line">进程互斥的三种硬件实现方式（中断屏蔽法，TS/TSL指令，Swap/XCHG指令） </span><br><span class="line"></span><br><span class="line">1.单标志检查法只能轮换的执行进程，不满足“空闲让进”</span><br><span class="line">2.双标志先检查法，进入区的“检查”，“上锁”操作无法一气呵成，从而导致了两个进程可能同时进入临界区</span><br><span class="line">    不满足：“忙则等待”</span><br><span class="line">3.双标志后检查法，进去区的“上锁”，“检查”操作无法一气呵成，导致了两个进程都无法进入临界区</span><br><span class="line">    不满足：“空闲让进”，“有限等待”</span><br><span class="line">4.peterson算法,无法实现“让权等待”</span><br><span class="line">5.所有解决方案都无法实现“让权等待”</span><br><span class="line"></span><br><span class="line">1965年,荷兰学者Dijkstra提出了一种卓有成效的实现进程互斥，同步的方法 -- 信号量机制</span><br><span class="line"></span><br><span class="line">1.信号量机制</span><br><span class="line">    用户进程可以通过操作系统提供的一对原语来对信号量进行操作，从而方便的实现了进程互斥与同步</span><br><span class="line"></span><br><span class="line">    信号量其实就是一个变量（可以是一个整数，也可以是更复杂的记录型变量），可以用一个信号量表示系统中</span><br><span class="line">    某种资源的数量</span><br><span class="line"></span><br><span class="line">    原语是一种特殊的程序段，其执行只能一气呵成，不可被中断。原语是由开中断/关中断指令实现的。软件解决方</span><br><span class="line">    案的主要问题是“进入区的操作不能一气呵成”，因此如果把进入区，退出区的操作使用原语实现，使这些操作</span><br><span class="line">    一气呵成，就能解决问题</span><br><span class="line"></span><br><span class="line">    一对原语：wait(S),signal(S)原语，可以把原语理解为我们自己写的函数，函数名分别为wait和signal，括号</span><br><span class="line">    里的信号量S其实就是函数调用时传入的一个参数</span><br><span class="line"></span><br><span class="line">    wait,signal原语常简称为P,V（来自荷兰语）因此，做题的时候可能遇到P(S),V(S)</span><br><span class="line"></span><br><span class="line">2.整型信号量</span><br><span class="line">    用一个整数型的变量作为信号量，用来表示系统中某种资源的数量</span><br><span class="line">    与普通整数型变量的区别:对信号量操作只有三种 初始化，P操作，V操作</span><br><span class="line">    --------------------------------------------------------------------</span><br><span class="line">    EG:某系统只有一台打印机</span><br><span class="line"></span><br><span class="line">    int S = 1;//初始整数型信号量S，表示当前系统中可用的打印机资源数</span><br><span class="line"></span><br><span class="line">    void wait(int S)&#123;</span><br><span class="line">        while(S&lt;=0); //如果资源数不够，就一直循环等待    存在的问题：不满足让权等待，会发生忙等</span><br><span class="line">        S = S - 1;  //如果有资源数够，则占用一个资源</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void signal(int S)&#123;</span><br><span class="line">        S = S + 1; //释放资源</span><br><span class="line">    &#125;</span><br><span class="line">    进程p0:</span><br><span class="line">    ...</span><br><span class="line">    wait(S)       //进入区，申请资源</span><br><span class="line">    使用打印机资源 //临界区，访问资源</span><br><span class="line">    signal(S)     // 退出区，释放资源</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    进程p1:</span><br><span class="line">    ...</span><br><span class="line">    wait(S)       //进入区，申请资源</span><br><span class="line">    使用打印机资源 //临界区，访问资源</span><br><span class="line">    signal(S)     // 退出区，释放资源</span><br><span class="line">    ...</span><br><span class="line">    -------------------------------------------------------------------</span><br><span class="line">    3.记录型信号量 （*超高频出题点）</span><br><span class="line">    整型信号量的缺陷是存在“忙等”问题，因此人们又提出了“记录型信号量”，即用记录型数据结构标志信号量</span><br><span class="line"></span><br><span class="line">    /*记录型信号量的定义*/</span><br><span class="line">    typedef struct &#123;</span><br><span class="line">        int value; //剩余资源数</span><br><span class="line">        struct process *L; //等待队列</span><br><span class="line">    &#125; semaphore</span><br><span class="line"></span><br><span class="line">    void wait(S)&#123;</span><br><span class="line">        S.value --;</span><br><span class="line">        if(S.value &lt; 0)&#123;</span><br><span class="line">            //如果剩余资源不够，使用block原语使进程从运行态进入阻塞态，并挂到信号量S的等待队列（阻塞队列）</span><br><span class="line">            block(S.L); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void signal(S)&#123;</span><br><span class="line">        S.value ++;</span><br><span class="line">        if(S.value &lt;= 0)&#123;</span><br><span class="line">            //释放资源后，若还有别的进程在等待使用这种资源，则使用wakeup唤醒等待队列中的一个进程，该进程</span><br><span class="line">            从阻塞态变为就绪态</span><br><span class="line">            wakeup(S.L);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ---------------------------------------------------------------------------</span><br><span class="line">    EG:某计算机系统中有两台打印机，则可在初始化信号量S时将value设为1，就绪队列S设为空</span><br><span class="line"></span><br><span class="line">    typedef struct &#123;</span><br><span class="line">        int value; //剩余资源数              ==2</span><br><span class="line">        struct process *L; //等待队列       ==null</span><br><span class="line">    &#125; semaphore</span><br><span class="line"></span><br><span class="line">    进程p0:</span><br><span class="line">    ...</span><br><span class="line">    wait(S)       //进入区，申请资源</span><br><span class="line">    使用打印机资源 //临界区，访问资源</span><br><span class="line">    signal(S)     // 退出区，释放资源</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    进程p1:</span><br><span class="line">    ...</span><br><span class="line">    wait(S)       //进入区，申请资源</span><br><span class="line">    使用打印机资源 //临界区，访问资源</span><br><span class="line">    signal(S)     // 退出区，释放资源</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    进程p2:</span><br><span class="line">    ...</span><br><span class="line">    wait(S)       //进入区，申请资源</span><br><span class="line">    使用打印机资源 //临界区，访问资源</span><br><span class="line">    signal(S)     // 退出区，释放资源</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    进程p3:</span><br><span class="line">    ...</span><br><span class="line">    wait(S)       //进入区，申请资源</span><br><span class="line">    使用打印机资源 //临界区，访问资源</span><br><span class="line">    signal(S)     // 退出区，释放资源</span><br><span class="line">    ...</span><br><span class="line">    （纸上运行一遍....）</span><br><span class="line">    ---------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">    block原语进行了自我阻塞（当前运行进程从运行态-&gt;就绪态）主动放弃处理机，满足“让权等待”</span><br><span class="line"></span><br><span class="line">    住：若考试中出现了P(S),V(S)操作，除非特殊说明，默认S为记录型信号量</span><br></pre></td></tr></table></figure><h2 id="2-3-5-信号量机制"><a href="#2-3-5-信号量机制" class="headerlink" title="2.3_5 信号量机制"></a>2.3_5 信号量机制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">1.信号量机制实现进程互斥</span><br><span class="line">    （1）分析并发进程的关键活动，划定临界区（如：对临界资源打印机的访问就应该放在临界区）</span><br><span class="line">    （2）设置互斥信号量mutex,初值为1</span><br><span class="line">    （3）在临界区之前执行P(mutex)</span><br><span class="line">    （4）在临界区之后执行V(mutex)</span><br><span class="line"></span><br><span class="line">    /*信号量机制实现互斥*/</span><br><span class="line">    semaphore mutex  = 1; //初始化信号量</span><br><span class="line"></span><br><span class="line">    p1()&#123;</span><br><span class="line">        ...</span><br><span class="line">        P(mutex);</span><br><span class="line">        临界区代码段...</span><br><span class="line">        V(mutex);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p2()&#123;</span><br><span class="line">        ...</span><br><span class="line">        P(mutex);</span><br><span class="line">        临界区代码段...</span><br><span class="line">        V(mutex);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">2.信号量机制实现进程同步</span><br><span class="line">    进程同步：要让并发执行的进程有序的推进</span><br><span class="line"></span><br><span class="line">    （1）分析什么地方需要实现“同步关系”，即必须保证“一前一后”执行的两个操作（或两句代码）</span><br><span class="line">    （2）设置同步信号量S，初值为0</span><br><span class="line">    （3）在“前操作”之后执行V(S)   //前V后P</span><br><span class="line">    （4）在“后操作”之前执行P(S)</span><br><span class="line"></span><br><span class="line">    要求：代码p4执行一定是在p2之后</span><br><span class="line">    /*信号量机制实现同步*/</span><br><span class="line">    semaphore S = 0； //初始化信号量</span><br><span class="line"></span><br><span class="line">    P1()&#123;</span><br><span class="line">        代码1;</span><br><span class="line">        代码2;</span><br><span class="line">        P(S);</span><br><span class="line">        代码3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    P1()&#123;</span><br><span class="line">        V(S);</span><br><span class="line">        代码4;    </span><br><span class="line">        代码5;</span><br><span class="line">        代码6;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">3.信号量实现进程的前驱关系</span><br><span class="line">    每一对前驱关系都是一个进程同步问题（需要保证一前一后的操作）</span><br><span class="line">    因此：</span><br><span class="line">        （1）要为每一对前驱关系各设置一个同步变量</span><br><span class="line">        （2）在“前操作”之后相对应的同步变量执行V操作</span><br><span class="line">        （3）在“后操作”之前相对应的同步变量执行P操作</span><br></pre></td></tr></table></figure><h3 id="2-3-6-生产者消费者问题"><a href="#2-3-6-生产者消费者问题" class="headerlink" title="2.3_6 生产者消费者问题"></a>2.3_6 生产者消费者问题</h3><p>系统中有一组生产者进程和一组消费者进程，生产者进程每次产生一个产品放入缓存区，消费者进程每次从缓冲区拿出一个进程并使用（注：这里的产品理解为某种数据）生产者，消费者共享一个初始为空，大小为n的缓冲区 只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待 只有缓冲区不空时，消费者才能从缓冲区取出产品，否则必须等待 缓冲区 是临界资源，各进程必须互斥的访问</p><h5 id="pv操作题目分析步骤："><a href="#pv操作题目分析步骤：" class="headerlink" title="pv操作题目分析步骤："></a>pv操作题目分析步骤：</h5><p>1.关系分析。找出题目中描述的各个进程，分析它们之间的同步，互斥关系 2.整理思路。根据各进程的操作流程确定P,V操作的大致顺序 3.设置信号量。设置需要的信号量，并根据题目条件确定信号量初值（互斥信号量一般为1，同步信号量的初始值要看对应资源的初始值是多少）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex = 1; //互斥信号量，实现对缓冲区的互斥访问</span><br><span class="line">semaphore empty = n; //同步信号量，表示空闲缓冲区的数量</span><br><span class="line">semaphore full = 0; // 同步信号量，表示产品的数量（非空缓冲区的数量）</span><br><span class="line"></span><br><span class="line">producer() &#123;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        生产一个产品；</span><br><span class="line">        P(empty);//消耗一个空闲缓冲区</span><br><span class="line">        p(mutex);</span><br><span class="line">        把产品放入缓冲区;</span><br><span class="line">        V(mutex);</span><br><span class="line">        V(full);//增加一个产品</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consumer() &#123;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        P(full);//消耗一个产品（非空缓冲区）</span><br><span class="line">        p(mutex);</span><br><span class="line">        从缓冲区拿出一个产品;</span><br><span class="line">        V(mutex);</span><br><span class="line">        V(empty);//增加一个空闲缓冲区</span><br><span class="line">        使用产品;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考：能否改变相邻的P,V操作顺序 不能，会发生死锁现象 <strong>实现互斥的P操作一定要放在实现同步的P操作之后</strong> V操作不会导致进程阻塞，因此 <strong>两个V操作的顺序可以交换</strong></p><h5 id="知识回顾与重要考点"><a href="#知识回顾与重要考点" class="headerlink" title="知识回顾与重要考点"></a>知识回顾与重要考点</h5><p>生产者消费者问题是一个互斥，同步的综合问题，对于初学者来说最难的是发现题目中隐含的两对同步关系，有时候是消费者需要等待生产者，有时候是生产者要等待消费者，这是两个不同的“一前一后问题”，因此也需要设置两个同步信号量</p><h3 id="2-3-7-多生产者消费者问题"><a href="#2-3-7-多生产者消费者问题" class="headerlink" title="2.3_7 多生产者消费者问题"></a>2.3_7 多生产者消费者问题</h3><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>桌子上有一只盘子，每次只能向其中放入一个水果。爸爸专向盘子中放苹果，妈妈专向盘子中放 橘子，儿子专等着吃盘子中的橘子，女儿专等着吃盘子中的苹果。只有盘子空时，爸爸或妈妈才 可向盘子中放一个水果。仅当盘子中有自己需要的水果时，儿子或女儿可以从盘子中取出水果。 用PV操作实现上述过程。</p><h5 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h5><p>互斥关系：对缓冲区（盘子）的访问需要互斥的进行 同步关系（一前一后）：</p><ol><li>父亲将苹果放入盘子后，女儿才能取到苹果</li><li>母亲将橘子放入盘子后，儿子才能取得橘子</li><li>只有<strong>盘子为空</strong>时，<strong>父亲或母亲</strong>才能放入水果</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex = 1;//实现对互斥访问盘子（缓冲区）</span><br><span class="line">semaphore apple = 0;//表示盘子里有几个苹果</span><br><span class="line">semaphore orange = 0;//表示盘子里有几个橘子</span><br><span class="line">semaphore plate = 0;//表示盘子里还能放多少个水果</span><br><span class="line"></span><br><span class="line">dad() &#123;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">    准备放一个苹果；</span><br><span class="line">    P(palte);</span><br><span class="line">    p(mutex);</span><br><span class="line">    把苹果放入盘子；</span><br><span class="line">    V(mutex)</span><br><span class="line">    V(apple);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mom() &#123;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">    准备放一个橘子；</span><br><span class="line">    P(plate);</span><br><span class="line">    p(mutex);</span><br><span class="line">    把橘子放入盘子；</span><br><span class="line">    Vmutex);</span><br><span class="line">    V(orange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sun() &#123;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">    P(orange);</span><br><span class="line">    p(mutex);</span><br><span class="line">    从盘子中取出苹果；</span><br><span class="line">    Vmutex);</span><br><span class="line">    V(plate);</span><br><span class="line">    吃掉苹果；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">daughter() &#123;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">    P(apple);</span><br><span class="line">    p(mutex);</span><br><span class="line">    从盘0子中取出橘子；</span><br><span class="line">    V(mutex);</span><br><span class="line">    V(plate);</span><br><span class="line">    吃掉橘子;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去掉实现互斥访问缓冲区的信号量mutex，不会发生多个进程同时访问临界区的现象 原因在于：本题中缓冲区的大小为1，在任何时刻，apple,orange,plate三个同步信号量中最多只有一个是1，因此在任何一个时刻，至少有一个进程的P操作不会被阻塞，并顺利的进入临界区</p><h5 id="知识回顾与重要考点-1"><a href="#知识回顾与重要考点-1" class="headerlink" title="知识回顾与重要考点"></a>知识回顾与重要考点</h5><ol><li>在生产者消费者问题中，如果缓冲区大小为1，那么有可能不需要设置互斥信号量就可以实现访问缓冲区的功能，当然这不是绝对的，要根据问题具体分析</li><li>如果在考试过程中来不及分析，可以加上互斥信号量，保证各进程一定互斥的访问临界区，再次注意，实现互斥的P操作一定要在实现同步的P操作之后，否则可能引起死锁</li><li>解决多生产者消费者问题的关键在于理清复杂的同步关系，在分析同步问题的时候不能从<strong>单个进程行为的角度</strong>来分析，要把<strong>“一前一后”发生的事看做两种“事件的前后关系“</strong></li></ol><h3 id="2-3-8-吸烟者问题"><a href="#2-3-8-吸烟者问题" class="headerlink" title="2.3_8 吸烟者问题"></a>2.3_8 吸烟者问题</h3><h5 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h5><p>假设一个系统有<strong>三个抽烟者进程</strong>和<strong>一个供应者进程</strong>。每个抽烟者不停地卷烟并抽掉它，但是要卷 起并抽掉一支烟，抽烟者需要有三种材料:烟草、纸和胶水。三个抽烟者中，<strong>第一个拥有烟草、</strong> <strong>第二个拥有纸、第三个拥有胶水</strong>。供应者进程无限地提供三种材料，供应者每次将两种材料放桌 子上，<strong>拥有剩下那种材料的抽烟者卷一根烟并抽掉它，并给供应者进程一个信号告诉完成了</strong>，供 应者就会放另外两种材料再桌上，这个过程一直重复（让三个抽烟者轮流地抽烟）</p><h5 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h5><p>物品组合 组合1:纸 + 胶水 组合2:烟草 + 胶水 组合3: 烟草 + 纸 互斥关系： 桌子可以抽象为容量为1的缓冲区，需要互斥访问（缓冲区容量为1可以不设置互斥信号量） 同步关系（从事件的角度分析）</p><ol><li>桌上有组合1 -&gt; 第一个吸烟者取走东西</li><li>桌上有组合2-&gt; 第二个吸烟者取走东西</li><li>桌上有组合3 -&gt; 第三个吸烟者取走东西</li><li>发出完成信号 -&gt; 供应者将下一个组合放到桌上</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓冲区容量为1无需设置互斥信号线</span></span><br><span class="line"><span class="type">semphore</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//桌子上组合1的数量</span></span><br><span class="line"><span class="type">semphore</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//桌子上组合2的数量</span></span><br><span class="line"><span class="type">semphore</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//桌子上组合3的数量</span></span><br><span class="line"><span class="type">sephore</span> <span class="variable">finish</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//是否有人完成吸烟</span></span><br><span class="line">pruducer()&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            P(finish);</span><br><span class="line">            把组合<span class="number">1</span>放到桌子上；</span><br><span class="line">            V(S1);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">            P(finish);</span><br><span class="line">            把组合<span class="number">2</span>放到桌子上；</span><br><span class="line">            V(S2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            P(finish);</span><br><span class="line">            把组合<span class="number">3</span>放到桌子上；</span><br><span class="line">            V(S3);</span><br><span class="line">        &#125;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">smoker1() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        P(s1);</span><br><span class="line">        从桌上拿走组合<span class="number">1</span>，卷烟，吸烟；</span><br><span class="line">        V(finish);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">smoker2() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        P(s2);</span><br><span class="line">        从桌上拿走组合<span class="number">2</span>，卷烟，吸烟；</span><br><span class="line">        V(finish);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">smoker3() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        P(s3);</span><br><span class="line">        从桌上拿走组合<span class="number">3</span>，卷烟，吸烟；</span><br><span class="line">        V(finish);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-9-读者-写者问题"><a href="#2-3-9-读者-写者问题" class="headerlink" title="2.3_9 读者-写者问题"></a>2.3_9 读者-写者问题</h3><h5 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h5><p>有读者和写者两组并发进程，共享一个文件，当两个或两个以上的读进程同时访问共享数据时不 会产生副作用，但若某个写进程和其他进程（读进程或写进程）同时访问共享数据时则可能导致 数据不一致的错误。因此要求:①允许多个读者可以同时对文件执行读操作;②只允许一个写者 往文件中写信息;③任一写者在完成写操作之前不允许其他读者或写者工作;④写者执行写操作 前，应让已有的读者和写者全部退出。</p><h5 id="问题分析-2"><a href="#问题分析-2" class="headerlink" title="问题分析"></a>问题分析</h5><p>两类进程：读进程，写进程 互斥关系：写进程 - 写进程 ，写进程-读进程。读进程与读进程不存在互斥问题 写进程与任何进程都互斥，设置一个信号量rw，在写进程访问共享文件前后分别执行P,V操作。 读者进程和写者进程也要互斥，因此读者进程访问共享文件前后也要对rw执行P,V操作 如果所有读者进程在访问共享文件时都执行P(rw)操作会导致各个读进程之间也无法同时访问文件 <strong>读者-写者问题的核心–怎么解决该问题</strong> <strong>P(rw)和V(rw)其实就是对共享文件的“加锁”和“解锁”。既然各个读进程需要同时访问。而读进程与写进程又必须互斥访问，那么我们可以让第一个访问文件的读进程加锁，让最后一个访问共享文件的读进程解锁。设置一个整型变量count来记录当前有几个读进程在访问文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">seamphore rw = 1;//用于实现对文件的互斥访问，表示当前是否有进程在访问共享文件</span><br><span class="line">int count = 0; //记录当前有几个读进程在访问文件</span><br><span class="line">semaphore mutex = 1; //用于保证对于count变量的互斥访问</span><br><span class="line">semaphore w = 1; //用于实现“写优先”(解决写进程饥饿)</span><br><span class="line"></span><br><span class="line">writer() &#123;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        P(w);</span><br><span class="line">        P(rw); //写之前“加锁”</span><br><span class="line">        写文件...；</span><br><span class="line">        V(rw); //写之后“解锁”</span><br><span class="line">        V(w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reader() &#123;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        p(W);</span><br><span class="line">        P(mutex); //各读进程互斥的访问count</span><br><span class="line">        if (count == 0) &#123;</span><br><span class="line">            P(rw); //第一个读进程负责“加锁”</span><br><span class="line">        &#125;</span><br><span class="line">        count ++; //访问文件的进程数 +1</span><br><span class="line">        V(mutex);</span><br><span class="line">        V(w);</span><br><span class="line">        读文件；</span><br><span class="line">        P(mutex);</span><br><span class="line">        count --; //访问文件的进程数-1</span><br><span class="line">        if (count == 0) &#123;</span><br><span class="line">            V(rw); //最后一个读进程负责“解锁”</span><br><span class="line">        &#125;</span><br><span class="line">        V(mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="知识回顾与重要考点-2"><a href="#知识回顾与重要考点-2" class="headerlink" title="知识回顾与重要考点"></a>知识回顾与重要考点</h5><p>读者-写者问题为我们解决复杂的互斥问题提供了一个参考思路。 其核心思想在于设置一个计数器count用来记录当前正在访问共享文件的进程数，我们可以用count的值来判断当前进入的进程是否是第一个&#x2F;最后一个进程，从而做出不同的处理。 另外，对count变量的检查和赋值不能一气呵成导致了一些错误，如果要<strong>实现“一气呵成”，自然应该想到使用互斥信号量</strong> 最后，还需要体会是如何解决写饥饿问题的</p><h3 id="2-3-10-哲学家进餐问题"><a href="#2-3-10-哲学家进餐问题" class="headerlink" title="2.3_10 哲学家进餐问题"></a>2.3_10 哲学家进餐问题</h3><h5 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h5><p>一张圆桌上坐着5名哲学家，每两个哲学家之间的桌上摆一根筷子，桌子的中间是一碗米饭。哲学 家们倾注毕生的精力用于思考和进餐，哲学家在思考时，并不影响他人。只有当哲学家饥饿时， 才试图拿起左、右两根筷子（一根一根地拿起）。如果筷子已在他人手上，则需等待。饥饿的哲 学家只有同时拿起两根筷子才可以开始进餐，当进餐完毕后，放下筷子继续思考。</p><h5 id="问题分析-3"><a href="#问题分析-3" class="headerlink" title="问题分析"></a>问题分析</h5><p>1.关系分析：系统中有五个哲学家进程，五位哲学家与左右邻居对其中间筷子的访问是互斥关系 2.整理思路：这个问题中只有互斥关系，但与之前的问题不同的是，每个哲学家进程需要同时拥有两个临界资源才能开始吃饭。如何避免临界资源分配不当造成的死锁现象，是哲学家问题的精髓 3.信号量设置：定义互斥信号量数组chopstick[5] &#x3D; {1,1,1,1,1} 用于实现对5个筷子的互斥访问。并对哲学家按0-4编号，哲学界左边的筷子编号为i，右边筷子的编号为（i + 1）% 5。 如何防止死锁的发生</p><ul><li>可以对哲学家进程施加一些限制条件，比如最多允许四个哲学家同时进餐，这样可以保证至少有一个哲学家是可以拿到左右两只筷子的</li><li>要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家正好相反。用这种方式可以保证如果两个相邻两个哲学家都想吃饭，那么只会有一个可以拿起第一只筷子，另一个就会被阻塞，这就避免了占有一只再等待另一只的情况</li><li>仅当哲学家左右都有筷子时才允许进餐 （这种方法不能保证当两边的筷子可用时，哲学家可以进餐）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[5] = &#123;1,1,1,1,1&#125;;</span><br><span class="line">semaphore mutex = 1; //表示哲学家左右是否有筷子</span><br><span class="line">pi() &#123;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        P(mutex);</span><br><span class="line">        P(chopstick[i]);</span><br><span class="line">        P(chopstick[(i+1)%5]);</span><br><span class="line">        V(mutex);</span><br><span class="line">        吃饭...;</span><br><span class="line">        V(chopstick[i]);</span><br><span class="line">        V(chopstick[(i+1)%5]);</span><br><span class="line">        思考...;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="知识回顾与重要考点-3"><a href="#知识回顾与重要考点-3" class="headerlink" title="知识回顾与重要考点"></a>知识回顾与重要考点</h5><p>哲学家进餐问题的关键是解决进餐死锁 这些进程之间只存在互斥关系，但与之前不同的是每个进程需要持有两个临界资源，因此有了“死锁”的问题隐患 如果在考试中遇到了一个进程需要持有多个临界资源的情况，应该参考哲学家问题的思想，分析题目中的进程之间是否会发生循环等待，是否会发生死锁 可以参考哲学家就餐问题解决死锁的三种思路</p><h3 id="2-3-11-管程"><a href="#2-3-11-管程" class="headerlink" title="2.3_11 管程"></a>2.3_11 管程</h3><h5 id="（1）为什么要引入管程"><a href="#（1）为什么要引入管程" class="headerlink" title="（1）为什么要引入管程"></a>（1）为什么要引入管程</h5><p>信号量机制存在到的问题：编写程序困难，易出错 能不能设计一种机制，让程序员写程序时不需要关注复杂的P,V操作，让写代码更加轻松 1973年，Brinch Hansen 首次在程序设计语言（Pascal）中引入了“管程”成分——一种高级同步机制</p><h5 id="（2）管程的定义和基本特征"><a href="#（2）管程的定义和基本特征" class="headerlink" title="（2）管程的定义和基本特征"></a>（2）管程的定义和基本特征</h5><p>管程是一种特殊的软件模块，有这些部分组成</p><ol><li>局域于管程的<strong>共享数据结构</strong>说明；</li><li>对该数据结构进行操作的<strong>一组过程</strong>；</li><li>对局部与管程的共享数据设置初始值的语句；</li><li>管程有一个名字；</li></ol><p>管程的基本特征：</p><ol><li>局部与管程的数据只能被局部与管程的过程所访问</li><li>一个进程只有通过调用管程内的过程才能进入管程访问共享数据</li><li><strong>每次仅允许一个进程在管程内执行某个内部过程</strong></li></ol><h5 id="拓展1：使用管程解决生产者消费者问题"><a href="#拓展1：使用管程解决生产者消费者问题" class="headerlink" title="拓展1：使用管程解决生产者消费者问题"></a>拓展1：使用管程解决生产者消费者问题</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">monitor ProducerConsumer &#123;</span><br><span class="line">    condition full,empty; //条件变量用来实现同步</span><br><span class="line">    int count = 0; //缓冲区中的产品数</span><br><span class="line">    void insert (Item item) &#123;</span><br><span class="line">        if (count == N) &#123;</span><br><span class="line">            wait(full);</span><br><span class="line">        &#125;</span><br><span class="line">        count ++:</span><br><span class="line">        insert_item(item);</span><br><span class="line">        if (count == 1) &#123;</span><br><span class="line">            signal(empty);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Item remove() &#123;</span><br><span class="line">        if (count == 1) &#123;</span><br><span class="line">            wait(empty);</span><br><span class="line">        &#125;</span><br><span class="line">        count --;</span><br><span class="line">        if (count == N - 1) &#123;</span><br><span class="line">            signal(full);</span><br><span class="line">        &#125;</span><br><span class="line">        return remove_item();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">producer() &#123;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        item = 生产一个产品;</span><br><span class="line">        ProducerConsumer.insert(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consumer() &#123;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        item = PruducerConsumer.remove();</span><br><span class="line">        消费产品item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入管程的目的无非就是更方便的实现进程互斥和同步</p><ol><li>需要在管程中定义共享数据</li><li>需要在管程中定义用于访问这些共享数据的“入口”——其实就是一些函数</li><li>只有<strong>通过这些“入口”才能访问共享数据</strong></li><li>管程中有很多“入口”，但是<strong>每次只能开放其中一个入口</strong>，且<strong>每次只能让一个进程或者线程进入</strong>（注意：互斥是由编辑器实现的）</li><li>可以在管程中设置<strong>条件变量</strong>及<strong>等待&#x2F;唤醒操作</strong>解决同步问题，可以让一个进程或者线程在条件变量上等待；可以通过唤醒操作将等待在条件变量上的进程或线程唤醒</li></ol><h5 id="拓展2-java中类似管程的机制"><a href="#拓展2-java中类似管程的机制" class="headerlink" title="拓展2 java中类似管程的机制"></a>拓展2 java中类似管程的机制</h5><p>synchronized关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static class monitor &#123;</span><br><span class="line">    private Item buffer[] = new Item[N];</span><br><span class="line">    private int count = 0;</span><br><span class="line"></span><br><span class="line">    public synchronized void insert(Item item) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-1-死锁的概念"><a href="#2-4-1-死锁的概念" class="headerlink" title="2.4_1 死锁的概念"></a>2.4_1 死锁的概念</h3><h5 id="（1）什么是死锁"><a href="#（1）什么是死锁" class="headerlink" title="（1）什么是死锁"></a>（1）什么是死锁</h5><p>在并发环境下，各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象</p><h5 id="（2）死锁，饥饿，死循环的区别"><a href="#（2）死锁，饥饿，死循环的区别" class="headerlink" title="（2）死锁，饥饿，死循环的区别"></a>（2）死锁，饥饿，死循环的区别</h5><p>死锁：在并发环境下，各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象 饥饿：由于长期得不到想要的资源，某进程无法向前推进的现象。 死循环：某进程执行过程中一直跳不出某个循环的现象，有时是程序逻辑bug导致，有时是程序员设计</p><h5 id="（3）死锁产生的必要条件"><a href="#（3）死锁产生的必要条件" class="headerlink" title="（3）死锁产生的必要条件"></a>（3）死锁产生的必要条件</h5><ol><li><strong>互斥条件</strong>：只有对必须互斥使用的资源的争抢才会导致死锁</li><li><strong>不可剥夺条件</strong>：进程所获得的资源在未使用完之前，不能由其他进程强行夺走，只能主动释放</li><li><strong>请求和保持条件</strong>：进程已经保持了一个至少一个资源，但是又提出了新的资源请求，而资源已经被其他进程占有，此时请求被阻塞，但是又对自己已有资源保持不放</li><li><strong>循环等待条件</strong>：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求</li></ol><p>如果同类资源数大于1，即时有循环等待也未必发生死锁 但如果同类资源只有一个，发生循环等待必定发生死锁</p><h5 id="（4）什么时候会发生死锁"><a href="#（4）什么时候会发生死锁" class="headerlink" title="（4）什么时候会发生死锁"></a>（4）什么时候会发生死锁</h5><ol><li>对系统资源的竞争。各进程对不可剥夺的资源（如打印机）的竞争可能会引起死锁，对可剥夺的资源（CPU）是不会引起死锁的</li><li>进程推进顺序非法。请求和释放资源的顺序不当</li><li>信号量的使用不当</li></ol><p>总之，对不可剥夺资源的不合理分配，可能导致死锁</p><h5 id="（5）死锁的处理策略"><a href="#（5）死锁的处理策略" class="headerlink" title="（5）死锁的处理策略"></a>（5）死锁的处理策略</h5><ol><li>预防死锁。破坏死锁产生的四个必要条件中的一个或几个</li><li>避免死锁。用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法）</li><li>死锁的检测和解除。允许死锁的发生，不过操作系统会检测出死锁的发生，然后采取某种措施解除死锁</li></ol><h3 id="2-4-2-死锁的处理——预防死锁"><a href="#2-4-2-死锁的处理——预防死锁" class="headerlink" title="2.4_2 死锁的处理——预防死锁"></a>2.4_2 死锁的处理——预防死锁</h3><h5 id="（1）破坏互斥条件"><a href="#（1）破坏互斥条件" class="headerlink" title="（1）破坏互斥条件"></a>（1）破坏互斥条件</h5><p>互斥条件：只有对必须互斥使用的资源争抢才会导致死锁 如果把只能互斥使用的资源改造为允许共享使用，则系统不会进入死锁状态。比如：SPOOLing技术，操作系统可以采用SPOOLing技术把独占设备在逻辑上改造成共享设备 缺点：并不是所有设备可以改为共享设备，为了系统安全，有很多地方必须保持这种互斥条件，因此很多时候不能破坏互斥条件</p><h5 id="（2）破坏不剥夺条件"><a href="#（2）破坏不剥夺条件" class="headerlink" title="（2）破坏不剥夺条件"></a>（2）破坏不剥夺条件</h5><p>不剥夺条件：进程所获得得资源在未使用完之前，不能由其他进程强行夺走，只能主动释放 方案1：当某个进程请求新的资源得不到满足时，它必须立即释放所保持的所有资源，待以后需要的使用重新申请。也就是说，即时某些资源尚未使用完，也要主动释放，从而破坏了不可剥夺条件 方法2:当某个进程需要的资源被其他进程占有的时候，可以由操作系统协助，将需要的资源强行剥夺。这种方式一般考虑进程的优先级（比如：剥夺调度方式，就是将处理机资源强行剥夺给优先级更高的进程使用) 缺点：</p><ol><li>实现起来比较复杂</li><li>释放已获得的资源可能会导致前一阶段的工作实效。因此这种方法一般使用与易宝存和恢复状态的资源，如cpu</li><li>反复的申请和释放资源会增加系统开销，降低系统的吞吐量</li><li>若采用方案1，会导致饥饿</li></ol><h5 id="（3）破坏请求和保持条件"><a href="#（3）破坏请求和保持条件" class="headerlink" title="*（3）破坏请求和保持条件"></a>*（3）破坏请求和保持条件</h5><p>请求和保证条件：进程已经持有了至少一个资源，又需要一个被其他进程持有的资源，此时请求进程被阻塞但又不释放已经持有的资源 可以采用<strong>静态分配方</strong>法，即进程在运行前一次申请完它所需要的全部资源，在他的资源未满足前，不让它投入运行。一旦投入运行后，这些资源就一直归它所有，改进程就不会再请求别的任何资源了 改策略实现起来简单，但也有缺点 有些资源可能只需要使用很短的时间，因此如果进程的整个运行期间都一直保持着所有资源，就会造成严重的资源浪费，<strong>资源换利用率极低</strong>。此外，<strong>可能导致某些进程饥饿</strong></p><h5 id="（4）破坏循环等待条件"><a href="#（4）破坏循环等待条件" class="headerlink" title="（4）破坏循环等待条件"></a>（4）破坏循环等待条件</h5><p>循环等待条件：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求 可采用顺序资源分配法。首先给系统中的资源编号，规定每个进程必须按编号递增的顺序请求资源，同类资源（编号相同的资源）一次申请完 原理分析：一个进程只有已经占有小编号的资源时，才有资格更申请大编号的资源，按此规则，已经持有大编号资源的进程不可能逆向的回来申请小编号的资源，从而不会产生循环等待现象 缺点：</p><ol><li>不方便添加新的设备，可能需要重新下编号</li><li>进程实际使用资源的顺序可能和编号递增的顺序不一致，会导致资源浪费</li><li>必须按照规定次序申请资源，用户编程很麻烦</li></ol><h3 id="2-4-3-死锁的处理策略——避免死锁"><a href="#2-4-3-死锁的处理策略——避免死锁" class="headerlink" title="2.4_3 死锁的处理策略——避免死锁"></a>2.4_3 死锁的处理策略——避免死锁</h3><h5 id="（1）什么是安全序列"><a href="#（1）什么是安全序列" class="headerlink" title="（1）什么是安全序列"></a>（1）什么是安全序列</h5><p>你是一位成功的银行家，手里掌握着100个亿的资金… 有三个企业想找你贷款，分别是企业B、企业A、企业T，为描述方便，简称BAT。 B表示:“大哥，我最多会跟你借70亿…” A表示:“大哥，我最多会跟你借40亿…” 干表示:“大哥，我最多会跟你借50亿..” 然而…江湖中有个不成文的规矩:<strong>如果你借给企业的钱总数达不到企业提出的最</strong> <strong>大要求，那么不管你之前给企业借了多少钱，那些钱都拿不回来了….</strong> 刚开始，BAT三个企业分别从你这儿借了20、10、30亿….</p><h5 id="（2）安全状态，不安全状态，死锁的联系"><a href="#（2）安全状态，不安全状态，死锁的联系" class="headerlink" title="（2）安全状态，不安全状态，死锁的联系"></a>（2）安全状态，不安全状态，死锁的联系</h5><p>安全序列：系统按照这种序列分配资源，则每个进程都能顺利完成。只要找出一个安全序列，系统就是安全状态，当然，安全序列可以有多个 如果分配了资源后，系统找不到任何一个安全序列，系统就进入了不安全状态，就以为着之后可能所有进程都无法顺利的执行下去，当然，如果有进程提前归还了一部分资源，系统也有可能重新回到安全状态，不过我们在分配资源之前总是要考虑到最坏的情况 如果系统处于安全状态，就一定不会发生死锁。如果系统进入不安全状态，就有可能发生死锁 因此可以在系统分配资源之前预先判断这次分配是否会导致系统进入不安全状态，以此决定是否答应资源的分配请求。这也是“银行家算法”的核心思想。</p><h5 id="（3）银行家算法"><a href="#（3）银行家算法" class="headerlink" title="（3）银行家算法"></a>（3）银行家算法</h5><p>银行家算法是荷兰学者Dijkstra为银行系统设计的，以确保银行在发放现金贷款时，不会发生不能满足所有客户需要的情况，后来算法被用在操作系统中，用于<strong>避免死锁</strong>。 <strong>核心思想</strong>：在进程提出资源申请时，先预判这次分配是否会导致系统进入不安全状态，如果会进入不安全状态，就暂时不答应这次请求，让该进程先阻塞 思考：bat的例子中，只有一种类型的资源——钱，但是在计算机系统中有多种资源，怎么将算法拓展为多种资源的情况呢</p><h5 id="（4）知识回顾于重要考点"><a href="#（4）知识回顾于重要考点" class="headerlink" title="（4）知识回顾于重要考点"></a>（4）知识回顾于重要考点</h5><p>数据结构: 长度为m的一维数组 Available表示还有多少可用资源 n_m矩阵Max表示各进程对资源的最大需求数 n_m矩阵Allocation表示已经给各进程分配了多少资源 Max-Allocation &#x3D; Need矩阵表示各进程最多还需要多少资源 用长度为m的一位数组 Request表示进程此次申请的各种资源数 银行家算法步骤: ①检查此次申请是否超过了之前声明的最大需求数 ②检查此时系统剩余的可用资源是否还能满足这次请求 ③试探着分配，更改各数据结构 ④用安全性算法检查此次分配是否会导致系统进入不安全状态 安全性算法步骤: 检查当前的剩余可用资源是否能满足某个进程的最大需求，如果可以，就把该进程加入安全序列， 并把该进程持有的资源全部回收。 不断重复上述过程，看最终是否能让所有进程都加入安全序列。 如果系统处于安全状态，就一定不会发生死锁。如果系统进入不安全状态，就有可能发生死锁</p><h3 id="2-4-4-死锁的处理策略——死锁的检测和解除"><a href="#2-4-4-死锁的处理策略——死锁的检测和解除" class="headerlink" title="2.4_4 死锁的处理策略——死锁的检测和解除"></a>2.4_4 死锁的处理策略——死锁的检测和解除</h3><h5 id="（1）死锁的检测"><a href="#（1）死锁的检测" class="headerlink" title="（1）死锁的检测"></a>（1）死锁的检测</h5><p>为了能对系统中是否已经发生了死锁进行检测，必须：</p><ol><li>用某种数据结构来保存资源请求和分配信息</li><li>提供一种算法，根据上述信息来检测系统是否已进入死锁状态</li></ol><p>资源分配图 两种节点</p><ul><li>进程节点：对应一个进程</li><li>资源节点：对应一类资源，一类资源可能有多个</li></ul><p>两种边</p><ul><li>进程节点 -&gt; 资源节点 ：表示进程想要申请几个资源（每一条边代表一个）</li><li>资源节点 -&gt; 进程节点 ： 表示为进程分配了几个资源（每一条边代表一个）</li></ul><p>如果系统中剩余的可用资源数足够满足进程的需求，那么这个进程暂时是不会被阻塞的，可以顺利的执行下去 如果这个进程执行结束后吧资源归还给系统，就可以是某个正在等待资源的进程被激活，并且顺利的执行下去 相应的，这些被激活的进程执行完了之后又会归还一些资源，这样又可能会激活另外一些被阻塞的进程 如果按照上述过程分析，最终能消除所有边，就称这个图是可完全简化的，此时一定没有发生死锁（想到与找到一个安全序列） 如果最终不能消除所有边，那么就发生了死锁 最终连着边的进程就是处于死锁状态的进程</p><h5 id="（2）死锁的解除"><a href="#（2）死锁的解除" class="headerlink" title="（2）死锁的解除"></a>（2）死锁的解除</h5><p>解除死锁的主要方法有：</p><ol><li><strong>资源剥夺法</strong>：挂起（暂时放到外存上）某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。但是一个防止被挂起的进程长时间得不到资源而饥饿</li><li><strong>撤销进程法</strong>：（终止进程法）强制撤销部分，甚至全部死锁进程，并剥夺这些进程的资源。这种方式的优点是实现简单，但付出的代价可能会很大。因为有些进程可能已经运行了很长时间，或者已经接近结束了，一旦被终止可能功亏一篑</li><li><strong>进程回退法</strong>：让一个或多个死锁进程回退到足以避免死锁的地步，这就要系统记录进程的历史消息，设置还原点</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二.进程，处理机调度与死锁（一）</title>
      <link href="/article/8b5271f8.html"/>
      <url>/article/8b5271f8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>进程的定义，组成，组织方式，特征</p><p>调度算法</p></blockquote><span id="more"></span><h3 id="2-1-1-进程的定义，组成，组织方式，特征"><a href="#2-1-1-进程的定义，组成，组织方式，特征" class="headerlink" title="2.1_1 进程的定义，组成，组织方式，特征"></a>2.1_1 进程的定义，组成，组织方式，特征</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">1.进程的定义</span><br><span class="line">    *程序：就是一个指令序列</span><br><span class="line">    进程的定义：程序段，数据段，PCB三部分组成了进程实体（进程映像）。一般情况下，我们把进程实体</span><br><span class="line">        简称为进程，例如，所谓的创建进程，实质上是创建进程实体中的PCB;而撤销进程，实质上是撤销</span><br><span class="line">        进程实体中的PCB，PCB是进程存在的唯一标识</span><br><span class="line">    PCB:系统为每个运行的程序配置了一个数据结构，称为进程控制块（PCB），用来描述进程的各种信息</span><br><span class="line">        （如程序代码存放的位置，设备的使用情况等等）</span><br><span class="line">        存不同的角度，进程可以有不同的定义  强调“动态性”</span><br><span class="line">    (1).进程是程序的一次执行过程</span><br><span class="line">    (2).进程是一个程序及其数据在CPU上顺序执行时所发生的动作</span><br><span class="line">    (3).进程是具有独立功能的程序在数据集合上的运行过程，它是系统进行资源分配和调用的一个独立单位</span><br><span class="line">    引入了进程实体的概念后，可把进程定义为</span><br><span class="line">    进程是进程实体的运行过程，数系统进行资源分配和调度的一个独立单位</span><br><span class="line"></span><br><span class="line">    注：严格来说，进程实体和很进程不一样，进程是动态的，进程实体是静态的。除非题目特地考察二者的</span><br><span class="line">        区别，否则可以认为进程实体就是进程，因此我们可以说“进程由程序段，数据段，PCB三部分组成”</span><br><span class="line">        程序段 程序代码即存放在此</span><br><span class="line">    数据段 程序运行时产生，使用的运算数据</span><br><span class="line">    PCB 操作系统通过PCB来管理进程，因此PCB中应包含操作系统对进程进行管理所需的各种信息</span><br><span class="line">    PCB:只要是操作系统所需的数据都在PCB中</span><br><span class="line">    进程描述信息</span><br><span class="line">        *  进程标识符 PID</span><br><span class="line">        *用户标识符 UID</span><br><span class="line">    进程控制和管理信息</span><br><span class="line">        * 进程当前状态</span><br><span class="line">        * 进程的优先级</span><br><span class="line">    资源分配清单</span><br><span class="line">        * 程序段指针</span><br><span class="line">        * 数据段指针</span><br><span class="line">        * 键盘</span><br><span class="line">        * 鼠标</span><br><span class="line">    处理机的相关信息 各种寄存器值</span><br><span class="line">2.进程的组织</span><br><span class="line">    链接方式：按照进程状态将PCB分成多个队列，操作系统持有指向各个队列的指针</span><br><span class="line">        执行指针</span><br><span class="line">        就绪队列指针</span><br><span class="line">        阻塞队列指针</span><br><span class="line">    索引方式：根据进程状态的不同，建立几张索引表，操作系统持有各个索引表的指针</span><br><span class="line">        执行指针</span><br><span class="line">        就绪表指针</span><br><span class="line">        阻塞表指针</span><br><span class="line">3.进程的特征</span><br><span class="line">    动态性：进程是程序的一次执行过程</span><br><span class="line">    并发性：内存中有多个进程实体，各进程可并发执行</span><br><span class="line">    独立性：进程是能独立运行，独立获得资源，独立接受调度的基本单位</span><br><span class="line">    异步性：各进程按各自独立的，不可预知的速度向前推进（操作系统要提供“进程同步机制”解决异步问题）</span><br><span class="line">    结构性：进程由程序段，数据段，PCB组成</span><br></pre></td></tr></table></figure><h3 id="2-1-2-进程的状态与转换"><a href="#2-1-2-进程的状态与转换" class="headerlink" title="2.1_2 进程的状态与转换"></a>2.1_2 进程的状态与转换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.三种基本状态</span><br><span class="line">    运行态：占有cpu,并在cpu上运行</span><br><span class="line">    就绪态：已具备了运行的条件，但由于没有空闲cpu，而暂时不能运行</span><br><span class="line">    阻塞态：因等待某一事件暂时不能运行</span><br><span class="line">2.另外两种状态</span><br><span class="line">    创建态：进程正在被创建，操作系统为进程分配资源，初始化PCB</span><br><span class="line">    终止态：进程正在系统中被撤销，操作系统会回收进程拥有的资源，撤销PCB</span><br><span class="line">3.进程状态的转换</span><br><span class="line">    就绪态 -&gt; 运行态：进程被调度</span><br><span class="line">    运行态 -&gt; 就绪态：时间片到，或cpu被其他优先级高的进程抢占</span><br><span class="line">    运行态 -&gt; 阻塞态：等待资源分配，或等待某个事件发生(主动行为)</span><br><span class="line">    阻塞态 -&gt; 就绪态：资源分配完成，等待的时间发生（被动行为）</span><br><span class="line">    创建态 -&gt; 就绪态：系统完成创建进程的相关工作</span><br><span class="line">    运行态 -&gt; 终止态：进程运行结束或运行过程遇到不可修复的错误</span><br></pre></td></tr></table></figure><h3 id="2-1-3-进程控制"><a href="#2-1-3-进程控制" class="headerlink" title="2.1_3 进程控制"></a>2.1_3 进程控制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1.进程控制</span><br><span class="line">    进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建新进程，撤销已有进程，实现</span><br><span class="line">    进程转换等功能</span><br><span class="line">    简化理解：进程控制就是要实现进程状态转换</span><br><span class="line"></span><br><span class="line">2.原语</span><br><span class="line">    原语的特点是执行期间不允许中断，只能一气呵成</span><br><span class="line">    这种不可被打断的操作即原子操作</span><br><span class="line">    原语采用“关中断指令”和“开中断指令” -&gt;&gt; 特权指令，核心态下进行</span><br><span class="line">3.进程控制的相关原语</span><br><span class="line">    无论哪个原语，执行三件事</span><br><span class="line">        更新PCB信息</span><br><span class="line">        将PCB插入合适的队列</span><br><span class="line">        分配/回收资源</span><br><span class="line">    进程的创建 创建原语</span><br><span class="line">        申请空白PCB</span><br><span class="line">        为新进程分配所需资源</span><br><span class="line">        初始化PCB</span><br><span class="line">        将pcb插入就绪队列</span><br><span class="line">    进程的终止 撤销原语</span><br><span class="line">        从PCB集合中找到终止进程的PCB</span><br><span class="line">        若进程正在运行，立即剥夺cpu,将cpu分配给其他进程</span><br><span class="line">        终止所有子进程</span><br><span class="line">        将该进程拥有的资源归还给操作系统或父进程</span><br><span class="line">        删除PCB</span><br><span class="line">    进程的阻塞 </span><br><span class="line">        阻塞原语：</span><br><span class="line">            找到要阻塞的进程对应PCB</span><br><span class="line">            保护进程运行现场，将PCB状态信息设置为“阻塞态”，暂时停止进程的运行</span><br><span class="line">            将PCB进程插入阻塞队列</span><br><span class="line">        唤醒原语：</span><br><span class="line">            在阻塞队列中找到PCB</span><br><span class="line">            将PCB从阻塞队列移除，设置进程为就绪态</span><br><span class="line">            将PCB插入就绪队列</span><br><span class="line">    进程的切换 切换原语</span><br><span class="line">        将运行环境信息存入PCB</span><br><span class="line">        PCB移入相应队列</span><br><span class="line">        选择一个进程执行，并更新其PCB</span><br><span class="line">        根据PCB恢复进程所需的运行环境</span><br></pre></td></tr></table></figure><h3 id="2-1-4-进程通信"><a href="#2-1-4-进程通信" class="headerlink" title="2.1_4 进程通信"></a>2.1_4 进程通信</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">进程通信：进程之间的信息交换</span><br><span class="line">进程是分配系统资源的单位，因此各进程拥有的内存地址互相独立</span><br><span class="line"></span><br><span class="line">1.共享存储</span><br><span class="line">    两个进程对共享空间的访问必须是互斥的（互斥访问通过操作系统提供的工具实现）</span><br><span class="line"></span><br><span class="line">    （1）基于数据结构的共享</span><br><span class="line">        比如在共享空间只能存放一个长度为10的数组，这种方式速度慢，限制多，低级通信方式</span><br><span class="line">    （2）基于存储区的共享</span><br><span class="line">        在内存中画出一块共享存储区，数据的形势，存放位置都由进程控制，而不是操作系统</span><br><span class="line">        这种共享方式速度更快，是一种高级通信方式</span><br><span class="line">2.管道通信</span><br><span class="line">    管道：用于连接读写进程的一个共享文件，又名pipe文件，其实就是在内存中开辟一个大小固定的缓冲区</span><br><span class="line"></span><br><span class="line">    （1）管道只能采用半双工通信，某一时间内只能实现单向的传输，如果要实现双向同时通信，则需要设</span><br><span class="line">        置两个管道</span><br><span class="line">    （2）各进程需要互斥的访问管道</span><br><span class="line">    （3）数据已字符流的形式写入管道，当管道写满时，写进程的write()系统调用将被阻塞，等待写入的</span><br><span class="line">        数据被取走。当读进程把数据全部取走后，管道变空，此时读进程的read()系统调用被阻塞</span><br><span class="line">    （4）如果没写满，就不允许读。如何没读完，就不允许写</span><br><span class="line">    （5）数据一旦被读出，就从管道中被抛弃，这就意味着读进程最多只能有一个，否则可能有读错数据的</span><br><span class="line">        情况</span><br><span class="line">3.消息传递</span><br><span class="line">    进程间的数据交换已格式化消息（Message）为单位，进程通过操作系统提供的“发出/接受消息”两个原</span><br><span class="line">    语进行数据交换</span><br><span class="line"></span><br><span class="line">    （1）直接通信方式 消息直接挂在进程的消息缓存队列上</span><br><span class="line">    （2）间接通信方式（信箱通信方式）消息要先发送到中间实体（信箱）</span><br></pre></td></tr></table></figure><h3 id="2-1-5-线程概念-多线程模型"><a href="#2-1-5-线程概念-多线程模型" class="headerlink" title="2.1_5 线程概念 多线程模型"></a>2.1_5 线程概念 多线程模型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">1.什么是线程，为什么要引入线程</span><br><span class="line">    有的进程可能需要“同时”做很多事情而传统的进程只能串行的执行一系列程序，从而引入了线程，</span><br><span class="line">    来增加并发度</span><br><span class="line"></span><br><span class="line">    线程：轻量级进程</span><br><span class="line">    线程是一个基本的cpu执行单元，也是程序执行流的最小单位</span><br><span class="line"></span><br><span class="line">    引入线程带来的额变化</span><br><span class="line">        （1）进程是资源分配的基本单位，线程是调度的基本单位</span><br><span class="line">        （2）各线程之间也可以并发，提升了并发度</span><br><span class="line">        （3）如果是同一进程的线程切换，则不需要切换进程环境，并发所带来的的系统开销减少</span><br><span class="line">2.线程的属性</span><br><span class="line">    线程是处理机调度的单位</span><br><span class="line">    多CPU环境中，各个线程可占用不同的cpu</span><br><span class="line">    每个线程都有一个线程ID,线程控制块(TCB)</span><br><span class="line">    线程也有就绪，阻塞，运行三种基本状态</span><br><span class="line">    线程几乎不拥有系统资源</span><br><span class="line">    同一进程的不同线程之间共享进行的资源</span><br><span class="line">    由于共享内存地址空间，同一进程中的线程通信甚至无需系统干预</span><br><span class="line">    同一进程中的线程切换，不会引起进程切换</span><br><span class="line">    不同进程中的线程切换，会引起进程切换</span><br><span class="line">    切换同进程内的线程，系统开销很小</span><br><span class="line">    切换进程，系统开销较大</span><br><span class="line">3.线程的实现方式</span><br><span class="line">    用户级线程</span><br><span class="line">        由应用程序通过线程库实现，所有的线程管理工作都由应用程序负责（包括线程切换）</span><br><span class="line">        “用户级线程”就是“从用户视角能看到的线程”</span><br><span class="line">    内核级线程</span><br><span class="line">        线程的管理由操作系统内核来完成，线程的调度，切换必须在核心态下完成</span><br><span class="line">        “内核级线程”就是“从操作系统内核视角看到的线程”</span><br><span class="line">    ** 操作系统只“看得见”内核级线程，因此只有内核级线程才是处理机调度的基本单位</span><br><span class="line"></span><br><span class="line">4.多线程模型</span><br><span class="line">    在同时支持用户级线程和内核级线程的系统中，由多个用户级线程映射到多个内核级线程的问题引出了</span><br><span class="line">    “多线程模型”问题</span><br><span class="line"></span><br><span class="line">    多对一：多个用户级线程映射到一个内核级线程</span><br><span class="line">        优点：用户级线程的切换在用户空间就可以完成，不需要切换到核心态，进程管理的系统开销小</span><br><span class="line">            效率高</span><br><span class="line">        缺点：一旦一个线程发送了阻塞导致其他线程也阻塞，导致并发度不高，多个线程不能在多核的</span><br><span class="line">            处理机上并行执行</span><br><span class="line">    一对一：一个用户级线程对应一个内核级线程</span><br><span class="line">        优点：当一个线程被阻塞，其他用户级线程可以继续执行，并发性能强，多个线程可以在多核</span><br><span class="line">            处理机下并行执行</span><br><span class="line">        缺点：进程的切换在内核空间进行，线程的管理成本高，开销大</span><br><span class="line">    多对多：n个用户级线程映射到M个内核级线程（n &gt;= m）</span><br><span class="line">        克服了多对一并发度不高的缺点，又客服了一对一模型系统开销大的缺点</span><br></pre></td></tr></table></figure><h3 id="2-2-1-处理机调度-概念，层次"><a href="#2-2-1-处理机调度-概念，层次" class="headerlink" title="2.2_1 处理机调度 概念，层次"></a>2.2_1 处理机调度 概念，层次</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1.调度的基本概念</span><br><span class="line">    调度：有一堆任务需要处理，但不限同时处理，这时候就需要确定某种规则来决定处理这些任务</span><br><span class="line">        的顺序</span><br><span class="line">    在多道程序系统中，进程的数量往往是多于处理机个数的，这样不可能并行的处理各个进程</span><br><span class="line">        处理机调度，就是从就绪队列中按照一定的算法选择一个进程并将处理机分配给它运行，已实现进程的并发执行   </span><br><span class="line">2.处理机调度的三个层次</span><br><span class="line">    高级调度</span><br><span class="line">        由于内存空间有限，操作系统无法将用户提交的所有作业全部加载进内存，因此需要某种规则来决定</span><br><span class="line">        将作业调入内存的顺序</span><br><span class="line"></span><br><span class="line">        高级调度（作业调度），按照一定的顺序从外存上处于后备队列的作业中选择一个或多个作业，给它</span><br><span class="line">        门分配内存等必要资源，建立相应进程的PCB，以使他们获得竞争处理机的权利</span><br><span class="line"></span><br><span class="line">        高级调度是辅存（外存）与内存之间的调度。每个作业只调入一次，调出一次。作业调入时会创建PCB</span><br><span class="line">        作业调出时才撤销PCB。高级调度主要是指调入问题，因为只有调入的时机需要操作系统来决定，但</span><br><span class="line">        调出的时机必然是作业运行结束</span><br><span class="line">    中级调度</span><br><span class="line">        引入了虚拟存储技术之后，可将暂时不能运行的进程调至外存等待，等它重新具备了运行条件或内存稍有空闲</span><br><span class="line">        ，再重新调入内存</span><br><span class="line">        这么做的目的是提高内存利用率和系统吞吐量</span><br><span class="line">        暂时调到外存的进程状态为挂起态，值得注意的是，处于挂起态的进程，PCB并不会调到外存，而是在内存记录</span><br><span class="line">        进程数据在外存存放的位置，进程状态等信息，操作系统通过PCB来保持对各个进程的监控，管理，被挂起进程</span><br><span class="line">        的PCB会被放入到挂起队列</span><br><span class="line"></span><br><span class="line">        中级调度（内存调度），就是要决定将哪个挂起态的进程重新调入内存</span><br><span class="line">        一个进程可能多次被调入，调出内存，因此中级调度发生的频率比高级调度更高</span><br><span class="line"></span><br><span class="line">    **********************************************************************************</span><br><span class="line">    补充知识：进程的挂起态和七状态模型 </span><br><span class="line">    暂时调到外存等待的进程状态为挂起状态</span><br><span class="line">    挂起状态又可以分为：就绪挂起，阻塞挂起</span><br><span class="line">        挂起和阻塞的区别 ：两种状态都是进程暂时不能获取cpu资源,挂起是把进程调度到外存，阻塞进程还在内存中</span><br><span class="line"></span><br><span class="line">    **********************************************************************************</span><br><span class="line"></span><br><span class="line">    低级调度</span><br><span class="line">        低级调度（进程调度）按照某中规则从就绪队列中选择一个进程，将处理机分配给它</span><br><span class="line">        进程调度是操作系统中最基本的一种调度，在一般的操作系统中都必须进行进程调度</span><br><span class="line">        进程调度的频率很高，一般几十毫秒一次</span><br></pre></td></tr></table></figure><h3 id="2-2-2-进程调度的时机切换与进程调度方式"><a href="#2-2-2-进程调度的时机切换与进程调度方式" class="headerlink" title="2.2_2 进程调度的时机切换与进程调度方式"></a>2.2_2 进程调度的时机切换与进程调度方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1.进程调度（低级调度）按照一定的算法从就绪队列中选择一个进程为其分配处理机</span><br><span class="line"></span><br><span class="line">    需要进行进程调度与切换的情况</span><br><span class="line">        主动放弃处理机</span><br><span class="line">        被动放弃处理机</span><br><span class="line">    不能进行进程调度和切换的情况</span><br><span class="line">        在处理中断的过程</span><br><span class="line">        进程在操作系统内核程序临界区</span><br><span class="line">        在原子操作过程中（原语）</span><br><span class="line"></span><br><span class="line">    进程在处于临界区时不能进行处理机调度 ×</span><br><span class="line"></span><br><span class="line">    临界资源：一段时间内只允许一个进程使用的资源，各进程需要互斥的访问临界资源</span><br><span class="line">    临界区：访问临界资源的代码</span><br><span class="line">    内核程序临界区：一般是用来访问内核某种数据结构，比如进程的就绪队列（有各就绪进程的PCB组成）</span><br><span class="line"></span><br><span class="line">2.进程调度的方式</span><br><span class="line">    非剥夺调度方式，又称非抢占方式</span><br><span class="line">        只允许进程主动放弃处理机，在运行过程中即便有更紧急的任务到达，当前进程依然会使用处理机，直到该进程终止</span><br><span class="line">        或主动要求进入阻塞态</span><br><span class="line"></span><br><span class="line">        实现简单，系统开销小，但是无法处理紧急任务，适合早期的批处理系统</span><br><span class="line">    剥夺调度方式，又称抢占式</span><br><span class="line">        当一个进程在处理机上运行时，如果有一个更紧急的任务需要处理机，则立即暂停正在执行的进程，将处理机分配给</span><br><span class="line">        更紧急的那个进程</span><br><span class="line"></span><br><span class="line">        可以优先处理紧急的进程，也可以实现让各进程按时间片轮流执行的功能，适合于分时操作系统和实时操作系统</span><br><span class="line"></span><br><span class="line">3.进程的切换与过程</span><br><span class="line">    “狭义的进程调度”与“进程切换”的区别</span><br><span class="line">    狭义的进程调度是指按照一定的算法从就绪队列中选择一个要运行的进程（这个进程可以使刚刚被暂停执行的进程，也可以是</span><br><span class="line">    另一个进程，后一种情况就需要进程切换）</span><br><span class="line">    进程切换：是指让一个进程让出处理机，由另一个进程占用处理机的过程</span><br><span class="line"></span><br><span class="line">    广义的进程调度 包含了选择一个进程和进程切换两个步骤</span><br><span class="line"></span><br><span class="line">    进程切换的过程主要完成了</span><br><span class="line">        （1）对原来的运行进程的各种数据保存</span><br><span class="line">        （2）对新的进程各种数据进程恢复</span><br><span class="line">    注意：进程切换是有代价的，因此如果过于频繁的进行进程调度，切换，必然会使整个系统的效率降低，使系统大部分时间花在了</span><br><span class="line">        进程切换上，而真正执行进程的时间减少</span><br></pre></td></tr></table></figure><h3 id="2-2-3-调度算法的评价指标"><a href="#2-2-3-调度算法的评价指标" class="headerlink" title="2.2_3 调度算法的评价指标"></a>2.2_3 调度算法的评价指标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1.cpu利用率</span><br><span class="line">    cpu忙碌实现/总时间</span><br><span class="line"></span><br><span class="line">    利用率 = 忙碌时间/总时间</span><br><span class="line"></span><br><span class="line">2.系统吞吐量</span><br><span class="line">    计算机希望尽可能少的时间完成尽可能多的作业</span><br><span class="line"></span><br><span class="line">    系统吞吐量：单位时间内完成了多少道作业</span><br><span class="line"></span><br><span class="line">    系统吞吐量 = 总共完成了多少道作业/总时间</span><br><span class="line"></span><br><span class="line">3.周转时间</span><br><span class="line">    作业提交给系统开始，到作业完成这段时间间隔</span><br><span class="line"></span><br><span class="line">   （作业）周转时间=作业完成时间-作业提交时间</span><br><span class="line"></span><br><span class="line">    平均周转时间=各作业周转时间之和/作业数</span><br><span class="line"></span><br><span class="line">    带权周转时间=作业周转时间/作业实际运行的时间</span><br><span class="line"></span><br><span class="line">    平均带权周转时间 = 带权周转时间/作业数</span><br><span class="line"></span><br><span class="line">4.等待时间</span><br><span class="line">    进程/作业处于等待处理机状态的时间之和，等待时间越长，用户满意度越低</span><br><span class="line"></span><br><span class="line">    对于进程来说，等待时间就是在进程建立后等待被服务的时间之和（等待I/O完成时不计入等待时间）</span><br><span class="line">    对于作业来说，不仅要考虑建立进程后的等待时间，还要加上作业在外存后备队列等待的时间</span><br><span class="line"></span><br><span class="line">    一个作业要被CPU服务多久，使用多久的I/O设备一般是不变的，因此调度算法只会影响作业/进程的等待时间，</span><br><span class="line">    “平均等待时间”评价整体性能</span><br><span class="line"></span><br><span class="line">5.响应时间</span><br><span class="line">    用户提出请求到首次产生响应的时间</span><br></pre></td></tr></table></figure><h3 id="2-2-4-FCFS-SJF-HRRN调度算法"><a href="#2-2-4-FCFS-SJF-HRRN调度算法" class="headerlink" title="2.2_4 FCFS,SJF,HRRN调度算法"></a>2.2_4 FCFS,SJF,HRRN调度算法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Tips:各种调度算法的学习思路</span><br><span class="line">    1. 算法思想</span><br><span class="line">    2. 算法规则</span><br><span class="line">    3. 用于作业调度还是进程调度</span><br><span class="line">    4. 抢占式？非抢占式？</span><br><span class="line">    5. 优点和缺点</span><br><span class="line">    6. 是否会导致饥饿 饥饿：某个进程/作业长期得不到服务</span><br><span class="line"></span><br><span class="line">先来先服务（FCFS,First Come First Serve）</span><br><span class="line"></span><br><span class="line">    算法思想：“公平”，类似生活中排队</span><br><span class="line">    算法规则：按照作业/进程到达的先后顺序进行服务</span><br><span class="line">    用于进程/作业调度：</span><br><span class="line">        用于进程调度，考虑哪个进程先到达就绪队列</span><br><span class="line">        对于作业调度，考虑哪个作业先到达后备队列</span><br><span class="line">    是否抢占：非抢占式的算法（类似排队的时候插队不行）</span><br><span class="line">    优缺点：</span><br><span class="line">        优点：公平，算法实现简单</span><br><span class="line">        缺点：排在长作业（进程）后面的短作业需要等待很长时间，带权周转时间很大，对短时间来说用户体验不好</span><br><span class="line">            即，FCFS算法对长作业有利，对短作业不利（Eg:排队上厕所） </span><br><span class="line">    是否会导致饥饿：不会</span><br><span class="line">    短作业优先（SJF,Shortest Job First）</span><br><span class="line"></span><br><span class="line">    算法思想：追求最少的平均等待时间，最少的平均周转时间，最少的平均带权周转时间</span><br><span class="line">    算法规则：最短的作业/进程最先得到服务（“最短”是指服务时间最短）</span><br><span class="line">    用于进程/作业调度：</span><br><span class="line">        既可以用于作业调度，也可以用于进程调度</span><br><span class="line">        用于进程调度时称为“短进程优先（SPF,Shortest Process First）算法”</span><br><span class="line">    是否抢占：SJF和SPF是非抢占式算法，但是也有抢占式版本--最短剩余时间优先算法（SRTN,Shortest Remaining Time Next)</span><br><span class="line">    优缺点：</span><br><span class="line">        优点：得到“最短”平均等待时间，平均周转时间</span><br><span class="line">        缺点：不公平，对短作业有利，对长作业不利，可能产生饥饿现象</span><br><span class="line">    是否会导致饥饿：会，如果源源不断的有短作业/进程到来，可能使长作业/进程得不到服务，产生“饥饿现象”,如果一直得不到服务，</span><br><span class="line">        则成为饿死</span><br><span class="line"></span><br><span class="line">FCFS,SJF 的思考</span><br><span class="line">    FCFS选择等待时间最长的作业理解：可以理解为先来先等待（去网吧等空机子，先去的先等待）</span><br><span class="line">    考虑一种算法，既考虑到各个作业的等待时间，又兼顾到作业的运行时间</span><br><span class="line"></span><br><span class="line">高响应比优先算法（HRRN,Hign Responce Ratio Next）</span><br><span class="line"></span><br><span class="line">    算法思想：综合考虑作业/进程的等待时间和要求服务的时间</span><br><span class="line">    算法规则：在每次调度时先计算各个作业/进程的响应比，选择响应比最高的作业/进程为其服务</span><br><span class="line">        响应比 = （等待时间+要求服务时间）/要求服务时间 （&gt;1）</span><br><span class="line">    用于进程/作业调度：</span><br><span class="line">        既可以用于作业调度，也可以用于进程调度</span><br><span class="line">    是否抢占：非抢占式算法，因为只有进程/作业主动放弃处理机时，才需要调度，才需要计算响应比</span><br><span class="line">    优缺点：</span><br><span class="line">        优点：综合考虑了等待时间和运行时间</span><br><span class="line">            等待时间相同时，要求服务时间短的优先（SJF的优点）</span><br><span class="line">            要求服务时间（运行时间）相同时，等待时间长的优先（FCFS的优先）</span><br><span class="line">            对于长作业来说，随着等待时间越来越久，响应比也会越来越大，从而避免了长作业饥饿的问题</span><br><span class="line">    是否会导致饥饿：不会</span><br><span class="line">    总结：这几种算法主要关系用户的公平性，平均周转时间，平均等待时间等评价系统整体性能的指标，但是不关心响应时间，也不区分    任务的紧急程度，因此对用户来说，交互性很糟糕，因此这三种算法一般适合于早期的批处理系统，当然，FCFS算法也进程结合    其他算法使用，选择也用的比较多。适用于交互式调度算法将在下个小结介绍</span><br></pre></td></tr></table></figure><p>例题：各进程到达就绪队列的时间，需要的运行时间如下表所示，依次使用FCFS,SJF,SRTN,HRRN 调度算法，计算各进程的等待时间 ，平均等待时间，周转时间，平均周转时间，带权周转时间，平均带权周转时间。</p><ul><li>进程 到达时间 运行时间</li><li>p1    0     7</li><li>p2    2     4</li><li>p3    4     1</li><li>p4    5     4</li></ul><h2 id="FCFCS-amp-amp-SJF"><a href="#FCFCS-amp-amp-SJF" class="headerlink" title="FCFCS &amp;&amp; SJF"></a>FCFCS &amp;&amp; SJF</h2><p><img src="https://s1.ax1x.com/2020/06/04/t0bPaj.jpg"></p><h2 id="SRTN"><a href="#SRTN" class="headerlink" title="SRTN"></a>SRTN</h2><p><img src="https://s1.ax1x.com/2020/06/04/t0bmsU.jpg"></p><h2 id="HRRN"><a href="#HRRN" class="headerlink" title="HRRN"></a>HRRN</h2><p><img src="https://s1.ax1x.com/2020/06/04/t0b1iR.jpg"></p><h3 id="2-2-5-时间片轮转，优先级，多级反馈队列调度算法"><a href="#2-2-5-时间片轮转，优先级，多级反馈队列调度算法" class="headerlink" title="2.2_5 时间片轮转，优先级，多级反馈队列调度算法"></a>2.2_5 时间片轮转，优先级，多级反馈队列调度算法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">Tips:各种调度算法的学习思路</span><br><span class="line"></span><br><span class="line">1. 算法思想</span><br><span class="line">2. 算法规则</span><br><span class="line">3. 这种调度算法是作业调度还是进程调度</span><br><span class="line">4. 抢占式？非抢占式</span><br><span class="line">5. 优点和缺点</span><br><span class="line">6. 是否会导致饥饿</span><br><span class="line">1.时间片轮转(RR,Round-Robin)</span><br><span class="line"></span><br><span class="line">    算法思想：公平的，轮流的为各个进程服务，让每个进程在一定的时间间隔内都可以得到相应</span><br><span class="line">    算法规则：</span><br><span class="line">        按照各进程到达就绪队列的顺序，轮流让各个进程执行一个时间片（如100ms），若进程</span><br><span class="line">        未在一个时间片内执行完则剥夺处理机，将进程重新放回就绪队列队尾排队</span><br><span class="line">    用于进程/作业调度：</span><br><span class="line">        只能用于进程调度（只有作业放入内存建立了相应的进程后，才能被分配处理机</span><br><span class="line">        时间片）</span><br><span class="line">    是否抢占：</span><br><span class="line">        若进程未能在时间片内运行完，将被强行剥夺处理机使用权，所以时间片轮转调度算法</span><br><span class="line">        属于抢占式的算法，由时钟装置发出时钟中断来通知CPU时间片已到</span><br><span class="line">    优缺点： </span><br><span class="line">        优点：公平，响应快，适合于分时操作系统</span><br><span class="line">        缺点：由于高频率的进程切换，因此有一定的开销；不区分任务的紧急程度</span><br><span class="line">    是否会导致饥饿：不会</span><br><span class="line">    补充：时间片太大或太小的影响</span><br><span class="line">        如何时间片太大，导致每一个进程都可以在一个时间片内就完成，则时间片轮转调度算法退化</span><br><span class="line">        为先来先服务调度算法，并且会增大进程响应时间，因此时间片不能太大</span><br><span class="line">        *增大响应时间理解：比如系统中有十个进程并发执行，如果时间片为1s，则一个进程被响应</span><br><span class="line">        可能需要等待9s</span><br><span class="line"></span><br><span class="line">        如何时间片太小，进程的调度，切换是有代价的（保存，恢复运行环境），导致进程切换过于</span><br><span class="line">        频繁，系统会话大量的时间来处理切换进程，导致用于执行进程的时间减少</span><br><span class="line">        （一般来说，设计时间片要让切换进程的开销比不超过1%）</span><br><span class="line"></span><br><span class="line">2.  优先级调度算法</span><br><span class="line">    算法思想：随着计算机的发展，特别是实时操作系统的出现，越来越多的应用场景需要根据任务的</span><br><span class="line">        紧急程度来决定处理顺序</span><br><span class="line">    算法规则：</span><br><span class="line">        每个作业/进程都有各自的优先级，调度时选择优先级最高的作业/进程</span><br><span class="line">    用于进程/作业调度：</span><br><span class="line">        既可以用于作业调度也可以用于进程调度，甚至还会用于之后学习的I/O调度中</span><br><span class="line">    是否抢占：</span><br><span class="line">        抢占式，非抢占式都有，在计算的时候，非抢占式只需在进程主动放弃处理机时进行调度即可</span><br><span class="line">        而抢占式还需要在就绪队列发送时，检查是否会发生抢占</span><br><span class="line">    优缺点： </span><br><span class="line">        优点：使用优先级区分任务的紧急程度，适用于实时操作系统</span><br><span class="line">        缺点：如果源源不断的有高优先级的作业/进程到来，可能会导致饥饿，甚至饿死</span><br><span class="line">    是否会导致饥饿：会（圆源源不断的有高优先级的进程到来）</span><br><span class="line"></span><br><span class="line">    补充：</span><br><span class="line">        就绪队列未必只有一个，可以按照不同的优先级组织，另外，也可以把优先级高的进程排在更靠近</span><br><span class="line">        队头的位置</span><br><span class="line">        根据优先级是否可以动态改变 可以将优先级分为 静态优先级 和 动态优先级两种</span><br><span class="line">        静态优先级：创建进程时确定，然后一直保持不变</span><br><span class="line">        动态优先级：创建进程时有一个初始值，之后会动态的调整优先级</span><br><span class="line"></span><br><span class="line">        思考：如何合理的设置进程的优先级</span><br><span class="line"></span><br><span class="line">        系统进程的优先级 高于 用户进程</span><br><span class="line">        前台进程的优先级 高于 后台进程</span><br><span class="line">        操作系统更偏好I/O型进程（或称I/O繁忙型进程）</span><br><span class="line">        与I/O型进程对应的是计算型进程（或称cpu繁忙进程）</span><br><span class="line"></span><br><span class="line">        思考：如果采用动态优先级，什么时候跳转</span><br><span class="line"></span><br><span class="line">        可以从追求公平，提升资源利用率角度考虑</span><br><span class="line">        如果某进程在就绪队列等待了很长时间，可以适当提高优先级</span><br><span class="line">        如果某进程占用了处理机很长时间，可以适当降低其优先级</span><br><span class="line">        如果发现一个进程频繁的进程I/O操作，可以适当的提高优先级</span><br><span class="line">            思考：</span><br><span class="line">        FCFS优点 公平 </span><br><span class="line">        SJF优点   平均等待时间/周转时间等比较短</span><br><span class="line">        时间片轮转优点 每个进程得到及时的响应</span><br><span class="line">        优先级调度算法优点 灵活的调整每个进程被服务的机会</span><br><span class="line"></span><br><span class="line">        有没有一种算法结合上面所有优点？？</span><br><span class="line"></span><br><span class="line">3.多级反馈队列调度算法</span><br><span class="line">    算法思想：对其他算法的折中权衡</span><br><span class="line">    算法规则：</span><br><span class="line">        1. 设置多级就绪队列，各级就绪队列的优先级从高到低，时间片从大到小</span><br><span class="line">        2. 新进程到达时先进入第一级队列，按FCFS原则排队等待被分配时间片，若用完时间片进程还未结束</span><br><span class="line">        则进程进入下一队列队尾，如果此时已经是在最下列的队列，则会放回改队列的队伍</span><br><span class="line">        3. 只有当K级队列为空时，才会为k+1级队头的进程分配时间片</span><br><span class="line">    用于进程/作业调度：用于进程调度</span><br><span class="line">    是否抢占：抢占式算法，在K级队列的进程运行过程中，若更上级的队列中存入了一个新进程，则由于新</span><br><span class="line">        进程处于优先级更高的队列中，新进程会抢占处理机，原来运行的进程放回k级队列队尾</span><br><span class="line">    优缺点： </span><br><span class="line">        优点：对各个进程相对公平(FCFS优点)；每个新到达的进程都可以很快得到响应（RR的优点）；短进程</span><br><span class="line">            只需要很少的时间就能完成（SPF的优点）；不必实现估计进程运行时间（避免用户造假）；可以灵活</span><br><span class="line">            的跳转各类进程的偏好程度，比如cpu密集型进程，i/o密集型进程（拓展：可以将因I/O阻塞的进程</span><br><span class="line">            重新放回原队列，这样I/O进程就可以保持较高的优先级）</span><br><span class="line">    是否会导致饥饿：会（源源不断的短进程）</span><br><span class="line"></span><br><span class="line">    比起早期的批处理系统，由于计算机造假大幅降低，因此之后出现的交互式操作系统（包括分时操作系统，</span><br><span class="line">    实时操作系统）更注重系统的响应时间，公平性，平衡性等指标。而这几种算法也恰好的满足交互式系统的</span><br><span class="line">    需求。因此这三种算法适合用于交互式系统（UNIX使用的就是多级反馈队列调度算法）</span><br><span class="line"></span><br><span class="line">    一定要做习题！！！！！！！！！！（明天）</span><br></pre></td></tr></table></figure><h2 id="例题1："><a href="#例题1：" class="headerlink" title="例题1："></a>例题1：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">各进程到达就绪队列的时间，需要运行的时间如下表所示</span><br><span class="line">进程  到达时间  运行时间</span><br><span class="line">p1      0       5</span><br><span class="line">p2      2       4</span><br><span class="line">p3      4       1</span><br><span class="line">p4      5       6</span><br><span class="line"></span><br><span class="line">使用时间片轮转（RR）算法,分析时间片大小是2,5时进程的运行情况</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/09/08/wQ1Dns.jpg" alt="wQ1Dns.jpg"> <img src="https://s1.ax1x.com/2020/09/08/wQ15u9.jpg" alt="wQ15u9.jpg"></p><h2 id="例题2："><a href="#例题2：" class="headerlink" title="例题2："></a>例题2：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">各进程到达就绪队列的时间，需要运行的时间，进程优先数如图所示。分别使用非抢占式的优先级调度算法，分析</span><br><span class="line">进程运行的情况（注：优先数越大，优先级越高）</span><br><span class="line"></span><br><span class="line">进程      到达时间        运行时间        优先数</span><br><span class="line">p1          0           7                1</span><br><span class="line">p2          2           4                2</span><br><span class="line">p3          4           1                3</span><br><span class="line">p4          5           4                2</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/09/08/wQ39Et.jpg" alt="wQ39Et.jpg"></p><h2 id="例题3："><a href="#例题3：" class="headerlink" title="例题3："></a>例题3：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">各进程到达就绪队列的时间，需要的运行时间如下图。使用多级反馈队列调度算法，分析进程运行的过程</span><br><span class="line"></span><br><span class="line">进程  到达时间  运行时间</span><br><span class="line">p1      0       8</span><br><span class="line">p2      1       4</span><br><span class="line">p3      5       1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/09/02/bzruxsyj4gTfLDH.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一.操作系统引论</title>
      <link href="/article/7568c2fe.html"/>
      <url>/article/7568c2fe.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>操作系统引论</p></blockquote><span id="more"></span><h2 id="一-操作系统引论"><a href="#一-操作系统引论" class="headerlink" title="一 .操作系统引论"></a>一 .操作系统引论</h2><h3 id="1-1-1-操作系统的概念，功能和目标"><a href="#1-1-1-操作系统的概念，功能和目标" class="headerlink" title="1.1_1 操作系统的概念，功能和目标"></a>1.1_1 操作系统的概念，功能和目标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1.概念：</span><br><span class="line">        操作系统（Operating System,OS）是指控制和管理整个计算机系统的硬件和软件资源，</span><br><span class="line">    并合理的组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境，</span><br><span class="line">    它是计算机系统中最基本的系统软件    </span><br><span class="line">2.操作系统的功能与目标</span><br><span class="line">    作为系统资源的管理者 目标 安全，高效</span><br><span class="line">    * 处理机管理</span><br><span class="line">    * 存储器管理</span><br><span class="line">    * 文件管理</span><br><span class="line">    * 设备管理</span><br><span class="line"></span><br><span class="line">    作为用户和计算机硬件之间的接口</span><br><span class="line">    * 命令接口</span><br><span class="line">        * 联机命令接口 （交互式的命令接口） 用户说一句 操作系统执行一句 </span><br><span class="line">        * 脱机命令接口 （批处理命令接口）   用户说一堆 操作系统执行一堆   .bat文件</span><br><span class="line">    * 程序接口 </span><br><span class="line">        由一组系统调用组成（系统调用=程序接口=广义指令），只能通过用户程序简介只用</span><br><span class="line">    * GUI（图形用户界面）</span><br><span class="line">        用户通过形象的图形界面进行操作</span><br><span class="line"></span><br><span class="line">    作为最接近硬件的层次</span><br><span class="line">        实现对硬件机器的拓展</span><br></pre></td></tr></table></figure><h3 id="1-1-2-操作系统的特征"><a href="#1-1-2-操作系统的特征" class="headerlink" title="1.1_2 操作系统的特征"></a>1.1_2 操作系统的特征</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.并发</span><br><span class="line">    并发：指两个或多个事件在同一时间间隔内发生，这些事件在宏观上是同时发生的，但微观上是交替发生的</span><br><span class="line">        --并行：两个或多个事件在同一时刻同时发生</span><br><span class="line">    操作系统的并发性：计算机系统中同时存在着多个运行着的程序</span><br><span class="line">    一个单核处理机（cpu）在同一时刻只能执行一个程序，操作系统会负责协调多个程序的交替执行</span><br><span class="line">2.共享</span><br><span class="line">    共享：资源共享，系统中的资源可供内存中的多个并发执行的进程共同使用</span><br><span class="line">        *互斥共享方式：一个时间段内只允许一个进程访问该资源</span><br><span class="line">        *同时共享方式：允许一个时间段内由多个进程“同时”对它们进行访问</span><br><span class="line">                    “同时”：往往是宏观上的，</span><br><span class="line">    并发 共享 互为存在条件</span><br><span class="line">3.虚拟</span><br><span class="line">    虚拟：把一个物理上的实体变为若干个逻辑上的对应物。物理实体是存在的，而逻辑上的对应物是用户感受到的</span><br><span class="line"></span><br><span class="line">    *背景知识：一个程序需要放入内存并给它分配CPU才能执行</span><br><span class="line"></span><br><span class="line">    *虚拟技术中的“空分复用技术” -&gt; 电脑的运行内存只有4g，但可以同时gta5,网易云，qq,idea</span><br><span class="line"></span><br><span class="line">    *虚拟技术中的“时分复用技术” -&gt;单核cpu qq,浏览器，微信...</span><br><span class="line">4.异步</span><br><span class="line">    异步：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，</span><br><span class="line">    以不可预知的速度向前推进，这就是程序的异步性</span><br><span class="line"></span><br><span class="line">    *只有系统拥有了并发性，才有可能导致异步性</span><br></pre></td></tr></table></figure><h3 id="1-1-3-操作系统的发展与分类"><a href="#1-1-3-操作系统的发展与分类" class="headerlink" title="1.1_3 操作系统的发展与分类"></a>1.1_3 操作系统的发展与分类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1.手工操作阶段</span><br><span class="line">    主要缺点：用户独占全机，人机速度矛盾导致资源利用率较低</span><br><span class="line">2.批处理阶段</span><br><span class="line">    （1）单道批处理系统</span><br><span class="line">        引入脱机输入/输出输出（用磁带完成），并监督程序（操作系统的）负责完成作业的输入，输出 </span><br><span class="line"></span><br><span class="line">        主要优点：换届了一定程度的人机速度矛盾，资源利用率有所提升</span><br><span class="line">        主要缺点：内存中只能有一道程序运行，只有该程序运行结束之后才能调入下一道程序。cpu有大量</span><br><span class="line">                的时间是在空闲等待I/O完成，资源利用率依然很低</span><br><span class="line">    （2）多道批处理系统</span><br><span class="line">        每次往内存中输入多道程序</span><br><span class="line">        操作系统正式诞生，并引入了中端技术，由操作系统负责管理这些程序的运行，各个程序并发执行</span><br><span class="line"></span><br><span class="line">        主要优点：多道程序并发执行，共享计算机资源，资源利用率大大提升，cpu和其他资源保持“忙碌”</span><br><span class="line">                状态，系统的吞吐量增大</span><br><span class="line">        主要缺点：用户响应时间长，没有人机交互功能（用户提交自己的作业后只能等待计算机处理完成，</span><br><span class="line">                中间不能控制自己的作业执行）</span><br><span class="line"></span><br><span class="line">3.分时操作系统</span><br><span class="line">    计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互。</span><br><span class="line"></span><br><span class="line">    主要优点：用户 请求可以被即时响应，解决了人机交互功能，允许多个用户同时使用一台计算机，并且用户</span><br><span class="line">            对计算机的操作互相独立，感受不到别人的存在</span><br><span class="line">    主要缺点：不能优先处理一些紧急的任务，操作系统对各个用户/作业都是完全公平的，循环的为每个用户/作业</span><br><span class="line">            服务一个时间片，不区分人任务的紧急性</span><br><span class="line"></span><br><span class="line">4.实时操作系统</span><br><span class="line">    主要优点：能够优先响应一些紧急的任务，某些紧急任务不需要时间片排队</span><br><span class="line"></span><br><span class="line">    在实时操作系统的控制下，计算机系统接收到外部信号后及时处理，并且要求在严格的时限内处理完成事件，</span><br><span class="line">    实时操作系统的主要特点是及时性和可靠性</span><br><span class="line"></span><br><span class="line">        *硬实时系统：必须在绝对严格的规定时间内完成处理</span><br><span class="line">        *软实时系统：能偶尔接收违反时间约定</span><br><span class="line"></span><br><span class="line">5.其他几种</span><br><span class="line">    *网络操作系统</span><br><span class="line">    *分布式操作系统</span><br><span class="line">    *个人计算机操作系统</span><br></pre></td></tr></table></figure><h3 id="1-1-4-操作系统的运行机制和体系结构"><a href="#1-1-4-操作系统的运行机制和体系结构" class="headerlink" title="1.1_4 操作系统的运行机制和体系结构"></a>1.1_4 操作系统的运行机制和体系结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1.两种指令，两种处理器状态，两种程序</span><br><span class="line"></span><br><span class="line">*c语言代码 -&gt;“翻译”  机器语言指令</span><br><span class="line"></span><br><span class="line">指令就是cpu能识别，执行的最基本命令</span><br><span class="line"></span><br><span class="line">特权指令 核心态 内核程序</span><br><span class="line"></span><br><span class="line">非特权指令 用户态 应用程序</span><br><span class="line"></span><br><span class="line">2.操作系统内核</span><br><span class="line"></span><br><span class="line">内核：是计算机配置的底层软件，是操作系统最基本，最核心的部分</span><br><span class="line">    实现操作系统内核功能那些程序就是内核程序</span><br><span class="line">    * 时钟管理： 实现计时功能</span><br><span class="line">    * 中断处理：负责实现中端机制</span><br><span class="line">    * 原语：</span><br><span class="line">        * 是一种特殊的程序</span><br><span class="line">        * 处于操作系统的最底层，最接近硬件的部分</span><br><span class="line">        * 原子性</span><br><span class="line">        * 运行时间较短，调用频繁</span><br><span class="line">    * 对系统资源进行管理</span><br><span class="line">        * 进程管理</span><br><span class="line">        * 存储器管理</span><br><span class="line">        * 设备管理</span><br><span class="line">3.操作系统的体系结构</span><br><span class="line">    操作系统的体系结构：大内核和微内核</span><br><span class="line">     大内核：将操作系统的主要功能模块都作为系统内核，运行在核心态</span><br><span class="line">        优点：高性能</span><br><span class="line">        缺点：内核代码庞大，结构混乱，难以维护</span><br><span class="line">     微内核：只把最基本的功能保留在内核</span><br><span class="line">        优点：结构清晰，易于维护</span><br><span class="line">        缺点：需要频繁的在用户态和内核态之间切换，性能低</span><br></pre></td></tr></table></figure><h3 id="1-1-5-中断和异常"><a href="#1-1-5-中断和异常" class="headerlink" title="1.1_5 中断和异常"></a>1.1_5 中断和异常</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.中断机制的诞生</span><br><span class="line">    本质：发生中断就意味着需要操作系统介入，开展管理工作</span><br><span class="line">2.中断的概念和作用</span><br><span class="line">    当中断发生时：cpu立即进入核心态</span><br><span class="line">    当中断发生后：当前运行的进程暂停运行，并由操作系统内核对中断进行处理</span><br><span class="line">    对于不同的中断信号，会进行不同的处理</span><br><span class="line"></span><br><span class="line">    由于操作系统的管理工作（进程切换，分配I/O设备等）需要使用特权指令，因此cpu需要从用户态转化</span><br><span class="line">    为核心态。中断可以使cpu从用户态转换为核心态，使操作系统获取计算机的控制权。有了中断，才能实现多道程序的并发执行</span><br><span class="line"></span><br><span class="line">    用户态，核心态之间的转换是怎么实现的？</span><br><span class="line">    用户态-&gt;核心态 是通过中断实现的，并且中断时唯一途径</span><br><span class="line">    核心态-&gt;用户态 是通过执行一个特权指令，将程序状态字（PSW）的标志改为“用户态”</span><br><span class="line">3.中断的分类</span><br><span class="line">    内中断（异常，例外，陷入）信号来源：cpu内部 与当前执行的指令有关</span><br><span class="line">        自愿中断 --指令中断</span><br><span class="line">        强迫中断 --硬件故障，软件中断</span><br><span class="line">    外中断（中断）信号来源：cpu外部 与当前执行的指令无关</span><br><span class="line">        外设请求</span><br><span class="line">        人工干预</span><br><span class="line">4.外中断的处理过程</span><br><span class="line">    每条指令执行结束后，cpu检查是否有外部中断信号</span><br><span class="line">    若有外部中断信号。则需要保护被中断进程的cpu环境（打游戏的时候门开了，急需存档）</span><br><span class="line">    根据中断信号的类型转入相应的中断处理程序（游戏存档）</span><br><span class="line">    恢复原进程的cpu环境并退出中断，返回原进程继续往下执行（继续游戏）</span><br></pre></td></tr></table></figure><h3 id="1-1-6-系统调用"><a href="#1-1-6-系统调用" class="headerlink" title="1.1_6 系统调用"></a>1.1_6 系统调用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1.什么是系统调用，有何作用</span><br><span class="line">    “系统调用”是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序</span><br><span class="line">    调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务</span><br><span class="line"></span><br><span class="line">    应用程序通过系统调用请求操作系统的服务，系统中的各种共享资源都由操作系统统一掌管，因此在用户</span><br><span class="line">    程序中，凡是与资源有关的操作（如存储分配,I/O操作，文件管理），都必须通过系统调用的方式向操作系统提出服务请求，</span><br><span class="line">    由操作系统代为完成。这样可以保证系统的稳定性和安全性，防止用户非法操作</span><br><span class="line"></span><br><span class="line">    按功能分类</span><br><span class="line">        * 设备管理 完成设备的 请求/释放/启动 等功能</span><br><span class="line">        * 文件管理 完成文件的 读/写/创建/删除 等功能</span><br><span class="line">        * 进程控制 完成进程的 创建/撤销/阻塞/唤醒 等功能</span><br><span class="line">        * 进程通信 完成进程之间的 消息传递/信号传递 等功能</span><br><span class="line">        * 内存管理 完成内存的 分配/回收 等功能</span><br><span class="line">    这些功能需要执行一些特权指令才能完成，因此系统调用的相关处理需要在核心态下进行</span><br><span class="line"></span><br><span class="line">2.系统调用与库函数的区别</span><br><span class="line">    应用程序 -- 汇编语言 -- 系统调用 -- 操作系统</span><br><span class="line"></span><br><span class="line">    应用程序 -- C语言 -- 库函数 -- 系统调用 -- 操作系统</span><br><span class="line"></span><br><span class="line">    编程语言：向上提供库函数，有时会将系统调用封装成库函数，隐藏系统调用的一些细节，使上层进行系统调用更方便</span><br><span class="line"></span><br><span class="line">3.系统调用背后的过程</span><br><span class="line"></span><br><span class="line">    用户程序（高级语言视角）       write(&quot;abc&quot;)</span><br><span class="line">    用户程序（汇编语言视角）       movl指令（将“abc”作为系统调用的参数放到某个通用寄存器中）</span><br><span class="line">                                int x 指令（trap/陷入执行）</span><br><span class="line"></span><br><span class="line">    处理系统调用的相关代码（运行在核心态）   完成处理返回</span><br><span class="line"></span><br><span class="line">    * int x 指令 参数x指明了系统调用号，此处的int不是整数的意思，而是interrupt的缩写</span><br><span class="line"></span><br><span class="line">    传递系统调用参数-&gt;执行陷入指令（用户态）-&gt;执行系统调用相应的服务程序（核心态）-&gt;返回应用程序</span><br><span class="line"></span><br><span class="line">    注意</span><br><span class="line">        1.陷入指令只在用户态执行，执行陷入指令后立即引发一个内中断，从而cpu进入核心态</span><br><span class="line">        2.发出系统调用请求是在用户态，而系统调用的相应处理在核心态下进行</span><br><span class="line">        3.陷入指令是唯一一个只能在用户态下执行，不能在核心态下执行的指令</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/article/735e5788.html"/>
      <url>/article/735e5788.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>常见的排序算法</p><p>冒泡排序，选择排序，插入排序，希尔排序，快速排序，归并排序，基数排序</p></blockquote><span id="more"></span><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="排序算法的介绍"><a href="#排序算法的介绍" class="headerlink" title="排序算法的介绍"></a>排序算法的介绍</h3><h5 id="排序算法的分类"><a href="#排序算法的分类" class="headerlink" title="排序算法的分类"></a>排序算法的分类</h5><ol><li>内部排序：指将需要处理的数据都加载到内部存储器中进行排序</li><li>外部排序:数据量过大，无法加载到内存中，需要借助外部存储器就行排序</li></ol><h5 id="常见的排序算法"><a href="#常见的排序算法" class="headerlink" title="常见的排序算法"></a>常见的排序算法</h5><ul><li>插入排序 直接插入排序 希尔排序</li><li>选择排序 简单选择排序 堆排序</li><li>交换排序 冒泡排序 快速排序</li><li>归并排序</li><li>基数排序</li></ul><h3 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h3><h4 id="度量一个算法执行的两种方法"><a href="#度量一个算法执行的两种方法" class="headerlink" title="度量一个算法执行的两种方法"></a>度量一个算法执行的两种方法</h4><ol><li>事后统计法 这种方法可行，但是有两个问题，1.需要实际运行该程序；2.结果依赖于计算机的硬件，软件等环境因素<strong>这种方式只有在同一台计算机的相同状态下运行，才能比较那个算法的速度快</strong></li><li>事前估算法 通过分析时间复杂度来判断哪个算法更加优秀</li></ol><h4 id="算法的时间复杂度-1"><a href="#算法的时间复杂度-1" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h4><h5 id="时间频度"><a href="#时间频度" class="headerlink" title="时间频度"></a>时间频度</h5><p>时间频度:一个算法花费的时间与算法中语句的执行次数成正比例，一个算法中语句执行次数称为语句频度或时间频度，记为T(n)</p><p>忽略常数项，忽略低次项，忽略系数</p><h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>一般情况下，算法中的基本操作语重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个函数f(n)，使得当n趋近于无穷大时，T(n)&#x2F;f(n)的极限值为不等于零的常数，则成f(n)是T(n)的同数量级函数，记作T(n) &#x3D; O(f(n)),称O(f(n))为算法的渐进时间复杂度，简称时间复杂度 时间复杂度的计算方法</p><ol><li>用常数1代替运行时间中的所有加法常数</li><li>只保留最高阶项</li><li>去掉最高阶项前的系数</li></ol><h5 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h5><ol><li>常数阶O(1)</li><li>对数阶O(log_2 n)</li><li>线性阶O(n)</li><li>线性对数阶O(nlog_2 N)</li><li>平方阶O(n^2)</li><li>立方阶O(n^3)</li><li>k次方阶O(n^k)</li><li>指数阶O(2^n) (尽量避免使用指数阶)</li></ol><p>举例： </p><p><strong>1.常数阶O(1)</strong> ，无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就是O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">++i;</span><br><span class="line">j++;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + j</span><br></pre></td></tr></table></figure><p>上述代码在执行的时候，它的消耗并不随着某个变量的增长而增长，那么无论这类代码有多长，即时有几万几百万行，都可以用O(1)来表示它的时间复杂度</p><p> <strong>2.对数阶O(log_2 n)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">    i = i * <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初中数学：如果a的x次方等于N（a&gt;0，且a≠1），那么数x叫做以a为底N的对数（logarithm），记作x&#x3D;log_a N。其中，a叫做对数的底数，N叫做真数。 分析代码： 在while循环里，每次都将i乘以2，乘完之后，i距离n就越来越近了，假设循环x次后，i就大于等于2，此时跳出循环，也就是2^x&#x3D;n ,x &#x3D; log_2 n，循环log_2 n次后代码结束，代码的时间复杂度为log_2 n</p><p>3.线性阶O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    j = i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码，for循环里的代码会执行n遍，因此它消耗的时间是随着n的变化而变化的，这类代码可以用O(n)来表示时间复杂度</p><p><strong>4.线性对数阶O(nlog_2 N)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;m&lt;=n;m++)&#123;</span><br><span class="line">    i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">        i = i * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线性对数阶就是将时间复杂度为O(log_2 N)的代码循环执行n遍，那么它的时间复杂度就是n * log2_N,也就是O(nlog_2 N) </p><p><strong>5.平方阶O(n^2)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;m&lt;=n;m++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="平均时间复杂度和最坏时间复杂度"><a href="#平均时间复杂度和最坏时间复杂度" class="headerlink" title="平均时间复杂度和最坏时间复杂度"></a>平均时间复杂度和最坏时间复杂度</h5><ol><li>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间</li><li>最坏情况下的时间复杂度称为最坏时间复杂度，<strong>一般讨论的时间复杂度均是最坏时间复杂度</strong>。这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长</li><li>平均时间复杂度和最坏时间复杂度与是否一致，和算法有关</li></ol><h3 id="算法的空间复杂度简介"><a href="#算法的空间复杂度简介" class="headerlink" title="算法的空间复杂度简介"></a>算法的空间复杂度简介</h3><h5 id="算法的空间复杂度简介-1"><a href="#算法的空间复杂度简介-1" class="headerlink" title="算法的空间复杂度简介"></a>算法的空间复杂度简介</h5><ol><li>类似于时间复杂度的讨论，一个算法的空间复杂度定义为该算法所耗费的存储空间，它也是问题规模n的函数</li><li>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的度量。有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大,当n比较大时，将占用较多的存储单元，例如快速排序和归并排序就属于这种情况</li><li>在做算法分析，主要讨论的是<strong>时间复杂度</strong>，从用户体验上看，更看重的是程序的执行速度，一些缓存产品（redis和memcache）和算法（基数排序）本质就是<strong>利用空间换时间</strong></li></ol><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h5 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>冒泡排序的基本思想是：通过对待排序序列从前向后（从下标较小的元素开始），依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移到后部，像水底的气泡一样逐渐向上冒 冒泡排序的优化：因为在排序的过程中，各个元素不断接近自己的位置，<strong>如果一趟比较下来没有进行交换，就说明序列有序</strong>因此要在排序过程中设置一个标记flag判断元素是否进行过交换，减少不必要的比较 代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未优化的冒泡排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 排序的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//交换变量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优化后的冒泡排序，不进行多余的比较</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSortPlus</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//交换变量</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//标识是否进行了交换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">            <span class="comment">//已经完成了排序</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h5 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>选择排序也属于内部排序法，是从欲排序的数据中，按指定的规则选出某一元素，再依次交换位置后达到排序的目的</p><h5 id="选择排序思想"><a href="#选择排序思想" class="headerlink" title="选择排序思想"></a>选择排序思想</h5><p>选择排序（select sorting）也是一种简单的排序方法，它的基本思想是：第一次从arr[0] - arr[n-1]中选择最小值，与arr[0]交换，第二次从arr[1] - arrp[n-1]选择最小值，与arr[1]交换，第三次从arr[2] - arr[n-1] 选择最小值，与arr[2]交换，第n-1次，arr[n-2]-arr[n-1]选择最小的值与arr[n-2]交换，得到一个有序的数列</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; arr[j])&#123;</span><br><span class="line">                min = arr[j];<span class="comment">//重置min</span></span><br><span class="line">                minIndex = j;<span class="comment">//重置minIndex</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minIndex != i)&#123;</span><br><span class="line">            arr[minIndex] = arr[i];</span><br><span class="line">            arr[i] = min;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 精简版</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; a[j]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[i];</span><br><span class="line">                a[i] = a[j];</span><br><span class="line">                a[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h5 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>插入排序属于内部排序法，是对于将要排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的 (很像打扑克的时候摸牌)</p><h5 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h5><p>插入排序(Inserting Sorting)的基本思想是：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只含有一个元素，无序表中含有n-1个元素，排序过程中每次从无序表中取出第一个元素，将它与有序表中的元素依次比较，插入到合适的位置。使之成为新的有序表</p><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSortStep</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="comment">//使用逐步推到的方式来讲解</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一轮</span></span><br><span class="line">    <span class="comment">//定义待插入的数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">insertVal</span> <span class="operator">=</span> arr[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">insertIndex</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//</span></span><br><span class="line">    <span class="comment">//说明</span></span><br><span class="line">    <span class="comment">// insertIndex &gt;= 0 保证插入位置不会越界</span></span><br><span class="line">    <span class="comment">// insertVal &lt; arr[insertIndex] 没有找到插入位置，需要将arr[insertIndex]后移</span></span><br><span class="line">    <span class="keyword">while</span> (insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex])&#123;</span><br><span class="line">        arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">        insertIndex --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当退出while循环时，此时已经找到插入位置 insertIndex + 1</span></span><br><span class="line">    arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;第一轮插入后&quot;</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二轮</span></span><br><span class="line">    <span class="comment">//定义待插入的数</span></span><br><span class="line">    insertVal = arr[<span class="number">2</span>];</span><br><span class="line">    insertIndex = <span class="number">1</span>; <span class="comment">//</span></span><br><span class="line">    <span class="comment">//说明</span></span><br><span class="line">    <span class="comment">// insertIndex &gt;= 0 保证插入位置不会越界</span></span><br><span class="line">    <span class="comment">// insertVal &lt; arr[insertIndex] 没有找到插入位置，需要将arr[insertIndex]后移</span></span><br><span class="line">    <span class="keyword">while</span> (insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex])&#123;</span><br><span class="line">        arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">        insertIndex --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当退出while循环时，此时已经找到插入位置 insertIndex + 1</span></span><br><span class="line">    arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;第二轮插入后&quot;</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三轮</span></span><br><span class="line">    <span class="comment">//定义待插入的数</span></span><br><span class="line">    insertVal = arr[<span class="number">3</span>];</span><br><span class="line">    insertIndex = <span class="number">2</span>; <span class="comment">//</span></span><br><span class="line">    <span class="comment">//说明</span></span><br><span class="line">    <span class="comment">// insertIndex &gt;= 0 保证插入位置不会越界</span></span><br><span class="line">    <span class="comment">// insertVal &lt; arr[insertIndex] 没有找到插入位置，需要将arr[insertIndex]后移</span></span><br><span class="line">    <span class="keyword">while</span> (insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex])&#123;</span><br><span class="line">        arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">        insertIndex --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当退出while循环时，此时已经找到插入位置 insertIndex + 1</span></span><br><span class="line">    arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;第二轮插入后&quot;</span> + Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">insertVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">insertIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">//第一轮</span></span><br><span class="line">        <span class="comment">//定义待插入的数</span></span><br><span class="line">        insertVal = arr[i];</span><br><span class="line">        insertIndex = i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">// insertIndex &gt;= 0 保证插入位置不会越界</span></span><br><span class="line">        <span class="comment">// insertVal &lt; arr[insertIndex] 没有找到插入位置，需要将arr[insertIndex]后移</span></span><br><span class="line">        <span class="keyword">while</span> (insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex])&#123;</span><br><span class="line">            arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">            insertIndex --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当退出while循环时，此时已经找到插入位置 insertIndex + 1</span></span><br><span class="line">        <span class="comment">//判断是否需要复制</span></span><br><span class="line">        <span class="keyword">if</span> (insertIndex + <span class="number">1</span> != i)&#123;</span><br><span class="line">            arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><h5 id="希尔排序法介绍"><a href="#希尔排序法介绍" class="headerlink" title="希尔排序法介绍"></a>希尔排序法介绍</h5><p>希尔排序是希尔(Donakd Shell)于1959年提出的一种排序算法，希尔排序也是一种插入排序，它是简单插入排序改进之后的一个更高效版本，也称为缩小增量排序</p><h5 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h5><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量的逐渐减少，每组包含的关键字越来越多，当增量减到1时整个数组恰好被分成一组</p><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSortStep</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在推导的过程中发现规律，可以使用循环来解决</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//逐步推导的方式</span></span><br><span class="line">    <span class="comment">//算法 先简单 -&gt; 再复杂 把复杂的算法拆分为简单的问题 - &gt; 逐步解决</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一轮</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (min &gt; arr[j])&#123;</span><br><span class="line">            min = arr[j];<span class="comment">//重置min</span></span><br><span class="line">            minIndex = j;<span class="comment">//重置minIndex</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行交换，将arr[0] 和 min 交换</span></span><br><span class="line">    <span class="keyword">if</span> (minIndex != <span class="number">0</span>)&#123;</span><br><span class="line">        arr[minIndex] = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = min;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;第一趟排序&quot;</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二轮</span></span><br><span class="line">    minIndex = <span class="number">1</span>;</span><br><span class="line">    min = arr[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (min &gt; arr[j])&#123;</span><br><span class="line">            min = arr[j];<span class="comment">//重置min</span></span><br><span class="line">            minIndex = j;<span class="comment">//重置minIndex</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行交换，将arr[0] 和 min 交换</span></span><br><span class="line">    <span class="keyword">if</span> (minIndex != <span class="number">1</span>)&#123;</span><br><span class="line">        arr[minIndex] = arr[<span class="number">1</span>];</span><br><span class="line">        arr[<span class="number">1</span>] = min;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;第二趟排序&quot;</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一轮</span></span><br><span class="line">    minIndex = <span class="number">2</span>;</span><br><span class="line">    min = arr[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">3</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (min &gt; arr[j])&#123;</span><br><span class="line">            min = arr[j];<span class="comment">//重置min</span></span><br><span class="line">            minIndex = j;<span class="comment">//重置minIndex</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行交换，将arr[0] 和 min 交换</span></span><br><span class="line">    <span class="keyword">if</span> (minIndex != <span class="number">2</span>)&#123;</span><br><span class="line">        arr[minIndex] = arr[<span class="number">2</span>];</span><br><span class="line">        arr[<span class="number">2</span>] = min;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;第三趟排序&quot;</span> + Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; arr[j])&#123;</span><br><span class="line">                min = arr[j];<span class="comment">//重置min</span></span><br><span class="line">                minIndex = j;<span class="comment">//重置minIndex</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minIndex != i)&#123;</span><br><span class="line">            arr[minIndex] = arr[i];</span><br><span class="line">            arr[i] = min;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h5 id="快速排序法简介"><a href="#快速排序法简介" class="headerlink" title="快速排序法简介"></a>快速排序法简介</h5><p>快速排序(QuickSort)是对<strong>冒泡排序</strong>的一种<strong>改进</strong>，基本思想是：通过一趟排序将要排序的数据分隔成独立的两部分，其中一部分数据都比另外一部分的所有数据都小，然后再按此方法对这两部分数据进行快速排序，整个过程<strong>递归</strong>进行，直到整个数据变为有序数列</p><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> Partition(arr,low,high);</span><br><span class="line">        quickSort(arr,low,pivot - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr,pivot + <span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">Partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[low];</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; arr[low] &lt;= pivot) &#123;</span><br><span class="line">            low ++;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[low];</span><br><span class="line">        arr[low] = arr[high];</span><br><span class="line">        arr[high] = temp;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot) &#123;</span><br><span class="line">            high --;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[low];</span><br><span class="line">        arr[low] = arr[high];</span><br><span class="line">        arr[high] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h5 id="归并排序简介"><a href="#归并排序简介" class="headerlink" title="归并排序简介"></a>归并排序简介</h5><p>归并排序(merge-sort) 是利用归并的思想实现的排序方法，该算法采用经典的分治（dive and conquer）策略（分治法将问题<strong>分</strong>为一些小的问题然后递归求解，而<strong>治</strong>的阶段将分的阶段得到的答案“修补”在一起）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span>[] temp)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//向左递归进行分解</span></span><br><span class="line">        mergeSort(arr,left,mid,temp);</span><br><span class="line">        <span class="comment">//向右递归分解</span></span><br><span class="line">        mergeSort(arr,mid + <span class="number">1</span>,right,temp);</span><br><span class="line">        <span class="comment">//合并</span></span><br><span class="line">        merge(arr,left,mid,right,temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   原始数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  左边索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mid   中间索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右边索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temp  中转数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//合并方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right,<span class="type">int</span>[] temp)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;<span class="comment">//表示左边有序序列的初始索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid + <span class="number">1</span>;<span class="comment">//表示右边有序数列的初始索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//指向temp数组的当前索引</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//先把左右两边的数据按规则填充到temp,直到左右两边有一边全部处理完毕</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= arr[j])&#123;</span><br><span class="line">            <span class="comment">//左边有序数列的当前元素小于等于右边有序数列的当前元素</span></span><br><span class="line">            temp[t] = arr[i];</span><br><span class="line">            t += <span class="number">1</span>;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//反之将右边有序数列的当前元素拷贝到temp数组</span></span><br><span class="line">            temp[t] = arr[j];</span><br><span class="line">            t += <span class="number">1</span>;</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果哪边有剩余，就把哪边填充到temp数组里</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        <span class="comment">//左边有剩余，全部填充</span></span><br><span class="line">        temp[t] = arr[i];</span><br><span class="line">        t += <span class="number">1</span>;</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">        temp[t] = arr[j];</span><br><span class="line">        t += <span class="number">1</span>;</span><br><span class="line">        j += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将temp数组重新拷贝到arr</span></span><br><span class="line">    <span class="comment">//并不是每次都拷贝所有</span></span><br><span class="line">    t = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">tempLeft</span> <span class="operator">=</span> left; <span class="comment">//第一次合并 tempLeft = 0 ,right = 1</span></span><br><span class="line">    <span class="keyword">while</span> (tempLeft &lt;= right) &#123;</span><br><span class="line">        arr[tempLeft] = temp[t];</span><br><span class="line">        t += <span class="number">1</span>;</span><br><span class="line">        tempLeft += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><h5 id="基数排序（桶排序）的基本思想"><a href="#基数排序（桶排序）的基本思想" class="headerlink" title="基数排序（桶排序）的基本思想"></a>基数排序（桶排序）的基本思想</h5><p>将所有待比较数值统一为同样的数位长度，数位较短的前面补零。然后从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成后，数列就变成一个有序数列</p><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="comment">//定义桶</span></span><br><span class="line">    <span class="type">int</span>[][] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line">    <span class="comment">//定义一个数组表示每个桶中数字的个数</span></span><br><span class="line">    <span class="type">int</span>[] bucketElementCounts = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算最大数有几位</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxlength</span> <span class="operator">=</span> (max + <span class="string">&quot;&quot;</span>).length();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, n = <span class="number">1</span>; i &lt; maxlength; i++, n *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">//把数据放到桶里</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="comment">//依次取的个位，十位...的数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> arr[j] / n % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//放到桶中</span></span><br><span class="line">            bucket[number][bucketElementCounts[number]] = arr[j];</span><br><span class="line">            bucketElementCounts[number] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//桶里取出数据填充到原数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; bucket.length; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucketElementCounts[k] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; bucketElementCounts[k]; l++) &#123;</span><br><span class="line">                    arr[index] = bucket[k][l];</span><br><span class="line">                    index += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            bucketElementCounts[k] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="基数排序总结"><a href="#基数排序总结" class="headerlink" title="基数排序总结"></a>基数排序总结</h5><p>1.基数排序是对传统桶排序的拓展，速度很快<br>2.基数排序是经典的空间换时间的方式，占用内存很大，当对海量的数据排序时，容易造成OutMemoeryError<br>3.基础排序是稳定排序<br>4.有负数的数组，我们不用基数排序来进行排序 排序算法总结 </p><p><strong>排序算法总结：</strong></p><p><img src="https://i.loli.net/2020/09/01/51q2mn98F6eQxSM.png" alt="image-20200901222850097"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java web 项目中实现短信验证码登录，注册</title>
      <link href="/article/52c7f62f.html"/>
      <url>/article/52c7f62f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>今日在写项目时，注册登录功能沿用了邮箱验证，已经几个项目都使用邮箱验证，感觉有点弱，加上进来几乎所有应用都有短信验证码的功能，感觉需要掌握这个方法</p></blockquote><span id="more"></span><h5 id=""><a href="#" class="headerlink" title=""></a></h5><ol><li>选择第三方服务商 应该有很多厂商都提供了短信服务，我使用的是榛子云（<a href="http://smsow.zhenzikj.com/">传送门</a>），其他的话流程应该差不多 注册，登录 <img src="https://img-blog.csdnimg.cn/20200508131631126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MjEwMTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 依次点击应用管理，我的应用，可以查看到AppId，和AppSecret，这两个值在后面会用到</li><li>导入jar包或maven坐标 这一步直接看官方的文档就行（<a href="http://smsow.zhenzikj.com/doc/java_sdk_doc.html">传送门</a>）</li><li>实现业务逻辑 如使用项目的界面 <img src="https://img-blog.csdnimg.cn/20200508134001396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MjEwMTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 在输入手机号，点击发送验证码后将手机号发送给后台处理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/sendSms&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> Map <span class="title function_">sendSms</span><span class="params">(<span class="meta">@RequestBody</span> String phoneNumber, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">//生成随机验证码4位</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">captcha</span> <span class="operator">=</span> RandomStringUtils.random(<span class="number">4</span>,<span class="literal">false</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//发送到注册手机</span></span><br><span class="line">        <span class="type">ZhenziSmsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZhenziSmsClient</span>(<span class="string">&quot;https://sms_developer.zhenzikj.com&quot;</span>, <span class="string">&quot;105254&quot;</span>, <span class="string">&quot;60b64026-9aaa-4459-83f3-0aaad82383d3&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> client.send(phoneNumber, <span class="string">&quot;验证码: &quot;</span> + captcha + <span class="string">&quot;,你正在注册喜瑞斯账号，验证码在5分钟内有效&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="comment">//验证码存入session</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;captcha&quot;</span>,captcha);</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        res.put(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        res.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;发送成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对ZhenziSmsClient的三个参数简单说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apiUrl:https:<span class="comment">//sms_developer.zhenzikj.com //个人用户使用这个url就行</span></span><br><span class="line">appId:<span class="number">105551</span> <span class="comment">//替换为你的appid</span></span><br><span class="line">appSecret:60b64026-9aaa-<span class="number">4459</span>-83f3-0aafd81383d3 <span class="comment">//替换为你的appSercet</span></span><br></pre></td></tr></table></figure><p>具备基本开发经验的话应该理解这段代码的问题不大 点击后 <img src="https://img-blog.csdnimg.cn/20200508134903525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MjEwMTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 再点击注册后再将输入的验证码与session域里的验证码比较即可，注意验证成功后将session域里的验证码删除掉 这里需要注意开发者测试的话短信的署名只能是榛子云体验，企业的话可以使用企业的名称 大概三秒左右就能收到短信，速度还可以</p><ul><li>既然使用了短信验证注册，再登录时也可以选择短信验证登录和传统的账号密码登录 <img src="https://img-blog.csdnimg.cn/20200508135146609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MjEwMTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 业务逻辑就不在此过多叙述</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>稀疏数组和队列</title>
      <link href="/article/6d016bf8.html"/>
      <url>/article/6d016bf8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>稀疏数组和队列</p></blockquote><span id="more"></span><h2 id="稀疏数组和队列"><a href="#稀疏数组和队列" class="headerlink" title="稀疏数组和队列"></a>稀疏数组和队列</h2><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><p>当一个数组大部分元素为0，或者为同一个值时，可以使用稀疏数组来保存该数组 稀疏数组的处理方法是</p><ol><li>第一行记录数组一共有几行几列，有多少个不同的值</li><li>把具有不同值得元素行列以及值记录在另一个小规模的数组中，从而缩小程序的规模</li></ol><hr><h3 id="稀疏数组的应用实例"><a href="#稀疏数组的应用实例" class="headerlink" title="稀疏数组的应用实例"></a>稀疏数组的应用实例</h3><ol><li>使用稀疏数组，来保留二维数组</li><li>稀疏数组转为二维数组</li><li>课后练习:将数据保存到磁盘上，再从磁盘读取</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.sparsearray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SparseArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建原始的二维数组</span></span><br><span class="line">        <span class="type">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        chessArr1[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//输出原始的二维数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;原始的二维数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : chessArr1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>,anInt);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历二维数组，得到有效数组个数和坐标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : chessArr1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                <span class="keyword">if</span>(anInt != <span class="number">0</span>)&#123;</span><br><span class="line">                    sum ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建对应的稀疏数组</span></span><br><span class="line">        <span class="type">int</span> sparseArr[][] = <span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//给稀疏数组赋值</span></span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line">        <span class="comment">//遍历二维数组，将非零的值存放到稀疏数组中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//用于记录是第几个数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    count ++;</span><br><span class="line">                    sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">                    sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">                    sparseArr[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;稀疏数组为&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : sparseArr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>,anInt);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将稀疏数组恢复成原始二维数组</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="title class_">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">            chessArr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]] = sparseArr[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;恢复后的二维数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : chessArr2) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>,anInt);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h5 id="队列介绍"><a href="#队列介绍" class="headerlink" title="队列介绍"></a>队列介绍</h5><ul><li>队列是一个有序列表，可以用数组或链表实现</li><li>遵循先入先出的原则</li></ul><h5 id="数组模拟队列"><a href="#数组模拟队列" class="headerlink" title="数组模拟队列"></a>数组模拟队列</h5><p>需要两个变量real和front记录队头队尾的坐标 代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组模拟队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayQueueDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建队列</span></span><br><span class="line">        <span class="type">ArrayQueue</span> <span class="variable">arrayQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayQueue</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;<span class="comment">//接受用户输入</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (loop)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s(show):显示队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;e(exit):退出程序&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;a(add):添加数据到队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;g(get):从队头取出数据&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;h(head):查看队头的数据&quot;</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                    arrayQueue.showQueue();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入数据&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                    arrayQueue.addQueue(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">result</span>  <span class="operator">=</span> arrayQueue.getQueue();</span><br><span class="line">                        System.out.println(<span class="string">&quot;取出的数据是 &quot;</span> + result);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> arrayQueue.headQueue();</span><br><span class="line">                        System.out.println(<span class="string">&quot;队头的数据是&quot;</span> + head);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">                    scanner.close();</span><br><span class="line">                    loop = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个叫ArrayQueue</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayQueue</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;<span class="comment">//表示数组的最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front;<span class="comment">//队列头</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> real;<span class="comment">//队列尾</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;<span class="comment">//用于存放数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建队列的构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayQueue</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">        front = -<span class="number">1</span>;<span class="comment">//指向队列头的前一个位置</span></span><br><span class="line">        real = -<span class="number">1</span>;<span class="comment">//指向队列尾的位置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">real</span> <span class="operator">=</span>= maxSize -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">real</span> <span class="operator">=</span>= front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加数据到队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">//判断是否满</span></span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列不能加入数据&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        real ++;</span><br><span class="line">        arr[real] = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据出队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="comment">//通过抛出异常来处理</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空，不能取数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        front ++;</span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列的所有数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i,arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列的头数据（不是取出数据）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">headQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>问题分析：</p><ol><li>数组使用一次不能用，没有达到复用的效果</li><li>将这个数组改进为环形数组（核心）</li></ol></blockquote><h5 id="数组模拟环形队列"><a href="#数组模拟环形队列" class="headerlink" title="数组模拟环形队列"></a>数组模拟环形队列</h5><p>思路分析</p><ol><li>front变量的含义进行调整：<strong>front指向队列的第一个元素</strong>，也就是说arr[front]就是队列的第一个元素</li><li>real变量的含义进行调整：<strong>real指向队列的最后一个元素的后一个位置</strong>，空出一个空间作为约定</li><li>front的初始值&#x3D;0，real的初始值&#x3D;0</li><li>当队列满时，条件是 (real + 1) % maxSize &#x3D; front 【满】</li><li>当队列为空的条件，real &#x3D; front 【空】</li><li>当我们这样分析后，队列中有效的数据个数 (real + maxSize - front) % maxSize</li><li>就可以在原来的队列上修改，得到一个环形队列</li></ol><blockquote><p>队列满条件和队列有效数据个数咋算的啊</p><p>理解取模 %<br>例子：以前的闹钟，需要从9点调到6点，有两张做法：<br>9 - 3 &#x3D; 6 （逆时针转3个小时）<br>(9 + 9) mod 12 &#x3D; 6 (顺时针转9个小时)<br>“模”好像可以当做一个计数范围来防止数据溢出。</p><p>判断队列满通常条件为real + 1 &#x3D; front ，但是real + 1可能溢出MAX，所以 (real + 1) % maxSize 限制在0 - MAX范围里</p><p>队列中有效数据分两张情况：<br>1、real &gt;&#x3D; front ，有效数据长度:real - front</p></blockquote><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cyfwlp.queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组模拟队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleArrayQueueDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建队列</span></span><br><span class="line">        <span class="type">CircleArrayQueue</span> <span class="variable">arrayQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CircleArrayQueue</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;<span class="comment">//接受用户输入</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (loop)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s(show):显示队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;e(exit):退出程序&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;a(add):添加数据到队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;g(get):从队头取出数据&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;h(head):查看队头的数据&quot;</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                    arrayQueue.showQueue();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入数据&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                    arrayQueue.addQueue(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">result</span>  <span class="operator">=</span> arrayQueue.getQueue();</span><br><span class="line">                        System.out.println(<span class="string">&quot;取出的数据是 &quot;</span> + result);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> arrayQueue.headQueue();</span><br><span class="line">                        System.out.println(<span class="string">&quot;队头的数据是&quot;</span> + head);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">                    scanner.close();</span><br><span class="line">                    loop = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个叫ArrayQueue</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircleArrayQueue</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;<span class="comment">//表示数组的最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front;<span class="comment">//队列头</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> real;<span class="comment">//队列尾</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;<span class="comment">//用于存放数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建队列的构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CircleArrayQueue</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">        front = <span class="number">0</span>;<span class="comment">//指向队列头位置</span></span><br><span class="line">        real = <span class="number">0</span>;<span class="comment">//指向队列尾的的前一个位置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (real + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">real</span> <span class="operator">=</span>= front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加数据到队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">//判断是否满</span></span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列不能加入数据&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//直接加入real</span></span><br><span class="line">        arr[real] = n;</span><br><span class="line">        <span class="comment">//将real指针后移（考虑取模）</span></span><br><span class="line">        real  = (real + <span class="number">1</span>) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据出队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="comment">//通过抛出异常来处理</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空，不能取数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> arr[front];</span><br><span class="line">        front = (front + <span class="number">1</span>) % maxSize;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列的所有数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从front开始遍历，遍历[]个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> front;i &lt; front + size();i ++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i % maxSize,arr[i % maxSize]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求出当前队列有效数组的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (real + maxSize - front) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列的头数据（不是取出数据）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">headQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性结构和非线性结构</title>
      <link href="/article/4ca5b461.html"/>
      <url>/article/4ca5b461.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：</p><p>线性结构和非线性结构</p></blockquote><span id="more"></span><h2 id="线性结构和非线性结构"><a href="#线性结构和非线性结构" class="headerlink" title="线性结构和非线性结构"></a>线性结构和非线性结构</h2><h3 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h3><ol><li>线性结构作为最常用的数据结构，特点是<strong>数据元素之间存在一对一</strong>的线性关系</li><li>线性结构有两种不同的存储结构，顺序存储结构和链式存储结构，顺序表存储元素是连续的，链表存储元素不一定是连续的</li><li>常见的线性结构：数组，链表，队列，栈</li></ol><h3 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h3><ul><li>常见的非线性结构：二维数组，多维数组，广义表，图，树</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ESC + leanote搭建个人云笔记</title>
      <link href="/article/4023445e.html"/>
      <url>/article/4023445e.html</url>
      
        <content type="html"><![CDATA[<h4 id="近日，阿里云开启了学生免费领取ESC算力资源的活动，活动链接-在搭建云笔记时踩了不少坑，现分享自己的（网上拼凑）的方法"><a href="#近日，阿里云开启了学生免费领取ESC算力资源的活动，活动链接-在搭建云笔记时踩了不少坑，现分享自己的（网上拼凑）的方法" class="headerlink" title="近日，阿里云开启了学生免费领取ESC算力资源的活动，活动链接,在搭建云笔记时踩了不少坑，现分享自己的（网上拼凑）的方法"></a>近日，阿里云开启了学生免费领取ESC算力资源的活动，<a href="https://developer.aliyun.com/adc/student/">活动链接</a>,在搭建云笔记时踩了不少坑，现分享自己的（网上拼凑）的方法</h4><span id="more"></span><p>1.进入服务器的workbench(也可使用xshell等连接工具)，我选择的版本是centOS7<br><img src="https://img-blog.csdnimg.cn/20200210110059280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MjEwMTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.在home下新建目录user<br>    user目录用于安置需要使用的leanote以及数据库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/user</span><br></pre></td></tr></table></figure><p>3.安置二进制版的leanote,二进制版本解压后即可使用，不用安置运行环境<br>在<a href="http://leanote.org/#download">此处</a>根据你的系统下载二进制文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wget</span> https://sourceforge.net/projects/leanote<span class="literal">-bin</span>/files/<span class="number">2.6</span>.<span class="number">1</span>/leanote<span class="literal">-linux-amd64-v2</span>.<span class="number">6.1</span>.bin.tar.gz/download</span><br></pre></td></tr></table></figure><p>第一天晚上我的下载速度只有5,6kb左右，第二天早上不知为何快了，随缘吧….<br>下载完成后发现user目录下多了一个download文件，解压</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-xzvf</span> download</span><br></pre></td></tr></table></figure><p>解压完成后user目录下有了leanote目录<br>完成第一步！</p><p>4.安置数据库Mongodb，我也不知道这是个什么，类似于mysql的一种数据库吧</p><p>较快的下载链接：<br>64位Linux Mongodb 3.0.1:<a href="https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz</a><br><strong>依然在user目录下安置和解压</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wget</span> https://fastdl.mongodb.org/linux/mongodb<span class="literal">-linux-x86_64-3</span>.<span class="number">0.1</span>.tgz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-xzvf</span> tar <span class="literal">-xzvf</span> mongodb<span class="literal">-linux-x86_64-3</span>.<span class="number">0.1</span>.tgz/</span><br></pre></td></tr></table></figure><p>之后需要配置环境变量，作用是可以在任何地方使用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>在最后一行加上export PATH&#x3D;$PATH:&#x2F;home&#x2F;user&#x2F;mongodb-linux-x86_64-3.0.1&#x2F;bin（如果你的目录不一样请修改目录）<br><img src="https://img-blog.csdnimg.cn/20200210113905536.png" alt="在这里插入图片描述"><br>(至于profile最后一行前的其他内容为我采坑步骤，忽略就行)</p><p>使修改生效</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>现在在user下创建一个文件夹来存储需要存储的笔记</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/user/<span class="keyword">data</span></span><br></pre></td></tr></table></figure><p>启动数据库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod <span class="literal">--dbpath</span> /home/user/<span class="keyword">data</span></span><br></pre></td></tr></table></figure><p>会显示<br><img src="https://img-blog.csdnimg.cn/20200210114056420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MjEwMTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>现在来检测数据库是否按照成功<br>在一个新终端输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line">show dbs</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200210113450987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MjEwMTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样则已经安装成功（此时你的数据库里没有leanote这个数据库）</p><p>5.将leanote数据导入到MongoDB</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore <span class="literal">-h</span> localhost <span class="literal">-d</span> leanote <span class="literal">--dir</span> PATH_TO_LEANOTE/mongodb_backup/leanote_install_data/</span><br></pre></td></tr></table></figure><p>将PATH_TO_LEANOTE替换你的leanote路径即可</p><p>6.运行leanote即可</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/user1/leanote/bin</span><br><span class="line">bash run.sh</span><br></pre></td></tr></table></figure><p>此时在浏览输入<a href="http://ip:9000即可访问到leanote首页">http://ip:9000即可访问到leanote首页</a><br><img src="https://img-blog.csdnimg.cn/20200210114525636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MjEwMTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>默认用户名：admin<br>默认密码：abc123<br>即可登录你的个人云笔记<br>（若需要分享他人或更改用户名可选择注册，只需提供邮箱和密码，就可以把你的云笔记网站分享给小伙伴了）<br><img src="https://img-blog.csdnimg.cn/2020021011482435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MjEwMTA1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>使用起来还是很方便</p><p>后续：你会发现在退出终端后边无法访问，此时需要让leanote处于后天运行情况，我使用的是screen</p><p>安装screen</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install <span class="literal">-y</span> screen</span><br></pre></td></tr></table></figure><p>创建screen</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen <span class="literal">-S</span> screenName(自定义)</span><br></pre></td></tr></table></figure><p>在弹出的终端里启动数据库和leanote</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod <span class="literal">--dbpath</span> /home/user/<span class="keyword">data</span></span><br><span class="line"><span class="built_in">cd</span> /home/user1/leanote/bin</span><br><span class="line">bash run.sh</span><br></pre></td></tr></table></figure><p>然后关闭即可</p><pre><code>    第一篇博客，希望可以坚持下去吧</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h4 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h4><hr><p>诸葛亮诫子书愿共勉：</p><blockquote><p>“<em><strong>夫君子之行，静以修身，俭以养德。非淡泊无以明志，非宁静无以致远。夫学须静也，才须学也，非学无以广才，非志无以成学。淫慢则不能励精，险躁则不能治性。年与时驰，意与日去，遂成枯落，多不接世，悲守穷庐，将复何及！</strong></em>“<br><br></p></blockquote><p>个人信息：</p><p>双非大四se学生，一个月后可能成为双非研一se学生。<br>博客大部分内容为学习笔记自查自用，少量原创内容。<br>爱好杂而不精，端游，魔方，乒乓球，看书，爬山……</p><h4 id="博客信息"><a href="#博客信息" class="headerlink" title="博客信息"></a>博客信息</h4><hr><ul><li>网站采用的<a href="http://github.com/ppoffice/hexo-theme-icarus">Icarus主题</a> </li><li>在<a href="https://removeif.github.io/">原作者项目</a>基础上修改配置而成</li><li>原站点<a href="http://blog.tao421.xyz/">blog.tao421.xyz</a>欢迎访问</li><li>采用<a href="https://butterfly.js.org/">Butterfly主题</a>重建博客</li></ul><p><em><strong>更新日志：</strong></em><br>–<em>2020.11.24：完成博客迁移，可以继续记录学习内容</em><br>–<em>2020.11.25：在<a href="https://removeif.github.io/">项目</a>基础下进行修改配置建立新站点</em><br>–<em>2020.11.24：域名需要开始备案，原站点不能访问，wordpress太慢，准备弃坑</em><br>–<em>2022.3.18：更换主题</em></p><br><h4 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h4><p><strong>2022计划</strong></p><hr><blockquote><p><strong>2022-GOALS</strong>              </p><ul><li><input disabled="" type="checkbox"> 成为本校研究生</li><li><input disabled="" type="checkbox"> 看20本书</li><li><input disabled="" type="checkbox"> 英语六级刷分</li><li><input disabled="" type="checkbox"> 赚钱，争取经济独立</li><li><input disabled="" type="checkbox"> 减肥</li></ul></blockquote><p><strong>2021计划</strong></p><hr><blockquote><p><strong>2021-GOALS</strong><br>更新于202.3.18</p><ul><li><input checked="" disabled="" type="checkbox"> 考研通过初试</li><li><input disabled="" type="checkbox"> 买的专业书看一遍（java编程思想,深入理解计算机系统…）</li><li><input disabled="" type="checkbox"> 有空继续看剩下的几部武侠小说（雪山飞狐、碧血剑….）</li><li><input disabled="" type="checkbox"> 魔方别彻底丢了</li><li><input disabled="" type="checkbox"> 写100篇博客（灌水，技术，瞎折腾…）</li></ul><p><strong>额外：</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 经常看Youtube视频，历史尤其中国近代史知识，政治知识增加</li><li><input checked="" disabled="" type="checkbox"> 解锁成就“看穿生死”，“不再焦虑”</li><li><input checked="" disabled="" type="checkbox"> 看了不少经典粤语电影</li></ul><p><strong>总结：</strong></p><ul><li>考研上岸了一半，其他是都没有完成</li><li>再接再厉</li></ul></blockquote><!-- **2019计划**---2018.12.31/21:59:00->更新于2019.12.31>**2019-GOALS**>+ [x] 购买的专业书籍至少看完一遍（并发、重构、设计模式...）-> 95%> **额外：**>+ [x] 追了很多剧> **总结：**>+ 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！<br> -->]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留言板</title>
      <link href="/messageboard/index.html"/>
      <url>/messageboard/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
