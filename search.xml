<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅谈国家、政体、政府、政党的区别</title>
      <link href="/article/abffec9f.html"/>
      <url>/article/abffec9f.html</url>
      
        <content type="html"><![CDATA[<div class="note blue icon simple"><i class="note-icon fas fa-book"></i><p>一个国家的综合国力主要看他的经济，如果精神管用的话，北朝鲜和伊朗是世界上最强大的国家，那些国家绝对的。北朝鲜，世界第一强国。上朝鲜旅游，带你到幼儿园参观，让小孩儿给你唱歌，法西斯统治下七八岁的孩子，比条狗也沉不了多少，一个个面黄肌瘦，营养不良。然后唱：“我们的国家最强大，全世界人民都羡慕我们。”你哪得出这么一结论。“我们的国家最强大”这还好说，我们也认为我们社会主义中国最强大，世界上有三分之二的人在水深火热中。“全世界人民都羡慕我们”你这简直匪夷所思。都羡慕你你怎么还总往外国跑。然后逃跑的人被中国抓住送回北朝鲜，都得绳穿锁骨，串一串然后枪毙，咱中国也不抗议。然后北朝鲜官员理直气壮问这帮逃跑的人：“难道吃饱饭比祖国更重要吗？”这吃饱饭这件事上如果跟祖国对立起来了，这祖国要他有屁用啊。哦祖国让我连饭都吃不上，你还让我爱这个国，我疯啦？我爱这种国。如果同样是一个难民说这话，我佩服你。你当官的你那饱食终日然后你说这话，别装孙子了你，玩去吧你。国家和民族不是一个概念，跟政府更不是一个概念，政府和政党更不是一个概念。</p></div><p>​袁老师的这个段子引出今天的主题——国家，政体，政府，政党这些东西的区别。《平民政治的基本原理》这本书对这些概念进行了解释，早上看了看，内容过于多且复杂。还是在此<a href="https://program-think.blogspot.com/2013/12/political-concepts-state-citizenship-etc.html">博客</a>的基础上，谈一谈自己的理解。</p><hr><h2 id="✎-国家"><a href="#✎-国家" class="headerlink" title="✎ 国家"></a>✎ 国家</h2><p>​国家的概念得从【社会关系】说起，人类总是生活在社会关系中，如家庭就一个社会关系。国家就是<strong>最高级别的社会关系</strong>，它一般有如下的两个特点。</p><ul><li>拥有相对固定的领土</li><li>相对固定的政治制度（即后文中的政体）</li></ul><p>下面引出贯穿全文的一个例子，小区来对应国家。说到一个小区就包含小区的建筑，居民，物业等。</p><hr><h2 id="✎-政体"><a href="#✎-政体" class="headerlink" title="✎ 政体"></a>✎ 政体</h2><p>​国家一般都有一个对应的政体，即<strong>政治制度</strong>，常见的政治制度有：</p><ul><li>君主政体：权利掌握在一个人手里</li><li>贵族政体：权利掌握在少数人手里</li><li>共和政体：权利掌握在多数人手里</li></ul><p>​我朝是对应的是共和政体，人民是国家的主人。“人民”这个词在不同的时期有不同的定义。抗日战争时期，跟着共产党打日本鬼子的就是人民；解放战争时期，跟着共产党打国民党反动派的就是人民；社会主义建设时期，跟着共产党搞社会主义建设的就是人民；某个特殊时期，人民就等于“工农兵商学”还是“工农商学兵”（就这个五个顺序记不清了）。其中的规律很容易掌握。</p><hr><h2 id="✎-公民"><a href="#✎-公民" class="headerlink" title="✎ 公民"></a>✎ 公民</h2><p>​共和政体下掌握权利的多数人就是公民。（这时自然有人会问那少数呢？我觉得少数可能就是那些被剥夺了公民权利的罪犯啥的吧）。在小区的例子中，公民就是【全体业主】。</p><hr><h2 id="✎-政府"><a href="#✎-政府" class="headerlink" title="✎ 政府"></a>✎ 政府</h2><p>​权利掌握在大部分人手里，大部分人多则几亿人如我朝。自然不可能每个人都参与到国家事务的管理中而且也不是每个人都有治理国家的能力。于是这些人“雇佣”一伙人来帮他们管理国家，这“一伙人”就组成了政府。我朝的700万公务员就是这样。</p><p>​小区的例子中，政府就是物业。业主不需要每个人去打扫小区的卫生，维护小区的治安。也不是每个人都拥有打扫卫生和当“碧桂园五星上将”的技能。所以交物业费，【雇佣】物业来干这些事情。</p><hr><h2 id="✎-政党"><a href="#✎-政党" class="headerlink" title="✎ 政党"></a>✎ 政党</h2><p>​政党如同【物业公司】，需要得到小区全体业主的<strong>授权</strong>后进行小区事务的管理。</p><p>​民主小区一般有多家物业公司竞争上岗，干的不好业主就换另一家，干的好就继续干。</p><hr><h2 id="✎-议会（立法机构）"><a href="#✎-议会（立法机构）" class="headerlink" title="✎ 议会（立法机构）"></a>✎ 议会（立法机构）</h2><p>​议会如同小区中的<strong>业主委员会</strong>，有人会问，有物业了为什么还要有业主委员会呢？因为业主委员会是业主中选出，<strong>代表的是业主的利益</strong>。而物业只是<strong>被雇佣拿钱办事</strong>，需要业主委员会的<strong>监督</strong>看他们拿了钱是不是在好好办事。此外业委会也会<strong>制定</strong>一些小区的规章制度（议会制定国家的法律）。</p><p>​同样是疫情期间封锁。隔壁小区院子里有跳广场舞的，打羽毛球的，玩耍的人。我这小区院子里允许一段时间有人溜达，过了时间就开始喇叭喊“疫情尚未结束，请各位业主尽快返回家里”，至于这是业委会还是物业制定的规章制度就不得而知了。</p><hr><p>​最后附上<a href="https://github.com/HarborLibrary/Political-Science/blob/master/%E4%BF%9D%E7%BD%97%C2%B7%E8%8A%AE%E6%81%A9%E6%96%BD%EF%BC%9A%E5%B9%B3%E6%B0%91%E6%94%BF%E6%B2%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%20(%E6%89%AB%E6%8F%8F%E7%89%88).pdf">《平民政治的基本原理》电子书</a></p>]]></content>
      
      
      <categories>
          
          <category> 政治 </category>
          
          <category> 政治理论 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>博客二次开张</title>
      <link href="/article/d87f7e0c.html"/>
      <url>/article/d87f7e0c.html</url>
      
        <content type="html"><![CDATA[<p>大概在2020年开始写博客，主要是上传一些学习编程的笔记，原创内容很少。看自然是没什么人看，也没有专门去运营这个站点。考完研这个暑假，发现了编程随想的博客，之前备考考研政治的时候自认为开启了民智，处于半清醒状态。今后博客的内容将不仅限于编程技术，也会涉及到如历史，政治，社会学等方面。当然薄弱的知识储备难免文章中出现不少错误，欢迎在评论区交流指正。此外也会删掉以前学习编程的笔记，适当保留原创内容。</p><p>分类的话暂时这样计划：</p><ul><li>编程<ul><li>开源项目：自己本科阶段做过的一些项目，配有简介，运行说明，B站链接，源码。</li><li>编程语言：掌握的编程语言，内容压缩在一种语言一篇文章。</li><li>web开发：前后端开发中的一些经验。</li><li>设计模式：设计模式</li><li>工具：使用到的一些工具以及破解</li></ul></li><li>博客搭建：如何搭建、优化、运营博客</li><li>IT<ul><li>翻墙：如何翻过GFW</li><li>前沿技术：大概谈谈前沿技术（得多看书了）</li><li>杂七杂八：奇奇怪怪的技术</li></ul></li><li>历史<ul><li>近代史</li></ul></li><li>政治</li><li>书评：配合notion的读书笔记</li><li>生活<ul><li>考研：考研经验</li><li>随笔：想到什么写点什么</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 博客公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>藤枝学院</title>
      <link href="/article/14b39195.html"/>
      <url>/article/14b39195.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>藤枝学院（本人本科毕设）源码分享及部署说明</p></blockquote><h2 id="一、技术栈"><a href="#一、技术栈" class="headerlink" title="一、技术栈"></a>一、技术栈</h2><p>BS架构、前后端分离开发</p><p><strong>主要技术栈：</strong></p><p>后端：Springboot、MybatisPlus、MySQL</p><p>前端：Vue、Element-ui、Bootstrap</p><h2 id="二、运行说明"><a href="#二、运行说明" class="headerlink" title="二、运行说明"></a>二、运行说明</h2><p><strong>项目源码获取见文章末尾</strong></p><blockquote><p>根据上次的开发经验，微服务的划分不恰当导致代码组织很烂，代码中含有大量的重复代码，且运行复杂需启动一堆东西。所以此次的项目直接使用单体架构</p></blockquote><h3 id="导入serious-sql并修改配置文件"><a href="#导入serious-sql并修改配置文件" class="headerlink" title="导入serious.sql并修改配置文件"></a>导入serious.sql并修改配置文件</h3><p>在MySQL中导入sql文件，并修改<strong>application.properties</strong>中数据库相关配置</p><h3 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h3><p>redis仅仅用于存储短信验证码<br>安装并启动即可<br><a href="https://redis.io/">https://redis.io/</a></p><h3 id="一些需要修改的配置"><a href="#一些需要修改的配置" class="headerlink" title="一些需要修改的配置"></a>一些需要修改的配置</h3><h4 id="阿里云短信"><a href="#阿里云短信" class="headerlink" title="阿里云短信"></a>阿里云短信</h4><p>配置位置为<strong>SmsServiceImpl.java</strong>33行将<strong>accessKey</strong>和<strong>secret</strong>换为自己的即可</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220706225511236.png"></p><h4 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h4><p><strong>application.properties</strong>中配置</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220706225554105.png"></p><h4 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h4><p>修改AlipayConfig.java</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220706231304588.png"></p><h3 id="启动后端"><a href="#启动后端" class="headerlink" title="启动后端"></a>启动后端</h3><p>后端代码文件夹为<strong>serious</strong></p><p><strong>注意lib下面那个支付宝的包需手动导入下</strong>（方法为右键然后Add as library）</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220706224513885.png" alt="image-20220706224513885"></p><h3 id="启动前端"><a href="#启动前端" class="headerlink" title="启动前端"></a>启动前端</h3><p>前端代码文件夹为<strong>serious_userfront</strong>，<strong>vue-admin-template</strong>分别为<strong>用户前台</strong>前端和<strong>管理员后台</strong>前端。</p><p>启动命令分别为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="三、项目演示"><a href="#三、项目演示" class="headerlink" title="三、项目演示"></a>三、项目演示</h2><p><a href="https://www.bilibili.com/video/BV1Y44y1G7SJ">https://www.bilibili.com/video/BV1Y44y1G7SJ</a></p><h2 id="四、系统说明文档"><a href="#四、系统说明文档" class="headerlink" title="四、系统说明文档"></a>四、系统说明文档</h2><h3 id="1、系统总体设计"><a href="#1、系统总体设计" class="headerlink" title="1、系统总体设计"></a>1、系统总体设计</h3><h4 id="1-1、系统需求分析"><a href="#1-1、系统需求分析" class="headerlink" title="1.1、系统需求分析"></a>1.1、系统需求分析</h4><p>本系统分为学员用户前台系统和管后台管理系统两个子系统。学员可通过第三方登录进入该系统，或是以游客身份浏览课程。登录后用户可以开启订阅，开启订阅后可学习该系统所有课程。用户通过观看每一章节下每一个小节的视频完成对一门课程的学习，学习过程可对课程发表评论，在完成了一门课程的所有小节学习可获取该课程对应的证书。学员在个人中心可查看学习进度，查看订阅剩余天数等功能；后台管理系统主要对系统资源进行管理，如讲师管理，上传课程资源，删除含有敏感信息的评论等功能。</p><h4 id="1-2、系统总体结构分析与设计"><a href="#1-2、系统总体结构分析与设计" class="headerlink" title="1.2、系统总体结构分析与设计"></a>1.2、系统总体结构分析与设计</h4><p>本系统采用B&#x2F;S架构，用户安装浏览器即可使用该系统。采用前后端分离开发。前端使用<a href="https://getbootstrap.com/">Bootstrap</a>,<a href="https://element.eleme.io/#/zh-CN">Element-UI</a>等UI框架完成页面开发，使用<a href="https://vuejs.org/">Vue.js</a>进行请求和接收json数据并进行数据渲染。后端使用Java语言提供restful服务，使用<a href="https://spring.io/projects/spring-boot">SpringBoot</a>框架，使用<a href="https://baomidou.com/">MyBatis-Plus</a>生成部分SQL语句，传统关系型数据库Mysql存储数据，使用redis缓存短信验证码等信息。此外，使用云存储平台存储网站资源，整合了支付宝支付，谷歌第三方登录等功能。系统总体结构如图 1‑1系统总体结构图所示。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220419211558133.png" alt="图 1‑1系统总体结构图"></p><h4 id="1-3、系统总体功能结构图"><a href="#1-3、系统总体功能结构图" class="headerlink" title="1.3、系统总体功能结构图"></a>1.3、系统总体功能结构图</h4><p>功能结构如图 1‑2系统功能结构图所示</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220419203643530.png" alt="图 1‑2系统功能结构图"></p><h4 id="1-4、系统运行环境"><a href="#1-4、系统运行环境" class="headerlink" title="1.4、系统运行环境"></a>1.4、系统运行环境</h4><p>以下是系统的硬件环境。</p><ul><li>客户端：内存4G以上，硬盘容量250G以上，处理器性能要求较好，为主流的i5类型</li><li>应用服务端：1核，2G内存，1M带宽，50G高性能盘</li><li>数据库服务端：1核，1G内存，100GB，SSD盘</li></ul><p>以下是系统的软件环境。</p><ul><li>客户端<br>操作系统：Windows 10<br>浏览器：IE 10以上，Google Chrome 73.0.3683.86要上，其他常见浏览器如FireFox</li><li>应用服务端<br>操作系统：Linux系统<br>应用服务器：Tomcat 8或更新版本</li><li>数据库服务器端<br>操作系统：Linux系统<br>数据库管理系统：MySQL 5.7或更新版本</li></ul><hr><h3 id="2、用户系统操作使用说明"><a href="#2、用户系统操作使用说明" class="headerlink" title="2、用户系统操作使用说明"></a>2、用户系统操作使用说明</h3><h4 id="2-1、第三方登录"><a href="#2-1、第三方登录" class="headerlink" title="2.1、第三方登录"></a>2.1、第三方登录</h4><p>为方便用户使用，本系统不开发注册功能，使用第三方账号并绑定手机即可使用该系统。</p><p>【操作说明】<br>1）进入系统首页，点击右上角【登录】或【立即体验】，进入登录界面。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220419234314032.png" alt="图 2-1系统首页"></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220419234350920.png" alt="图 2-2登录界面"></p><p>2）点击【使用Goole账号登录】或【使用Github账号登录】（暂未实现），在弹出框中输入账号密码完成授权，跳转到绑定手机和设置登录密码界面，完成此操作后，可使用手机号和密码登录进入此系统。</p><p>3）登录后系统首页右上角变为导航条+头像，点击头像左侧【我】，再点击【退出登录】即可退出当前账号。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420104317196.png" alt="图 2-3登录后首页"></p><p>4）未登录的用户在进行如购买订阅，使用订阅，评论等需要登录才可使用功能时，会被拦截到登录界面。</p><h4 id="2-2、购买订阅"><a href="#2-2、购买订阅" class="headerlink" title="2.2、购买订阅"></a>2.2、购买订阅</h4><p>用户在订阅后可以学习系统内所有课程，所有用户可获得一次一个月的免费试用订阅，订阅分为年度和月度，年度有优惠。开启订阅后的用户头像有金框且右边显示vip字样<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420105201176.png" alt="图2-4 已开启订阅用户首页"></p><h5 id="2-2-1、一个月试用"><a href="#2-2-1、一个月试用" class="headerlink" title="2.2.1、一个月试用"></a>2.2.1、一个月试用</h5><p>【操作说明】</p><p>1）已登录用户点击首页【一个月试用】，在弹出框中点击确定，即可开启一个月试用订阅。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420105013427.png" alt="图 2-5试用订阅"></p><p>2）已经试用过的用户在到期后将无法再次试用。</p><h5 id="2-2-2、购买订阅"><a href="#2-2-2、购买订阅" class="headerlink" title="2.2.2、购买订阅"></a>2.2.2、购买订阅</h5><p>【操作说明】</p><p>1）已登录用户点击首页【购买订阅】，在订阅页面选择【年费方案】或【月费方案】，然后选择支付方式：【支付宝】【微信】（暂未实现）【USTD】（暂未实现）。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420105649139.png" alt="图 2-6订阅界面"></p><p>2）选择订阅类型和支付方式后进入订单界面，选择【套餐时长】，点击【立即支付】，前往对应的支付界面完成支付即成功开启订阅。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420105838537.png" alt="图 2-7订单界面"></p><p>3）订阅不可叠加和取消，只能待到期后决定续费与否</p><h4 id="2-3、学习课程"><a href="#2-3、学习课程" class="headerlink" title="2.3、学习课程"></a>2.3、学习课程</h4><h5 id="2-3-1、课程推荐"><a href="#2-3-1、课程推荐" class="headerlink" title="2.3.1、课程推荐"></a>2.3.1、课程推荐</h5><p>对于未登录用户，将按照课程访问量推荐热门课程；对于已登录用户，将推荐热门课程和根据用户学习记录推荐用户可能感兴趣的课程。</p><p>【操作说明】</p><p>用户下拉首页即可看到推荐的课程。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420110720630.png" alt="图 2-8已登录用户推荐界面"></p><h5 id="2-3-2、分类检索课程"><a href="#2-3-2、分类检索课程" class="headerlink" title="2.3.2、分类检索课程"></a>2.3.2、分类检索课程</h5><p>【操作说明】</p><p>1）用户点击首页热门领域下的【课程分类名】。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420111135340.png" alt="图 2-9课程分类"></p><p>2）查看该分类下的所有课程，在右侧会推荐和该分类相似的分类。用户可选择【最佳匹配】【最新课程】【最多观看】对指定分类下的课程进行排序查看。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420111254869.png" alt="图 2-10课程列表"></p><h5 id="2-3-3、课程搜索"><a href="#2-3-3、课程搜索" class="headerlink" title="2.3.3、课程搜索"></a>2.3.3、课程搜索</h5><p>【操作说明】</p><p>用户在顶部搜索框输入关键字点击搜索按钮，系统将按照课程名模糊匹配，分类匹配。标签匹配的顺序为用户生成搜索结果。用户可选择【最佳匹配】【最新课程】【最多观看】对搜索结果进行排序。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420111724166.png" alt="图 2-10课程搜索界面"></p><h5 id="2-3-4、观看视频学习"><a href="#2-3-4、观看视频学习" class="headerlink" title="2.3.4、观看视频学习"></a>2.3.4、观看视频学习</h5><p>【操作说明】</p><p>1）用户通过搜索页面、首页、课程列表等界面点击【课程卡片】进入课程详情页。详情页右侧为课程大纲，可点击选择章节和小节进行学习，已学习视频小节会变为灰色。未开启订阅用户无法进行学习。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420121714437.png" alt="图 2-11课程详情"></p><p>2）下面的课程概览显示课程简介，讲师简介，课程目标等信息</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420121918352.png" alt="图 2-12课程概览"></p><h4 id="2-4、课程评论"><a href="#2-4、课程评论" class="headerlink" title="2.4、课程评论"></a>2.4、课程评论</h4><p>【操作说明】</p><p>在课程详情页面点击【评论】，可以查看评论和评论。未登录用户将提醒登录后进行评论</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420122107394.png" alt="图 2-13评论界面"></p><h4 id="2-5、获取证书"><a href="#2-5、获取证书" class="headerlink" title="2.5、获取证书"></a>2.5、获取证书</h4><p>完成某一课程全部小节视频的学习，可获得系统颁布的证书。</p><p>【操作说明】</p><p>1）在【个人中心】- 【课程记录】查看以学完课程</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420122446807.png" alt="图 2-14个人中心-课程记录"></p><p>2）点击【点击获取证书】，在弹框中输入真实姓名，在生成证书界面下载证书。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420122525265.png" alt="图 2-15 生成证书界面"></p><h4 id="2-6、个人中心"><a href="#2-6、个人中心" class="headerlink" title="2.6、个人中心"></a>2.6、个人中心</h4><p>个人中心可进行查看学习进度，学习情况，订阅时间等内容。</p><h5 id="2-6-1、查看学习进度"><a href="#2-6-1、查看学习进度" class="headerlink" title="2.6.1、查看学习进度"></a>2.6.1、查看学习进度</h5><p>【操作说明】</p><p>1）首页点击【个人中心】-【我的学习】，在该界面查看学习进度，以及最近三个月学习情况<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420122833966.png" alt="图 2-16个人中心-我的学习"></p><p>2）右侧搜索栏可进行课程名搜索</p><h5 id="2-6-2、查看订阅"><a href="#2-6-2、查看订阅" class="headerlink" title="2.6.2、查看订阅"></a>2.6.2、查看订阅</h5><p>【操作说明】</p><p>首页点击【个人中心】-【我的订阅】，在该界面查看订阅详情<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420123004742.png" alt="图 2-17个人中心-我的订阅"></p><h5 id="2-6-3、查看已学完课程"><a href="#2-6-3、查看已学完课程" class="headerlink" title="2.6.3、查看已学完课程"></a>2.6.3、查看已学完课程</h5><p>改功能已在2.5获取证书描述过。</p><hr><h3 id="3、管理员系统操作说明"><a href="#3、管理员系统操作说明" class="headerlink" title="3、管理员系统操作说明"></a>3、管理员系统操作说明</h3><h4 id="3-1、讲师管理"><a href="#3-1、讲师管理" class="headerlink" title="3.1、讲师管理"></a>3.1、讲师管理</h4><p>【操作说明】</p><p>1）点击左侧菜单栏【讲师管理】-【讲师列表】，进入讲师列表，可根据【讲师名】和【讲师头衔】进行筛选。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420123855399.png" alt="图 3-1讲师列表"></p><p>2）点击左侧菜单栏【讲师管理】-【添加讲师】，进入讲师添加界面，输入讲师相关信息提交表单，完成讲师信息添加。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420124056388.png" alt="图 3-2添加讲师表单"></p><p>3）点击左侧菜单栏【讲师管理】-【讲师列表】，进入讲师列表，点击对应讲师的【修改】可对讲师信息修改。</p><p>4）点击左侧菜单栏【讲师管理】-【讲师列表】，进入讲师列表，点击对应讲师的【删除】可删除讲师信息。</p><h4 id="3-2、课程分类管理"><a href="#3-2、课程分类管理" class="headerlink" title="3.2、课程分类管理"></a>3.2、课程分类管理</h4><p>【操作说明】</p><p>1）点击左侧菜单栏【课程分类管理】-【课程分类列表】，进入课程分类列表，可根据【课程分类名】进行筛选。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420124620224.png" alt="图 3-3课程分类列表"></p><p>2）点击左侧菜单栏【课程分类管理】-【课程分类列表】，进入课程分类添加界面，输入课程分类相关信息提交表单，完成课程分类添加。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420124745417.png" alt="图 3-4课程分类添加"></p><p>3）点击左侧菜单栏【课程分类管理-【课程分类列表】，进入课程分类列表，点击对应课程分类的【修改】可对课程分类信息修改。</p><p>4）点击左侧菜单栏【课程分类管理】-【课程分类列表】，进课程分类列表，点击对应课程分类的【删除】可删除课程分类。</p><h4 id="3-3、课程管理"><a href="#3-3、课程管理" class="headerlink" title="3.3、课程管理"></a>3.3、课程管理</h4><p>【操作说明】</p><p>1）点击左侧菜单栏【课程管理】-【课程列表】，进入课程列表，可根据【课程名】和【发布状态】进行筛选。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420124930084.png" alt="图 3-5课程列表"></p><p>2）点击左侧菜单栏【课程管理】-【添加课程】，编辑课程基本信息，点击下一步<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420125052037.png" alt="图 3-6添加课程（1）"></p><p>3）继续上一步的操作编辑课程大纲信息，点击下一步<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420125216069.png" alt="图 3-7添加课程（2）"></p><p>4）点击【发布课程】，完成课程添加<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420125313443.png" alt="图 3-8添加课程（3）"></p><p>5）在课程列表，选择【编辑基本信息】【编辑大纲信息】对课程信息进行修改</p><p>6）在课程列表，点击【删除课程信息】删除课程信息</p><h4 id="3-4、评论管理"><a href="#3-4、评论管理" class="headerlink" title="3.4、评论管理"></a>3.4、评论管理</h4><p>【操作说明】</p><p>1）点击左侧菜单栏【评论管理】，进入评论列表，可根据【课程名】和【用户名】和【评论内容】进行筛选。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420125607573.png" alt="图 3-9评论列表"></p><p>2）评论列表，点击对应评论的【删除】可删除评论。</p><h4 id="3-5、用户管理"><a href="#3-5、用户管理" class="headerlink" title="3.5、用户管理"></a>3.5、用户管理</h4><p>【操作说明】</p><p>1）点击左侧菜单栏【用户管理】，进入用户列表，可根据【用户名】进行筛选。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420125752800.png" alt="图 3-10用户列表"></p><p>2）用户列表，点击对应用户的【删除】可删除用户。</p><h4 id="3-6、订阅管理"><a href="#3-6、订阅管理" class="headerlink" title="3.6、订阅管理"></a>3.6、订阅管理</h4><p>【操作说明】</p><p>1）点击左侧菜单栏【订阅管理】，进入订阅列表，可根据【订单号】【用户名】【支付类型】进行筛选。<br><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220420125903513.png" alt="图 3-11订阅列表"></p><p>2）订阅列表，点击对应订阅信息的【删除】可删除订阅信息。</p><hr><blockquote><p>开发不易，求一瓶肥宅快乐水。</p></blockquote><img src="https://i.loli.net/2021/05/22/EeJiuKLg6o24dr7.png" style="zoom: 25%;" /><blockquote><p>源码：蓝奏云：<a href="https://wwz.lanzoub.com/b00vulxne">https://wwz.lanzoub.com/b00vulxne</a> 密码:a5ok</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的考研经验</title>
      <link href="/article/bc1a085d.html"/>
      <url>/article/bc1a085d.html</url>
      
        <content type="html"><![CDATA[<h1 id="成都信息工程大学软件工程上岸经验帖"><a href="#成都信息工程大学软件工程上岸经验帖" class="headerlink" title="成都信息工程大学软件工程上岸经验帖"></a>成都信息工程大学软件工程上岸经验帖</h1><blockquote><p>对于我个人而言，觉得经验贴这个玩意参考价值不大，因为<strong>人与人的个体差异可能比人与猪的还要大</strong>。但是也有人按照经验贴按部就班实现了自己的研究生梦。趁着对考研还有印象，以及在候车室候车没啥事干，也写一篇经验贴供大家参考吧。</p></blockquote><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220405140612894.png" style="zoom:67%;" /><h2 id="自我定位于院校选择"><a href="#自我定位于院校选择" class="headerlink" title="自我定位于院校选择"></a>自我定位于院校选择</h2><p>有句话说<strong>考研成功与否选择大于努力</strong>，很认同这句话。决定考研的人也是20+岁的人了，应该是对自己有着较为准确的定位（也有部分头铁冲清华北大当炮灰），不是否定不畏艰险的拼搏精神，只是大部分人都是普通人，平凡人。早点接受这个现实没什么不好。将自己定位为混子，不如就考本校或者双非院校，双非研究生也是研究生。将自己定位为可以静下心好好学，年如一日，不被各种事情干扰的卷王，就可以冲个985，211。</p><hr><h2 id="数学复习"><a href="#数学复习" class="headerlink" title="数学复习"></a>数学复习</h2><p>数学自然是痛苦，对于一个数二考了70分的人没什么资格写经验贴，只有写写<strong>反向经验</strong>贴了。回首我的数学学习经历，高一上的数学就是难度的极限了，以后就难的做不来题了，更不用说高数这玩意有多痛苦。而且，真的有必要这么难吗？如袁腾飞老师所说，<em>我们的学生学着全宇宙最难的数理化，也不见在拿过多少自然科学的诺贝尔奖，高中生的数学水平去美国都可以当数学老师</em>。但是<strong>优质教育的稀缺</strong>，只能通过考试这一种<strong>相对公平的方法来选拔人才</strong>，特殊国情还能咋办呢，总比抽签去读研究生好，那是西藏找转世灵童。</p><p>所以数学就硬着头皮学吧，我是全程看汤老师的课，自己的这点水平实在不敢对各位老师加以评论。然后做真题如果遇到不会的题就算了吧，有些题就是为考清华北大的同学设置的。</p><hr><h2 id="英语复习"><a href="#英语复习" class="headerlink" title="英语复习"></a>英语复习</h2><p>对于我这个专业（软件工程），英语还是很重要的。个人本身也对英语不怎么排斥，英语就考的还行，英一66分。英语还是比较看基础感觉，因为有一起备考的研友的例子。核心就是<strong>背单词</strong>吧，然后看看网课什么的。全球化趋势下学好英语必不可少，此外还可以学好英语润出国什么，当然这些都是后话了。</p><p>此外，我好朋友英语高分经验贴可供学习：<a href="http://hexo.lstf666.cn/2022/03/28/ying-er-83-fen-tu-xie-zheng-li-qian-zi-chang-wen/">http://hexo.lstf666.cn/2022/03/28/ying-er-83-fen-tu-xie-zheng-li-qian-zi-chang-wen/</a></p><hr><h2 id="政治复习"><a href="#政治复习" class="headerlink" title="政治复习"></a>政治复习</h2><p>写这一块内容就要谨言慎行了，最<strong>伟大光荣永远正确</strong>的学科，可惜我学的时候都是反着理解的。最终取得58的成绩，虽然不是很高，但是已经很满意了。对我来说最终的分数不是最重要，而是过程中学到不少<strong>额外的知识</strong>。就这样吧，<strong>谨言慎行</strong>。要知道<strong>研究生招生准则第一条就是拥护中国共产党的领导</strong>。</p><p>此外，我好朋友的政治高分经验贴可供学习：<a href="http://hexo.lstf666.cn/2022/03/28/he-nan-zheng-zhi-79-jing-yan-tie/">http://hexo.lstf666.cn/2022/03/28/he-nan-zheng-zhi-79-jing-yan-tie/</a></p><hr><h2 id="专业课复习"><a href="#专业课复习" class="headerlink" title="专业课复习"></a>专业课复习</h2><p>本校的专业课是今年才变的，由C语言变为软件工程导论。这一块我还比较行，取得了115的成绩。对于这门专业课的学习，其实就是大学许多课程的浓缩，比如UML统一建模语言，软件设计工程，软件制造工程，软件测试，工程实践等。对于本校考试优势较大。以前上课都没有认真听过这些课，现在有过一定软件开发的基础上，再次学习一遍，更加融会贯通。也是比较实用的一门课。</p><p>经验就是<strong>啃书</strong>吧，多理解，多背。</p><hr><h2 id="复试"><a href="#复试" class="headerlink" title="复试"></a>复试</h2><p>3月31号刚刚结束了研究生复试，复试前两周绝对是我人生中最焦虑的两个月。复试完又要马上进行毕设的中期检查，<strong>每天都在痛苦和焦虑中度过</strong>。但谁又能知道，复试远远没有想象的那么可怕。而且<strong>我准备的内容，80％都没问到</strong>，全靠以前的基础就答过去了。英语问题里边没听懂，就听到一个单词就背了一段相关的上去。专业课也回答的不是很好，可能是对自己要求太高哈哈。本来还计划是在纸上理清思路在作答，直接慌张的张口就来。复试更多细节也不易说，反正远没有想象的艰难。</p><p>再过一段时间更新个复试的详细经验贴供报考本校的同学来参考。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享文章url优化</title>
      <link href="/article/3e7bbe1a.html"/>
      <url>/article/3e7bbe1a.html</url>
      
        <content type="html"><![CDATA[<p>今天在使用新的博客博客的时候发现一个问题，给别人分享链接的时候一长串</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220319111852944.png"></p><p>如分享这篇博客，就会变成这样：</p><p><a href="http://taoblog421.cn/2020/10/16/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E5%8E%9F%E7%A0%81%EF%BC%8C%E8%A1%A5%E7%A0%81%EF%BC%8C%E5%8F%8D%E7%A0%81/">http://taoblog421.cn/2020/10/16/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E5%8E%9F%E7%A0%81%EF%BC%8C%E8%A1%A5%E7%A0%81%EF%BC%8C%E5%8F%8D%E7%A0%81/</a></p><p>对url进行了编码，不是很美观，当博客的title长的时候更难受</p><p>解决方法：</p><blockquote><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/157995872">https://zhuanlan.zhihu.com/p/157995872</a></p><p>使用hexo-abbrlink + 修改配置</p></blockquote><p>安装插件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>修改hexo配置文件_config.yaml(<strong>不是主题配置文件</strong>)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">article/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>重新部署</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p><a href="http://taoblog421.cn/article/9b6873a3.html">http://taoblog421.cn/article/9b6873a3.html</a></p><p>这样就舒服很多</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言进阶</title>
      <link href="/article/83cfe2d8.html"/>
      <url>/article/83cfe2d8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>将6篇笔记整合到一起</p><p>学习课程为：<a href="https://www.bilibili.com/video/BV1vb411m7JV">https://www.bilibili.com/video/BV1vb411m7JV</a></p></blockquote><h1 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h1><blockquote><p>这个黑马八天的课，学一遍吧</p><p>day01</p><p>1、数组作为参数</p><p>2、数据类型本质：固定内存块大小的别名</p><p>3、内存模型</p><p>4、变量本质：连续内存块的别名</p><p>5、栈的生长方向和内存存放方向</p></blockquote><span id="more"></span><h2 id="一、数组作为参数"><a href="#一、数组作为参数" class="headerlink" title="一、数组作为参数"></a>一、数组作为参数</h2><p>简单的选择排序引出问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> length)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> length)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getLength</span><span class="params">(<span class="type">int</span> *a)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组作为形参传入函数，实际是传指针</p><p>将函数定义为如下三种均可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> a[任意数字],<span class="type">int</span> length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> length)</span>;</span><br></pre></td></tr></table></figure><h2 id="二、数据类型本质"><a href="#二、数据类型本质" class="headerlink" title="二、数据类型本质"></a>二、数据类型本质</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么</span></span><br><span class="line"><span class="comment">// 数据类型本质:固定内存大小的别名</span></span><br><span class="line"><span class="comment">// 变量本质:一段连续内存空间的别名</span></span><br><span class="line"><span class="comment">// b 数组首元素地址 int 4Byte </span></span><br><span class="line"><span class="comment">// &amp;b 数组元素的首地址 3*4 = 12Byte </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;b+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//putput</span></span><br><span class="line">G:\clion_project\retest\cmake-build-debug\nature_of_dataType.exe</span><br><span class="line"><span class="number">6422036</span></span><br><span class="line"><span class="number">6422036</span></span><br><span class="line"><span class="number">6422040</span></span><br><span class="line"><span class="number">6422048</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="三、数据类型起别名"><a href="#三、数据类型起别名" class="headerlink" title="三、数据类型起别名"></a>三、数据类型起别名</h2><p>typedef</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span>&#123;</span> <span class="comment">//结构体的名字，Cat就是自己构造的数据类型</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef一般结合结构体来使用</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Cat1</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125; Cat1;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//下面几种方式是等价的</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Cat</span> <span class="title">cat1</span>;</span></span><br><span class="line">    Cat1 cat2;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Cat1</span> <span class="title">cat2</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、void类型"><a href="#四、void类型" class="headerlink" title="四、void类型"></a>四、void类型</h2><p>使用</p><p>1、函数无参数，如：c语言中有区别，c++无区别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220317151718882.png"></p><p>一个警告一个报错；</p><p>2、函数无返回值，如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、万能指针</p><p>void * </p><p>不能定义void类型普通变量，因为不能确定分配内存空间大小</p><h2 id="五、内存模型"><a href="#五、内存模型" class="headerlink" title="五、内存模型"></a>五、内存模型</h2><ul><li>堆 heap</li><li>栈 stake</li><li>全局区 global</li><li>代码区 code</li></ul><h3 id="1、全局区"><a href="#1、全局区" class="headerlink" title="1、全局区"></a>1、全局区</h3><p>“cyfwlp”这样的字符串存储在<strong>全局区</strong>的<strong>文字常量区</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">getStr1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p = <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">getStr2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *q = <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *q = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    p = getStr1();</span><br><span class="line">    q = getStr2();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s,%d\n&quot;</span>,p,p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s,%d\n&quot;</span>,q,q);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//result:</span></span><br><span class="line">G:\clion_project\retest\cmake-build-debug\retest.exe</span><br><span class="line">cyfwlp,<span class="number">4214788</span></span><br><span class="line">cyfwlp,<span class="number">4214788</span></span><br></pre></td></tr></table></figure><p>内存布局图，脑海模拟</p><h3 id="2、栈区"><a href="#2、栈区" class="headerlink" title="2、栈区"></a>2、栈区</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = getStr();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出乱码&#x2F;或编译不能通过（返回局部变量）</p><h3 id="3、堆区"><a href="#3、堆区" class="headerlink" title="3、堆区"></a>3、堆区</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(str,<span class="string">&quot;abcdef&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = getStr();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存布局图，脑海模拟</p><h2 id="六、栈的生长方向和内存存放方向"><a href="#六、栈的生长方向和内存存放方向" class="headerlink" title="六、栈的生长方向和内存存放方向"></a>六、栈的生长方向和内存存放方向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">6422044</span> <span class="number">6422040</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>发现<strong>栈的地址方向</strong>是<strong>高地址向低地址</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* c = <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">int</span>* d = <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,c,d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">10556496</span> <span class="number">10556528</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>堆中的地址方向</strong>是<strong>低地址向高地址</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,buf,buf+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">6421616</span> <span class="number">6421620</span></span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>内存存放是低地址到高地址</strong></p><hr><h1 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h1><blockquote><p>day02</p><ul><li>指针强化</li><li>字符串</li></ul></blockquote><!--more--><h2 id="一、指针强化"><a href="#一、指针强化" class="headerlink" title="一、指针强化"></a>一、指针强化</h2><h3 id="1、指针也是数据类型"><a href="#1、指针也是数据类型" class="headerlink" title="1、指针也是数据类型"></a>1、指针也是数据类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> *****q = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(q));</span><br><span class="line"></span><br><span class="line"><span class="comment">//output 指针类型大小与操作系统位数有关，64位为8byte，32位为4byte</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/86547F8DE3C2180D85D68F12C2152139.jpg"></p><h3 id="2、通过-号操作内存"><a href="#2、通过-号操作内存" class="headerlink" title="2、通过*号操作内存"></a>2、通过*号操作内存</h3><p>简单,pass</p><p>注意：指针的值和指针指向的内存是不同的概念</p><h3 id="3、迷途指针和野指针"><a href="#3、迷途指针和野指针" class="headerlink" title="3、迷途指针和野指针"></a>3、迷途指针和野指针</h3><blockquote><p>先来看看维基百科怎么说</p><p><strong>Dangling pointers</strong> and <strong>wild pointers</strong> in <a href="https://en.wikipedia.org/wiki/Computer_programming">computer programming</a> are <a href="https://en.wikipedia.org/wiki/Data_pointer">pointers</a> that do not point to a valid object of the appropriate type。</p><p><strong>Dangling pointers</strong> arise during <a href="https://en.wikipedia.org/wiki/Object_destruction">object destruction</a>, when an object that has an incoming reference is deleted or deallocated, without modifying the value of the pointer, so that the pointer still points to the memory location of the deallocated memory. </p><p><strong>Wild pointers</strong> arise when a pointer is used prior to initialization to some known state, which is possible in some programming languages.</p></blockquote><p>1、迷途指针和野指针都是不指向合法对象的指针</p><p>2、迷途指针：指针指向的内存被释放或回收，但指针变量存放任是那个地址</p><p>3、野指针：未初始化的指针</p><h3 id="4、通过指针遍历数组"><a href="#4、通过指针遍历数组" class="headerlink" title="4、通过指针遍历数组"></a>4、通过指针遍历数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> length = <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(arr+i));</span><br><span class="line">    <span class="comment">// *(arr+i) 等价与 arr[i]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、值传递与地址传递"><a href="#5、值传递与地址传递" class="headerlink" title="5、值传递与地址传递"></a>5、值传递与地址传递</h3><p>理解如下代码即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changeValue</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    a = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changeValue2</span><span class="params">(<span class="type">int</span> *a)</span> &#123;</span><br><span class="line">    *a = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changeAddress</span><span class="params">(<span class="type">char</span> *p)</span> &#123;</span><br><span class="line">    p = <span class="number">0x1122</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changeAddress2</span><span class="params">(<span class="type">char</span> **p)</span> &#123;</span><br><span class="line">    *p = <span class="number">0x1122</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//值传递没用</span></span><br><span class="line">    changeValue(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>,a);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按地址传递可以改变参数的值</span></span><br><span class="line">    changeValue2(&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>,a);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *p = <span class="number">0x1111</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实质还是按值传递</span></span><br><span class="line">    changeAddress(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p的地址%p\n&quot;</span>,p);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按地址传递</span></span><br><span class="line">    changeAddress2(&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p的地址%p\n&quot;</span>,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、指针作参数输入输出性质"><a href="#6、指针作参数输入输出性质" class="headerlink" title="6、指针作参数输入输出性质"></a>6、指针作参数输入输出性质</h3><p>指针作参数可以作为输入参数或输出参数</p><p>输入参数：由主函数分配内存块</p><p>输出参数：被调函数在堆中分配内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">showbuf</span><span class="params">(<span class="type">char</span> *p <span class="comment">/** in **/</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(p,<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span>** p,<span class="type">int</span>* length)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* tmp = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(tmp,<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line"></span><br><span class="line">    *p = tmp;</span><br><span class="line"></span><br><span class="line">    *length = <span class="built_in">strlen</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//指针作为输入参数</span></span><br><span class="line">    <span class="type">char</span> <span class="built_in">array</span>[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    showbuf(<span class="built_in">array</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指针作为输出参数</span></span><br><span class="line">    <span class="type">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    fun(&amp;p, &amp;len);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\np = %s, len = %d\n&quot;</span>, p, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/B1E5290033D9E1C8A978C2F498505E82.jpg"></p><h2 id="二、字符串"><a href="#二、字符串" class="headerlink" title="二、字符串"></a>二、字符串</h2><h3 id="1、字符串初始化"><a href="#1、字符串初始化" class="headerlink" title="1、字符串初始化"></a>1、字符串初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//c语言中没有String类型，使用字符数组代替字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//乱码，因为无结束符</span></span><br><span class="line">    <span class="type">char</span> str[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str = %s\n&quot;</span>,str);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不乱码，剩余元素自动补0</span></span><br><span class="line">    <span class="type">char</span> str1[<span class="number">10</span>] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1 = %s\n&quot;</span>,str1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一般这样使用</span></span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sizeof与length区别</span></span><br><span class="line">    <span class="comment">//length = 6 sizeof = 7 多一个0或‘\0’</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length = %d , sizeof = %d\n&quot;</span>,<span class="built_in">strlen</span>(str2), <span class="keyword">sizeof</span>(str2));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过[]或指针操作字符串</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过[]便于阅读</span></span><br><span class="line">    <span class="keyword">for</span>(; i &lt; <span class="built_in">strlen</span>(str2); i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过指针</span></span><br><span class="line">    p = str2;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str2); i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*(str2+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str2); i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//思考str2和p完全等价吗</span></span><br><span class="line">    <span class="comment">//str2++;报错，str2是常量，为了释放内存</span></span><br><span class="line">    <span class="comment">//p++;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、字符串拷贝"><a href="#2、字符串拷贝" class="headerlink" title="2、字符串拷贝"></a>2、字符串拷贝</h3><p>1、最基本实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> src[] = <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">    <span class="type">char</span> dst[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;src[i] != <span class="number">0</span>; i++) &#123;</span><br><span class="line">        dst[i] = src[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、封装函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">str_copy1</span><span class="params">(<span class="type">char</span>* dst,<span class="type">char</span>* src)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;src[i] != <span class="number">0</span>; i++) &#123;</span><br><span class="line">        dst[i] = src[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> src[] = <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">    <span class="type">char</span> dst[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    str_copy1(dst,src);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、函数[]换指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">str_copy2</span><span class="params">(<span class="type">char</span>* dst,<span class="type">char</span>* src)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;*(src+i) != <span class="number">0</span>; i++) &#123;</span><br><span class="line">        *(dst+i) = *(src+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> src[] = <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">    <span class="type">char</span> dst[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    str_copy2(dst,src);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、不使用for循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">str_copy3</span><span class="params">(<span class="type">char</span>* dst,<span class="type">char</span>* src)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*src != <span class="number">0</span>)&#123;</span><br><span class="line">        *dst = *src;</span><br><span class="line">        dst++;</span><br><span class="line">        src++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、极简版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span>* dst,<span class="type">char</span>* src)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*dst++ = *src++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、字符串常见问题"><a href="#3、字符串常见问题" class="headerlink" title="3、字符串常见问题"></a>3、字符串常见问题</h3><h4 id="（1）、子串出现次数"><a href="#（1）、子串出现次数" class="headerlink" title="（1）、子串出现次数"></a>（1）、子串出现次数</h4><p>需借助char* strstr(char* haystack,char* needle) 函数，作用为返回子串出现首元素的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_current_num</span><span class="params">(<span class="type">char</span>* str,<span class="type">char</span>* needle)</span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((str = <span class="built_in">strstr</span>(str,needle)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        num++;</span><br><span class="line">        str += <span class="built_in">strlen</span>(needle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* str = <span class="string">&quot;111abcd22222abcd33333abcd3abcd222abcd1111&quot;</span>;</span><br><span class="line">    <span class="type">int</span> num = get_current_num(str,<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %d&quot;</span>,num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）、两头堵模型"><a href="#（2）、两头堵模型" class="headerlink" title="（2）、两头堵模型"></a>（2）、两头堵模型</h4><p>两头含有空格的字符串中提取出有效字符串长度和有效字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span>*str,<span class="type">char</span>* rst)</span> &#123;</span><br><span class="line">    <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = <span class="built_in">strlen</span>(str) - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isspace</span>(str[begin])) &#123;</span><br><span class="line">        begin ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断全空</span></span><br><span class="line">    <span class="keyword">if</span> (begin == end + <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isspace</span>(str[end])) &#123;</span><br><span class="line">            end --;</span><br><span class="line">        &#125;</span><br><span class="line">        length = end - begin + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span>(rst,str+begin,length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* str = <span class="string">&quot;           cyfwlp                   &quot;</span>;</span><br><span class="line">    <span class="comment">//这里不能定义为char* str</span></span><br><span class="line">    <span class="type">char</span> rst[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> length = fun(str,rst);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length = %d\n&quot;</span>,length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,rst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）、反转字符串"><a href="#（3）、反转字符串" class="headerlink" title="（3）、反转字符串"></a>（3）、反转字符串</h4><p>个人解法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>* inStr, <span class="type">char</span>* outStr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(inStr); ++i) &#123;</span><br><span class="line">        outStr[i] = inStr[<span class="built_in">strlen</span>(inStr) - <span class="number">1</span> - i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* str = <span class="string">&quot;cyfwlp&quot;</span>;<span class="comment">//0 1 2 3 4 5</span></span><br><span class="line">    <span class="type">char</span> rst[<span class="number">100</span>]  = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    reverseString(str,rst);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;rst = %s&quot;</span>,rst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、作业"><a href="#三、作业" class="headerlink" title="三、作业"></a>三、作业</h2><p>1、画出字符串一级指针内存四区模型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">20</span>]= <span class="string">&quot;aaaa&quot;</span>;</span><br><span class="line"><span class="type">char</span> buf2[] = <span class="string">&quot;bbbb&quot;</span>; </span><br><span class="line"><span class="type">char</span> *p1 = <span class="string">&quot;111111&quot;</span>; </span><br><span class="line"><span class="type">char</span> *p2 = <span class="built_in">malloc</span>(<span class="number">100</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;               </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/62B47229C5E645FA19433284157049BA.jpg"></p><p>2、有一个字符串开头或结尾含有n个空格 （”   abcdefgdddd    ”），欲去掉前后空格，返回一个新字符串。    ‘</p><p>要求1：请自己定义一个接口（函数），并实现功能；<br>要求2：编写测试用例。<br>int trimSpace(char *inbuf, char *outbuf);  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">trimSpace</span><span class="params">(<span class="type">char</span> *inbuf, <span class="type">char</span> *outbuf)</span>&#123;</span><br><span class="line">    <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = <span class="built_in">strlen</span>(inbuf);</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isspace</span>(inbuf[begin])) &#123;</span><br><span class="line">        begin ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isspace</span>(inbuf[end])) &#123;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(end == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    length = end - begin + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span>(outbuf,inbuf+begin,length);</span><br><span class="line">    outbuf[length] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* str = <span class="string">&quot;   abcdefgdddd    &quot;</span>;</span><br><span class="line">    <span class="type">char</span> result[] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    trimSpace(str,result);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、有一个字符串“1a2b3d4z”；</p><p>要求写一个函数实现如下功能：功能1：把偶数位字符挑选出来，组成一个字符串1。<br>    功能2：把奇数位字符挑选出来，组成一个字符串2。<br>    功能3：把字符串1和字符串2，通过函数参数，传送给main，并打印。<br>    功能4：主函数能测试通过。<br>    int getStr1Str2(char *source, char *buf1, char *buf2);</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getStr1Str2</span><span class="params">(<span class="type">char</span>* source, <span class="type">char</span>* buf1, <span class="type">char</span>* buf2)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> length1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> length2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; <span class="built_in">strlen</span>(source); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            buf1[length1] = source[i];</span><br><span class="line">            length1++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            buf2[length2] = source[i];</span><br><span class="line">            length2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buf1[length1+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    buf2[length2+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化版</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getStr1Str2</span><span class="params">(<span class="type">char</span>* source, <span class="type">char</span>* buf1, <span class="type">char</span>* buf2)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; <span class="built_in">strlen</span>(source); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            *buf1 = source[i];</span><br><span class="line">            buf1++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            *buf2 = source[i];</span><br><span class="line">            buf2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *buf1 = <span class="number">0</span>;</span><br><span class="line">    *buf2 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* str = <span class="string">&quot;1a2b3d4z&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> str2[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    getStr1Str2(str, str1, str2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1 = %s\n&quot;</span>,str1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str2 = %s\n&quot;</span>,str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、键值对（“key &#x3D; value”）字符串，在开发中经常使用</p><p>要求1：请自己定义一个接口，实现根据key获取.<br>要求2：编写测试用例。<br>要求3：键值对中间可能有n多空格，请去除空格</p><p>注意：键值对字符串格式可能如下：<br>“key1 &#x3D; value1”<br>“key2 &#x3D;       value2”<br>“key3  &#x3D; value3”<br>“key4        &#x3D; value4”<br>“key5   &#x3D;   “<br>“key6   &#x3D;”</p><p>int getKeyByValue(char *keyvaluebuf,  char *keybuf,  char *valuebuf, int * valuebuflen);</p><p>int main(void)<br>{<br>    &#x2F;&#x2F;…<br>    getKeyByValude(“key1 &#x3D;   valude1”, “key1”, buf, &amp;len);<br>    &#x2F;&#x2F;…</p><p>​    return 0;</p><p>}</p><blockquote><p>想不出来，听讲解吧</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">trimSpace</span><span class="params">(<span class="type">char</span>* inStr, <span class="type">char</span>* outStr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = <span class="built_in">strlen</span>(inStr) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isspace</span>(inStr[begin])) &#123;</span><br><span class="line">        begin ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isspace</span>(inStr[end])) &#123;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    length = end - begin + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span>(outStr,inStr+begin,length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getKeyByValue</span><span class="params">(<span class="type">char</span> *keyvaluebuf,  <span class="type">char</span> *keybuf,  <span class="type">char</span> *valuebuf, <span class="type">int</span> * valuebuflen)</span>&#123;</span><br><span class="line">    <span class="comment">//先判断有没有</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(keyvaluebuf,keybuf) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找等号然后去掉两边空格即可</span></span><br><span class="line">    <span class="type">char</span> *value = <span class="built_in">strstr</span>(keyvaluebuf, <span class="string">&quot;=&quot;</span>);</span><br><span class="line">    value += <span class="number">1</span>;</span><br><span class="line">    *valuebuflen = trimSpace(value,valuebuf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *keyvaluebuf = <span class="string">&quot;    key1    =   valude1   &quot;</span>;</span><br><span class="line">    <span class="type">char</span> *key = <span class="string">&quot;key1&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    getKeyByValue(keyvaluebuf, key, buf, &amp;len);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value = %s&quot;</span>,buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h1><blockquote><p>day03</p><p>1、const使用</p><p>2、二级指针三种模型</p><p>3、多级指针</p></blockquote><!-- more --><h2 id="一、const使用"><a href="#一、const使用" class="headerlink" title="一、const使用"></a>一、const使用</h2><p><strong>作用：修饰的变量为只读</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//a =20; err</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此处const修饰的是*str,是指针指向内存的值不能修改</span></span><br><span class="line"><span class="type">char</span> buf[] = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">char</span> <span class="type">const</span> *str = buf;</span><br><span class="line"></span><br><span class="line">str = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//str[0] = &#x27;2&#x27;; err</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处const修饰的是*str,是指针变量的值不能修改</span></span><br><span class="line"><span class="type">char</span> * <span class="type">const</span> str1 = buf;</span><br><span class="line"></span><br><span class="line"><span class="comment">//str1 = NULL; err</span></span><br><span class="line">str1[<span class="number">0</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量的值和指针指向内存的值都不能改变</span></span><br><span class="line"><span class="type">char</span> <span class="type">const</span> * <span class="type">const</span> str2 = buf;</span><br><span class="line"></span><br><span class="line"><span class="comment">//str2 = NULL; err</span></span><br><span class="line"><span class="comment">//str2[0] = &#x27;2&#x27;; err</span></span><br></pre></td></tr></table></figure><p><strong>但还是通过指针来间接修改值 – 冒牌货</strong>（c++中完善这个问题）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> b  = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p = &amp;b;</span><br><span class="line">*p = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h2 id="二、二级指针"><a href="#二、二级指针" class="headerlink" title="二、二级指针"></a>二、二级指针</h2><p>指向指针的指针</p><h3 id="1、二级指针作为输出参数"><a href="#1、二级指针作为输出参数" class="headerlink" title="1、二级指针作为输出参数"></a>1、二级指针作为输出参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getStr</span><span class="params">(<span class="type">char</span> *str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getStr1</span><span class="params">(<span class="type">char</span> **str)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    getStr1(&amp;str);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str = %s&quot;</span>,str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getStr</span><span class="params">(<span class="type">char</span> *str)</span> &#123;</span><br><span class="line">    str = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(str,<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getStr1</span><span class="params">(<span class="type">char</span>** str)</span> &#123;</span><br><span class="line">    *str = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(*str,<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/E04F490A037DAB7C27D8040043D770EF.jpg"></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/7A59D4B4073ECDA9992D07FCFB92DDB8.png"></p><h3 id="2、指针数组"><a href="#2、指针数组" class="headerlink" title="2、指针数组"></a>2、指针数组</h3><p>完成如下功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *myArray[] = &#123;<span class="string">&quot;aaaaaa&quot;</span>, <span class="string">&quot;ccccc&quot;</span>, <span class="string">&quot;bbbbbb&quot;</span>, <span class="string">&quot;111111&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printMyArray</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sortMyArray</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_print</span><span class="params">(<span class="type">char</span>* p[],<span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">char</span> **p, <span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* temp;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; length - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(p[i],p[j]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//需要交换</span></span><br><span class="line">                temp = p[i];</span><br><span class="line">                p[i] = p[j];</span><br><span class="line">                p[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* p0 = <span class="string">&quot;4444&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* p1 = <span class="string">&quot;3333&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* p2 = <span class="string">&quot;2222&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* p3 = <span class="string">&quot;1111&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* p[] = &#123;p0,p1,p2,p3&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> length = <span class="keyword">sizeof</span>(p)/ <span class="keyword">sizeof</span>(p[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;before sort\n&quot;</span>);</span><br><span class="line">    my_print(p,length);</span><br><span class="line"></span><br><span class="line">    sort(p,length);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;after sort\n&quot;</span>);</span><br><span class="line">    my_print(p,length);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、二维数组"><a href="#3、二维数组" class="headerlink" title="3、二维数组"></a>3、二维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> a0[<span class="number">30</span>] = <span class="string">&quot;111111&quot;</span>;</span><br><span class="line">    <span class="type">char</span> a1[<span class="number">30</span>] = <span class="string">&quot;222222&quot;</span>;</span><br><span class="line">    <span class="type">char</span> a2[<span class="number">30</span>] = <span class="string">&quot;333333&quot;</span>;</span><br><span class="line">    <span class="type">char</span> a3[<span class="number">30</span>] = <span class="string">&quot;444444&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> a[<span class="number">4</span>][<span class="number">30</span>] = &#123;<span class="string">&quot;111111&quot;</span>,<span class="string">&quot;222222&quot;</span>,<span class="string">&quot;333333&quot;</span>,<span class="string">&quot;444444&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//a? a是数组首行的地址(注意：首行的地址，数组首地址和数组首元素的地址相同，只是步长不同)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,a,a+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//output 6421776 6421806</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,&amp;a,&amp;a+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//output 6421776 6421896</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,*a,*a+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//output 6421776 6421777</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,*(a+i));</span><br><span class="line">        <span class="comment">//a+i 和 *(a+i) 一样</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成如下功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> myArray[][<span class="number">30</span>] = &#123;<span class="string">&quot;44444&quot;</span>, <span class="string">&quot;33333&quot;</span>, <span class="string">&quot;22222&quot;</span>, <span class="string">&quot;11111&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> printMyArray(<span class="type">char</span> myArray[][<span class="number">30</span>], <span class="type">int</span> num);</span><br><span class="line"><span class="type">void</span> <span class="title function_">sortMyArray</span><span class="params">(<span class="type">char</span> myArray[][<span class="number">30</span>], <span class="type">int</span> num)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printMyArray</span><span class="params">(<span class="type">char</span> myArray[][<span class="number">30</span>], <span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,myArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortMyArray</span><span class="params">(<span class="type">char</span> myArray[][<span class="number">30</span>], <span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">char</span> temp[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; num; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(myArray[i],myArray[j]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//交换</span></span><br><span class="line">                <span class="built_in">strcpy</span>(temp,myArray[i]);</span><br><span class="line">                <span class="built_in">strcpy</span>(myArray[i],myArray[j]);</span><br><span class="line">                <span class="built_in">strcpy</span>(myArray[j],temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> myArray[][<span class="number">30</span>] = &#123;<span class="string">&quot;44444&quot;</span>, <span class="string">&quot;33333&quot;</span>, <span class="string">&quot;22222&quot;</span>, <span class="string">&quot;11111&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> length = <span class="keyword">sizeof</span>(myArray)/ <span class="keyword">sizeof</span>(myArray[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;before sort\n&quot;</span>);</span><br><span class="line">    printMyArray(myArray,length);</span><br><span class="line"></span><br><span class="line">    sortMyArray(myArray,length);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;after sort\n&quot;</span>);</span><br><span class="line">    printMyArray(myArray,length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、动态生成二维内存"><a href="#4、动态生成二维内存" class="headerlink" title="4、动态生成二维内存"></a>4、动态生成二维内存</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>** p = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        *(p+i) = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">sprintf</span>(*(p+i),<span class="string">&quot;str%d%d&quot;</span>,i,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i= <span class="number">0</span>; i&lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,*(p+i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*(p+i) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(*(p+i));</span><br><span class="line">            *(p+i) = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/2F99012363E612F88AC4555A4FB9D2DA.jpg"></p><p>完成如下功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> **myArray = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> **<span class="title function_">getMem</span><span class="params">(<span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printMyArray</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sortMyArray</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">arrayFree</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> **<span class="title function_">getMem</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>** p = (<span class="type">char</span>**)<span class="built_in">malloc</span>(num * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        *(p+i) = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">sprintf</span>(*(p+i),<span class="string">&quot;str%d%d&quot;</span>,i,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printMyArray</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,*(myArray+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sortMyArray</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* tmp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; num; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(*(myArray+i),*(myArray+j)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                tmp = *(myArray+i);</span><br><span class="line">                *(myArray+i) = *(myArray+j);</span><br><span class="line">                *(myArray+j) = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">arrayFree</span><span class="params">(<span class="type">char</span> **myArray, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*(myArray+i) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(*(myArray+i));</span><br><span class="line">            *(myArray+i) = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(myArray != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(myArray);</span><br><span class="line">        myArray = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> **myArray = <span class="literal">NULL</span>;</span><br><span class="line">    myArray = getMem(<span class="number">3</span>);</span><br><span class="line">    printMyArray(myArray,<span class="number">3</span>);</span><br><span class="line">    sortMyArray(myArray,<span class="number">3</span>);</span><br><span class="line">    printMyArray(myArray,<span class="number">3</span>);</span><br><span class="line">    arrayFree(myArray,<span class="number">3</span>);</span><br><span class="line">    myArray = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、作业-1"><a href="#三、作业-1" class="headerlink" title="三、作业"></a>三、作业</h2><p>1、</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="comment">//下面有啥区别？</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *p = buf; <span class="comment">//p指向内存不可修改</span></span><br><span class="line"><span class="type">char</span> <span class="type">const</span> *p = buf; <span class="comment">//和上面的一样</span></span><br><span class="line"><span class="type">char</span> * <span class="type">const</span> p = buf;<span class="comment">//p的值不可修改</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="type">const</span> *p = buf;<span class="comment">//p指向内存和p的值都不能修改</span></span><br></pre></td></tr></table></figure><p>2、</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *p1[] = &#123;<span class="string">&quot;1111&quot;</span>, <span class="string">&quot;2222&quot;</span>, <span class="string">&quot;3333&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">sizeof</span>(p1)/<span class="keyword">sizeof</span>(p1[<span class="number">0</span>]) = ? <span class="comment">// 12/4 = 3</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *p2[<span class="number">10</span>] = &#123;<span class="string">&quot;1111&quot;</span>, <span class="string">&quot;2222&quot;</span>, <span class="string">&quot;3333&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">sizeof</span>(p2)/<span class="keyword">sizeof</span>(p2[<span class="number">0</span>]) = ? <span class="comment">// 40/4 = 10</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> p3[][<span class="number">30</span>] = &#123;<span class="string">&quot;1111&quot;</span>, <span class="string">&quot;2222&quot;</span>, <span class="string">&quot;3333&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">sizeof</span>(p3)/<span class="keyword">sizeof</span>(p3[<span class="number">0</span>]) = ? <span class="comment">// 90/30 = 3</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> p4[<span class="number">10</span>][<span class="number">30</span>] = &#123;<span class="string">&quot;1111&quot;</span>, <span class="string">&quot;2222&quot;</span>, <span class="string">&quot;3333&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">sizeof</span>(p4)/<span class="keyword">sizeof</span>(p4[<span class="number">0</span>]) = ? <span class="comment">// 300/30 = 10</span></span><br></pre></td></tr></table></figure><p>3、char buf[][30] &#x3D; {“1111”, “2222”, “3333”};<br>二维数组做函数参数，为什么不能这么写？<br>void fun(char **buf);</p><p>步长不一样</p><p>void fun(char **buf) 和 void fun(char buf[ ]  [30]) 有什么区别？</p><p>void fun(char buf[ ]  [30]) 指定了步长为30</p><p>4、有字符串有以下特征（“abcd11111abcd2222abcdqqqqq”）,求写一个函数接口，输出以下结果。把字符串替换成（dcba11111dcba2222dcbaqqqqq），并把结果传出。</p><p>要求：<br>             1. 正确实现接口和功能</p><pre><code>         2. 编写测试用例</code></pre><p>tips:</p><p>可使用&lt;string.h&gt;中strncat和strcat函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">strncat</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src, <span class="type">size_t</span> n)</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">strcat</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">src:    原字符串</span></span><br><span class="line"><span class="comment">dst:    生成的或需要填充的字符串</span></span><br><span class="line"><span class="comment">sub:    需要查找的子字符串</span></span><br><span class="line"><span class="comment">new_sub:提换的新子字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return : 0 成功</span></span><br><span class="line"><span class="comment">-1 失败</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">replaceSubstr</span><span class="params">(<span class="comment">/* in */</span><span class="type">char</span> *src, <span class="comment">/* out */</span><span class="type">char</span>** dst, </span></span><br><span class="line"><span class="params">             <span class="comment">/* in */</span><span class="type">char</span> *sub,  <span class="comment">/* in */</span><span class="type">char</span> *new_sub)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">src:    原字符串</span></span><br><span class="line"><span class="comment">dst:    生成的或需要填充的字符串</span></span><br><span class="line"><span class="comment">sub:    需要查找的子字符串</span></span><br><span class="line"><span class="comment">new_sub:提换的新子字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return : 0 成功</span></span><br><span class="line"><span class="comment">      -1 失败</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">replaceSubstr</span><span class="params">(<span class="comment">/* in */</span><span class="type">char</span> *src, <span class="comment">/* out */</span><span class="type">char</span>** dst,</span></span><br><span class="line"><span class="params">        <span class="comment">/* in */</span><span class="type">char</span> *sub,  <span class="comment">/* in */</span><span class="type">char</span> *new_sub)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (src == <span class="literal">NULL</span> || dst == <span class="literal">NULL</span> || sub == <span class="literal">NULL</span> || new_sub == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> tmp[<span class="number">512</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span>* start = src;</span><br><span class="line">    <span class="type">char</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((p = <span class="built_in">strstr</span>(start,sub)) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">strncat</span>(tmp,start,p-start);</span><br><span class="line">        <span class="built_in">strncat</span>(tmp,new_sub,<span class="built_in">strlen</span>(new_sub));</span><br><span class="line">        start = p + <span class="built_in">strlen</span>(sub);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcat</span>(tmp,start);</span><br><span class="line"></span><br><span class="line">    *dst = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(tmp) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(*dst,tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* src = <span class="string">&quot;111111abcd11111abcd2222abcd11111&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *dst = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *sub = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *new_sub = <span class="string">&quot;dcbba&quot;</span>;</span><br><span class="line"></span><br><span class="line">    replaceSubstr(src, &amp;dst, sub, new_sub);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dst = %s&quot;</span>,dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、有一个字符串符合以下特征（“abcdef,acccd,eeee,aaaa,e3eeee,ssss,”）</p><p>写两个函数(API)，输出以下结果</p><p>第一个API(第二种内存模型： 二维数组)<br>1)以逗号分隔字符串，形成二维数组，并把结果传出<br>2)把二维数组行数运算结果也传出<br>int spitString(const char *str, char c, char buf[10][3] &#x2F;<em>in</em>&#x2F;, int *count);</p><p>第二个API(第三种内存模型：动态生成二维内存)<br>1)以逗号分隔字符串，形成一个二级指针。<br>2)把一共拆分多少行字符串个数传出<br>int spitString2(const char *str, char c, char **myp &#x2F;<em>in</em>&#x2F;, int *count);</p><p>要求：<br>1, 能正确表达功能的要求，定义出接口。<br>2, 正确实现接口和功能.<br>3, 编写正确的测试用例.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by admin on 2022/3/6.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1)以逗号分隔字符串，形成二维数组，并把结果传出</span></span><br><span class="line"><span class="comment">   2)把二维数组行数运算结果也传出</span></span><br><span class="line"><span class="comment"> * @param str</span></span><br><span class="line"><span class="comment"> * @param c</span></span><br><span class="line"><span class="comment"> * @param buf</span></span><br><span class="line"><span class="comment"> * @param count</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">spitString</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">char</span> c, <span class="type">char</span> buf[<span class="number">10</span>][<span class="number">30</span>]<span class="comment">/*in*/</span>, <span class="type">int</span> *count)</span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* start = str;</span><br><span class="line">    <span class="type">char</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((p = <span class="built_in">strchr</span>(start,c)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">strncpy</span>(buf[i],start,p - start);</span><br><span class="line">        buf[i][p-start]  = <span class="number">0</span>;</span><br><span class="line">        i++;</span><br><span class="line">        start = p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理最后一个字符串</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf[i],start);</span><br><span class="line">    *count = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">spitString2</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">char</span> c, <span class="type">char</span> **myp <span class="comment">/*in*/</span>, <span class="type">int</span> *count)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* start = str;</span><br><span class="line">    <span class="type">char</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((p = <span class="built_in">strchr</span>(start,c)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">strncpy</span>(myp[i],start,p - start);</span><br><span class="line">        myp[i][p-start] = <span class="number">0</span>;</span><br><span class="line">        i++;</span><br><span class="line">        start = p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理最后一个字符串</span></span><br><span class="line">    <span class="built_in">strcpy</span>(*(myp+i),start);</span><br><span class="line">    *count = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>** <span class="title function_">getMen</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">char</span>** tmp = (<span class="type">char</span>**)<span class="built_in">malloc</span>(num * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        *(tmp+i) = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getNum</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str,<span class="type">char</span> c)</span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* start = str;</span><br><span class="line">    <span class="type">char</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((p = <span class="built_in">strchr</span>(start,c)) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        start = p + <span class="number">1</span>;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeBuf</span><span class="params">(<span class="type">char</span> **buf,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(*(buf+i) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(*(buf+i));</span><br><span class="line">            *(buf+i) = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* src = <span class="string">&quot;abcdef,acccd,eeee,aaaa,e3eeee,ssss&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">10</span>][<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>** buf1 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    spitString(src,&#x27;,&#x27;,buf,&amp;count);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    for (int i = 0; i &lt; count; ++i) &#123;</span></span><br><span class="line"><span class="comment">//        printf(&quot;%s\n&quot;,buf[i]);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    count = getNum(src,<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    buf1 = getMen(count);</span><br><span class="line"></span><br><span class="line">    spitString2(src,<span class="string">&#x27;,&#x27;</span>,buf1,&amp;count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,buf1[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    freeBuf(buf1,count);</span><br><span class="line">    buf1 = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、多级指针"><a href="#四、多级指针" class="headerlink" title="四、多级指针"></a>四、多级指针</h2><p> 在作业基础上，将freeBuf函数和getMem函数修改为传入三级指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>** <span class="title function_">getMem</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">char</span>** tmp = (<span class="type">char</span>**)<span class="built_in">malloc</span>(num * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        *(tmp+i) = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getMem1</span><span class="params">(<span class="type">char</span>*** p, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="type">char</span>** tmp = (<span class="type">char</span>**)<span class="built_in">malloc</span>(num * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        *(tmp+i) = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    *p = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeBuf</span><span class="params">(<span class="type">char</span>** buf,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(buf[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(buf[i]);</span><br><span class="line">            buf[i]= <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (buf != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(buf);</span><br><span class="line">        buf = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeBuf1</span><span class="params">(<span class="type">char</span> ***tmp,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>** buf = *tmp;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(buf[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(buf[i]);</span><br><span class="line">            buf[i]= <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (buf != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(buf);</span><br><span class="line">        buf = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="day04"><a href="#day04" class="headerlink" title="day04"></a>day04</h1><blockquote><p>数组提升：</p><p>1、数组指针与指针数组</p></blockquote><!--more--><h2 id="一、数组提升"><a href="#一、数组提升" class="headerlink" title="一、数组提升"></a>一、数组提升</h2><h3 id="1、数组也是一种数据类型"><a href="#1、数组也是一种数据类型" class="headerlink" title="1、数组也是一种数据类型"></a>1、数组也是一种数据类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组也是数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Array[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Array a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> length = <span class="keyword">sizeof</span>(a)/ <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、指针数组与数组指针"><a href="#2、指针数组与数组指针" class="headerlink" title="2、指针数组与数组指针"></a>2、指针数组与数组指针</h3><p>main函数可以有参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param argc 参数个数</span></span><br><span class="line"><span class="comment"> * @param argv 参数（指针数组）</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; argc; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220307115254821.png" alt="命令行运行结果"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Array[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*P)</span>[10];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="comment">//三种定义数组指针的方式</span></span><br><span class="line">    Array* <span class="built_in">array</span> = &amp;a;<span class="comment">//这里写Array* array = a也行</span></span><br><span class="line">    P p = &amp;a;</span><br><span class="line">    <span class="type">int</span> (*q)[<span class="number">10</span>] = &amp;a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,(*p)[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">//1、a表示什么</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d,a+1 = %d\n&quot;</span>,a,a+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//a = 6422000,a+1 = 6422016 -&gt; a表示首行首地址</span></span><br><span class="line">    <span class="comment">//2、使用指针遍历二维数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;<span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(*(a+i)+j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * a -&gt; a[0] :首行首地址</span></span><br><span class="line"><span class="comment">     * a + i  :i行首地址</span></span><br><span class="line"><span class="comment">     * *(a+i) -&gt; a[i] :i行首元素地址</span></span><br><span class="line"><span class="comment">     * *(a+i)+j -&gt; &amp;a[i][j] :i行j列元素地址</span></span><br><span class="line"><span class="comment">     * *(*(a+i)+j) -&gt; a[i][j] :i行j列元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、二维数组在内存中还是按一维数组存放</span></span><br><span class="line">    printArray((<span class="type">int</span>*) a,<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、二维数组-1"><a href="#3、二维数组-1" class="headerlink" title="3、二维数组"></a>3、二维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">//1、a表示什么</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d,a+1 = %d\n&quot;</span>,a,a+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//a = 6422000,a+1 = 6422016 -&gt; a表示首行首地址</span></span><br><span class="line">    <span class="comment">//2、使用指针遍历二维数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;<span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(*(a+i)+j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * a  :首行首地址</span></span><br><span class="line"><span class="comment">     * a + i :i行首地址</span></span><br><span class="line"><span class="comment">     * *(a+i) -&gt; a[i] :i行首元素地址</span></span><br><span class="line"><span class="comment">     * *(a+i)+j -&gt; &amp;a[i][j] :i行j列元素地址</span></span><br><span class="line"><span class="comment">     * *(*(a+i)+j) -&gt; a[i][j] :i行j列元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、二维数组在内存中还是按一维数组存放</span></span><br><span class="line">    printArray((<span class="type">int</span>*) a,<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组指针指向二维数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> (*p)[<span class="number">4</span>] = a; <span class="comment">//此时p等价于a</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(*(p+i)+j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再理解<strong>首行首元素地址</strong>与<strong>首行首地址</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * a *a &amp;a **a;</span></span><br><span class="line"><span class="comment">     * a:首行首地址 步长16</span></span><br><span class="line"><span class="comment">     * *a:首行首元素的地址 步长4</span></span><br><span class="line"><span class="comment">     * **a:首行首元素的值</span></span><br><span class="line"><span class="comment">     * &amp;a:二维数组的首地址 步长48</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * sizeof(a) sizeof(*a) sizeof(&amp;a) sizeof(**a)</span></span><br><span class="line"><span class="comment">     * 48  16   8  4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> b[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, <span class="keyword">sizeof</span>(b), <span class="keyword">sizeof</span>(&amp;b));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, <span class="keyword">sizeof</span>(a[<span class="number">0</span>]), <span class="keyword">sizeof</span>(&amp;a[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, <span class="keyword">sizeof</span>(*(a+<span class="number">0</span>)), <span class="keyword">sizeof</span>(a+<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>, <span class="keyword">sizeof</span>(a), <span class="keyword">sizeof</span>(*a), <span class="keyword">sizeof</span>(&amp;a), <span class="keyword">sizeof</span>(**a));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、二维数组作形参"><a href="#4、二维数组作形参" class="headerlink" title="4、二维数组作形参"></a>4、二维数组作形参</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printfArray</span><span class="params">(<span class="type">int</span> (*a)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span> ,a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line">    printfArray(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、作业"><a href="#二、作业" class="headerlink" title="二、作业"></a>二、作业</h2><p>1、简述指针数组和数组指针的区别。</p><p>指针数组是数组，它存放多个指针类型的数据；</p><p>数组指针是指针，它指向数组的指针；</p><p>2、如何定义一个指向 int a[10] 类型的指针变量（数组指针）（使用3种方法）？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">int</span> A[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*P)</span>[10];</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    A* a = &amp;<span class="built_in">array</span>;</span><br><span class="line">    P p = &amp;<span class="built_in">array</span>;</span><br><span class="line">    <span class="type">int</span> (*q)[<span class="number">10</span>] = &amp;<span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> b[<span class="number">5</span>][<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> (*p)[<span class="number">10</span>];</span><br><span class="line">p = &amp;a;<span class="comment">//为何加 &amp;</span></span><br><span class="line">p = b;<span class="comment">//为何不用加 &amp; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//answer</span></span><br><span class="line"><span class="comment">//&amp;a才表示a[10]的地址</span></span><br><span class="line"><span class="comment">//b就表示行地址  </span></span><br></pre></td></tr></table></figure><p>4、如何在栈上开辟一个二维数组，如何在堆上开辟一个二维数组？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栈上</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//堆上</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>** p = <span class="literal">NULL</span>;</span><br><span class="line">*p = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * num);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">*p[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>;</span><br><span class="line"><span class="comment">//argc, argv分别代表什么？</span></span><br><span class="line"><span class="comment">//参数的数量</span></span><br><span class="line"><span class="comment">//参数</span></span><br></pre></td></tr></table></figure><p>6、找到数组中指定字符串的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NUM(a) (sizeof(a)/sizeof(*a))</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* keywords[] = &#123;</span><br><span class="line"><span class="string">&quot;while&quot;</span>, </span><br><span class="line"><span class="string">&quot;case&quot;</span>,</span><br><span class="line"><span class="string">&quot;static&quot;</span>,</span><br><span class="line"><span class="string">&quot;do&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searcheKeyTable</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* table[], <span class="type">const</span> <span class="type">int</span> size, </span></span><br><span class="line"><span class="params">  <span class="type">const</span> <span class="type">char</span>* key, <span class="type">int</span> *pos)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM(a) (sizeof(a)/sizeof(*a))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//找到数组中指定字符串的位置</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">searcheKeyTable</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* table[], <span class="type">const</span> <span class="type">int</span> size,</span></span><br><span class="line"><span class="params">                    <span class="type">const</span> <span class="type">char</span>* key, <span class="type">int</span> *pos)</span>&#123;</span><br><span class="line"></span><br><span class="line">    *pos = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="built_in">strcmp</span>(key,table[i])) == <span class="number">0</span>)&#123;</span><br><span class="line">            *pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (*pos == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="comment">//没找到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* keywords[] = &#123;</span><br><span class="line">            <span class="string">&quot;while&quot;</span>,</span><br><span class="line">            <span class="string">&quot;case&quot;</span>,</span><br><span class="line">            <span class="string">&quot;static&quot;</span>,</span><br><span class="line">            <span class="string">&quot;do&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> length = NUM(keywords);</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* key = <span class="string">&quot;do&quot;</span>;</span><br><span class="line">    <span class="type">int</span> ret = searcheKeyTable(keywords, length, key, &amp;pos);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;searcheKeyTable() err %d&quot;</span>,ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span> ,pos);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、将字符串数组进行排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sort</span><span class="params">(<span class="type">char</span> **array1, <span class="type">int</span> num1,</span></span><br><span class="line"><span class="params">         <span class="type">char</span> (*array2)[<span class="number">30</span>], <span class="type">int</span> num2, </span></span><br><span class="line"><span class="params">         <span class="type">char</span> ***myp3 <span class="comment">/*out*/</span>, <span class="type">int</span> *num3)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>; </span><br><span class="line">    <span class="type">char</span> *p1[] = &#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;ccccccc&quot;</span>, <span class="string">&quot;bbbbbb&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> buf2[<span class="number">10</span>][<span class="number">30</span>] = &#123;<span class="string">&quot;111111&quot;</span>, <span class="string">&quot;3333333&quot;</span>, <span class="string">&quot;222222&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> **p3 = <span class="literal">NULL</span>;   </span><br><span class="line">    <span class="type">int</span> len1, len2, len3, i = <span class="number">0</span>;</span><br><span class="line">                            </span><br><span class="line">    len1 = <span class="keyword">sizeof</span>(p1)/<span class="keyword">sizeof</span>(*p1);</span><br><span class="line">    len2 = <span class="number">3</span>;</span><br><span class="line">                                    </span><br><span class="line">    ret = sort(p1, len1, buf2, len2, &amp;p3, &amp;len3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sort</span><span class="params">(<span class="type">char</span> **array1, <span class="type">int</span> num1,</span></span><br><span class="line"><span class="params">         <span class="type">char</span> (*array2)[<span class="number">30</span>], <span class="type">int</span> num2,</span></span><br><span class="line"><span class="params">         <span class="type">char</span> ***myp3 <span class="comment">/*out*/</span>, <span class="type">int</span> *num3)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义变量，别直接使用*myp3</span></span><br><span class="line">    <span class="type">char</span>** temp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num = num1 + num2;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* tmp= <span class="literal">NULL</span>;</span><br><span class="line">    temp = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * num);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num1; ++i) &#123;</span><br><span class="line">        temp[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(array1[i]) + <span class="number">1</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(temp[i],array1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = num1, j = <span class="number">0</span>; i &lt; num; ++i,++j) &#123;</span><br><span class="line">        temp[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(array2[j]) + <span class="number">1</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(temp[i],array2[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i+<span class="number">1</span>; j &lt; num; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">strcmp</span>(temp[i],temp[j])) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                tmp = temp[i];</span><br><span class="line">                temp[i] = temp[j];</span><br><span class="line">                temp[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *myp3 = temp;</span><br><span class="line">    *num3 = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeBuf</span><span class="params">(<span class="type">char</span>*** p,<span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="type">char</span> **tmp = *p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(tmp[i]);</span><br><span class="line">            tmp[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tmp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(tmp);</span><br><span class="line">        tmp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *p1[] = &#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;ccccccc&quot;</span>, <span class="string">&quot;bbbbbb&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> buf2[<span class="number">10</span>][<span class="number">30</span>] = &#123;<span class="string">&quot;111111&quot;</span>, <span class="string">&quot;3333333&quot;</span>, <span class="string">&quot;222222&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> **p3 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> len1, len2, len3, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    len1 = <span class="keyword">sizeof</span>(p1)/<span class="keyword">sizeof</span>(*p1);</span><br><span class="line">    len2 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    ret = sort(p1, len1, buf2, len2, &amp;p3, &amp;len3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (len1 + len2); ++j) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s \n&quot;</span>,p3[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    freeBuf(&amp;p3,len3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="day05"><a href="#day05" class="headerlink" title="day05"></a>day05</h1><blockquote><p>结构体</p></blockquote><!--more--><h2 id="一、结构体"><a href="#一、结构体" class="headerlink" title="一、结构体"></a>一、结构体</h2><h3 id="1、结构体基本操作"><a href="#1、结构体基本操作" class="headerlink" title="1、结构体基本操作"></a>1、结构体基本操作</h3><p><strong>结构体定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="comment">//1、普通定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student1</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、typedef定义（最为使用频繁）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student2</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; Teacher;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、在定义类型时定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student3</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;s1,s2;</span><br></pre></td></tr></table></figure><p>**结构体指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student teacher = &#123;<span class="string">&quot;liaotao&quot;</span>,<span class="number">22</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>,teacher.name,teacher.age);</span><br><span class="line">Student* p = &amp;teacher;</span><br><span class="line">p-&gt;age = <span class="number">35</span>; <span class="comment">//or (*p).age = 35;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>,teacher.name,teacher.age);</span><br></pre></td></tr></table></figure><h3 id="2、结构体数组"><a href="#2、结构体数组" class="headerlink" title="2、结构体数组"></a>2、结构体数组</h3><p><strong>静态结构体数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; Teacher ;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Teacher <span class="built_in">array</span>[<span class="number">3</span>] = &#123;&#123;<span class="string">&quot;liaotao&quot;</span>,<span class="number">12</span>&#125;,</span><br><span class="line">                        &#123;<span class="string">&quot;liaotao1&quot;</span>,<span class="number">13</span>&#125;,</span><br><span class="line">                        &#123;<span class="string">&quot;liaotao2&quot;</span>,<span class="number">14</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(<span class="built_in">array</span>)/ <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %d \n&quot;</span>,<span class="built_in">array</span>[i].name,<span class="built_in">array</span>[i].age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态结构体数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="comment">//此处若写成 char* name则不行</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; Teacher ;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Teacher* p = (Teacher*)<span class="built_in">malloc</span>(<span class="number">3</span> * <span class="keyword">sizeof</span>(Teacher));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        p[i].age = <span class="number">12</span>;</span><br><span class="line">        <span class="built_in">sprintf</span>(buf,<span class="string">&quot;name%d%d&quot;</span>,i,i);</span><br><span class="line">        <span class="built_in">strcpy</span>(p[i].name,buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %d \n&quot;</span>,p[i].name,p[i].age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、结构体嵌套指针"><a href="#3、结构体嵌套指针" class="headerlink" title="3、结构体嵌套指针"></a>3、结构体嵌套指针</h3><p><strong>结构体嵌套一级指针</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; Teacher ;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、</span></span><br><span class="line">    Teacher teacher1;</span><br><span class="line">    teacher1.name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span>);</span><br><span class="line">    teacher1.age = <span class="number">22</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(teacher1.name,<span class="string">&quot;liaotao&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>,teacher1.name,teacher1.age);</span><br><span class="line">    <span class="keyword">if</span> (teacher1.name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(teacher1.name);</span><br><span class="line">        teacher1.name = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、</span></span><br><span class="line">    Teacher* p = <span class="literal">NULL</span>;</span><br><span class="line">    p = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(teacher1));</span><br><span class="line">    p-&gt;name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">30</span>);</span><br><span class="line">    p-&gt;age = <span class="number">29</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(p-&gt;name,<span class="string">&quot;liaotao&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>,p-&gt;name,p-&gt;age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p-&gt;name);</span><br><span class="line">        p-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>((p));</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、</span></span><br><span class="line">    Teacher*q = <span class="literal">NULL</span>;</span><br><span class="line">    q = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(teacher1) * <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        q[i].name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">30</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(q[i].name,<span class="string">&quot;liaotao&quot;</span>);</span><br><span class="line">        q[i].age = <span class="number">29</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>,q[j].name,q[j].age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; ++k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[k].name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(q[k].name);</span><br><span class="line">            q[k].name = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (q != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完善上述代码（封装函数）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; Teacher ;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printfTeacher</span><span class="params">(Teacher* p,<span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; length; ++j) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>,p[j].name,p[j].age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getMem</span><span class="params">(Teacher** p,<span class="type">int</span> n)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Teacher* q = <span class="literal">NULL</span>;</span><br><span class="line">    q = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher) * n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        q[i].name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">30</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(q[i].name,<span class="string">&quot;liaotao&quot;</span>);</span><br><span class="line">        q[i].age = <span class="number">29</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *p = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeMem</span><span class="params">(Teacher** p,<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    Teacher* q = *p;</span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[k].name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(q[k].name);</span><br><span class="line">            q[k].name = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (q != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    Teacher* q = <span class="literal">NULL</span>;</span><br><span class="line">    getMem(&amp;q,<span class="number">3</span>);</span><br><span class="line">    printfTeacher(q,<span class="number">3</span>);</span><br><span class="line">    freeMem(&amp;q,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结构体嵌套二级指针</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>** stu;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//完善下面的功能</span></span><br><span class="line">    <span class="comment">//1、</span></span><br><span class="line">    Teacher teacher;</span><br><span class="line">    teacher.stu = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        teacher.stu[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">20</span>);</span><br><span class="line">        <span class="type">char</span> temp[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">sprintf</span>(temp,<span class="string">&quot;name%d%d&quot;</span>,i,i);</span><br><span class="line">        <span class="built_in">strcpy</span>(teacher.stu[i],temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,teacher.stu[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (teacher.stu[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(teacher.stu[i]);</span><br><span class="line">            teacher.stu[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (teacher.stu != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(teacher.stu);</span><br><span class="line">        teacher.stu = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、Teacher* q</span></span><br><span class="line">    Teacher* q = <span class="literal">NULL</span>;</span><br><span class="line">    q = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher));</span><br><span class="line">    q-&gt;stu = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        q-&gt;stu[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">20</span>);</span><br><span class="line">        <span class="type">char</span> temp[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">sprintf</span>(temp,<span class="string">&quot;name%d%d&quot;</span>,i,i);</span><br><span class="line">        <span class="built_in">strcpy</span>(q-&gt;stu[i],temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,q-&gt;stu[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q-&gt;stu[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(q-&gt;stu[i]);</span><br><span class="line">            q-&gt;stu[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (q-&gt;stu != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(q-&gt;stu);</span><br><span class="line">        q-&gt;stu = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (q != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3、Teacher* p[3]</span></span><br><span class="line">    Teacher *p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    p = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher) * <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        p[i].stu = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            p[i].stu[j] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">20</span>);</span><br><span class="line">            <span class="type">char</span> temp[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">sprintf</span>(temp,<span class="string">&quot;name%d%d&quot;</span>,i,j);</span><br><span class="line">            <span class="built_in">strcpy</span>((p+i)-&gt;stu[j],temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个教师的学生为:&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,p[i].stu[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[i].stu[j] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(p[i].stu[j]);</span><br><span class="line">                p[i].stu[j] = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i].stu != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(p[i].stu);</span><br><span class="line">            p[i].stu = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将3功能封装函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>** stu;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">createTeacher</span><span class="params">(Teacher** temp, <span class="type">int</span> t_num, <span class="type">int</span> s_num)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Teacher *p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    p = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher) * t_num);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; t_num; i++) &#123;</span><br><span class="line">        p[i].stu = (<span class="type">char</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * s_num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; t_num; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; s_num; ++j) &#123;</span><br><span class="line">            p[i].stu[j] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">20</span>);</span><br><span class="line">            <span class="type">char</span> tmp[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">sprintf</span>(tmp,<span class="string">&quot;name%d%d&quot;</span>,i,j);</span><br><span class="line">            <span class="built_in">strcpy</span>((p+i)-&gt;stu[j],tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *temp = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printTeacher</span><span class="params">(Teacher* p, <span class="type">int</span> t_num, <span class="type">int</span> s_num)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; t_num; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个教师的学生为:&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; s_num; ++j) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,p[i].stu[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeTeacher</span><span class="params">(Teacher** temp, <span class="type">int</span> t_num, <span class="type">int</span> s_num)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    Teacher* p = *temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[i].stu[j] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(p[i].stu[j]);</span><br><span class="line">                p[i].stu[j] = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i].stu != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(p[i].stu);</span><br><span class="line">            p[i].stu = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">        *temp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    Teacher *p = <span class="literal">NULL</span>;</span><br><span class="line">    createTeacher(&amp;p,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    printTeacher(p,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    freeTeacher(&amp;p,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、结构体深拷贝与浅拷贝"><a href="#4、结构体深拷贝与浅拷贝" class="headerlink" title="4、结构体深拷贝与浅拷贝"></a>4、结构体深拷贝与浅拷贝</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;strings.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; Teacher;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Teacher t1;</span><br><span class="line">    t1.age = <span class="number">22</span>;</span><br><span class="line">    t1.name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">strcpy</span>(t1.name,<span class="string">&quot;lily&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浅拷贝</span></span><br><span class="line">    Teacher t2 = t1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,t1.name,t2.name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//深拷贝</span></span><br><span class="line">    Teacher t3 = t1;</span><br><span class="line">    t3.name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">strcpy</span>(t3.name,t1.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,t1.name,t3.name);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/1F0FC4124976FADD398224B84E5088FA.jpg"></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/A5F92810EEFEEB7CACC4F32AF92CCB02.jpg"></p><blockquote><p>结构体字节对齐直接跳吧，用不到的</p></blockquote><h2 id="二、作业-1"><a href="#二、作业-1" class="headerlink" title="二、作业"></a>二、作业</h2><p>1、列出定义结构体变量的几种方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher1</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">&#125;t1,t2;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">&#125;t3,t4;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher4</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">&#125; Teacher;</span><br></pre></td></tr></table></figure><p>2、同类型结构体变量是否可以相互赋值？会存在什么风险？</p><p>可以，风险为浅拷贝</p><p>3、练习结构体数组排序，从键盘输入3个学生的信息（姓名、学号、成绩），存入一个结构体数组中，计算平均分，并按成绩高低排序并输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Stu s[<span class="number">3</span>];</span><br><span class="line">    <span class="type">int</span> n = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从键盘输入学生信息</span></span><br><span class="line">    initStu(s, n); </span><br><span class="line"></span><br><span class="line">    <span class="comment">//aveStu(s, 3)：平均分</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n平均分为： %lf\n&quot;</span>,  aveStu(s, n) );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分数排序，降序</span></span><br><span class="line">    sortStu(s, n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印学生信息</span></span><br><span class="line">    showStu(s, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;strings.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStu</span><span class="params">(Stu* s,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %lf&quot;</span>,s[i].name,&amp;s[i].id,&amp;s[i].score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showStu</span><span class="params">(Stu* s,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %d %.2lf\n&quot;</span>,s[i].name,s[i].id,s[i].score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">aveStu</span><span class="params">(Stu* s,<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        sum += s[i].score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum/(<span class="type">double</span>)n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortStu</span><span class="params">(Stu* s,<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    Stu temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i].score &lt; s[j].score)&#123;</span><br><span class="line">                temp = s[i];</span><br><span class="line">                s[i] = s[j];</span><br><span class="line">                s[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Stu s[<span class="number">3</span>];</span><br><span class="line">    <span class="type">int</span> n = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从键盘输入学生信息</span></span><br><span class="line">    initStu(s, n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//aveStu(s, 3)：平均分</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n平均分为： %.2lf\n&quot;</span>,  aveStu(s, n) );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分数排序，降序</span></span><br><span class="line">    sortStu(s, n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印学生信息</span></span><br><span class="line">    showStu(s, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、 重写结构体嵌套一级指针老师和二级指针学生的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;strings.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体类型，每个导师有三个学生</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> *tName; <span class="comment">//导师</span></span><br><span class="line">    <span class="type">char</span> **stu;  <span class="comment">//三个学生</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在createTeacher中分配空间</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">createTeacher</span><span class="params">(Teacher **p<span class="comment">/*out*/</span>, <span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    Teacher* temp = (Teacher*)<span class="built_in">malloc</span>(n1 * <span class="keyword">sizeof</span>(Teacher));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">        temp[i].tName = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        temp[i].stu = (<span class="type">char</span>**)<span class="built_in">malloc</span>(n2 * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n2; j++) &#123;</span><br><span class="line">            temp[i].stu[j] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *p = temp;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员赋值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initTeacher</span><span class="params">(Teacher *p, <span class="type">int</span> n1, <span class="type">int</span> n2)</span>&#123;</span><br><span class="line">     <span class="type">int</span> i;</span><br><span class="line">     <span class="type">int</span> j;</span><br><span class="line">     <span class="type">char</span> temp[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">         <span class="built_in">sprintf</span>(temp,<span class="string">&quot;licy%d%d&quot;</span>,i,i);</span><br><span class="line">         <span class="built_in">strcpy</span>(p[i].tName,temp);</span><br><span class="line">         p[i].age = i + <span class="number">20</span>;</span><br><span class="line">         <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n2; j++) &#123;</span><br><span class="line">             <span class="built_in">sprintf</span>(temp,<span class="string">&quot;hello%d%d&quot;</span>,i,j);</span><br><span class="line">             <span class="built_in">strcpy</span>(p[i].stu[j],temp);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印结构体成员信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printTeacher</span><span class="params">(Teacher *p, <span class="type">int</span> n1, <span class="type">int</span> n2)</span>&#123;</span><br><span class="line">     <span class="type">int</span> i;</span><br><span class="line">     <span class="type">int</span> j;</span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;teacher:%s %d\n&quot;</span>,p[i].tName,p[i].age);</span><br><span class="line">         <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n2; j++) &#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,p[i].stu[j]);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据导师名字排序, 降序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortTeacher</span><span class="params">(Teacher *p, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    Teacher temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(p[i].tName,p[j].tName) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                temp = p[i];</span><br><span class="line">                p[i] = p[j];</span><br><span class="line">                p[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放空间，在函数内部把p赋值为NULL</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeTeacher</span><span class="params">(Teacher **p, <span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line">     Teacher *temp = *p;</span><br><span class="line">     <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">     <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span>(temp[i].tName != <span class="literal">NULL</span>) &#123;</span><br><span class="line">             <span class="built_in">free</span>(temp[i].tName);</span><br><span class="line">             temp[i].tName = <span class="literal">NULL</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n2 ; j++) &#123;</span><br><span class="line">             <span class="keyword">if</span> (temp[i].stu[j] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                 <span class="built_in">free</span>(temp[i].stu[j]);</span><br><span class="line">                 temp[i].stu[j] = <span class="literal">NULL</span>;</span><br><span class="line">             &#125;&#125;</span><br><span class="line">        <span class="keyword">if</span> (temp[i].stu != <span class="literal">NULL</span>) &#123;</span><br><span class="line">             <span class="built_in">free</span>(temp[i].stu);</span><br><span class="line">             temp[i].stu = <span class="literal">NULL</span>;</span><br><span class="line">         &#125;&#125;</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="keyword">if</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">         <span class="built_in">free</span>(temp);</span><br><span class="line">         temp = <span class="literal">NULL</span>;</span><br><span class="line">         *P =  <span class="literal">NULL</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n1 = <span class="number">3</span>; <span class="comment">//导师个数</span></span><br><span class="line">    <span class="type">int</span> n2 = <span class="number">3</span>; <span class="comment">//学生</span></span><br><span class="line">    Teacher *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    ret = createTeacher(&amp;p, n1, n2);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;createTeacher err:%d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initTeacher(p, n1, n2); <span class="comment">//给成员赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印成员，排序前</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前：\n&quot;</span>);</span><br><span class="line">    printTeacher(p, n1, n2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据导师名字排序, 降序</span></span><br><span class="line">    sortTeacher(p, n1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印成员，排序后</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n排序后：\n&quot;</span>);</span><br><span class="line">    printTeacher(p, n1, n2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放空间，在函数内部把p赋值为NULL</span></span><br><span class="line">    freeTeacher(&amp;p, n1, n2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、画一下第4题createTeacher()的内存四区图</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/890479C51FA3D138A63C653B23384281.jpg"></p><hr><h1 id="day06"><a href="#day06" class="headerlink" title="day06"></a>day06</h1><blockquote><p>链表</p><p>函数指针</p></blockquote><!--more--><h2 id="一、链表"><a href="#一、链表" class="headerlink" title="一、链表"></a>一、链表</h2><p>为什么使用链表？</p><p>数组缺点（对应链表优点）：</p><ul><li>插入和删除效率低</li><li>需要连续分配空间</li></ul><p>优点：</p><ul><li>随机访问效率高</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>链表分类：</p><ul><li>静态链表，动态链表</li><li>是否带头结点</li><li>单向链表，双向链表，循环链表</li></ul><h3 id="1、静态链表"><a href="#1、静态链表" class="headerlink" title="1、静态链表"></a>1、静态链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Stu s1 = &#123;<span class="number">1</span>,<span class="string">&quot;mike&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">    Stu s2 = &#123;<span class="number">2</span>,<span class="string">&quot;lily&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">    Stu s3 = &#123;<span class="number">3</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//穿起来 </span></span><br><span class="line">    s1.next = &amp;s2;</span><br><span class="line">    s2.next = &amp;s3;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    Stu* p = &amp;s1;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&#123;age = %d,name = %s&#125;\n&quot;</span>,p-&gt;age,p-&gt;name);</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、动态链表（单向）"><a href="#2、动态链表（单向）" class="headerlink" title="2、动态链表（单向）"></a>2、动态链表（单向）</h3><p><strong>(1)建立带有头结点的单向链表</strong></p><p>编写函数SList_Creat，建立带有头结点的单向链表。循环创建结点，结点数据域中的数值从键盘输入，以-1作为输入结束标志。链表的头结点地址由函数值返回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_Creat，建立带有头结点的单向链表。</span></span><br><span class="line"><span class="comment"> * 循环创建结点，结点数据域中的数值从键盘输入，</span></span><br><span class="line"><span class="comment"> * 以-1作为输入结束标志。链表的头结点地址由函数值返回。</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Node* <span class="title function_">SList_Creat</span><span class="params">()</span>&#123;</span><br><span class="line">    Node* head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Node* pCur = head;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* pNew = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        pCur-&gt;next = pNew;</span><br><span class="line">        pNew-&gt;num = num;</span><br><span class="line">        pNew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        pCur = pNew;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(2)顺序访问链表中各结点的数据域</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_Print，顺序输出单向链表各项结点数据域中的内容。</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SList_Print</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    Node* p = head.next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&#123;value = %d&#125;\n&quot;</span>,p-&gt;num);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(3)在单向链表中插入节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_NodeInsert，功能：在值为x的结点前，插入值为y的结点；</span></span><br><span class="line"><span class="comment"> * 若值为x的结点不存在，则插在表尾。</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> * @param y</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SList_NodeInsert</span><span class="params">(Node* head, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="comment">//若插入第一个</span></span><br><span class="line">    Node* pCur = (head-&gt;next-&gt;num == x)?head:head-&gt;next;</span><br><span class="line"></span><br><span class="line">    Node* pNew = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    pNew-&gt;num = y;</span><br><span class="line">    <span class="keyword">while</span> (pCur-&gt;next != <span class="literal">NULL</span> &amp;&amp; pCur-&gt;next-&gt;num != x) &#123;</span><br><span class="line">        pCur = pCur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    pNew-&gt;next = pCur-&gt;next;</span><br><span class="line">    pCur-&gt;next = pNew;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_NodeInsert，功能：在值为x的结点前，插入值为y的结点；</span></span><br><span class="line"><span class="comment"> * 这个版本容易理解</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> * @param y</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Slist_NodeInsert1</span><span class="params">(Node* head, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    Node* pCur = head-&gt;next;</span><br><span class="line">    Node* pNew = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    pNew-&gt;num = y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;num == x) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pPre-&gt;next = pNew;</span><br><span class="line">    pNew-&gt;next = pCur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(4)删除单向链表中的结点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_NodeDel，删除值为x的结点。</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SList_NodeDel</span><span class="params">(Node* head, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    Node* pCur = head-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;num == x) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pCur == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pPre-&gt;next = pCur-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(pCur);</span><br><span class="line">    pCur = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(5)释放单链表节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放所有节点</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SList_Free</span><span class="params">(Node* head)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Node* temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        temp = head-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(head);</span><br><span class="line">        head = temp;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;释放%d次&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、函数指针"><a href="#二、函数指针" class="headerlink" title="二、函数指针"></a>二、函数指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针函数</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">fun1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>* num = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    *num = <span class="number">67373</span>;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fun2</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//函数指针</span></span><br><span class="line">    <span class="type">int</span> (*p)() = fun2;</span><br><span class="line">    p(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数指针即指向函数的指针，可以通过指针变量来调用函数。</p><p>案例：使用函数指针简化如下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execute add()\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sub</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execute sub()\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">multiplied</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execute mutip()\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">divided</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;execute div()\n&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myExit</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str,<span class="string">&quot;add&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            add();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str,<span class="string">&quot;sub&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            sub();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str,<span class="string">&quot;multiplied&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            multiplied();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str,<span class="string">&quot;divided&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            divided();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str,<span class="string">&quot;myExit&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            myExit(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;无匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> (*p[<span class="number">5</span>])() = &#123;add,sub,multiplied,divided,myExit&#125;;</span><br><span class="line"><span class="type">char</span>* fun[<span class="number">5</span>] = &#123;<span class="string">&quot;add&quot;</span>,<span class="string">&quot;sub&quot;</span>,<span class="string">&quot;multiplied&quot;</span>,<span class="string">&quot;divided&quot;</span>,<span class="string">&quot;myExit&quot;</span>&#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str,fun[i]) == <span class="number">0</span>) &#123;</span><br><span class="line">            p[i]();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>回调函数</strong></p><p>再完善上述代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">multiplied</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">divided</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error /0&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  (<span class="type">double</span>)a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getResult</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span>(*p)(<span class="type">int</span> a, <span class="type">int</span> b))</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//替换第三个参数即可完成不同的操作</span></span><br><span class="line">    <span class="type">int</span> result = getResult(<span class="number">1</span>, <span class="number">2</span>, sub);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、作业-2"><a href="#三、作业-2" class="headerlink" title="三、作业"></a>三、作业</h2><p><strong>1、</strong></p><p>struct teacher<br>  {<br>        int id;<br>        struct teacher t1;</p><p>  }; </p><p> 这种结构体类型能否够编译通过，为什么？</p><p>不能，数据类型本质：固定内存块大小的别名，像是模具来定义变量；结构体变量还没定义完，不知道占多少内存空间。</p><p><strong>2、简述链表和数组的区别</strong></p><p>都属于线性表；</p><p>顺序表：</p><p>优点：</p><ul><li>随机访问效率高</li></ul><p>缺点：</p><ul><li>占用连续的存储空间</li><li>插入和删除效率低</li></ul><p>线性表相反；</p><p><strong>3、. 把课堂上单向链表的基本操作重新敲一遍。</strong></p><p><strong>4、链表练习( 例子参考&lt;链表基本操作.exe&gt; )。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除值为x的所有结点</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">SListNodeDelPro</span><span class="params">(SLIST *pHead, <span class="type">int</span> x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表节点排序</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">SListNodeSort</span><span class="params">(SLIST *pHead)</span>;</span><br><span class="line"><span class="comment">//注意，排序，除了数据域需要交换，next指针还需要交换</span></span><br><span class="line"><span class="keyword">if</span> (pPre-&gt;id &gt; pCur-&gt;id) <span class="comment">//升序</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//交换数据域</span></span><br><span class="line">    tmp = *pCur;</span><br><span class="line">    *pCur = *pPre;</span><br><span class="line">    *pPre = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换指针域（重要）</span></span><br><span class="line">    tmp.next = pCur-&gt;next;</span><br><span class="line">    pCur-&gt;next = pPre-&gt;next;</span><br><span class="line">    pPre-&gt;next = tmp.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假如原来链表是升序的,升序插入新节点</span></span><br><span class="line"><span class="comment">//不能插入节点后再排序，是升序插入新节点x</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">SListNodeInsertPro</span><span class="params">(SLIST *pHead, <span class="type">int</span> x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//翻转链表的节点（不是排序，是翻转）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">SListNodeReverse</span><span class="params">(SLIST *pHead)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_Creat，建立带有头结点的单向链表。循环创建结点，</span></span><br><span class="line"><span class="comment"> * 结点数据域中的数值从键盘输入，以-1作为输入结束标志。链表的头结点地址由函数值返回。</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Node* <span class="title function_">listCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;value);</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        node-&gt;value = value;</span><br><span class="line">        pPre-&gt;next = node;</span><br><span class="line">        node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        pPre = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顺序打印链表</span></span><br><span class="line"><span class="comment"> * 打印格式为 head -&gt; 1 -&gt; 2 -&gt; 3 -&gt; NULL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listPrint</span><span class="params">(Node* head)</span> &#123;</span><br><span class="line">    Node* temp = head-&gt;next;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;head -&gt; &quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>,temp-&gt;value);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_NodeInsert，功能：在值为x的结点前，插入值为y的结点；</span></span><br><span class="line"><span class="comment"> * 若值为x的结点不存在，则插在表尾。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listInsert</span><span class="params">(Node* head, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    Node* pCur = head-&gt;next;</span><br><span class="line">    Node* pNew = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    pNew-&gt;value = y;</span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;value == x) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    pPre-&gt;next = pNew;</span><br><span class="line">    pNew-&gt;next = pCur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写函数SList_NodeDel，删除值为x的结点。</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listDelete</span><span class="params">(Node* head, <span class="type">int</span> x)</span>&#123;</span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    Node* pCur = head-&gt;next;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;value == x) &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有这个节点\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pPre-&gt;next = pCur-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(pCur);</span><br><span class="line">    pCur = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放单链表节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listFree</span><span class="params">(Node* head)</span> &#123;</span><br><span class="line">    Node* temp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        temp = head-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(head);</span><br><span class="line">        head = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除值为x的所有节点</span></span><br><span class="line"><span class="comment"> * @param head </span></span><br><span class="line"><span class="comment"> * @param x </span></span><br><span class="line"><span class="comment"> * @return 删除节点个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">listDeletePro</span><span class="params">(Node* head, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    Node* pCur = head-&gt;next;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;value == x) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="comment">//执行删除操作</span></span><br><span class="line">            pPre-&gt;next = pCur-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(pCur);</span><br><span class="line">            pCur = pPre-&gt;next;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">//重要！！</span></span><br><span class="line">        &#125;</span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表排序（升序）</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listSort</span><span class="params">(Node* head)</span> &#123;</span><br><span class="line">    <span class="comment">//head为或只有一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* pPre = <span class="literal">NULL</span>;</span><br><span class="line">    Node* pCur = <span class="literal">NULL</span>;</span><br><span class="line">    Node temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(pPre = head-&gt;next; pPre-&gt;next != <span class="literal">NULL</span>; pPre = pPre-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">for</span>(pCur = pPre-&gt;next; pCur!= <span class="literal">NULL</span>; pCur = pCur-&gt;next) &#123;</span><br><span class="line">            <span class="comment">//如何交换两个结点。</span></span><br><span class="line">            <span class="keyword">if</span>(pPre-&gt;value &gt; pCur-&gt;value) &#123;</span><br><span class="line">                <span class="comment">//1、数据域只有一个</span></span><br><span class="line"><span class="comment">//                temp.value = pPre-&gt;value;</span></span><br><span class="line"><span class="comment">//                pPre-&gt;value = pCur-&gt;value;</span></span><br><span class="line"><span class="comment">//                pCur-&gt;value = temp.value;</span></span><br><span class="line">                <span class="comment">//2、数据域有多个</span></span><br><span class="line">                <span class="comment">//交换值域</span></span><br><span class="line">                temp = *pPre;</span><br><span class="line">                *pPre = *pCur;</span><br><span class="line">                *pCur = temp;</span><br><span class="line">                <span class="comment">//交换指针域</span></span><br><span class="line">                temp.next = pPre-&gt;next;</span><br><span class="line">                pPre-&gt;next = pCur-&gt;next;</span><br><span class="line">                pCur-&gt;next  =temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *假如原来链表是升序的,升序插入新节点</span></span><br><span class="line"><span class="comment"> *不能插入节点后再排序，是升序插入新节点x</span></span><br><span class="line"><span class="comment"> * @param node</span></span><br><span class="line"><span class="comment"> * @param x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listInsertPro</span><span class="params">(Node* head, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    listSort(head);</span><br><span class="line">    Node* pPre = head;</span><br><span class="line">    Node* pCur = head-&gt;next;</span><br><span class="line"></span><br><span class="line">    Node* pNew = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(head));</span><br><span class="line">    pNew-&gt;value = x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;value &gt; x) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pPre-&gt;next = pNew;</span><br><span class="line">    pNew-&gt;next = pCur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转链表的结点</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listReverse</span><span class="params">(Node* head)</span> &#123;</span><br><span class="line">    Node* pPre = head-&gt;next;</span><br><span class="line">    Node* pCur = pPre-&gt;next;</span><br><span class="line">    Node* pPost = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        pPost = pCur-&gt;next;</span><br><span class="line">        pCur-&gt;next = pPre;</span><br><span class="line"></span><br><span class="line">        pPre = pCur;</span><br><span class="line">        pCur = pPost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    head-&gt;next-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head-&gt;next = pPre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 头插法</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> * @param num</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listInsertHead</span><span class="params">(Node* head,<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    Node* pNew = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    pNew-&gt;value = num;</span><br><span class="line"></span><br><span class="line">    Node* temp = head-&gt;next;</span><br><span class="line">    head-&gt;next = pNew;</span><br><span class="line">    pNew-&gt;next = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我的反转方法</span></span><br><span class="line"><span class="comment"> * @param head</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">listReverseMy</span><span class="params">(Node** head)</span> &#123;</span><br><span class="line">    Node* newHead = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newHead-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    Node* pCur = (*head)-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        listInsertHead(newHead,pCur-&gt;value);</span><br><span class="line">        pCur = pCur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    *head = newHead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* head = listCreate();</span><br><span class="line">    listPrint(head);</span><br><span class="line"></span><br><span class="line">    listReverseMy(&amp;head);</span><br><span class="line"></span><br><span class="line">    listPrint(head);</span><br><span class="line"></span><br><span class="line">    listFree(head);</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>再度学了一遍c语言，好多东西还是学了忘了忘了学。计划二月底看完的课也到今天三月十四号才看完。冲吧继续。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/article/b8b0eacd.html"/>
      <url>/article/b8b0eacd.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>整合14篇java笔记</p><p>学习课程为b站韩顺平老师</p></blockquote><h1 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h1><blockquote><p>摘要</p><ul><li>内容介绍</li><li>java概述</li><li>变量</li><li>运算符</li></ul><p>通过一次面试发现对java基础的掌握远远不够，正如韩老师所说浅尝辄止，花点时间加强一下</p></blockquote><span id="more"></span><p><strong>学习任何技术遵循这个图</strong></p><p><img src="https://i.loli.net/2021/04/01/yZ12P3qjR7XHtu8.png" alt="111"></p><h2 id="一、java概述"><a href="#一、java概述" class="headerlink" title="一、java概述"></a>一、java概述</h2><h3 id="1-1、java诞生小故事"><a href="#1-1、java诞生小故事" class="headerlink" title="1.1、java诞生小故事"></a>1.1、java诞生小故事</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210401123247737.png" alt="image-20210401123245874"></p><h3 id="1-2、java技术体系平台"><a href="#1-2、java技术体系平台" class="headerlink" title="1.2、java技术体系平台"></a>1.2、java技术体系平台</h3><p><img src="https://i.loli.net/2021/04/01/RAuNsbPFQ4oGU1D.png" alt="image-20210401123334515"></p><h3 id="1-3、java特点"><a href="#1-3、java特点" class="headerlink" title="1.3、java特点"></a>1.3、java特点</h3><ol><li>opp（面向对象）</li><li>Java 语言是健壮的。Java 的强类型机制、异常处理、垃圾的自动回收</li><li>跨平台性，complie once , run anywhere</li><li>解释性语言（不能被机器直接运行） （解释性\编译性）</li></ol><h3 id="1-4、jdk、jre、jvm"><a href="#1-4、jdk、jre、jvm" class="headerlink" title="1.4、jdk、jre、jvm"></a>1.4、jdk、jre、jvm</h3><ul><li>jdk （java development kit）:  jre + java开发工具（java,javac,javadoc）</li><li>jre （ java run evrioment ） : jvm + 核心类库</li><li>jvm  （java vritual machine）:虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器 (还需深入研究日后)</li></ul><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><h3 id="2-1、数据类型"><a href="#2-1、数据类型" class="headerlink" title="2.1、数据类型"></a>2.1、数据类型</h3><p><img src="https://i.loli.net/2021/04/01/w6NSLKPOgpYn7jh.png"></p><h3 id="2-2、整型"><a href="#2-2、整型" class="headerlink" title="2.2、整型"></a>2.2、整型</h3><ul><li>java中整型常量默认为int型 （long后需加L或l）</li></ul><h3 id="2-3、浮点型"><a href="#2-3、浮点型" class="headerlink" title="2.3、浮点型"></a>2.3、浮点型</h3><ul><li>浮点数底层存放：符号位+指数位+尾数位 （尾数位可能丢失造成精度损失，小数都是近似值）</li><li>java中浮点型常量默认为double （float后需加f过F）</li><li>浮点数使用陷阱：<br>运算后的浮点数不能直接比较，应该用差的绝对值在误差范围内比较</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( num11 == num12) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;num11 == num12 相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Math.abs(num11 - num12) &lt; <span class="number">0.000001</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;差值非常小，到我的规定精度，认为相等...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4、字符型"><a href="#2-4、字符型" class="headerlink" title="2.4、字符型"></a>2.4、字符型</h3><ul><li>java 使用Unicode码（兼容ASSIC码）</li><li>本质是整数，可以运算</li></ul><h4 id="2-4-1、常用编码"><a href="#2-4-1、常用编码" class="headerlink" title="2.4.1、常用编码"></a>2.4.1、常用编码</h4><ol><li>ASSIC，128个字符（可以表示256但128已经够用）,一个字符用一个字节表示</li><li>Unicode，两个字节表示一个字符（字母和汉字都使用两个字节，导致浪费空间）</li><li>utf-8 ，字母用一个字节，汉字用三个字节</li><li>gbk，字母用一个字节，汉字用两个字节</li></ol><h3 id="2-5、基本数据类型转换"><a href="#2-5、基本数据类型转换" class="headerlink" title="2.5、基本数据类型转换"></a>2.5、基本数据类型转换</h3><h4 id="2-5-1、自动类型转换"><a href="#2-5-1、自动类型转换" class="headerlink" title="2.5.1、自动类型转换"></a>2.5.1、自动类型转换</h4><p>记住两条线：</p><p><strong>char - int - long - float - double</strong></p><p><strong>byte - short - int - long - float - double</strong></p><p>记住细节（非常重要）：</p><ol><li>多种数据混合运算，系统先都转为容量最大的再计算</li><li><strong>（byte,short）和 char 之间不会相互转换</strong></li><li><strong>byte,short,char三者可以进行计算，都转为int</strong></li><li>自动提示：表法式结果的类型自动提示为操作数中最大的类型</li></ol><h4 id="2-5-2、强制类型转换"><a href="#2-5-2、强制类型转换" class="headerlink" title="2.5.2、强制类型转换"></a>2.5.2、强制类型转换</h4><p><strong>强制转化符 （）</strong>，可能会造成<strong>精度丢失</strong>或<strong>溢出</strong></p><ul><li>char可以保存int类型的常量值，但是不能保存int类型的变量值（需强类型转换）</li><li><strong>byte,short,char</strong> 在运算时当做int处理</li></ul><h3 id="2-6、基本数据类型和String类型转换"><a href="#2-6、基本数据类型和String类型转换" class="headerlink" title="2.6、基本数据类型和String类型转换"></a>2.6、基本数据类型和String类型转换</h3><p>基本类型转String ：+ “”</p><p>String 转基本类型 ：调用 Xxx.parseXxx()</p><h2 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h2><h3 id="3-1、算数运算符"><a href="#3-1、算数运算符" class="headerlink" title="3.1、算数运算符"></a>3.1、算数运算符</h3><p>区分下 i++ 与 ++i</p><p>i++ ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br></pre></td></tr></table></figure><p>++i：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br></pre></td></tr></table></figure><p><strong>面试题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">i = i++; </span><br><span class="line">System.out.println(i); <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">i = ++i;</span><br><span class="line">System.out.println(i); <span class="number">2</span></span><br></pre></td></tr></table></figure><p>解析需学习字节码相关知识，后面单独写</p><h3 id="3-2、逻辑运算符"><a href="#3-2、逻辑运算符" class="headerlink" title="3.2、逻辑运算符"></a>3.2、逻辑运算符</h3><p>使用短路避免空指针异常（开发中常使用）</p><p>a^b 异或 ：  a 和 b 不同时，则结果为 true, 否则为 false</p><h3 id="3-6、进制"><a href="#3-6、进制" class="headerlink" title="3.6、进制"></a>3.6、进制</h3><p>参见：<a href="http://taoblog421.cn/posts/430980c3/">http://taoblog421.cn/posts/430980c3/</a></p><hr><h1 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h1><blockquote><p>摘要</p><ul><li>数组</li><li>面向对象（基础）</li><li>面向对象（高级）</li></ul></blockquote><!--more--><p>为什么一看就会，一做就废</p><p><img src="https://i.loli.net/2021/04/02/nB3SIxREwjhKOu2.png" alt="image-20210402132955837"></p><h2 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h2><h3 id="1-1、数组赋值机制"><a href="#1-1、数组赋值机制" class="headerlink" title="1.1、数组赋值机制"></a>1.1、数组赋值机制</h3><p><strong>值拷贝&#x2F;引用拷贝</strong></p><p><img src="https://i.loli.net/2021/04/02/bZzrkqfFDwQnTMx.png"></p><h3 id="1-2、数组的创建方式"><a href="#1-2、数组的创建方式" class="headerlink" title="1.2、数组的创建方式"></a>1.2、数组的创建方式</h3><ol><li>int[] arr &#x3D; new int[3]</li><li>int[] arr &#x3D; {1,2,3}</li><li>int[] arr &#x3D;new int[] {1,2,3} （这种方式括号不能带大小）</li></ol><h2 id="二、面向对象（基础）"><a href="#二、面向对象（基础）" class="headerlink" title="二、面向对象（基础）"></a>二、面向对象（基础）</h2><blockquote><p>谈谈自己理解 （借鉴大话设计模式）</p><p>什么是对象：万物皆对象，对象是一个自包含（组件不依赖其他组件,能够以独立的方式供外部使用）的实体，用一组行为（方法）和特性（属性）来标识</p><p>什么是类：具有相同属性和功能的对象的集合</p><p>面向对象的好处：</p></blockquote><h3 id="2-1、对象在内存中存在形式"><a href="#2-1、对象在内存中存在形式" class="headerlink" title="2.1、对象在内存中存在形式"></a>2.1、对象在内存中存在形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">cat.name = <span class="string">&quot;小白&quot;</span>;</span><br><span class="line">cat.age = <span class="string">&quot;12&quot;</span>;</span><br><span class="line">cat.color = <span class="string">&quot;白色&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/02/GfOsQVg1HYbPFua.png" alt="image-20210402165835952"></p><h3 id="2-2、类和对象的内存分配机制"><a href="#2-2、类和对象的内存分配机制" class="headerlink" title="2.2、类和对象的内存分配机制"></a>2.2、类和对象的内存分配机制</h3><p><img src="https://i.loli.net/2021/04/02/hzye2Pc64lsCVxF.png"></p><h3 id="2-3、方法调用机制"><a href="#2-3、方法调用机制" class="headerlink" title="2.3、方法调用机制"></a>2.3、方法调用机制</h3><p><img src="https://i.loli.net/2021/04/02/qbBdaUYtM5w37Ki.png"></p><h3 id="2-4、重载"><a href="#2-4、重载" class="headerlink" title="2.4、重载"></a>2.4、重载</h3><p>允许方法名相同</p><p>细节：</p><ol><li>不能仅通过返回类型区别两个重载方法</li></ol><h3 id="2-5、可变参数"><a href="#2-5、可变参数" class="headerlink" title="2.5、可变参数"></a>2.5、可变参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        res += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细节：</p><ol><li>多个参数时，可变参数放最后</li><li>一个形参列表中只能有一个可变参数</li><li>本质是数组（参数可以为数组）</li></ol><h3 id="2-6、作用域"><a href="#2-6、作用域" class="headerlink" title="2.6、作用域"></a>2.6、作用域</h3><p>全局变量：属性（成员变量）</p><p>局部变量：方法或者代码块定义的变量</p><h3 id="2-7、构造方法-x2F-构造器"><a href="#2-7、构造方法-x2F-构造器" class="headerlink" title="2.7、构造方法&#x2F;构造器"></a>2.7、构造方法&#x2F;构造器</h3><p>系统默认生成无参构造器（一旦定义构造器则不自动生成）</p><p><img src="https://i.loli.net/2021/04/03/PbmpxfRDzQ2I6nA.png" alt="image-20210403135619206"></p><h3 id="2-8、对象创建流程分析（面试）"><a href="#2-8、对象创建流程分析（面试）" class="headerlink" title="2.8、对象创建流程分析（面试）"></a>2.8、对象创建流程分析（面试）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Class Person &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">90</span>;</span><br><span class="line">    String name;</span><br><span class="line">    </span><br><span class="line">    Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小倩&quot;</span>，<span class="number">20</span>)；</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/03/RqiWgjyusSzDt3B.png" alt="image-20210403141541629"></p><ol><li>加载Person类信息（方法区）</li><li>堆开辟空间</li><li>对象初始化<br>默认初始化：age &#x3D; 0 ; name &#x3D; null<br>显式初始化：age &#x3D; 90; name &#x3D; null<br>构造器初始化：age &#x3D; 20 ;name &#x3D; ”小倩“（常量池）</li></ol><h3 id="2-8、this关键字"><a href="#2-8、this关键字" class="headerlink" title="2.8、this关键字"></a>2.8、this关键字</h3><p>简单说，哪个对象调用就是哪个对象引用</p><p><img src="https://i.loli.net/2021/04/03/9pUS5XsZIlKTCkR.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog1.info();</span><br><span class="line">        System.out.println(dog1.hashCode());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog2.info();</span><br><span class="line">        System.out.println(dog2.hashCode());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/03/uQVgwZpb694yHMX.png"></p><p>细节：</p><ul><li>构造器内使用this,只能调用其他构造器且必须放在第一行</li></ul><h2 id="三、面向对象（中级）"><a href="#三、面向对象（中级）" class="headerlink" title="三、面向对象（中级）"></a>三、面向对象（中级）</h2><h3 id="3-1、访问修饰符"><a href="#3-1、访问修饰符" class="headerlink" title="3.1、访问修饰符"></a>3.1、访问修饰符</h3><table><thead><tr><th>访问级别</th><th>修饰符</th><th>同类</th><th>同包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td>公开</td><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>受保护</td><td>protecrted</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>默认</td><td></td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>私有</td><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h3 id="3-2、封装"><a href="#3-2、封装" class="headerlink" title="3.2、封装"></a>3.2、封装</h3><p><strong>封装：把抽象出的数据和对数据操作的方法封装在一起，数据被保护在内部，程序的其他部分只能通过方法来对数据进行操作</strong></p><p>好处：</p><ol><li>隐藏细节</li><li>对数据进行验证，保证安全，合理</li></ol><p>实现封装：属性定义为private ，提供get set 方法</p><h3 id="3-3、继承"><a href="#3-3、继承" class="headerlink" title="3.3、继承"></a>3.3、继承</h3><p>好处：</p><ol><li>提高代码复用性</li><li>提高拓展性和维护性</li></ol><p>细节：</p><p>1、子类继承了所有属性和方法，私有属性和方法不能直接访问，使用supper</p><p>2、<strong>子类必须调用父类的构造器，完成父类的初始化</strong></p><p>3、创建子类对象时，不论使用子类的哪个构造器，都会调用父类的构造器，若父类没有默认无参构造器需使用super指定使用父类哪个构造器，负责不会通过编译。</p><p>4、super()使用必须放在构造器内第一句（不能和this()同时使用）</p><p>5、Object是所有类的基类（idea框架键 ctrl + h 可以看到类的基础关系）</p><p>6、父类构造器的调用将一直追溯到Object类</p><p>7、java单继承（多个？ – 接口&#x2F;抽象类）</p><p>8、不能滥用基础，需要满足“is - a”关系</p><h4 id="3-3-1、继承本质详解"><a href="#3-3-1、继承本质详解" class="headerlink" title="3.3.1、继承本质详解"></a>3.3.1、继承本质详解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/3 15:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendTheory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>(); <span class="comment">// 内存中发生了什么</span></span><br><span class="line">        <span class="comment">// (1)子类是否有这个属性</span></span><br><span class="line">        <span class="comment">// (2)若有且可以访问则返回</span></span><br><span class="line">        <span class="comment">// (3)若无则查找父类，有且可以访问则返回 (有但是不能访问则报错)</span></span><br><span class="line">        <span class="comment">// (4)若无则继续往上找，有且可以访问则返回 (有但是不能访问则报错)，无则报错</span></span><br><span class="line">        System.out.println(son.name);</span><br><span class="line">        System.out.println(son.age);</span><br><span class="line">        System.out.println(son.hobby);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrandPa</span> &#123; <span class="comment">//爷类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头爷爷&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hobby</span> <span class="operator">=</span> <span class="string">&quot;旅游&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">GrandPa</span> &#123;<span class="comment">//父类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头爸爸&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">39</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123; <span class="comment">//子类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头儿子&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/03/JqEjNYT1H9PMLFC.png"></p><h4 id="3-3-2、supper"><a href="#3-3-2、supper" class="headerlink" title="3.3.2、supper"></a>3.3.2、supper</h4><p>作用：</p><ol><li>访问父类方法获变量（当方法或变量重名）</li><li>分工明确，父类变量由父类初始化，子类变量自己初始化</li></ol><h4 id="3-3-3、方法重写-x2F-覆盖（override）"><a href="#3-3-3、方法重写-x2F-覆盖（override）" class="headerlink" title="3.3.3、方法重写&#x2F;覆盖（override）"></a>3.3.3、方法重写&#x2F;覆盖（override）</h4><p>细节：</p><ol><li>除返回类型（方法名，参数列表）都必须一样，返回类型可以为父类返回类型的子类</li><li>子类不能缩小父类的访问限制</li></ol><h3 id="3-4、多态"><a href="#3-4、多态" class="headerlink" title="3.4、多态"></a>3.4、多态</h3><p><strong>方法或对象拥有多种状态</strong></p><p>1、方法多态：方法的重写和重载</p><p>2、对象多态</p><ol><li>一个对象的编译类型和运行类型可以不一样</li><li>编译类型在定义对象时就确定了，不能改变</li><li>运行类型是可以变换的</li><li>编译类型在 &#x3D; 左边 ；运行类型在 &#x3D; 右边</li></ol><h4 id="3-4-1、细节"><a href="#3-4-1、细节" class="headerlink" title="3.4.1、细节"></a>3.4.1、细节</h4><p><strong>1、向上转型：父类的引用指向子类的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类类型 引用名 = <span class="keyword">new</span> 子类类型()</span><br></pre></td></tr></table></figure><ul><li>可以调用父类中所有成员</li><li>不能调用子类特有成员</li><li>最终运行结果看子类的具体实现</li></ul><p><strong>2、向下转型：子类的引用指向父类的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子类类型 引用名 = (子类类型) 父类引用</span><br></pre></td></tr></table></figure><ul><li><p>只能强转父类的引用，不能强转父类的对象</p></li><li><p>父类的引用必须指向当前目标类型的对象</p></li><li><p>可以调用子类中所有成员</p><p>++</p></li></ul><p>instanceof 判断的是<strong>运行类型</strong></p><h4 id="3-4-2、动态绑定机制（非常非常重要）"><a href="#3-4-2、动态绑定机制（非常非常重要）" class="headerlink" title="3.4.2、动态绑定机制（非常非常重要）"></a>3.4.2、动态绑定机制（非常非常重要）</h4><ol><li>调用对象方法时，会和<strong>运行类型</strong>动态绑定</li><li>调用方法属性时，<strong>没有动态绑定</strong>，哪里声明哪里使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/3 17:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicBinding</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();<span class="comment">//向上转型</span></span><br><span class="line">        System.out.println(a.sum());<span class="comment">//?40 -&gt; 30</span></span><br><span class="line">        System.out.println(a.sum1());<span class="comment">//?30-&gt; 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;<span class="comment">//父类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;<span class="comment">//子类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-3、多态应用"><a href="#3-4-3、多态应用" class="headerlink" title="3.4.3、多态应用"></a>3.4.3、多态应用</h4><p>多态数组：数组定义为父类型，存放子类对象</p><p>多态参数：形参类型为父类类型，允许实参为子类类型</p><h3 id="3-5、Object类"><a href="#3-5、Object类" class="headerlink" title="3.5、Object类"></a>3.5、Object类</h3><h4 id="3-5-1、equals-与-x3D-x3D"><a href="#3-5-1、equals-与-x3D-x3D" class="headerlink" title="3.5.1、equals 与 &#x3D;&#x3D;"></a>3.5.1、equals 与 &#x3D;&#x3D;</h4><p>&#x3D;&#x3D; 基本类型判断值是否相等，引用类型判断地址是否相等（引用的是一个对象）</p><p>equals 只能判断引用类型，但是往往重写此方法判断是否相等</p><p><strong>Object.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>String.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="type">char</span> v1[] = value;</span><br><span class="line">            <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;java</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-2、finalize"><a href="#3-5-2、finalize" class="headerlink" title="3.5.2、finalize"></a>3.5.2、finalize</h4><p>几乎不用，自动释放内存，应付面试</p><h4 id="3-5-3、hashCode"><a href="#3-5-3、hashCode" class="headerlink" title="3.5.3、hashCode"></a>3.5.3、hashCode</h4><ol><li>提高具有哈希结构的容器的效率！</li><li>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的！</li><li>两个引用，如果指向的是不同对象，则哈希值是不一样的</li><li>哈希值主要根据地址号来的！， 不能完全将哈希值等价于地址。</li><li>在集合时，重写 hashCode()</li></ol><h4 id="3-5-4、toString"><a href="#3-5-4、toString" class="headerlink" title="3.5.4、toString"></a>3.5.4、toString</h4><p>默认返回：全类名+@+哈希值的十六进制，【查看 Object 的 toString 方法】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类往往重写 toString 方法，用于返回对象的属性信息</p><p><img src="https://i.loli.net/2021/04/03/1l4vWCPBZ5HRkKj.png"></p><hr><h1 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h1><blockquote><p>摘要</p><ul><li>面向对象高级1</li></ul></blockquote><!--more--><h2 id="一、面向对象（高级）-1"><a href="#一、面向对象（高级）-1" class="headerlink" title="一、面向对象（高级）(1)"></a>一、面向对象（高级）(1)</h2><h3 id="1-1、类变量与类方法"><a href="#1-1、类变量与类方法" class="headerlink" title="1.1、类变量与类方法"></a>1.1、类变量与类方法</h3><h4 id="1-1-1、类变量（静态变量）"><a href="#1-1-1、类变量（静态变量）" class="headerlink" title="1.1.1、类变量（静态变量）"></a>1.1.1、类变量（静态变量）</h4><p>推荐使用 <strong>类名.属性名</strong> 进行访问</p><p><img src="https://i.loli.net/2021/04/11/7aGbF2giXJMDSL5.png" alt="image-20210411133629235"></p><ul><li>static 变量是同一个类的所有对象共享的</li><li>static 变量是在类加载的时候生成的</li></ul><h4 id="1-1-2、类方法（静态方法）"><a href="#1-1-2、类方法（静态方法）" class="headerlink" title="1.1.2、类方法（静态方法）"></a>1.1.2、类方法（静态方法）</h4><p>推荐使用 <strong>类名.方法名</strong> 进行访问</p><ul><li><p>当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率（比如工具类中方法）</p></li><li><p>开发自己工具类，将方法作为静态，方法调用（不需要创建对象）</p></li></ul><p>细节：</p><ol><li>类方法和普通方法都是随着类加载而加载，将结构信息存储在方法区</li><li>类方法（静态方法）只能访问类变量（静态变量）或类方法（静态方法）</li><li>类方法中不能使用this或super</li><li>普通成员（变量，方法）既可以访问普通成员，又可以访问静态方法</li></ol><h3 id="1-2、深入理解main方法"><a href="#1-2、深入理解main方法" class="headerlink" title="1.2、深入理解main方法"></a>1.2、深入理解main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>jvm需要调用类的main方法，所以方法的访问权限必须是public</li><li>jvm在执行main方法时不必创建对象，所以方法必须是static</li><li>该方法接收String类型数组参数，该数组保存执行java命令时传递给所运行类的参数</li><li>java 执行的程序 参数1 参数2 参数3 （举例）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//args 是如何传入的</span></span><br><span class="line">        <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">            System.out.println(arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Hello 1 2 3</span><br></pre></td></tr></table></figure><p>idea传递参数main方法</p><p><img src="https://i.loli.net/2021/04/11/9KFsS2Wbp7jH3Bl.png"></p><h3 id="1-3、代码块"><a href="#1-3、代码块" class="headerlink" title="1.3、代码块"></a>1.3、代码块</h3><p>代码块又叫初始化块，理解为只有方法体的方法，在<strong>加载类</strong>或<strong>创建对象</strong>时隐式调用</p><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符]&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>修饰符：可选static</li><li>静态代码块、非静态代码块</li><li>；可以省略</li></ol><p><strong>好处</strong></p><ol><li>另外一种形式的构造器（对构造器的补充机制），可以做初始化操作</li><li>多个构造器有重复的代码抽取</li></ol><p><strong>注意事项与细节讨论</strong></p><p>1）static 代码块作用是对类进行初始化，随着<strong>类加载</strong>而执行，并且<strong>只会执行一次</strong></p><p>如果是普通代码块，每创建一个对象，就执行一次</p><p>2）类什么时候被加载（重要）</p><ol><li>创建对象实例时（new）</li><li>创建子类对象实例，父类也会被加载（父类先被加载）</li><li>使用类的静态成员（静态属性，静态方法）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Detail1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AA 的静态代码块1被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Detail1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AA 的静态代码块1被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BB 的静态代码块1被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Detail1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Cat.n1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//静态属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat 的静态代码块1被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）普通代码块在<strong>创建对象</strong>实例是被隐式调用，被创建一次就会调用一次，如果只是使用类的静态成员，普通代码块并不会执行</p><p>4）创建一个对象时，在一个类 调用顺序是（重点、难点）</p><p>1、调用<strong>静态代码块</strong>和<strong>静态属性初始化</strong>（静态代码块和静态属性初始化调用的优先级一样，若有多个，<strong>按照定义的顺序</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Detail2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">// 静态属性初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> getN1();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A 静态代码块调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getN1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getN1()调用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">67373</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A 静态代码块调用</span><br><span class="line">getN1()调用</span><br></pre></td></tr></table></figure><p>2、调用<strong>普通代码块</strong>和<strong>普通属性初始化</strong>（普通代码块和普通属性初始化调用的优先级一样，若有多个，<strong>按照定义的顺序</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Detail2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="comment">// 普通代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 普通代码块调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 普通属性初始化</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> getN1();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getN1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getN1()调用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">67373</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、调用构造器</p><p>5）构造器的最前面其实隐含了super() 和调用普通代码块 （重要）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class AAA &#123;</span><br><span class="line">    public AAA() &#123;</span><br><span class="line">        // 1、super()</span><br><span class="line">        // 2、调用本类普通代码块</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6）创建一个子类对象时 调用顺序</p><ol><li>父类的静态代码块和静态属性初始化</li><li>子类的静态代码块和静态属性初始化</li><li>父类的普通代码块和普通属性初始化</li><li>父类构造器</li><li>子类的普通代码块和普通属性初始化</li><li>子类构造器</li></ol><p>7）静态代码块只能调用静态成员，普通代码块可以调用所有成员</p><h3 id="1-4、单例设计模式"><a href="#1-4、单例设计模式" class="headerlink" title="1.4、单例设计模式"></a>1.4、单例设计模式</h3><p>什么是设计模式</p><ol><li>静态方法和属性的经典使用</li><li>设计模式是大量的实践中总结和理论化之后优选的代码结构，编程风格以及解决问题的思考方式。就像是经典的棋谱，不同的棋局使用不同的棋谱，免去我们自己再思考和摸索</li></ol><p>单例模式：对某个类只能存在一个对象实例，并且该类提供一个取的其对象实例的方法</p><p><strong>饿汉式</strong>：（加载类就创建对象）</p><ol><li>构造器私有化</li><li>类的内部创建对象（需要修饰为static）</li><li>对外暴露一个静态的公共方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类的内部创建对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFriend</span> <span class="variable">gf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对外暴露一个静态的公共方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GirlFriend <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>懒汉式</strong>：（使用的时候创建对象）</p><ol><li>构造器私有化</li><li>类的内部定义对象</li><li>对外暴露一个静态的公共方法创建对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cat <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cat == <span class="literal">null</span>) &#123;</span><br><span class="line">            cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建对象时机不同</li><li>懒汉式存在线程安全问题，饿汉式不存在（后面完善）</li><li>饿汉式存在浪费资源问题，懒汉式不存在</li><li>Runtime经典单例模式</li></ol><h3 id="1-5、final"><a href="#1-5、final" class="headerlink" title="1.5、final"></a>1.5、final</h3><ol><li>不希望类被继承时</li><li>不希望父类的某个方法被子类覆盖&#x2F;重写</li><li>不希望类的某个属性被修改</li><li>不希望某个局部变量被修改</li></ol><p>细节</p><p>1）final修饰的属性一般又叫常量，定义为 XX_XX_XX</p><p>2）常量必须赋初始值，赋值位置可以在定义时、构造器、代码块</p><p>3）如果是静态的常量，赋值位置只能在定义时、代码块 （构造器在创建对象时才调用）</p><p>4）final类不能继承，但是可以实例化对象</p><p>5）如果类不是final类，但是含有final方法，仍可以继承</p><p>6）如果一个类是final类就没有必要将方法定义为final （画蛇添足）</p><p>7）final不能修饰构造器</p><p>8）final 与 static 搭配使用，底层编译器优化处理，不会导致类加载</p><hr><h1 id="day04"><a href="#day04" class="headerlink" title="day04"></a>day04</h1><blockquote><p>摘要</p><ul><li>面向对象高级2</li></ul></blockquote><!--more--><h2 id="一、面向对象（高级）-2"><a href="#一、面向对象（高级）-2" class="headerlink" title="一、面向对象（高级）(2)"></a>一、面向对象（高级）(2)</h2><h3 id="2-1、抽象类"><a href="#2-1、抽象类" class="headerlink" title="2.1、抽象类"></a>2.1、抽象类</h3><p><strong>引出 – 父类方法不确定</strong></p><ol><li>abstact修饰一个类，即为抽象类</li><li>abstact修饰一个方法，即为抽象方法</li><li>价值在于设计</li><li>面试爱问 + 框架，设计模式使用较多</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个方法实现没有意义 --》 父类方法不确定性</span></span><br><span class="line">    <span class="comment">// 抽象方法 --》 没有实现的方法（没有方法体）</span></span><br><span class="line">    <span class="comment">// 当一个类中存在抽象方法时，需要将该类声明为抽象类</span></span><br><span class="line">    <span class="comment">// 抽象类会被继承，子类实现抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节：</strong></p><p>1）抽象类不能被实例化</p><p>2）抽象类不一定包含抽象方法</p><p>3）有抽象方法的类一定是抽象类</p><p>4）abstract只能修饰类和方法</p><p>5）抽象类可以有任意成员（抽象类本质还是类）</p><p>6）抽象类不能有方法实体</p><p>7）如果一个类继承了抽象类，它必须实现所有抽象方法除非它也是抽象类</p><p>8）抽象方法不能使用private,final,static来修饰，因为这些关键字与重写违背</p><h3 id="2-2、模板设计模式"><a href="#2-2、模板设计模式" class="headerlink" title="2.2、模板设计模式"></a>2.2、模板设计模式</h3><ol><li>多个类，完成不同的任务（可能多个任务）</li><li>要求统计得到各自完成任务的时间</li><li>编程实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AA</span>().caculate();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BB</span>().caculate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Tempalte</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">caculate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// job方法动态绑定机制</span></span><br><span class="line">        job();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行时间 &quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> <span class="keyword">extends</span> <span class="title class_">Tempalte</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">            num +=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">Tempalte</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、接口"><a href="#2-3、接口" class="headerlink" title="2.3、接口"></a>2.3、接口</h3><p>快速入门</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/12 13:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Interface01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        computer.work(<span class="keyword">new</span> <span class="title class_">Phone</span>());</span><br><span class="line">        computer.work(<span class="keyword">new</span> <span class="title class_">Camera</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UsbInterface</span> &#123;</span><br><span class="line">    <span class="comment">//规定接口的相关方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">UsbInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机开始工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机停止工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Camera</span> <span class="keyword">implements</span> <span class="title class_">UsbInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;相机开始工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;相机停止工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(UsbInterface usbInterface)</span> &#123;</span><br><span class="line">        <span class="comment">//通过接口调用方法</span></span><br><span class="line">        usbInterface.start();</span><br><span class="line">        usbInterface.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本介绍：<strong>接口就是给出一些没有实现的方法，封装到一起，当某个类要使用的时候，在根据具体方法写出来</strong></p><ol><li>jdk7以前，接口里的所有方法都没有方法体</li><li>jdk8以后，接口类可以有静态方法，默认方法（使用default关键字），也就是接口可以有方法的具体实现</li></ol><h4 id="2-3-1、接口的应用场景"><a href="#2-3-1、接口的应用场景" class="headerlink" title="2.3.1、接口的应用场景"></a>2.3.1、接口的应用场景</h4><p>便于管理软件项目</p><p><img src="https://i.loli.net/2021/04/13/GHwVnoQgXKyfbz9.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">DbInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DbMysql</span> <span class="keyword">implements</span> <span class="title class_">DbInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mysql连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mysql断开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DbOracle</span> <span class="keyword">implements</span> <span class="title class_">DbInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;oracle连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;oracle断开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2、细节"><a href="#2-3-2、细节" class="headerlink" title="2.3.2、细节"></a>2.3.2、细节</h4><p>1）接口不能被实例化</p><p>2）接口中的所有方法都是public（默认public）方法，抽象方法不需要使用abstract修饰</p><p>3）一个普通类实现接口就必须实现所有方法</p><p>4）抽象类实现接口可以不实现方法</p><p>5）一个类可以实现多个接口</p><p>6）接口中的属性是能是final，而且是public static final修饰，默认（public static final）</p><p>7）接口不能继承类，但是可以继承<strong>多个</strong>别的接口</p><h4 id="2-3-3、实现接口-vs-继承"><a href="#2-3-3、实现接口-vs-继承" class="headerlink" title="2.3.3、实现接口 vs 继承"></a>2.3.3、实现接口 vs 继承</h4><p><strong>实现</strong>：对java单继承机制的补充</p><p><strong>解决问题不同：</strong></p><p>​    继承：提高代码的复用性和可维护性</p><p>​    接口：设计各种方法，让其他类实现</p><p><strong>接口比继承更加灵活</strong></p><p>​    is - a , like - a</p><p><strong>接口在一定程度上实现解耦</strong></p><p>接口规范性 + 动态绑定机制</p><h4 id="2-3-4、接口多态"><a href="#2-3-4、接口多态" class="headerlink" title="2.3.4、接口多态"></a>2.3.4、接口多态</h4><p>1）多态参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个参数可以传实现这个接口的所有对象实例</span></span><br><span class="line"><span class="comment">// 接口的引用可以指向实现接口的类的对象实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">(UsbInterface usbInterface)</span> &#123;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>2）多态数组</p><p>接口数组可以存放实现这个接口的对象实例</p><p>3）多态传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Interface5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IG</span> <span class="variable">ig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">teacher</span>();</span><br><span class="line">        <span class="type">IH</span> <span class="variable">ih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">teacher</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IH</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IG</span> <span class="keyword">extends</span> <span class="title class_">IH</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">teacher</span> <span class="keyword">implements</span> <span class="title class_">IG</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4、内部类"><a href="#2-4、内部类" class="headerlink" title="2.4、内部类"></a>2.4、内部类</h3><p>一个类的内部又完整的嵌套了另一个类结构。被嵌套的类称为内部类（inner class），嵌套其他类的类称为外部类（outer class）。内部类最大的特点时可以直接<strong>访问私有属性</strong>，并且可以<strong>体现类与类之间的包含关系</strong> </p><p><strong>注意：内部类是学习的难点，同时也是重点，后面看底层源码时有大量的内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1、内部类分类"><a href="#2-4-1、内部类分类" class="headerlink" title="2.4.1、内部类分类"></a>2.4.1、内部类分类</h4><p>定义在外部类局部位置上（比如方法内）</p><ol><li>局部内部类（有类名）</li><li>匿名内部类（没有类名，重点！！！！！）</li></ol><p>定义在外部类的成员位置上</p><ol><li>成员内部类（没用static修饰）</li><li>静态内部类（使用static修饰）</li></ol><h4 id="2-4-2、局部内部类"><a href="#2-4-2、局部内部类" class="headerlink" title="2.4.2、局部内部类"></a>2.4.2、局部内部类</h4><p>局部外部类定义在外部类的局部位置（通常是方法）</p><ol><li>可以访问外部类的所有成员，包括私有变量</li><li>不能添加访问修饰符，相当于局部变量（类型是类的局部变量），但是可以用final修饰</li><li>作用域：只在定义类的<strong>方法</strong>或者<strong>代码块</strong>内</li><li>局部内部类可以直接访问外部类的成员(包括私有成员)</li><li>外部其他类不能使用局部内部类</li><li>如果外部类和局部内部类重名时，默认咨询就近原则，如果想访问外部类的成员，使用 <strong>外部类名.this.成员</strong> 去访问</li></ol><h4 id="2-4-3、匿名内部类"><a href="#2-4-3、匿名内部类" class="headerlink" title="2.4.3、匿名内部类 !!!!!!!"></a>2.4.3、匿名内部类 !!!!!!!</h4><ol><li>本质是类</li><li>内部类</li><li>该类没有名字</li><li>同时还是一个对象</li></ol><p>匿名类是定义在外部类的局部位置，比如方法中，并且没有类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类或接口(参数列表) &#123;</span><br><span class="line">    类体</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>只使用一次的类，简化开发 -&gt; 匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day03.inner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/14 15:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Anonymous</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Outer4</span>().method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// tiger的编译类型 A</span></span><br><span class="line">    <span class="comment">// tiger的运行类型 匿名内部类XXXX Outer04$1</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        我们看底层</span></span><br><span class="line"><span class="comment">        class XXXX implements A &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void cry() &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(111);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// jdk底层在创建了匿名内部类马上Outer04$1创建实例，并且把地址返回给tiger</span></span><br><span class="line">    <span class="comment">// 匿名内部类使用一次就不能再使用了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">A</span> <span class="variable">tiger</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">A</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       System.out.println(<span class="string">&quot;tiger的运行类型&quot;</span> + tiger.getClass());</span><br><span class="line">       tiger.cry();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 匿名内部类</span></span><br><span class="line">        <span class="comment">// father 编译类型 Father</span></span><br><span class="line">        <span class="comment">// father 运行类型 Outer4$2</span></span><br><span class="line">       <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;jack&quot;</span>) &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">               <span class="built_in">super</span>.test();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;father的运行类型&quot;</span> + father.getClass());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>细节：</strong></p><p>1）调用方法两种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person hi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>() &#123;&#125;;</span><br><span class="line">        p1.hi();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">        &#125;.hi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）可以访问外部类的所有成员，包括私有变量</p><p>3）如果外部类和局部内部类重名时，默认咨询就近原则，如果想访问外部类的成员，使用 <strong>外部类名.this.成员</strong> 去访问</p><h4 id="2-4-4、匿名类最佳实践"><a href="#2-4-4、匿名类最佳实践" class="headerlink" title="2.4.4、匿名类最佳实践"></a>2.4.4、匿名类最佳实践</h4><ul><li>当做实参直接传递，简介高效</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        f1(<span class="keyword">new</span> <span class="title class_">AA</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="number">111</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//形参是接口类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(AA aa)</span> &#123;</span><br><span class="line">        aa.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        phone.alarmClock(() -&gt; System.out.println(<span class="string">&quot;起床了&quot;</span>));</span><br><span class="line">        phone.alarmClock(() -&gt; System.out.println(<span class="string">&quot;上课了&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bell</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alarmClock</span><span class="params">(Bell bell)</span> &#123;</span><br><span class="line">        bell.ring();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-5、成员内部类"><a href="#2-4-5、成员内部类" class="headerlink" title="2.4.5、成员内部类"></a>2.4.5、成员内部类</h4><p>定义在外部类的成员位置上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Outer08</span>().f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer08</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n</span>  <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部其他类使用成员内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer08</span> <span class="variable">outer08</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer08</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过外部类的实例new</span></span><br><span class="line">        Outer08.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer08.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写一个方法</span></span><br><span class="line">        Outer08.<span class="type">Inner</span> <span class="variable">inner1</span> <span class="operator">=</span> outer08.getInner();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer08</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n</span>  <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">getInner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-6、静态内部类"><a href="#2-4-6、静态内部类" class="headerlink" title="2.4.6、静态内部类"></a>2.4.6、静态内部类</h4><p>定义在外部类成员位置，static修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer09</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n</span>  <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">getInner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/15/2UaLcIw4nXM5Seb.png"></p><p><strong>无他，但手熟尔</strong></p><p><strong>我亦无他，唯手熟尔</strong></p><p><strong>坚持重要性！</strong></p><hr><h1 id="day05"><a href="#day05" class="headerlink" title="day05"></a>day05</h1><blockquote><p>摘要</p><ul><li>枚举和注解</li></ul></blockquote><!--more--><h2 id="一、枚举"><a href="#一、枚举" class="headerlink" title="一、枚举"></a>一、枚举</h2><p>需求引出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">spring</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">        <span class="type">Season</span> <span class="variable">winter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">        <span class="type">Season</span> <span class="variable">summer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;凉爽&quot;</span>);</span><br><span class="line">        <span class="type">Season</span> <span class="variable">autumn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题：</strong></p><ol><li>Season类只能有四个对象</li><li>可以new不存在的季节或修改对应季节的属性</li></ol><p><strong>枚举：</strong></p><ul><li>enum （enumeration）</li><li>枚举一组常量对象的集合</li><li>可以理解为：枚举是一种特殊的类。里面包含一组<strong>有限</strong>的<strong>特定</strong>的对象</li></ul><h3 id="1-1、自定义枚举类"><a href="#1-1、自定义枚举类" class="headerlink" title="1.1、自定义枚举类"></a>1.1、自定义枚举类</h3><ol><li>构造器私有化</li><li>类的内部创建一组对象</li><li>不提供set方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season.SPRING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义枚举实现</span></span><br><span class="line"><span class="comment">// 构造器私有化</span></span><br><span class="line"><span class="comment">// 去掉set方法，防止属性被修改</span></span><br><span class="line"><span class="comment">// Season内部创建固定的对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">    <span class="comment">//省略。。。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2、enum关键字实现枚举"><a href="#1-2、enum关键字实现枚举" class="headerlink" title="1.2、enum关键字实现枚举"></a>1.2、enum关键字实现枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season.SPRING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用enum关键字实现枚举</span></span><br><span class="line"><span class="comment">// 关键字替代class</span></span><br><span class="line"><span class="comment">// 如果使用enum实现枚举，要求将常量对象写在最前面</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season</span> &#123;</span><br><span class="line"></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;炎热&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;凉爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Season(String name, String decs) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.decs = decs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String decs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, decs=&#x27;&quot;</span> + decs + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>1）enum开发一个枚举类时，默认会继承Enum类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">G:\idea_project\javaBasicHan\out\production\javaBasicHan\day04\enum_&gt;javap Season.class</span><br><span class="line">Compiled from &quot;Demo2.java&quot;</span><br><span class="line">final class day04.enum_.Season extends java.lang.Enum&lt;day04.enum_.Season&gt; &#123;</span><br><span class="line">  public static final day04.enum_.Season SPRING;</span><br><span class="line">  public static final day04.enum_.Season WINTER;</span><br><span class="line">  public static day04.enum_.Season[] values();</span><br><span class="line">  public static day04.enum_.Season valueOf(java.lang.String);</span><br><span class="line">  public void setName(java.lang.String);</span><br><span class="line">  public java.lang.String toString();</span><br><span class="line">  static &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）public final static Season SPRING &#x3D; new Season(“春天”,”温暖”); 简化为 SPRING(“春天”,”温暖”),</p><p>3）如果使用无参构造器，可以省略 （）</p><p>4）枚举对象必须放在枚举类的行首</p><h3 id="1-3、enum常用方法"><a href="#1-3、enum常用方法" class="headerlink" title="1.3、enum常用方法"></a>1.3、enum常用方法</h3><p><strong>Enum源码</strong></p><h4 id="1、name"><a href="#1、name" class="headerlink" title="1、name()"></a>1、<strong>name()</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the name of this enum constant, exactly as declared in its</span></span><br><span class="line"><span class="comment"> * enum declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;Most programmers should use the &#123;<span class="doctag">@link</span> #toString&#125; method in</span></span><br><span class="line"><span class="comment"> * preference to this one, as the toString method may return</span></span><br><span class="line"><span class="comment"> * a more user-friendly name.&lt;/b&gt;  This method is designed primarily for</span></span><br><span class="line"><span class="comment"> * use in specialized situations where correctness depends on getting the</span></span><br><span class="line"><span class="comment"> * exact name, which will not vary from release to release.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the name of this enum constant</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、ordinal"><a href="#2、ordinal" class="headerlink" title="2、ordinal()"></a>2、<strong>ordinal()</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> ordinal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the ordinal of this enumeration constant (its position</span></span><br><span class="line"><span class="comment"> * in its enum declaration, where the initial constant is assigned</span></span><br><span class="line"><span class="comment"> * an ordinal of zero).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Most programmers will have no use for this method.  It is</span></span><br><span class="line"><span class="comment"> * designed for use by sophisticated enum-based data structures, such</span></span><br><span class="line"><span class="comment"> * as &#123;<span class="doctag">@link</span> java.util.EnumSet&#125; and &#123;<span class="doctag">@link</span> java.util.EnumMap&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the ordinal of this enumeration constant</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">ordinal</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ordinal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、values"><a href="#3、values" class="headerlink" title="3、values()"></a>3、<strong>values()</strong></h4><p>影藏了源码里，离谱，反编译可以看到</p><p><img src="https://i.loli.net/2021/04/18/IJqnb6s4DSavZQu.png" alt="image-20210418101417618"></p><p>返回数组，定义的所有对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(Season.values()));</span><br><span class="line"></span><br><span class="line">[Season&#123;name=<span class="string">&#x27;春天&#x27;</span>, decs=<span class="string">&#x27;温暖&#x27;</span>&#125;, Season&#123;name=<span class="string">&#x27;夏天&#x27;</span>, decs=<span class="string">&#x27;炎热&#x27;</span>&#125;, Season&#123;name=<span class="string">&#x27;秋天&#x27;</span>, decs=<span class="string">&#x27;凉爽&#x27;</span>&#125;, Season&#123;name=<span class="string">&#x27;冬天&#x27;</span>, decs=<span class="string">&#x27;寒冷&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><h4 id="4、valueOf"><a href="#4、valueOf" class="headerlink" title="4、valueOf()"></a>4、<strong>valueOf()</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the enum constant of the specified enum type with the</span></span><br><span class="line"><span class="comment"> * specified name.  The name must match exactly an identifier used</span></span><br><span class="line"><span class="comment"> * to declare an enum constant in this type.  (Extraneous whitespace</span></span><br><span class="line"><span class="comment"> * characters are not permitted.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that for a particular enum type &#123;<span class="doctag">@code</span> T&#125;, the</span></span><br><span class="line"><span class="comment"> * implicitly declared &#123;<span class="doctag">@code</span> public static T valueOf(String)&#125;</span></span><br><span class="line"><span class="comment"> * method on that enum may be used instead of this method to map</span></span><br><span class="line"><span class="comment"> * from a name to the corresponding enum constant.  All the</span></span><br><span class="line"><span class="comment"> * constants of an enum type can be obtained by calling the</span></span><br><span class="line"><span class="comment"> * implicit &#123;<span class="doctag">@code</span> public static T[] values()&#125; method of that</span></span><br><span class="line"><span class="comment"> * type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; The enum type whose constant is to be returned</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> enumType the &#123;<span class="doctag">@code</span> Class&#125; object of the enum type from which</span></span><br><span class="line"><span class="comment"> *      to return a constant</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name the name of the constant to return</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the enum constant of the specified enum type with the</span></span><br><span class="line"><span class="comment"> *      specified name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the specified enum type has</span></span><br><span class="line"><span class="comment"> *         no constant with the specified name, or the specified</span></span><br><span class="line"><span class="comment"> *         class object does not represent an enum type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> enumType&#125; or &#123;<span class="doctag">@code</span> name&#125;</span></span><br><span class="line"><span class="comment"> *         is null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;T&gt;&gt; T <span class="title function_">valueOf</span><span class="params">(Class&lt;T&gt; enumType,</span></span><br><span class="line"><span class="params">                                            String name)</span> &#123;</span><br><span class="line">    <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> enumType.enumConstantDirectory().get(name);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;Name is null&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">        <span class="string">&quot;No enum constant &quot;</span> + enumType.getCanonicalName() + <span class="string">&quot;.&quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、compareTo"><a href="#5、compareTo" class="headerlink" title="5、compareTo()"></a>5、<strong>compareTo()</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compares this enum with the specified object for order.  Returns a</span></span><br><span class="line"><span class="comment"> * negative integer, zero, or a positive integer as this object is less</span></span><br><span class="line"><span class="comment"> * than, equal to, or greater than the specified object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Enum constants are only comparable to other enum constants of the</span></span><br><span class="line"><span class="comment"> * same enum type.  The natural order implemented by this</span></span><br><span class="line"><span class="comment"> * method is the order in which the constants are declared.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(E o)</span> &#123;</span><br><span class="line">    Enum&lt;?&gt; other = (Enum&lt;?&gt;)o;</span><br><span class="line">    Enum&lt;E&gt; self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (self.getClass() != other.getClass() &amp;&amp; <span class="comment">// optimization</span></span><br><span class="line">        self.getDeclaringClass() != other.getDeclaringClass())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">    <span class="keyword">return</span> self.ordinal - other.ordinal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4、细节"><a href="#1-4、细节" class="headerlink" title="1.4、细节"></a>1.4、细节</h3><ul><li>使用enum就不能继承其他类（默认继承Enum）</li><li>enum类可以实现接口</li></ul><h2 id="二、注解"><a href="#二、注解" class="headerlink" title="二、注解"></a>二、注解</h2><p><strong>注解：</strong></p><ul><li>注解（Annotation）也被称为元数据（Metadata），用于修饰包、类、方法、属性、构造器、局部变量等数据信息</li><li>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</li><li>在javase中，注解的使用目的比较简单，如标记过时的功能忽略警告等，在javaEE中使用较多，配置应用程序的任何切面，代替旧版本复杂的代码和xml配置等</li></ul><p>@Override ：限定某个方法，是重写父类的方法，只能用于方法</p><p>@Deprecated: 用于表示某个方法以过时</p><p>@SuppressWarining:抑制编译器警告</p><h3 id="2-1、-Override"><a href="#2-1、-Override" class="headerlink" title="2.1、@Override"></a>2.1、@Override</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that a method declaration is intended to override a</span></span><br><span class="line"><span class="comment"> * method declaration in a supertype. If a method is annotated with</span></span><br><span class="line"><span class="comment"> * this annotation type compilers are required to generate an error</span></span><br><span class="line"><span class="comment"> * message unless at least one of the following conditions hold:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;&lt;li&gt;</span></span><br><span class="line"><span class="comment"> * The method does override or implement a method declared in a</span></span><br><span class="line"><span class="comment"> * supertype.</span></span><br><span class="line"><span class="comment"> * &lt;/li&gt;&lt;li&gt;</span></span><br><span class="line"><span class="comment"> * The method has a signature that is override-equivalent to that of</span></span><br><span class="line"><span class="comment"> * any public method declared in &#123;<span class="doctag">@linkplain</span> Object&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;/li&gt;&lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Peter von der Ah&amp;eacute;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Joshua Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.1.4 <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Target 修饰注解的注解 – 元注解</p><h3 id="2-2、-Deprecated"><a href="#2-2、-Deprecated" class="headerlink" title="2.2、@Deprecated"></a>2.2、@Deprecated</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A program element annotated &amp;#64;Deprecated is one that programmers</span></span><br><span class="line"><span class="comment"> * are discouraged from using, typically because it is dangerous,</span></span><br><span class="line"><span class="comment"> * or because a better alternative exists.  Compilers warn when a</span></span><br><span class="line"><span class="comment"> * deprecated program element is used or overridden in non-deprecated code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Neal Gafter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.3.6 <span class="doctag">@Deprecated</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>版本升级过渡使用</p><h3 id="2-3、-SuppressWarning"><a href="#2-3、-SuppressWarning" class="headerlink" title="2.3、@SuppressWarning"></a>2.3、@SuppressWarning</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that the named compiler warnings should be suppressed in the</span></span><br><span class="line"><span class="comment"> * annotated element (and in all program elements contained in the annotated</span></span><br><span class="line"><span class="comment"> * element).  Note that the set of warnings suppressed in a given element is</span></span><br><span class="line"><span class="comment"> * a superset of the warnings suppressed in all containing elements.  For</span></span><br><span class="line"><span class="comment"> * example, if you annotate a class to suppress one warning and annotate a</span></span><br><span class="line"><span class="comment"> * method to suppress another, both warnings will be suppressed in the method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As a matter of style, programmers should always use this annotation</span></span><br><span class="line"><span class="comment"> * on the most deeply nested element where it is effective.  If you want to</span></span><br><span class="line"><span class="comment"> * suppress a warning in a particular method, you should annotate that</span></span><br><span class="line"><span class="comment"> * method rather than its class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 4.8 Raw Types</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 4.12.2 Variables of Reference Type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 5.1.9 Unchecked Conversion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 5.5.2 Checked Casts and Unchecked Casts</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.3.5 <span class="doctag">@SuppressWarnings</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The set of warnings that are to be suppressed by the compiler in the</span></span><br><span class="line"><span class="comment">     * annotated element.  Duplicate names are permitted.  The second and</span></span><br><span class="line"><span class="comment">     * successive occurrences of a name are ignored.  The presence of</span></span><br><span class="line"><span class="comment">     * unrecognized warning names is &lt;i&gt;not&lt;/i&gt; an error: Compilers must</span></span><br><span class="line"><span class="comment">     * ignore any warning names they do not recognize.  They are, however,</span></span><br><span class="line"><span class="comment">     * free to emit a warning if an annotation contains an unrecognized</span></span><br><span class="line"><span class="comment">     * warning name.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; The string &#123;<span class="doctag">@code</span> &quot;unchecked&quot;&#125; is used to suppress</span></span><br><span class="line"><span class="comment">     * unchecked warnings. Compiler vendors should document the</span></span><br><span class="line"><span class="comment">     * additional warning names they support in conjunction with this</span></span><br><span class="line"><span class="comment">     * annotation type. They are encouraged to cooperate to ensure</span></span><br><span class="line"><span class="comment">     * that the same names work across multiple compilers.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the set of warnings to be suppressed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4、四种元注解"><a href="#2-4、四种元注解" class="headerlink" title="2.4、四种元注解"></a>2.4、四种元注解</h3><h4 id="2-4-1、Retention"><a href="#2-4-1、Retention" class="headerlink" title="2.4.1、Retention"></a>2.4.1、Retention</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates how long annotations with the annotated type are to</span></span><br><span class="line"><span class="comment"> * be retained.  If no Retention annotation is present on</span></span><br><span class="line"><span class="comment"> * an annotation type declaration, the retention policy defaults to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> RetentionPolicy.CLASS&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A Retention meta-annotation has effect only if the</span></span><br><span class="line"><span class="comment"> * meta-annotated type is used directly for annotation.  It has no</span></span><br><span class="line"><span class="comment"> * effect if the meta-annotated type is used as a member type in</span></span><br><span class="line"><span class="comment"> * another annotation type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Joshua Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.3.2 <span class="doctag">@Retention</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the retention policy.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the retention policy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RetentionPolicy <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation retention policy.  The constants of this enumerated type</span></span><br><span class="line"><span class="comment"> * describe the various policies for retaining annotations.  They are used</span></span><br><span class="line"><span class="comment"> * in conjunction with the &#123;<span class="doctag">@link</span> Retention&#125; meta-annotation type to specify</span></span><br><span class="line"><span class="comment"> * how long annotations are to be retained.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Joshua Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RetentionPolicy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be discarded by the compiler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SOURCE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler</span></span><br><span class="line"><span class="comment">     * but need not be retained by the VM at run time.  This is the default</span></span><br><span class="line"><span class="comment">     * behavior.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLASS,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler and</span></span><br><span class="line"><span class="comment">     * retained by the VM at run time, so they may be read reflectively.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2、Target"><a href="#2-4-2、Target" class="headerlink" title="2.4.2、Target"></a>2.4.2、Target</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates the contexts in which an annotation type is applicable. The</span></span><br><span class="line"><span class="comment"> * declaration contexts and type contexts in which an annotation type may be</span></span><br><span class="line"><span class="comment"> * applicable are specified in JLS 9.6.4.1, and denoted in source code by enum</span></span><br><span class="line"><span class="comment"> * constants of &#123;<span class="doctag">@link</span> ElementType java.lang.annotation.ElementType&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If an &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>&#125; meta-annotation is not present on an annotation type</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> T&#125; , then an annotation of type &#123;<span class="doctag">@code</span> T&#125; may be written as a</span></span><br><span class="line"><span class="comment"> * modifier for any declaration except a type parameter declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If an &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>&#125; meta-annotation is present, the compiler will enforce</span></span><br><span class="line"><span class="comment"> * the usage restrictions indicated by &#123;<span class="doctag">@code</span> ElementType&#125;</span></span><br><span class="line"><span class="comment"> * enum constants, in line with JLS 9.7.4.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For example, this &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>&#125; meta-annotation indicates that the</span></span><br><span class="line"><span class="comment"> * declared type is itself a meta-annotation type.  It can only be used on</span></span><br><span class="line"><span class="comment"> * annotation type declarations:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *    &amp;#064;Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="comment"> *    public &amp;#064;interface MetaAnnotationType &#123;</span></span><br><span class="line"><span class="comment"> *        ...</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>&#125; meta-annotation indicates that the declared type is</span></span><br><span class="line"><span class="comment"> * intended solely for use as a member type in complex annotation type</span></span><br><span class="line"><span class="comment"> * declarations.  It cannot be used to annotate anything directly:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *    &amp;#064;Target(&#123;&#125;)</span></span><br><span class="line"><span class="comment"> *    public &amp;#064;interface MemberType &#123;</span></span><br><span class="line"><span class="comment"> *        ...</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;It is a compile-time error for a single &#123;<span class="doctag">@code</span> ElementType&#125; constant to</span></span><br><span class="line"><span class="comment"> * appear more than once in an &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>&#125; annotation.  For example, the</span></span><br><span class="line"><span class="comment"> * following &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>&#125; meta-annotation is illegal:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *    &amp;#064;Target(&#123;ElementType.FIELD, ElementType.METHOD, ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="comment"> *    public &amp;#064;interface Bogus &#123;</span></span><br><span class="line"><span class="comment"> *        ...</span></span><br><span class="line"><span class="comment"> *    &#125;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.4.1 <span class="doctag">@Target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.7.4 Where Annotations May Appear</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The constants of this enumerated type provide a simple classification of the</span></span><br><span class="line"><span class="comment"> * syntactic locations where annotations may appear in a Java program. These</span></span><br><span class="line"><span class="comment"> * constants are used in &#123;<span class="doctag">@link</span> Target java.lang.annotation.Target&#125;</span></span><br><span class="line"><span class="comment"> * meta-annotations to specify where it is legal to write annotations of a</span></span><br><span class="line"><span class="comment"> * given type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The syntactic locations where annotations may appear are split into</span></span><br><span class="line"><span class="comment"> * &lt;em&gt;declaration contexts&lt;/em&gt; , where annotations apply to declarations, and</span></span><br><span class="line"><span class="comment"> * &lt;em&gt;type contexts&lt;/em&gt; , where annotations apply to types used in</span></span><br><span class="line"><span class="comment"> * declarations and expressions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The constants &#123;<span class="doctag">@link</span> #ANNOTATION_TYPE&#125; , &#123;<span class="doctag">@link</span> #CONSTRUCTOR&#125; , &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * #FIELD&#125; , &#123;<span class="doctag">@link</span> #LOCAL_VARIABLE&#125; , &#123;<span class="doctag">@link</span> #METHOD&#125; , &#123;<span class="doctag">@link</span> #PACKAGE&#125; ,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #PARAMETER&#125; , &#123;<span class="doctag">@link</span> #TYPE&#125; , and &#123;<span class="doctag">@link</span> #TYPE_PARAMETER&#125; correspond</span></span><br><span class="line"><span class="comment"> * to the declaration contexts in JLS 9.6.4.1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For example, an annotation whose type is meta-annotated with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>(ElementType.FIELD)&#125; may only be written as a modifier for a</span></span><br><span class="line"><span class="comment"> * field declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The constant &#123;<span class="doctag">@link</span> #TYPE_USE&#125; corresponds to the 15 type contexts in JLS</span></span><br><span class="line"><span class="comment"> * 4.11, as well as to two declaration contexts: type declarations (including</span></span><br><span class="line"><span class="comment"> * annotation type declarations) and type parameter declarations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For example, an annotation whose type is meta-annotated with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>(ElementType.TYPE_USE)&#125; may be written on the type of a field</span></span><br><span class="line"><span class="comment"> * (or within the type of the field, if it is a nested, parameterized, or array</span></span><br><span class="line"><span class="comment"> * type), and may also appear as a modifier for, say, a class declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The &#123;<span class="doctag">@code</span> TYPE_USE&#125; constant includes type declarations and type</span></span><br><span class="line"><span class="comment"> * parameter declarations as a convenience for designers of type checkers which</span></span><br><span class="line"><span class="comment"> * give semantics to annotation types. For example, if the annotation type</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> NonNull&#125; is meta-annotated with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Target</span>(ElementType.TYPE_USE)&#125;, then &#123;<span class="doctag">@code</span> <span class="doctag">@NonNull</span>&#125;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> class C &#123;...&#125;&#125; could be treated by a type checker as indicating that</span></span><br><span class="line"><span class="comment"> * all variables of class &#123;<span class="doctag">@code</span> C&#125; are non-null, while still allowing</span></span><br><span class="line"><span class="comment"> * variables of other classes to be non-null or not non-null based on whether</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@NonNull</span>&#125; appears at the variable&#x27;s declaration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Joshua Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.4.1 <span class="doctag">@Target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 4.1 The Kinds of Types and Values</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ElementType</span> &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-3、Documented"><a href="#2-4-3、Documented" class="headerlink" title="2.4.3、Documented"></a>2.4.3、Documented</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that annotations with a type are to be documented by javadoc</span></span><br><span class="line"><span class="comment"> * and similar tools by default.  This type should be used to annotate the</span></span><br><span class="line"><span class="comment"> * declarations of types whose annotations affect the use of annotated</span></span><br><span class="line"><span class="comment"> * elements by their clients.  If a type declaration is annotated with</span></span><br><span class="line"><span class="comment"> * Documented, its annotations become part of the public API</span></span><br><span class="line"><span class="comment"> * of the annotated elements.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joshua Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Documented &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-4、Inherited"><a href="#2-4-4、Inherited" class="headerlink" title="2.4.4、Inherited"></a>2.4.4、Inherited</h4><p>实际中，使用较少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates that an annotation type is automatically inherited.  If</span></span><br><span class="line"><span class="comment"> * an Inherited meta-annotation is present on an annotation type</span></span><br><span class="line"><span class="comment"> * declaration, and the user queries the annotation type on a class</span></span><br><span class="line"><span class="comment"> * declaration, and the class declaration has no annotation for this type,</span></span><br><span class="line"><span class="comment"> * then the class&#x27;s superclass will automatically be queried for the</span></span><br><span class="line"><span class="comment"> * annotation type.  This process will be repeated until an annotation for this</span></span><br><span class="line"><span class="comment"> * type is found, or the top of the class hierarchy (Object)</span></span><br><span class="line"><span class="comment"> * is reached.  If no superclass has an annotation for this type, then</span></span><br><span class="line"><span class="comment"> * the query will indicate that the class in question has no such annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that this meta-annotation type has no effect if the annotated</span></span><br><span class="line"><span class="comment"> * type is used to annotate anything other than a class.  Note also</span></span><br><span class="line"><span class="comment"> * that this meta-annotation only causes annotations to be inherited</span></span><br><span class="line"><span class="comment"> * from superclasses; annotations on implemented interfaces have no</span></span><br><span class="line"><span class="comment"> * effect.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Joshua Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.6.3.3 <span class="doctag">@Inherited</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inherited &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="day06"><a href="#day06" class="headerlink" title="day06"></a>day06</h1><blockquote><p>摘要</p><ul><li>异常</li><li>常用类（一）</li></ul></blockquote><!--more--><h2 id="一、Exception"><a href="#一、Exception" class="headerlink" title="一、Exception"></a>一、Exception</h2><p>引出：不应该出现不至于致命的错误就导致整个系统崩溃</p><p>java设计者提供异常处理机制解决该问题</p><h3 id="1-1、异常"><a href="#1-1、异常" class="headerlink" title="1.1、异常"></a>1.1、异常</h3><p>异常可分为</p><ol><li>Error：jvm虚拟机无法解决的严重问题，如栈溢出</li><li>Exception：可以使用针对性的代码进行处理，Exception分为<strong>运行时异常</strong>和<strong>编译时异常</strong></li></ol><h3 id="1-2、异常体系图"><a href="#1-2、异常体系图" class="headerlink" title="1.2、异常体系图"></a>1.2、异常体系图</h3><p><img src="https://i.loli.net/2021/04/19/4KId5hZje3AbyOU.png"></p><ul><li>编译时异常编译器检测出，必须处理负责无法通过编译</li></ul><h3 id="1-3、常见的运行时异常"><a href="#1-3、常见的运行时异常" class="headerlink" title="1.3、常见的运行时异常"></a>1.3、常见的运行时异常</h3><h4 id="1-3-1、NullPointerException"><a href="#1-3-1、NullPointerException" class="headerlink" title="1.3.1、NullPointerException"></a>1.3.1、NullPointerException</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown when an application attempts to use &#123;<span class="doctag">@code</span> null&#125; in a</span></span><br><span class="line"><span class="comment"> * case where an object is required. These include:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Calling the instance method of a &#123;<span class="doctag">@code</span> null&#125; object.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Accessing or modifying the field of a &#123;<span class="doctag">@code</span> null&#125; object.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Taking the length of &#123;<span class="doctag">@code</span> null&#125; as if it were an array.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Accessing or modifying the slots of &#123;<span class="doctag">@code</span> null&#125; as if it</span></span><br><span class="line"><span class="comment"> *     were an array.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Throwing &#123;<span class="doctag">@code</span> null&#125; as if it were a &#123;<span class="doctag">@code</span> Throwable&#125;</span></span><br><span class="line"><span class="comment"> *     value.</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Applications should throw instances of this class to indicate</span></span><br><span class="line"><span class="comment"> * other illegal uses of the &#123;<span class="doctag">@code</span> null&#125; object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> NullPointerException&#125; objects may be constructed by the</span></span><br><span class="line"><span class="comment"> * virtual machine as if &#123;<span class="doctag">@linkplain</span> Throwable#Throwable(String,</span></span><br><span class="line"><span class="comment"> * Throwable, boolean, boolean) suppression were disabled and/or the</span></span><br><span class="line"><span class="comment"> * stack trace was not writable&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NullPointerException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">5162710183389028792L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a &#123;<span class="doctag">@code</span> NullPointerException&#125; with no detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NullPointerException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a &#123;<span class="doctag">@code</span> NullPointerException&#125; with the specified</span></span><br><span class="line"><span class="comment">     * detail message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   s   the detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NullPointerException</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2、ArithmeticException"><a href="#1-3-2、ArithmeticException" class="headerlink" title="1.3.2、ArithmeticException"></a>1.3.2、ArithmeticException</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown when an exceptional arithmetic condition has occurred. For</span></span><br><span class="line"><span class="comment"> * example, an integer &quot;divide by zero&quot; throws an</span></span><br><span class="line"><span class="comment"> * instance of this class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> ArithmeticException&#125; objects may be constructed by the</span></span><br><span class="line"><span class="comment"> * virtual machine as if &#123;<span class="doctag">@linkplain</span> Throwable#Throwable(String,</span></span><br><span class="line"><span class="comment"> * Throwable, boolean, boolean) suppression were disabled and/or the</span></span><br><span class="line"><span class="comment"> * stack trace was not writable&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2256477558314496007L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an &#123;<span class="doctag">@code</span> ArithmeticException&#125; with no detail</span></span><br><span class="line"><span class="comment">     * message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArithmeticException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an &#123;<span class="doctag">@code</span> ArithmeticException&#125; with the specified</span></span><br><span class="line"><span class="comment">     * detail message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   s   the detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArithmeticException</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-3、ArrayIndexOutOfBoundsException"><a href="#1-3-3、ArrayIndexOutOfBoundsException" class="headerlink" title="1.3.3、ArrayIndexOutOfBoundsException"></a>1.3.3、ArrayIndexOutOfBoundsException</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown to indicate that an array has been accessed with an</span></span><br><span class="line"><span class="comment"> * illegal index. The index is either negative or greater than or</span></span><br><span class="line"><span class="comment"> * equal to the size of the array.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayIndexOutOfBoundsException</span> <span class="keyword">extends</span> <span class="title class_">IndexOutOfBoundsException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5116101128118950844L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; with no</span></span><br><span class="line"><span class="comment">     * detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayIndexOutOfBoundsException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * class with an argument indicating the illegal index.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   index   the illegal index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayIndexOutOfBoundsException</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;Array index out of range: &quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; class</span></span><br><span class="line"><span class="comment">     * with the specified detail message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   s   the detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayIndexOutOfBoundsException</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-4、ClassCastException"><a href="#1-3-4、ClassCastException" class="headerlink" title="1.3.4、ClassCastException"></a>1.3.4、ClassCastException</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown to indicate that the code has attempted to cast an object</span></span><br><span class="line"><span class="comment"> * to a subclass of which it is not an instance. For example, the</span></span><br><span class="line"><span class="comment"> * following code generates a &lt;code&gt;ClassCastException&lt;/code&gt;:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     Object x = new Integer(0);</span></span><br><span class="line"><span class="comment"> *     System.out.println((String)x);</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassCastException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">9223365651070458532L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a &lt;code&gt;ClassCastException&lt;/code&gt; with no detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassCastException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a &lt;code&gt;ClassCastException&lt;/code&gt; with the specified</span></span><br><span class="line"><span class="comment">     * detail message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   s   the detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassCastException</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-5NumberFormatException"><a href="#1-3-5NumberFormatException" class="headerlink" title="1.3.5NumberFormatException"></a>1.3.5NumberFormatException</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown to indicate that the application has attempted to convert</span></span><br><span class="line"><span class="comment"> * a string to one of the numeric types, but that the string does not</span></span><br><span class="line"><span class="comment"> * have the appropriate format.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.Integer#parseInt(String)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberFormatException</span> <span class="keyword">extends</span> <span class="title class_">IllegalArgumentException</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2848938806368998894L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a &lt;code&gt;NumberFormatException&lt;/code&gt; with no detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumberFormatException</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a &lt;code&gt;NumberFormatException&lt;/code&gt; with the</span></span><br><span class="line"><span class="comment">     * specified detail message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   s   the detail message.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumberFormatException</span> <span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span> (s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Factory method for making a &lt;code&gt;NumberFormatException&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * given the specified input which caused the error.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   s   the input causing the error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> NumberFormatException <span class="title function_">forInputString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NumberFormatException</span>(<span class="string">&quot;For input string: \&quot;&quot;</span> + s + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4、常见的编译异常"><a href="#1-4、常见的编译异常" class="headerlink" title="1.4、常见的编译异常"></a>1.4、常见的编译异常</h3><p>数据库、文件、IO等操作时的异常</p><h3 id="1-5、异常处理机制"><a href="#1-5、异常处理机制" class="headerlink" title="1.5、异常处理机制"></a>1.5、异常处理机制</h3><p>try - catch</p><p>throws      一直抛到jvm jvm直接输出异常，中断程序</p><h3 id="1-6、try-catch"><a href="#1-6、try-catch" class="headerlink" title="1.6、try-catch"></a>1.6、try-catch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(f1()); <span class="comment">// 4</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            a.length();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ++i; <span class="comment">//会执行但是不返回</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7、throws"><a href="#1-7、throws" class="headerlink" title="1.7、throws"></a>1.7、throws</h3><p>1）如果一个方法可能产生异常但是不知道如何处理，方法可以抛出异常交给调用者处理</p><h3 id="1-8、自定义异常"><a href="#1-8、自定义异常" class="headerlink" title="1.8、自定义异常"></a>1.8、自定义异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">150</span>;</span><br><span class="line">        <span class="keyword">if</span> (age &lt;= <span class="number">18</span> || age &gt;= <span class="number">120</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span>(<span class="string">&quot;年龄错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一般基础RunTimeException</span></span><br><span class="line"><span class="comment">// 可以使用默认的处理机制</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、常用类（一）"><a href="#二、常用类（一）" class="headerlink" title="二、常用类（一）"></a>二、常用类（一）</h2><h3 id="1、包装类"><a href="#1、包装类" class="headerlink" title="1、包装类"></a>1、包装类</h3><p>八中基本类型对应的引用类型</p><p><img src="https://i.loli.net/2021/04/20/ZPrApSQLHUyDf65.png"></p><p><img src="https://i.loli.net/2021/04/20/hL8ab6wxMZ9nszy.png"></p><p><img src="https://i.loli.net/2021/04/20/dWK6haOQIvsigjq.png"></p><p><strong>基本数据类型 和 包装类的转换</strong></p><p>1）jdk5 前的手动装箱和拆箱方式</p><p>2）jdk5以后自动装箱和拆箱</p><p><strong>练习</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">true</span> ? <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>) : <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);</span><br><span class="line">System.out.println(obj); <span class="comment">//1 三元运算符会提升精度</span></span><br></pre></td></tr></table></figure><p><strong>包装类和String类转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a string representation of the first argument in the</span></span><br><span class="line"><span class="comment"> * radix specified by the second argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If the radix is smaller than &#123;<span class="doctag">@code</span> Character.MIN_RADIX&#125;</span></span><br><span class="line"><span class="comment"> * or larger than &#123;<span class="doctag">@code</span> Character.MAX_RADIX&#125;, then the radix</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> 10&#125; is used instead.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If the first argument is negative, the first element of the</span></span><br><span class="line"><span class="comment"> * result is the ASCII minus character &#123;<span class="doctag">@code</span> &#x27;-&#x27;&#125;</span></span><br><span class="line"><span class="comment"> * (&#123;<span class="doctag">@code</span> &#x27;\u005Cu002D&#x27;&#125;). If the first argument is not</span></span><br><span class="line"><span class="comment"> * negative, no sign character appears in the result.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The remaining characters of the result represent the magnitude</span></span><br><span class="line"><span class="comment"> * of the first argument. If the magnitude is zero, it is</span></span><br><span class="line"><span class="comment"> * represented by a single zero character &#123;<span class="doctag">@code</span> &#x27;0&#x27;&#125;</span></span><br><span class="line"><span class="comment"> * (&#123;<span class="doctag">@code</span> &#x27;\u005Cu0030&#x27;&#125;); otherwise, the first character of</span></span><br><span class="line"><span class="comment"> * the representation of the magnitude will not be the zero</span></span><br><span class="line"><span class="comment"> * character.  The following ASCII characters are used as digits:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;</span></span><br><span class="line"><span class="comment"> *   &#123;<span class="doctag">@code</span> 0123456789abcdefghijklmnopqrstuvwxyz&#125;</span></span><br><span class="line"><span class="comment"> * &lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * These are &#123;<span class="doctag">@code</span> &#x27;\u005Cu0030&#x27;&#125; through</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> &#x27;\u005Cu0039&#x27;&#125; and &#123;<span class="doctag">@code</span> &#x27;\u005Cu0061&#x27;&#125; through</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> &#x27;\u005Cu007A&#x27;&#125;. If &#123;<span class="doctag">@code</span> radix&#125; is</span></span><br><span class="line"><span class="comment"> * &lt;var&gt;N&lt;/var&gt;, then the first &lt;var&gt;N&lt;/var&gt; of these characters</span></span><br><span class="line"><span class="comment"> * are used as radix-&lt;var&gt;N&lt;/var&gt; digits in the order shown. Thus,</span></span><br><span class="line"><span class="comment"> * the digits for hexadecimal (radix 16) are</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> 0123456789abcdef&#125;. If uppercase letters are</span></span><br><span class="line"><span class="comment"> * desired, the &#123;<span class="doctag">@link</span> java.lang.String#toUpperCase()&#125; method may</span></span><br><span class="line"><span class="comment"> * be called on the result:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;</span></span><br><span class="line"><span class="comment"> *  &#123;<span class="doctag">@code</span> Integer.toString(n, 16).toUpperCase()&#125;</span></span><br><span class="line"><span class="comment"> * &lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   i       an integer to be converted to a string.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   radix   the radix to use in the string representation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a string representation of the argument in the specified radix.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.Character#MAX_RADIX</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.Character#MIN_RADIX</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> radix)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (radix &lt; Character.MIN_RADIX || radix &gt; Character.MAX_RADIX)</span><br><span class="line">        radix = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Use the faster version */</span></span><br><span class="line">    <span class="keyword">if</span> (radix == <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> toString(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[] = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">33</span>];</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">negative</span> <span class="operator">=</span> (i &lt; <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">charPos</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!negative) &#123;</span><br><span class="line">        i = -i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= -radix) &#123;</span><br><span class="line">        buf[charPos--] = digits[-(i % radix)];</span><br><span class="line">        i = i / radix;</span><br><span class="line">    &#125;</span><br><span class="line">    buf[charPos] = digits[-i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (negative) &#123;</span><br><span class="line">        buf[--charPos] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf, charPos, (<span class="number">33</span> - charPos));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parses the string argument as a signed decimal integer. The</span></span><br><span class="line"><span class="comment"> * characters in the string must all be decimal digits, except</span></span><br><span class="line"><span class="comment"> * that the first character may be an ASCII minus sign &#123;<span class="doctag">@code</span> &#x27;-&#x27;&#125;</span></span><br><span class="line"><span class="comment"> * (&#123;<span class="doctag">@code</span> &#x27;\u005Cu002D&#x27;&#125;) to indicate a negative value or an</span></span><br><span class="line"><span class="comment"> * ASCII plus sign &#123;<span class="doctag">@code</span> &#x27;+&#x27;&#125; (&#123;<span class="doctag">@code</span> &#x27;\u005Cu002B&#x27;&#125;) to</span></span><br><span class="line"><span class="comment"> * indicate a positive value. The resulting integer value is</span></span><br><span class="line"><span class="comment"> * returned, exactly as if the argument and the radix 10 were</span></span><br><span class="line"><span class="comment"> * given as arguments to the &#123;<span class="doctag">@link</span> #parseInt(java.lang.String,</span></span><br><span class="line"><span class="comment"> * int)&#125; method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s    a &#123;<span class="doctag">@code</span> String&#125; containing the &#123;<span class="doctag">@code</span> int&#125;</span></span><br><span class="line"><span class="comment"> *             representation to be parsed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>     the integer value represented by the argument in decimal.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  NumberFormatException  if the string does not contain a</span></span><br><span class="line"><span class="comment"> *               parsable integer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">parseInt</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException &#123;</span><br><span class="line">    <span class="keyword">return</span> parseInt(s,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>常用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A constant holding the minimum value an &#123;<span class="doctag">@code</span> int&#125; can</span></span><br><span class="line"><span class="comment"> * have, -2&lt;sup&gt;31&lt;/sup&gt;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Native</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>   <span class="variable">MIN_VALUE</span> <span class="operator">=</span> <span class="number">0x80000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A constant holding the maximum value an &#123;<span class="doctag">@code</span> int&#125; can</span></span><br><span class="line"><span class="comment"> * have, 2&lt;sup&gt;31&lt;/sup&gt;-1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Native</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>   <span class="variable">MAX_VALUE</span> <span class="operator">=</span> <span class="number">0x7fffffff</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isDigit</span><span class="params">(<span class="type">int</span> codePoint)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getType(codePoint) == Character.DECIMAL_DIGIT_NUMBER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isLetter</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> isLetter((<span class="type">int</span>)ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用的时候查就行</p><p><strong>integer面试题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(n1 == n2);</span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">System.out.println(n3 == n4);</span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">n5</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n6</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(n5 == n6);</span><br></pre></td></tr></table></figure><p><strong>追源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) <span class="comment">// -128 - 127</span></span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cache to support the object identity semantics of autoboxing for values between</span></span><br><span class="line"><span class="comment"> * -128 and 127 (inclusive) as required by JLS.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The cache is initialized on first usage.  The size of the cache</span></span><br><span class="line"><span class="comment"> * may be controlled by the &#123;<span class="doctag">@code</span> -XX:AutoBoxCacheMax=&lt;size&gt;&#125; option.</span></span><br><span class="line"><span class="comment"> * During VM initialization, java.lang.Integer.IntegerCache.high property</span></span><br><span class="line"><span class="comment"> * may be set and saved in the private system properties in the</span></span><br><span class="line"><span class="comment"> * sun.misc.VM class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、String"><a href="#2、String" class="headerlink" title="2、String"></a>2、String</h3><p>底层还是char数组（真正存放字符串的地方）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[]; <span class="comment">//final不能修改</span></span><br></pre></td></tr></table></figure><h4 id="1、常用构造器"><a href="#1、常用构造器" class="headerlink" title="1、常用构造器"></a>1、常用构造器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="string">&quot;&quot;</span>.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(String original)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = original.value;</span><br><span class="line">    <span class="built_in">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(<span class="type">char</span> value[])</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(<span class="type">char</span> value[], <span class="type">int</span> offset, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (offset &lt;= value.length) &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = <span class="string">&quot;&quot;</span>.value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt; value.length - count) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(offset + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(<span class="type">byte</span> bytes[])</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、创建对象的两种方式"><a href="#2、创建对象的两种方式" class="headerlink" title="2、创建对象的两种方式"></a>2、创建对象的两种方式</h4><ol><li>String str &#x3D; “hsp”</li><li>String str &#x3D; new String(“hsp”)</li></ol><p>方式1：先从常量池查看是否有“hsp”的数据空间，如果有，直接指向；如果没有则重新创建，然后指向</p><p>方法2：现在堆里创建对象，维护value属性，再让value指向常量池地址（没有则创建）</p><p><img src="https://i.loli.net/2021/04/21/IYQ81dgjp9xrVOe.png"></p><p><strong>练习：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(str1.equals(str2));</span><br><span class="line">System.out.println(str1 == str2);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">System.out.println(a.equals(b));</span><br><span class="line">System.out.println(a == b);</span><br><span class="line">System.out.println(a == b.intern()); <span class="comment">//T</span></span><br><span class="line">System.out.println(b == b.intern()); <span class="comment">//F</span></span><br></pre></td></tr></table></figure><p><strong>intern()方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a canonical representation for the string object.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * A pool of strings, initially empty, is maintained privately by the</span></span><br><span class="line"><span class="comment"> * class &#123;<span class="doctag">@code</span> String&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * When the intern method is invoked, if the pool already contains a</span></span><br><span class="line"><span class="comment"> * string equal to this &#123;<span class="doctag">@code</span> String&#125; object as determined by</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> #equals(Object)&#125; method, then the string from the pool is</span></span><br><span class="line"><span class="comment"> * returned. Otherwise, this &#123;<span class="doctag">@code</span> String&#125; object is added to the</span></span><br><span class="line"><span class="comment"> * pool and a reference to this &#123;<span class="doctag">@code</span> String&#125; object is returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * It follows that for any two strings &#123;<span class="doctag">@code</span> s&#125; and &#123;<span class="doctag">@code</span> t&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> s.intern() == t.intern()&#125; is &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment"> * if and only if &#123;<span class="doctag">@code</span> s.equals(t)&#125; is &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * All literal strings and string-valued constant expressions are</span></span><br><span class="line"><span class="comment"> * interned. String literals are defined in section 3.10.5 of the</span></span><br><span class="line"><span class="comment"> * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a string that has the same contents as this string, but is</span></span><br><span class="line"><span class="comment"> *          guaranteed to be from a pool of unique strings.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">intern</span><span class="params">()</span>; <span class="comment">//说了一大堆，其实就是返回常量池的地址</span></span><br></pre></td></tr></table></figure><h4 id="3、对象特性"><a href="#3、对象特性" class="headerlink" title="3、对象特性"></a>3、对象特性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">s1 = <span class="string">&quot;haha&quot;</span></span><br></pre></td></tr></table></figure><p>创建两个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure><p>编译器底层优化，直接 “helloabc” 一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> b + c;</span><br></pre></td></tr></table></figure><p>创建<strong>三个对象</strong></p><p>追源码</p><p><img src="https://i.loli.net/2021/04/21/k2O6mTl8YrsQuwz.png"></p><p><img src="https://i.loli.net/2021/04/21/ixdrCRhAjos3BVz.png" alt="image-20210421175958265"></p><p><img src="https://i.loli.net/2021/04/21/kdMh479cGmWz2qR.png"></p><p><img src="https://i.loli.net/2021/04/21/21suWXBg4mw9Oyp.png"></p><p>底层执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">stringBuilder.append(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">stringBuilder.append(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> stringBuilder.toString();</span><br></pre></td></tr></table></figure><p><strong>String str &#x3D; “abc” + “hello” 常量相加，看池</strong></p><p><strong>String str &#x3D; a + b 对象相加，看堆</strong></p><p><strong>练习：</strong></p><p>判断输出结果，画出内存布局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        test.change(test.str,test.ch);</span><br><span class="line">        System.out.println(test.str);</span><br><span class="line">        System.out.println(test.ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hsp&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">char</span>[] ch = &#123;<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String str,<span class="type">char</span> ch[])</span> &#123;</span><br><span class="line">        str = <span class="string">&quot;java&quot;</span>;</span><br><span class="line">        ch[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/21/Jw4GZqOF8su6SWN.png"></p><h4 id="4、String类常用方法"><a href="#4、String类常用方法" class="headerlink" title="4、String类常用方法"></a>4、String类常用方法</h4><p>String类用来保存字符串常量，每次更新都要重新开辟空间，<strong>效率较低</strong>；java开发者设计了<strong>StringBuilder</strong>和<strong>StringBuffer</strong>来增加效率</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    str += <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125; <span class="comment">//会在常量池不断开辟100个空间并不断修改引用</span></span><br></pre></td></tr></table></figure><h5 id="1、equals"><a href="#1、equals" class="headerlink" title="1、equals"></a>1、equals</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compares this string to the specified object.  The result is &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * true&#125; if and only if the argument is not &#123;<span class="doctag">@code</span> null&#125; and is a &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * String&#125; object that represents the same sequence of characters as this</span></span><br><span class="line"><span class="comment"> * object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  anObject</span></span><br><span class="line"><span class="comment"> *         The object to compare this &#123;<span class="doctag">@code</span> String&#125; against</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the given object represents a &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment"> *          equivalent to this string, &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  #compareTo(String)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  #equalsIgnoreCase(String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="type">char</span> v1[] = value;</span><br><span class="line">            <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、equalsIgnoreCase"><a href="#2、equalsIgnoreCase" class="headerlink" title="2、equalsIgnoreCase"></a>2、equalsIgnoreCase</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compares this &#123;<span class="doctag">@code</span> String&#125; to another &#123;<span class="doctag">@code</span> String&#125;, ignoring case</span></span><br><span class="line"><span class="comment"> * considerations.  Two strings are considered equal ignoring case if they</span></span><br><span class="line"><span class="comment"> * are of the same length and corresponding characters in the two strings</span></span><br><span class="line"><span class="comment"> * are equal ignoring case.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Two characters &#123;<span class="doctag">@code</span> c1&#125; and &#123;<span class="doctag">@code</span> c2&#125; are considered the same</span></span><br><span class="line"><span class="comment"> * ignoring case if at least one of the following is true:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt; The two characters are the same (as compared by the</span></span><br><span class="line"><span class="comment"> *        &#123;<span class="doctag">@code</span> ==&#125; operator)</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt; Applying the method &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> *        java.lang.Character#toUpperCase(char)&#125; to each character</span></span><br><span class="line"><span class="comment"> *        produces the same result</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt; Applying the method &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> *        java.lang.Character#toLowerCase(char)&#125; to each character</span></span><br><span class="line"><span class="comment"> *        produces the same result</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  anotherString</span></span><br><span class="line"><span class="comment"> *         The &#123;<span class="doctag">@code</span> String&#125; to compare this &#123;<span class="doctag">@code</span> String&#125; against</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the argument is not &#123;<span class="doctag">@code</span> null&#125; and it</span></span><br><span class="line"><span class="comment"> *          represents an equivalent &#123;<span class="doctag">@code</span> String&#125; ignoring case; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> *          false&#125; otherwise</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  #equals(Object)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equalsIgnoreCase</span><span class="params">(String anotherString)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == anotherString) ? <span class="literal">true</span></span><br><span class="line">            : (anotherString != <span class="literal">null</span>)</span><br><span class="line">            &amp;&amp; (anotherString.value.length == value.length)</span><br><span class="line">            &amp;&amp; regionMatches(<span class="literal">true</span>, <span class="number">0</span>, anotherString, <span class="number">0</span>, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、length"><a href="#3、length" class="headerlink" title="3、length"></a>3、length</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the length of this string.</span></span><br><span class="line"><span class="comment"> * The length is equal to the number of &lt;a href=&quot;Character.html#unicode&quot;&gt;Unicode</span></span><br><span class="line"><span class="comment"> * code units&lt;/a&gt; in the string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  the length of the sequence of characters represented by this</span></span><br><span class="line"><span class="comment"> *          object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、indexOf"><a href="#4、indexOf" class="headerlink" title="4、indexOf"></a>4、indexOf</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the index within this string of the first occurrence of the</span></span><br><span class="line"><span class="comment"> * specified character, starting the search at the specified index.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If a character with value &#123;<span class="doctag">@code</span> ch&#125; occurs in the</span></span><br><span class="line"><span class="comment"> * character sequence represented by this &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment"> * object at an index no smaller than &#123;<span class="doctag">@code</span> fromIndex&#125;, then</span></span><br><span class="line"><span class="comment"> * the index of the first such occurrence is returned. For values</span></span><br><span class="line"><span class="comment"> * of &#123;<span class="doctag">@code</span> ch&#125; in the range from 0 to 0xFFFF (inclusive),</span></span><br><span class="line"><span class="comment"> * this is the smallest value &lt;i&gt;k&lt;/i&gt; such that:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * (this.charAt(&lt;i&gt;k&lt;/i&gt;) == ch) &#123;<span class="doctag">@code</span> &amp;&amp;&#125; (&lt;i&gt;k&lt;/i&gt; &amp;gt;= fromIndex)</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * is true. For other values of &#123;<span class="doctag">@code</span> ch&#125;, it is the</span></span><br><span class="line"><span class="comment"> * smallest value &lt;i&gt;k&lt;/i&gt; such that:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * (this.codePointAt(&lt;i&gt;k&lt;/i&gt;) == ch) &#123;<span class="doctag">@code</span> &amp;&amp;&#125; (&lt;i&gt;k&lt;/i&gt; &amp;gt;= fromIndex)</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * is true. In either case, if no such character occurs in this</span></span><br><span class="line"><span class="comment"> * string at or after position &#123;<span class="doctag">@code</span> fromIndex&#125;, then</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> -1&#125; is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * There is no restriction on the value of &#123;<span class="doctag">@code</span> fromIndex&#125;. If it</span></span><br><span class="line"><span class="comment"> * is negative, it has the same effect as if it were zero: this entire</span></span><br><span class="line"><span class="comment"> * string may be searched. If it is greater than the length of this</span></span><br><span class="line"><span class="comment"> * string, it has the same effect as if it were equal to the length of</span></span><br><span class="line"><span class="comment"> * this string: &#123;<span class="doctag">@code</span> -1&#125; is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;All indices are specified in &#123;<span class="doctag">@code</span> char&#125; values</span></span><br><span class="line"><span class="comment"> * (Unicode code units).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   ch          a character (Unicode code point).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   fromIndex   the index to start the search from.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  the index of the first occurrence of the character in the</span></span><br><span class="line"><span class="comment"> *          character sequence represented by this object that is greater</span></span><br><span class="line"><span class="comment"> *          than or equal to &#123;<span class="doctag">@code</span> fromIndex&#125;, or &#123;<span class="doctag">@code</span> -1&#125;</span></span><br><span class="line"><span class="comment"> *          if the character does not occur.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(<span class="type">int</span> ch, <span class="type">int</span> fromIndex)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> value.length;</span><br><span class="line">    <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        fromIndex = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fromIndex &gt;= max) &#123;</span><br><span class="line">        <span class="comment">// Note: fromIndex might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ch &lt; Character.MIN_SUPPLEMENTARY_CODE_POINT) &#123;</span><br><span class="line">        <span class="comment">// handle most cases here (ch is a BMP code point or a</span></span><br><span class="line">        <span class="comment">// negative value (invalid code point))</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">char</span>[] value = <span class="built_in">this</span>.value;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> fromIndex; i &lt; max; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value[i] == ch) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> indexOfSupplementary(ch, fromIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有一个重载方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(<span class="type">int</span> ch)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(ch, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、lastIndexOf"><a href="#5、lastIndexOf" class="headerlink" title="5、lastIndexOf"></a>5、lastIndexOf</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the index within this string of the last occurrence of</span></span><br><span class="line"><span class="comment"> * the specified character, searching backward starting at the</span></span><br><span class="line"><span class="comment"> * specified index. For values of &#123;<span class="doctag">@code</span> ch&#125; in the range</span></span><br><span class="line"><span class="comment"> * from 0 to 0xFFFF (inclusive), the index returned is the largest</span></span><br><span class="line"><span class="comment"> * value &lt;i&gt;k&lt;/i&gt; such that:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * (this.charAt(&lt;i&gt;k&lt;/i&gt;) == ch) &#123;<span class="doctag">@code</span> &amp;&amp;&#125; (&lt;i&gt;k&lt;/i&gt; &amp;lt;= fromIndex)</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * is true. For other values of &#123;<span class="doctag">@code</span> ch&#125;, it is the</span></span><br><span class="line"><span class="comment"> * largest value &lt;i&gt;k&lt;/i&gt; such that:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * (this.codePointAt(&lt;i&gt;k&lt;/i&gt;) == ch) &#123;<span class="doctag">@code</span> &amp;&amp;&#125; (&lt;i&gt;k&lt;/i&gt; &amp;lt;= fromIndex)</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * is true. In either case, if no such character occurs in this</span></span><br><span class="line"><span class="comment"> * string at or before position &#123;<span class="doctag">@code</span> fromIndex&#125;, then</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> -1&#125; is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;All indices are specified in &#123;<span class="doctag">@code</span> char&#125; values</span></span><br><span class="line"><span class="comment"> * (Unicode code units).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   ch          a character (Unicode code point).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   fromIndex   the index to start the search from. There is no</span></span><br><span class="line"><span class="comment"> *          restriction on the value of &#123;<span class="doctag">@code</span> fromIndex&#125;. If it is</span></span><br><span class="line"><span class="comment"> *          greater than or equal to the length of this string, it has</span></span><br><span class="line"><span class="comment"> *          the same effect as if it were equal to one less than the</span></span><br><span class="line"><span class="comment"> *          length of this string: this entire string may be searched.</span></span><br><span class="line"><span class="comment"> *          If it is negative, it has the same effect as if it were -1:</span></span><br><span class="line"><span class="comment"> *          -1 is returned.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  the index of the last occurrence of the character in the</span></span><br><span class="line"><span class="comment"> *          character sequence represented by this object that is less</span></span><br><span class="line"><span class="comment"> *          than or equal to &#123;<span class="doctag">@code</span> fromIndex&#125;, or &#123;<span class="doctag">@code</span> -1&#125;</span></span><br><span class="line"><span class="comment"> *          if the character does not occur before that point.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(<span class="type">int</span> ch, <span class="type">int</span> fromIndex)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ch &lt; Character.MIN_SUPPLEMENTARY_CODE_POINT) &#123;</span><br><span class="line">        <span class="comment">// handle most cases here (ch is a BMP code point or a</span></span><br><span class="line">        <span class="comment">// negative value (invalid code point))</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">char</span>[] value = <span class="built_in">this</span>.value;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Math.min(fromIndex, value.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value[i] == ch) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastIndexOfSupplementary(ch, fromIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(<span class="type">int</span> ch)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lastIndexOf(ch, value.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6、substring"><a href="#6、substring" class="headerlink" title="6、substring"></a>6、substring</h5><p>关键：区间是<strong>左闭右开</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a string that is a substring of this string. The</span></span><br><span class="line"><span class="comment"> * substring begins at the specified &#123;<span class="doctag">@code</span> beginIndex&#125; and</span></span><br><span class="line"><span class="comment"> * extends to the character at index &#123;<span class="doctag">@code</span> endIndex - 1&#125;.</span></span><br><span class="line"><span class="comment"> * Thus the length of the substring is &#123;<span class="doctag">@code</span> endIndex-beginIndex&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Examples:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * &quot;hamburger&quot;.substring(4, 8) returns &quot;urge&quot;</span></span><br><span class="line"><span class="comment"> * &quot;smiles&quot;.substring(1, 5) returns &quot;mile&quot;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>      beginIndex   the beginning index, inclusive.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>      endIndex     the ending index, exclusive.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>     the specified substring.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  IndexOutOfBoundsException  if the</span></span><br><span class="line"><span class="comment"> *             &#123;<span class="doctag">@code</span> beginIndex&#125; is negative, or</span></span><br><span class="line"><span class="comment"> *             &#123;<span class="doctag">@code</span> endIndex&#125; is larger than the length of</span></span><br><span class="line"><span class="comment"> *             this &#123;<span class="doctag">@code</span> String&#125; object, or</span></span><br><span class="line"><span class="comment"> *             &#123;<span class="doctag">@code</span> beginIndex&#125; is larger than</span></span><br><span class="line"><span class="comment"> *             &#123;<span class="doctag">@code</span> endIndex&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">substring</span><span class="params">(<span class="type">int</span> beginIndex, <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (endIndex &gt; value.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">subLen</span> <span class="operator">=</span> endIndex - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((beginIndex == <span class="number">0</span>) &amp;&amp; (endIndex == value.length)) ? <span class="built_in">this</span></span><br><span class="line">            : <span class="keyword">new</span> <span class="title class_">String</span>(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、trim"><a href="#7、trim" class="headerlink" title="7、trim"></a>7、trim</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a string whose value is this string, with any leading and trailing</span></span><br><span class="line"><span class="comment"> * whitespace removed.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If this &#123;<span class="doctag">@code</span> String&#125; object represents an empty character</span></span><br><span class="line"><span class="comment"> * sequence, or the first and last characters of character sequence</span></span><br><span class="line"><span class="comment"> * represented by this &#123;<span class="doctag">@code</span> String&#125; object both have codes</span></span><br><span class="line"><span class="comment"> * greater than &#123;<span class="doctag">@code</span> &#x27;\u005Cu0020&#x27;&#125; (the space character), then a</span></span><br><span class="line"><span class="comment"> * reference to this &#123;<span class="doctag">@code</span> String&#125; object is returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Otherwise, if there is no character with a code greater than</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> &#x27;\u005Cu0020&#x27;&#125; in the string, then a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object representing an empty string is</span></span><br><span class="line"><span class="comment"> * returned.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Otherwise, let &lt;i&gt;k&lt;/i&gt; be the index of the first character in the</span></span><br><span class="line"><span class="comment"> * string whose code is greater than &#123;<span class="doctag">@code</span> &#x27;\u005Cu0020&#x27;&#125;, and let</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;m&lt;/i&gt; be the index of the last character in the string whose code</span></span><br><span class="line"><span class="comment"> * is greater than &#123;<span class="doctag">@code</span> &#x27;\u005Cu0020&#x27;&#125;. A &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment"> * object is returned, representing the substring of this string that</span></span><br><span class="line"><span class="comment"> * begins with the character at index &lt;i&gt;k&lt;/i&gt; and ends with the</span></span><br><span class="line"><span class="comment"> * character at index &lt;i&gt;m&lt;/i&gt;-that is, the result of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> this.substring(k, m + 1)&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This method may be used to trim whitespace (as defined above) from</span></span><br><span class="line"><span class="comment"> * the beginning and end of a string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  A string whose value is this string, with any leading and trailing white</span></span><br><span class="line"><span class="comment"> *          space removed, or this string if it has no leading or</span></span><br><span class="line"><span class="comment"> *          trailing white space.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">trim</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> value.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">st</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>[] val = value;    <span class="comment">/* avoid getfield opcode */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[st] &lt;= <span class="string">&#x27; &#x27;</span>)) &#123;</span><br><span class="line">        st++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[len - <span class="number">1</span>] &lt;= <span class="string">&#x27; &#x27;</span>)) &#123;</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((st &gt; <span class="number">0</span>) || (len &lt; value.length)) ? substring(st, len) : <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8、charAt"><a href="#8、charAt" class="headerlink" title="8、charAt()"></a>8、charAt()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the &#123;<span class="doctag">@code</span> char&#125; value at the</span></span><br><span class="line"><span class="comment"> * specified index. An index ranges from &#123;<span class="doctag">@code</span> 0&#125; to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> length() - 1&#125;. The first &#123;<span class="doctag">@code</span> char&#125; value of the sequence</span></span><br><span class="line"><span class="comment"> * is at index &#123;<span class="doctag">@code</span> 0&#125;, the next at index &#123;<span class="doctag">@code</span> 1&#125;,</span></span><br><span class="line"><span class="comment"> * and so on, as for array indexing.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If the &#123;<span class="doctag">@code</span> char&#125; value specified by the index is a</span></span><br><span class="line"><span class="comment"> * &lt;a href=&quot;Character.html#unicode&quot;&gt;surrogate&lt;/a&gt;, the surrogate</span></span><br><span class="line"><span class="comment"> * value is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>      index   the index of the &#123;<span class="doctag">@code</span> char&#125; value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>     the &#123;<span class="doctag">@code</span> char&#125; value at the specified index of this string.</span></span><br><span class="line"><span class="comment"> *             The first &#123;<span class="doctag">@code</span> char&#125; value is at index &#123;<span class="doctag">@code</span> 0&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  IndexOutOfBoundsException  if the &#123;<span class="doctag">@code</span> index&#125;</span></span><br><span class="line"><span class="comment"> *             argument is negative or not less than the length of this</span></span><br><span class="line"><span class="comment"> *             string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">charAt</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((index &lt; <span class="number">0</span>) || (index &gt;= value.length)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9、toLowerCase"><a href="#9、toLowerCase" class="headerlink" title="9、toLowerCase"></a>9、toLowerCase</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts all of the characters in this &#123;<span class="doctag">@code</span> String&#125; to lower</span></span><br><span class="line"><span class="comment"> * case using the rules of the default locale. This is equivalent to calling</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> toLowerCase(Locale.getDefault())&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;Note:&lt;/b&gt; This method is locale sensitive, and may produce unexpected</span></span><br><span class="line"><span class="comment"> * results if used for strings that are intended to be interpreted locale</span></span><br><span class="line"><span class="comment"> * independently.</span></span><br><span class="line"><span class="comment"> * Examples are programming language identifiers, protocol keys, and HTML</span></span><br><span class="line"><span class="comment"> * tags.</span></span><br><span class="line"><span class="comment"> * For instance, &#123;<span class="doctag">@code</span> &quot;TITLE&quot;.toLowerCase()&#125; in a Turkish locale</span></span><br><span class="line"><span class="comment"> * returns &#123;<span class="doctag">@code</span> &quot;t\u005Cu0131tle&quot;&#125;, where &#x27;\u005Cu0131&#x27; is the</span></span><br><span class="line"><span class="comment"> * LATIN SMALL LETTER DOTLESS I character.</span></span><br><span class="line"><span class="comment"> * To obtain correct results for locale insensitive strings, use</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> toLowerCase(Locale.ROOT)&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  the &#123;<span class="doctag">@code</span> String&#125;, converted to lowercase.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.String#toLowerCase(Locale)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toLowerCase</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> toLowerCase(Locale.getDefault());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10、concat"><a href="#10、concat" class="headerlink" title="10、concat"></a>10、concat</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concatenates the specified string to the end of this string.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If the length of the argument string is &#123;<span class="doctag">@code</span> 0&#125;, then this</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object is returned. Otherwise, a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object is returned that represents a character</span></span><br><span class="line"><span class="comment"> * sequence that is the concatenation of the character sequence</span></span><br><span class="line"><span class="comment"> * represented by this &#123;<span class="doctag">@code</span> String&#125; object and the character</span></span><br><span class="line"><span class="comment"> * sequence represented by the argument string.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Examples:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * &quot;cares&quot;.concat(&quot;s&quot;) returns &quot;caress&quot;</span></span><br><span class="line"><span class="comment"> * &quot;to&quot;.concat(&quot;get&quot;).concat(&quot;her&quot;) returns &quot;together&quot;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   str   the &#123;<span class="doctag">@code</span> String&#125; that is concatenated to the end</span></span><br><span class="line"><span class="comment"> *                of this &#123;<span class="doctag">@code</span> String&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a string that represents the concatenation of this object&#x27;s</span></span><br><span class="line"><span class="comment"> *          characters followed by the string argument&#x27;s characters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">concat</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">otherLen</span> <span class="operator">=</span> str.length();</span><br><span class="line">    <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> value.length;</span><br><span class="line">    <span class="type">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class="line">    str.getChars(buf, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11、compareTo"><a href="#11、compareTo" class="headerlink" title="11、compareTo"></a>11、compareTo</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compares two strings lexicographically.</span></span><br><span class="line"><span class="comment"> * The comparison is based on the Unicode value of each character in</span></span><br><span class="line"><span class="comment"> * the strings. The character sequence represented by this</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> String&#125; object is compared lexicographically to the</span></span><br><span class="line"><span class="comment"> * character sequence represented by the argument string. The result is</span></span><br><span class="line"><span class="comment"> * a negative integer if this &#123;<span class="doctag">@code</span> String&#125; object</span></span><br><span class="line"><span class="comment"> * lexicographically precedes the argument string. The result is a</span></span><br><span class="line"><span class="comment"> * positive integer if this &#123;<span class="doctag">@code</span> String&#125; object lexicographically</span></span><br><span class="line"><span class="comment"> * follows the argument string. The result is zero if the strings</span></span><br><span class="line"><span class="comment"> * are equal; &#123;<span class="doctag">@code</span> compareTo&#125; returns &#123;<span class="doctag">@code</span> 0&#125; exactly when</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> #equals(Object)&#125; method would return &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This is the definition of lexicographic ordering. If two strings are</span></span><br><span class="line"><span class="comment"> * different, then either they have different characters at some index</span></span><br><span class="line"><span class="comment"> * that is a valid index for both strings, or their lengths are different,</span></span><br><span class="line"><span class="comment"> * or both. If they have different characters at one or more index</span></span><br><span class="line"><span class="comment"> * positions, let &lt;i&gt;k&lt;/i&gt; be the smallest such index; then the string</span></span><br><span class="line"><span class="comment"> * whose character at position &lt;i&gt;k&lt;/i&gt; has the smaller value, as</span></span><br><span class="line"><span class="comment"> * determined by using the &amp;lt; operator, lexicographically precedes the</span></span><br><span class="line"><span class="comment"> * other string. In this case, &#123;<span class="doctag">@code</span> compareTo&#125; returns the</span></span><br><span class="line"><span class="comment"> * difference of the two character values at position &#123;<span class="doctag">@code</span> k&#125; in</span></span><br><span class="line"><span class="comment"> * the two string -- that is, the value:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * this.charAt(k)-anotherString.charAt(k)</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> * If there is no index position at which they differ, then the shorter</span></span><br><span class="line"><span class="comment"> * string lexicographically precedes the longer string. In this case,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> compareTo&#125; returns the difference of the lengths of the</span></span><br><span class="line"><span class="comment"> * strings -- that is, the value:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * this.length()-anotherString.length()</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   anotherString   the &#123;<span class="doctag">@code</span> String&#125; to be compared.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  the value &#123;<span class="doctag">@code</span> 0&#125; if the argument string is equal to</span></span><br><span class="line"><span class="comment"> *          this string; a value less than &#123;<span class="doctag">@code</span> 0&#125; if this string</span></span><br><span class="line"><span class="comment"> *          is lexicographically less than the string argument; and a</span></span><br><span class="line"><span class="comment"> *          value greater than &#123;<span class="doctag">@code</span> 0&#125; if this string is</span></span><br><span class="line"><span class="comment"> *          lexicographically greater than the string argument.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(String anotherString)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> value.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> anotherString.value.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lim</span> <span class="operator">=</span> Math.min(len1, len2);</span><br><span class="line">    <span class="type">char</span> v1[] = value;</span><br><span class="line">    <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; lim) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> v1[k];</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> v2[k];</span><br><span class="line">        <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">            <span class="keyword">return</span> c1 - c2;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len1 - len2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12、toCharArray"><a href="#12、toCharArray" class="headerlink" title="12、toCharArray"></a>12、toCharArray</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts this string to a new character array.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  a newly allocated character array whose length is the length</span></span><br><span class="line"><span class="comment"> *          of this string and whose contents are initialized to contain</span></span><br><span class="line"><span class="comment"> *          the character sequence represented by this string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">char</span>[] toCharArray() &#123;</span><br><span class="line">    <span class="comment">// Cannot use Arrays.copyOf because of class initialization order issues</span></span><br><span class="line">    <span class="type">char</span> result[] = <span class="keyword">new</span> <span class="title class_">char</span>[value.length];</span><br><span class="line">    System.arraycopy(value, <span class="number">0</span>, result, <span class="number">0</span>, value.length);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13、format"><a href="#13、format" class="headerlink" title="13、format"></a>13、format</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a formatted string using the specified format string and</span></span><br><span class="line"><span class="comment"> * arguments.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The locale always used is the one returned by &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.util.Locale#getDefault() Locale.getDefault()&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  format</span></span><br><span class="line"><span class="comment"> *         A &lt;a href=&quot;../util/Formatter.html#syntax&quot;&gt;format string&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  args</span></span><br><span class="line"><span class="comment"> *         Arguments referenced by the format specifiers in the format</span></span><br><span class="line"><span class="comment"> *         string.  If there are more arguments than format specifiers, the</span></span><br><span class="line"><span class="comment"> *         extra arguments are ignored.  The number of arguments is</span></span><br><span class="line"><span class="comment"> *         variable and may be zero.  The maximum number of arguments is</span></span><br><span class="line"><span class="comment"> *         limited by the maximum dimension of a Java array as defined by</span></span><br><span class="line"><span class="comment"> *         &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.</span></span><br><span class="line"><span class="comment"> *         The behaviour on a</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> null&#125; argument depends on the &lt;a</span></span><br><span class="line"><span class="comment"> *         href=&quot;../util/Formatter.html#syntax&quot;&gt;conversion&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  java.util.IllegalFormatException</span></span><br><span class="line"><span class="comment"> *          If a format string contains an illegal syntax, a format</span></span><br><span class="line"><span class="comment"> *          specifier that is incompatible with the given arguments,</span></span><br><span class="line"><span class="comment"> *          insufficient arguments given the format string, or other</span></span><br><span class="line"><span class="comment"> *          illegal conditions.  For specification of all possible</span></span><br><span class="line"><span class="comment"> *          formatting errors, see the &lt;a</span></span><br><span class="line"><span class="comment"> *          href=&quot;../util/Formatter.html#detail&quot;&gt;Details&lt;/a&gt; section of the</span></span><br><span class="line"><span class="comment"> *          formatter class specification.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  A formatted string</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>  java.util.Formatter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(String format, Object... args)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Formatter</span>().format(format, args).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>……………</p><h3 id="3、StringBuffer"><a href="#3、StringBuffer" class="headerlink" title="3、StringBuffer"></a>3、StringBuffer</h3><ul><li>可以对字符串进行增删</li><li>可字符序列</li><li>是容器</li></ul><p><img src="https://i.loli.net/2021/04/21/zL2eOPskBCMmgIV.png"></p><p>真正存放字符串的地方:父类的value属性，<strong>存放在堆</strong>中（final则存放在常量池）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title class_">Appendable</span>, CharSequence &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value is used for character storage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">char</span>[] value;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a string buffer with no characters in it and an</span></span><br><span class="line"><span class="comment"> * initial capacity of 16 characters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StringBuffer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a string buffer with no characters in it and</span></span><br><span class="line"><span class="comment"> * the specified initial capacity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>      capacity  the initial capacity.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  NegativeArraySizeException  if the &#123;<span class="doctag">@code</span> capacity&#125;</span></span><br><span class="line"><span class="comment"> *               argument is less than &#123;<span class="doctag">@code</span> 0&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StringBuffer</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a string buffer initialized to the contents of the</span></span><br><span class="line"><span class="comment"> * specified string. The initial capacity of the string buffer is</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> 16&#125; plus the length of the string argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   str   the initial contents of the buffer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StringBuffer</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">    append(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><p>增删改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    toStringCache = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">super</span>.append(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">delete</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    toStringCache = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">super</span>.delete(start, end);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">replace</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, String str)</span> &#123;</span><br><span class="line">    toStringCache = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">super</span>.replace(start, end, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">insert</span><span class="params">(<span class="type">int</span> offset, String str)</span> &#123;</span><br><span class="line">    toStringCache = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">super</span>.insert(offset, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以及他们的重载方法</strong></p><h3 id="4、StringBuilder"><a href="#4、StringBuilder" class="headerlink" title="4、StringBuilder"></a>4、StringBuilder</h3><ul><li><p>可变的字符序列，提供一个与StringBuffer兼容的API，但不保证同步（StringBuilder不是线程安全）。该类被设计用作StringBuffer的一个简易替换。用来字符串缓冲区被单个线程使用的时候，尽可能的使用该类，比StringBuffer快</p></li><li><p>字符序列任然存放在父类的value属性（存在在堆中）</p></li></ul><h3 id="5、比较"><a href="#5、比较" class="headerlink" title="5、比较"></a>5、比较</h3><ul><li>String ：不可变字符序列，效率低，复用率高</li><li>StringBuffer： 可变字符序列，效率较高，线程安全</li><li>StringBuilder： 可变字符序列，效率最高，线程不安全</li></ul><p><strong>效率测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day06.StringBuilder_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/22 10:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> countTime(() -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">                str += <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">long</span> <span class="variable">time2</span> <span class="operator">=</span> countTime(() -&gt; &#123;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">                str.append(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">long</span> <span class="variable">time3</span> <span class="operator">=</span> countTime(() -&gt; &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">                str.append(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(time1);</span><br><span class="line">        System.out.println(time2);</span><br><span class="line">        System.out.println(time3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">countTime</span><span class="params">(function function)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        function.run();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> end-start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">function</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/22/nYGdXrgkl43eWKS.png"></p><p><strong>结论</strong></p><ol><li>大量修改操作，单线程，StringBuilder</li><li>大量修改操作，多线程，StringBuffer</li><li>被多个对象引用，如配置信息等，String</li></ol><blockquote><p>果然再学一遍截然不同的感觉，加油吧！</p></blockquote><hr><h1 id="day07"><a href="#day07" class="headerlink" title="day07"></a>day07</h1><blockquote><p>摘要</p><ul><li>常用类（二）</li></ul></blockquote><!--more--><h2 id="一、常用类（二）"><a href="#一、常用类（二）" class="headerlink" title="一、常用类（二）"></a>一、常用类（二）</h2><h3 id="1、Math类"><a href="#1、Math类" class="headerlink" title="1、Math类"></a>1、Math类</h3><p>使用时看源码或者查jdk文档即可</p><h3 id="2、Arrays类"><a href="#2、Arrays类" class="headerlink" title="2、Arrays类"></a>2、Arrays类</h3><h4 id="1、toString"><a href="#1、toString" class="headerlink" title="1、toString()"></a>1、toString()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a string representation of the contents of the specified array.</span></span><br><span class="line"><span class="comment"> * If the array contains other arrays as elements, they are converted to</span></span><br><span class="line"><span class="comment"> * strings by the &#123;<span class="doctag">@link</span> Object#toString&#125; method inherited from</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;Object&lt;/tt&gt;, which describes their &lt;i&gt;identities&lt;/i&gt; rather than</span></span><br><span class="line"><span class="comment"> * their contents.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The value returned by this method is equal to the value that would</span></span><br><span class="line"><span class="comment"> * be returned by &lt;tt&gt;Arrays.asList(a).toString()&lt;/tt&gt;, unless &lt;tt&gt;a&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * is &lt;tt&gt;null&lt;/tt&gt;, in which case &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a the array whose string representation to return</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a string representation of &lt;tt&gt;a&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #deepToString(Object[])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(Object[] a)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">iMax</span> <span class="operator">=</span> a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (iMax == -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    b.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">        b.append(String.valueOf(a[i]));</span><br><span class="line">        <span class="keyword">if</span> (i == iMax)</span><br><span class="line">            <span class="keyword">return</span> b.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">        b.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、sort-自然排序和定制排序"><a href="#2、sort-自然排序和定制排序" class="headerlink" title="2、sort (自然排序和定制排序)"></a>2、sort (自然排序和定制排序)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sorts the specified array of objects according to the order induced by</span></span><br><span class="line"><span class="comment"> * the specified comparator.  All elements in the array must be</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator (that is,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> c.compare(e1, e2)&#125; must not throw a &#123;<span class="doctag">@code</span> ClassCastException&#125;</span></span><br><span class="line"><span class="comment"> * for any elements &#123;<span class="doctag">@code</span> e1&#125; and &#123;<span class="doctag">@code</span> e2&#125; in the array).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will</span></span><br><span class="line"><span class="comment"> * not be reordered as a result of the sort.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Implementation note: This implementation is a stable, adaptive,</span></span><br><span class="line"><span class="comment"> * iterative mergesort that requires far fewer than n lg(n) comparisons</span></span><br><span class="line"><span class="comment"> * when the input array is partially sorted, while offering the</span></span><br><span class="line"><span class="comment"> * performance of a traditional mergesort when the input array is</span></span><br><span class="line"><span class="comment"> * randomly ordered.  If the input array is nearly sorted, the</span></span><br><span class="line"><span class="comment"> * implementation requires approximately n comparisons.  Temporary</span></span><br><span class="line"><span class="comment"> * storage requirements vary from a small constant for nearly sorted</span></span><br><span class="line"><span class="comment"> * input arrays to n/2 object references for randomly ordered input</span></span><br><span class="line"><span class="comment"> * arrays.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The implementation takes equal advantage of ascending and</span></span><br><span class="line"><span class="comment"> * descending order in its input array, and can take advantage of</span></span><br><span class="line"><span class="comment"> * ascending and descending order in different parts of the the same</span></span><br><span class="line"><span class="comment"> * input array.  It is well-suited to merging two or more sorted arrays:</span></span><br><span class="line"><span class="comment"> * simply concatenate the arrays and sort the resulting array.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The implementation was adapted from Tim Peters&#x27;s list sort for Python</span></span><br><span class="line"><span class="comment"> * (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt;</span></span><br><span class="line"><span class="comment"> * TimSort&lt;/a&gt;).  It uses techniques from Peter McIlroy&#x27;s &quot;Optimistic</span></span><br><span class="line"><span class="comment"> * Sorting and Information Theoretic Complexity&quot;, in Proceedings of the</span></span><br><span class="line"><span class="comment"> * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,</span></span><br><span class="line"><span class="comment"> * January 1993.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the class of the objects to be sorted</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a the array to be sorted</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c the comparator to determine the order of the array.  A</span></span><br><span class="line"><span class="comment"> *        &#123;<span class="doctag">@code</span> null&#125; value indicates that the elements&#x27;</span></span><br><span class="line"><span class="comment"> *        &#123;<span class="doctag">@linkplain</span> Comparable natural ordering&#125; should be used.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassCastException if the array contains elements that are</span></span><br><span class="line"><span class="comment"> *         not &lt;i&gt;mutually comparable&lt;/i&gt; using the specified comparator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException (optional) if the comparator is</span></span><br><span class="line"><span class="comment"> *         found to violate the &#123;<span class="doctag">@link</span> Comparator&#125; contract</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">        sort(a);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">            legacyMergeSort(a, c);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模拟排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/22 12:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line">        bubbleSort(arr, (o1, o2) -&gt; o2 - o1);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr, Comparator&lt;Integer&gt; comparable)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (comparable.compare(arr[j],arr[j+<span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、binarSearch"><a href="#3、binarSearch" class="headerlink" title="3、binarSearch()"></a>3、binarSearch()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> binarySearch0(a, <span class="number">0</span>, a.length, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Like public version, but without range checks.</span></span><br><span class="line"><span class="comment">// jdk底层使用循环而非递归</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch0</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> fromIndex, <span class="type">int</span> toIndex,</span></span><br><span class="line"><span class="params">                                 <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> fromIndex;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> toIndex - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">midVal</span> <span class="operator">=</span> a[mid];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (midVal &lt; key)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; key)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// key found</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -(low + 1)</span></span><br><span class="line">    <span class="comment">//返回负的应该在的位置+1</span></span><br><span class="line">    <span class="keyword">return</span> -(low + <span class="number">1</span>);  <span class="comment">// key not found.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、copyOf"><a href="#4、copyOf" class="headerlink" title="4、copyOf"></a>4、copyOf</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] copyOf(<span class="type">int</span>[] original, <span class="type">int</span> newLength) &#123;</span><br><span class="line">    <span class="type">int</span>[] copy = <span class="keyword">new</span> <span class="title class_">int</span>[newLength];</span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、fill"><a href="#5、fill" class="headerlink" title="5、fill"></a>5、fill</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Assigns the specified int value to each element of the specified array</span></span><br><span class="line"><span class="comment"> * of ints.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a the array to be filled</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> val the value to be stored in all elements of the array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = a.length; i &lt; len; i++)</span><br><span class="line">        a[i] = val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、asList"><a href="#6、asList" class="headerlink" title="6、asList"></a>6、asList</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a fixed-size list backed by the specified array.  (Changes to</span></span><br><span class="line"><span class="comment"> * the returned list &quot;write through&quot; to the array.)  This method acts</span></span><br><span class="line"><span class="comment"> * as bridge between array-based and collection-based APIs, in</span></span><br><span class="line"><span class="comment"> * combination with &#123;<span class="doctag">@link</span> Collection#toArray&#125;.  The returned list is</span></span><br><span class="line"><span class="comment"> * serializable and implements &#123;<span class="doctag">@link</span> RandomAccess&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method also provides a convenient way to create a fixed-size</span></span><br><span class="line"><span class="comment"> * list initialized to contain several elements:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     List&amp;lt;String&amp;gt; stooges = Arrays.asList(&quot;Larry&quot;, &quot;Moe&quot;, &quot;Curly&quot;);</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the class of the objects in the array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a the array by which the list will be backed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a list view of the specified array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;varargs&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">asList</span><span class="params">(T... a)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习：</strong></p><p><img src="https://i.loli.net/2021/04/22/eyIbKh7StQnVl34.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/22 12:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Book[] books = <span class="keyword">new</span> <span class="title class_">Book</span>[<span class="number">4</span>];</span><br><span class="line">        books[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;book1&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        books[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;book1&quot;</span>,<span class="number">90</span>);</span><br><span class="line">        books[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;book1&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        books[<span class="number">3</span>]= <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;book1&quot;</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        sort(books);</span><br><span class="line">        System.out.println(Arrays.toString(books));</span><br><span class="line"></span><br><span class="line">        sort(books, (o1, o2) -&gt; (<span class="type">int</span>) (o2.getPrice() - o1.getPrice()));</span><br><span class="line">        System.out.println(Arrays.toString(books));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Book[] books)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; books.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; books.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(books[j].getPrice() &gt; books[j+<span class="number">1</span>].getPrice()) &#123;</span><br><span class="line">                    <span class="type">Book</span> <span class="variable">temp</span> <span class="operator">=</span> books[j];</span><br><span class="line">                    books[j] = books[j+<span class="number">1</span>];</span><br><span class="line">                    books[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Book[] books, Comparator&lt;Book&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; books.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; books.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(comparator.compare(books[j],books[j+<span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">Book</span> <span class="variable">temp</span> <span class="operator">=</span> books[j];</span><br><span class="line">                    books[j] = books[j+<span class="number">1</span>];</span><br><span class="line">                    books[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、System"><a href="#3、System" class="headerlink" title="3、System"></a>3、System</h3><h4 id="1、exit"><a href="#1、exit" class="headerlink" title="1、exit()"></a>1、exit()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Terminates the currently running Java Virtual Machine. The</span></span><br><span class="line"><span class="comment"> * argument serves as a status code; by convention, a nonzero status</span></span><br><span class="line"><span class="comment"> * code indicates abnormal termination.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This method calls the &lt;code&gt;exit&lt;/code&gt; method in class</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;Runtime&lt;/code&gt;. This method never returns normally.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The call &lt;code&gt;System.exit(n)&lt;/code&gt; is effectively equivalent to</span></span><br><span class="line"><span class="comment"> * the call:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * Runtime.getRuntime().exit(n)</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>      status   exit status.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment"> *        if a security manager exists and its &lt;code&gt;checkExit&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> *        method doesn&#x27;t allow exit with the specified status.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        java.lang.Runtime#exit(int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span> &#123;</span><br><span class="line">    Runtime.getRuntime().exit(status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、arraycopy（）"><a href="#2、arraycopy（）" class="headerlink" title="2、arraycopy（）"></a>2、arraycopy（）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">* <span class="meta">@param</span>      src      the source array.</span><br><span class="line"> * <span class="meta">@param</span>      srcPos   starting position in the source array.</span><br><span class="line"> * <span class="meta">@param</span>      dest     the destination array.</span><br><span class="line"> * <span class="meta">@param</span>      destPos  starting position in the destination data.</span><br><span class="line"> * <span class="meta">@param</span>      length   the number of array elements to be copied.</span><br><span class="line"> * <span class="meta">@exception</span>  IndexOutOfBoundsException  <span class="keyword">if</span> copying would cause</span><br><span class="line"> *               access of data outside array bounds.</span><br><span class="line"> * <span class="meta">@exception</span>  ArrayStoreException  <span class="keyword">if</span> an element in the &lt;code&gt;src&lt;/code&gt;</span><br><span class="line"> *               array could not be stored into the &lt;code&gt;dest&lt;/code&gt; array</span><br><span class="line"> *               because of a type mismatch.</span><br><span class="line"> * <span class="meta">@exception</span>  NullPointerException <span class="keyword">if</span> either &lt;code&gt;src&lt;/code&gt; or</span><br><span class="line"> *               &lt;code&gt;dest&lt;/code&gt; is &lt;code&gt;<span class="literal">null</span>&lt;/code&gt;.</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src,  <span class="type">int</span>  srcPos,</span></span><br><span class="line"><span class="params">                                    Object dest, <span class="type">int</span> destPos,</span></span><br><span class="line"><span class="params">                                    <span class="type">int</span> length)</span>;</span><br></pre></td></tr></table></figure><h4 id="3、currentTimeMillis"><a href="#3、currentTimeMillis" class="headerlink" title="3、currentTimeMillis"></a>3、currentTimeMillis</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the current time in milliseconds.  Note that</span></span><br><span class="line"><span class="comment"> * while the unit of time of the return value is a millisecond,</span></span><br><span class="line"><span class="comment"> * the granularity of the value depends on the underlying</span></span><br><span class="line"><span class="comment"> * operating system and may be larger.  For example, many</span></span><br><span class="line"><span class="comment"> * operating systems measure time in units of tens of</span></span><br><span class="line"><span class="comment"> * milliseconds.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; See the description of the class &lt;code&gt;Date&lt;/code&gt; for</span></span><br><span class="line"><span class="comment"> * a discussion of slight discrepancies that may arise between</span></span><br><span class="line"><span class="comment"> * &quot;computer time&quot; and coordinated universal time (UTC).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  the difference, measured in milliseconds, between</span></span><br><span class="line"><span class="comment"> *          the current time and midnight, January 1, 1970 UTC.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.util.Date</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">currentTimeMillis</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="4、gc"><a href="#4、gc" class="headerlink" title="4、gc()"></a>4、gc()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runs the garbage collector.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Calling the &lt;code&gt;gc&lt;/code&gt; method suggests that the Java Virtual</span></span><br><span class="line"><span class="comment"> * Machine expend effort toward recycling unused objects in order to</span></span><br><span class="line"><span class="comment"> * make the memory they currently occupy available for quick reuse.</span></span><br><span class="line"><span class="comment"> * When control returns from the method call, the Java Virtual</span></span><br><span class="line"><span class="comment"> * Machine has made a best effort to reclaim space from all discarded</span></span><br><span class="line"><span class="comment"> * objects.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The call &lt;code&gt;System.gc()&lt;/code&gt; is effectively equivalent to the</span></span><br><span class="line"><span class="comment"> * call:</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * Runtime.getRuntime().gc()</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.Runtime#gc()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gc</span><span class="params">()</span> &#123;</span><br><span class="line">    Runtime.getRuntime().gc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、BigInteger和BigDecimal"><a href="#4、BigInteger和BigDecimal" class="headerlink" title="4、BigInteger和BigDecimal"></a>4、BigInteger和BigDecimal</h3><p>BigInteger：表示很大的整数</p><p>BigDecimal：表示精度很高的小数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1111111111111111111111111111111111111111111111111111&quot;</span>);</span><br><span class="line">System.out.println(integer.add(integer));</span><br></pre></td></tr></table></figure><p>算数运算使用BigInteger类里的方法</p><p><strong>底层：对字符串进行处理再转会对应的类型</strong></p><h3 id="5、日期类"><a href="#5、日期类" class="headerlink" title="5、日期类"></a>5、日期类</h3><h4 id="1、第一代日期类"><a href="#1、第一代日期类" class="headerlink" title="1、第一代日期类"></a>1、第一代日期类</h4><p><strong>Date</strong></p><p>默认输出方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public <span class="title class_">String</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// &quot;EEE MMM dd HH:mm:ss zzz yyyy&quot;;</span></span><br><span class="line">    <span class="title class_">BaseCalendar</span>.<span class="property">Date</span> date = <span class="title function_">normalize</span>();</span><br><span class="line">    <span class="title class_">StringBuilder</span> sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">28</span>);</span><br><span class="line">    int index = date.<span class="title function_">getDayOfWeek</span>();</span><br><span class="line">    <span class="keyword">if</span> (index == <span class="title class_">BaseCalendar</span>.<span class="property">SUNDAY</span>) &#123;</span><br><span class="line">        index = <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">convertToAbbr</span>(sb, wtb[index]).<span class="title function_">append</span>(<span class="string">&#x27; &#x27;</span>);                        <span class="comment">// EEE</span></span><br><span class="line">    <span class="title function_">convertToAbbr</span>(sb, wtb[date.<span class="title function_">getMonth</span>() - <span class="number">1</span> + <span class="number">2</span> + <span class="number">7</span>]).<span class="title function_">append</span>(<span class="string">&#x27; &#x27;</span>);  <span class="comment">// MMM</span></span><br><span class="line">    <span class="title class_">CalendarUtils</span>.<span class="title function_">sprintf0d</span>(sb, date.<span class="title function_">getDayOfMonth</span>(), <span class="number">2</span>).<span class="title function_">append</span>(<span class="string">&#x27; &#x27;</span>); <span class="comment">// dd</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">CalendarUtils</span>.<span class="title function_">sprintf0d</span>(sb, date.<span class="title function_">getHours</span>(), <span class="number">2</span>).<span class="title function_">append</span>(<span class="string">&#x27;:&#x27;</span>);   <span class="comment">// HH</span></span><br><span class="line">    <span class="title class_">CalendarUtils</span>.<span class="title function_">sprintf0d</span>(sb, date.<span class="title function_">getMinutes</span>(), <span class="number">2</span>).<span class="title function_">append</span>(<span class="string">&#x27;:&#x27;</span>); <span class="comment">// mm</span></span><br><span class="line">    <span class="title class_">CalendarUtils</span>.<span class="title function_">sprintf0d</span>(sb, date.<span class="title function_">getSeconds</span>(), <span class="number">2</span>).<span class="title function_">append</span>(<span class="string">&#x27; &#x27;</span>); <span class="comment">// ss</span></span><br><span class="line">    <span class="title class_">TimeZone</span> zi = date.<span class="title function_">getZone</span>();</span><br><span class="line">    <span class="keyword">if</span> (zi != <span class="literal">null</span>) &#123;</span><br><span class="line">        sb.<span class="title function_">append</span>(zi.<span class="title function_">getDisplayName</span>(date.<span class="title function_">isDaylightTime</span>(), <span class="title class_">TimeZone</span>.<span class="property">SHORT</span>, <span class="title class_">Locale</span>.<span class="property">US</span>)); <span class="comment">// zzz</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sb.<span class="title function_">append</span>(<span class="string">&quot;GMT&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.<span class="title function_">append</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">append</span>(date.<span class="title function_">getYear</span>());  <span class="comment">// yyyy</span></span><br><span class="line">    <span class="keyword">return</span> sb.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配套使用: <strong>SimpleDateFormat</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">System.out.println(sdf.format(date));</span><br></pre></td></tr></table></figure><h4 id="2、第二代日期类"><a href="#2、第二代日期类" class="headerlink" title="2、第二代日期类"></a>2、第二代日期类</h4><p><strong>Calendar</strong></p><p>没有输出模板，只能自己组合输出</p><h4 id="3、第三代日期类"><a href="#3、第三代日期类" class="headerlink" title="3、第三代日期类"></a>3、第三代日期类</h4><p><img src="https://i.loli.net/2021/04/22/h8y7AQncFXwx6IC.png"></p><p>jkd8 引出 第三代日期类</p><p><strong>LocalDate、LocalTime、LocalDateTime</strong></p><p><img src="https://i.loli.net/2021/04/22/YPMBcdLZ26tsHDk.png"></p><img src="https://i.loli.net/2021/04/22/AWx6P3BNqUQEvlT.jpg" style="zoom: 25%;" /><p>格式类 ： <strong>DateTimeFormatter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> dateTimeFormatter.format(localDateTime);</span><br><span class="line">System.out.println(format);</span><br></pre></td></tr></table></figure><p>时间戳<strong>Instant</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转为Date</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> Date.from(instant);</span><br><span class="line"></span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure><p><strong>练习：</strong></p><p><img src="https://i.loli.net/2021/04/23/3gJy9ptxskUuWdO.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start,j = end; i &lt; j;i++, j--) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chars[i];</span><br><span class="line">        chars[i] = chars[j];</span><br><span class="line">        chars[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/23/YzVCdOB6sGLH4wb.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>(s1);</span><br><span class="line"><span class="type">Animal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>(s1);</span><br><span class="line"></span><br><span class="line">System.out.println(a == b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a.equals(b)); <span class="comment">//false</span></span><br><span class="line">System.out.println(a.getName() == b.getName()); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s4); <span class="comment">//false</span></span><br><span class="line">System.out.println(s1 == s5); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span> + s1;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="string">&quot;hellocyfwlp&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(t1 == t2); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">System.out.println(t1.intern() == t2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h1 id="day08"><a href="#day08" class="headerlink" title="day08"></a>day08</h1><blockquote><p>摘要</p><ul><li>集合</li><li>List接口</li></ul></blockquote><!--more--><p>难点：</p><ol><li>底层机制</li><li>源码实现</li><li>什么情况下使用哪一种集合</li></ol><h2 id="一、集合理解"><a href="#一、集合理解" class="headerlink" title="一、集合理解"></a>一、集合理解</h2><p>数组不足：</p><p>1、长度固定</p><p>2、保存数据为用一类型</p><p>3、增加&#x2F;删除元素比较复杂</p><p><strong>集合</strong></p><p>1、动态的保存任意对象，使用比较方便</p><p>2、提供了一系列方便操作对象的方法</p><p>3、代码简介明了</p><h2 id="二、集合框架体系"><a href="#二、集合框架体系" class="headerlink" title="二、集合框架体系"></a>二、集合框架体系</h2><p><img src="https://i.loli.net/2021/04/23/IoeXqGjwBNtCHDu.png"></p><p><img src="https://i.loli.net/2021/04/23/43mlN65hjCP1bzJ.png"></p><p>1、集合主要是两组（单列集合，双列集合）</p><p>2、Collection有两个主要的子接口，List，Set</p><p>3、Map接口的实现子类 是双列集合，存放k-v</p><h2 id="三、Iterable"><a href="#三、Iterable" class="headerlink" title="三、Iterable"></a>三、Iterable</h2><ul><li>Iterator对象成为迭代器，主要用于遍历Collection集合中的元素</li><li>用于遍历集合，本身并不存放对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line"><span class="comment">// 编译器提示使用增强for循环（底层任然是迭代器）</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当退出while循环后，这时迭代器执行最后一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object next = iterator.next();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要再次遍历，需要重置迭代器</span></span><br><span class="line">iterator = list.iterator();</span><br><span class="line"><span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br></pre></td></tr></table></figure><h2 id="四、List接口"><a href="#四、List接口" class="headerlink" title="四、List接口"></a>四、List接口</h2><ul><li>添加、取出数据顺序一致</li><li>元素可以重复</li><li>有索引，可以根据索引取出对应的元素</li><li>实现List接口的类很多</li></ul><p>方法看源码或者查jdk文档即可</p><p>ArrayList基本等同于Vector,但是ArrayList是线程不安全(执行效率高)的，在多线程环境下，不建议使用ArrayList。</p><p>对比源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this Vector.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this Vector</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、ArrayList-底层源码分析"><a href="#五、ArrayList-底层源码分析" class="headerlink" title="五、ArrayList 底层源码分析"></a>五、ArrayList 底层源码分析</h2><p>补充细节：idea debug显示阉割版数据解决</p><p><img src="https://i.loli.net/2021/04/24/3dI1cQOB56RjmXu.png"></p><p><strong>1、ArrayList只维护了一个Object类型的数组elementData.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment"> * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line"><span class="comment"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"><span class="comment">// transient 这个属性不会被序列化</span></span><br></pre></td></tr></table></figure><p><strong>2、当创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0，第一次添加，则扩容element对象为10，如需要再次扩容，则扩容elementData为1.5倍</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shared empty array instance used for default sized empty instances. We</span></span><br><span class="line"><span class="comment"> * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span></span><br><span class="line"><span class="comment"> * first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default initial capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// 记录集合被修改的次数</span></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Increases the capacity to ensure that it can hold at least the</span></span><br><span class="line"><span class="comment"> * number of elements specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length; </span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">// 1.5倍</span></span><br><span class="line">    <span class="comment">// 解决第一次扩容</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">// 超过最大容量(一般进不到这个方法)</span></span><br><span class="line">    MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span> </span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、使用有参构造器，大小为所传参数，扩容直接扩容elementData1.5倍</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list with the specified initial capacity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  initialCapacity  the initial capacity of the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the specified initial capacity</span></span><br><span class="line"><span class="comment"> *         is negative</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>追add()方法和上面一样</p><p>（回头自己追一把）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">11</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.add(<span class="number">100</span>);</span><br><span class="line">list.add(<span class="number">200</span>);</span><br></pre></td></tr></table></figure><h2 id="六、Vector-底层源码分析"><a href="#六、Vector-底层源码分析" class="headerlink" title="六、Vector 底层源码分析"></a>六、Vector 底层源码分析</h2><p>1、底层维护 Object[] elementData </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The array buffer into which the components of the vector are</span></span><br><span class="line"><span class="comment"> * stored. The capacity of the vector is the length of this array buffer,</span></span><br><span class="line"><span class="comment"> * and is at least large enough to contain all the vector&#x27;s elements.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Any array elements following the last element in the Vector are null.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Object[] elementData;</span><br></pre></td></tr></table></figure><p>2、线程安全</p><p><strong>3、无参，默认10，按二倍扩容；有参，直接二倍扩容或指定扩容大小</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty vector so that its internal data array</span></span><br><span class="line"><span class="comment"> * has size &#123;<span class="doctag">@code</span> 10&#125; and its standard capacity increment is</span></span><br><span class="line"><span class="comment"> * zero.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityHelper</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">// 发现可以指定每次扩容的大小，默认两倍</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="comment">// 处理第一次扩容</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">int</span> capacityIncrement)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    <span class="built_in">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、LinkedList-底层源码分析"><a href="#七、LinkedList-底层源码分析" class="headerlink" title="七、LinkedList 底层源码分析"></a>七、LinkedList 底层源码分析</h2><ol><li>LinkedList底层实现了<strong>双向链表</strong>和<strong>双端队列</strong></li><li>线程不安全</li></ol><p>1、底层维护双向队列链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pointer to last node.</span></span><br><span class="line"><span class="comment"> * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment"> *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、模拟双向链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cyf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;cyf&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 串起来</span></span><br><span class="line">        jack.next = tom;</span><br><span class="line">        tom.next = cyf;</span><br><span class="line">        cyf.pre = tom;</span><br><span class="line">        tom.pre = jack;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> jack;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">last</span> <span class="operator">=</span> cyf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">while</span> (last != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(last);</span><br><span class="line">            last = last.pre;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加对象</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">smith</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line"></span><br><span class="line">        tom.next = smith;</span><br><span class="line">        smith.next = cyf;</span><br><span class="line"></span><br><span class="line">        cyf.pre = smith;</span><br><span class="line">        smith.pre = tom;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//顺序遍历</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(head);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object item;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line">    <span class="keyword">public</span> Node pre;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object item)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;item=&quot;</span> + item +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3、增删改查追源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as last element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">// 添加第一个数据</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unlinks non-null first node f.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> E <span class="title function_">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> &#123;</span><br><span class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = <span class="literal">null</span>;</span><br><span class="line">    f.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    first = next;</span><br><span class="line">    <span class="keyword">if</span> (next == <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">//只有一个元素链表</span></span><br><span class="line">        last = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        next.prev = <span class="literal">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/26/6QG31KeBOHIoLYD.png"></p><hr><h1 id="day09"><a href="#day09" class="headerlink" title="day09"></a>day09</h1><blockquote><p>摘要</p><ul><li>Set接口</li><li>Map接口</li><li>终于学完集合，面试高频</li></ul></blockquote><!--more--><h2 id="一、Set接口"><a href="#一、Set接口" class="headerlink" title="一、Set接口"></a>一、Set接口</h2><ol><li>无序，不能通过索引取</li><li>元素不能重复</li></ol><p><strong>add:</strong></p><ul><li>取到元素顺序与添加不一致，但是每次取到的顺序都一样</li></ul><p><strong>其他方法：</strong></p><p><img src="https://i.loli.net/2021/05/10/p7zPFVqNfZSmIvg.png"></p><h2 id="二、HashSet"><a href="#二、HashSet" class="headerlink" title="二、HashSet"></a>二、HashSet</h2><p>1、实际上是HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span></span><br><span class="line"><span class="comment"> * default initial capacity (16) and load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、可以放空值，但是只能有一个空（存放相同元素不会报错）</p><p>3、不能保证存放元素顺序与取出元素顺序一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 经典面试题</span></span><br><span class="line"><span class="comment">// 看源码及add方法到底发生了什么</span></span><br><span class="line"><span class="comment">// 什么机制去判断元素是否重复（填坑，后面补）</span></span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;cyfwlp&quot;</span>)); <span class="comment">//ok</span></span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;cyfwlp&quot;</span>)); <span class="comment">//加入不了</span></span><br><span class="line"></span><br><span class="line">System.out.println(hashSet);</span><br></pre></td></tr></table></figure><h3 id="1、模拟简单的数组-链表结构（散列表）"><a href="#1、模拟简单的数组-链表结构（散列表）" class="headerlink" title="1、模拟简单的数组 + 链表结构（散列表）"></a>1、模拟简单的数组 + 链表结构（散列表）</h3><p>散列表（链表解决散列冲突）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/26 15:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Node[] table = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">16</span>];</span><br><span class="line">        System.out.println(table);</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;john&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        table[<span class="number">2</span>] = node;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jack&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        node.next = jack;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">rose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;rose&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        jack.next = rose;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">lucy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;lucy&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        table[<span class="number">3</span>] = lucy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点，存放数据，可以指向下一个节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    Object item;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object item, Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = item;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、add源码"><a href="#2、add源码" class="headerlink" title="2、add源码"></a>2、add源码</h3><p><strong>结论：</strong></p><ol><li>HashSet的底层是HashMap</li><li>添加元素时先得到hash值 -&gt; 索引值</li><li>找到存储数据table，看这这个索引位置是否已经存放的有元素</li><li>如果有，调用equals比较，相同则不添加，不同则添加到最后</li><li>在java8中，若一条链表的元素个数超过8，并且table的大小等于64就会进行树话（红黑树）</li></ol><p><strong>debug:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="comment">// 占位作用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Computes key.hashCode() and spreads (XORs) higher bits of hash</span></span><br><span class="line"><span class="comment"> * to lower.  Because the table uses power-of-two masking, sets of</span></span><br><span class="line"><span class="comment"> * hashes that vary only in bits above the current mask will</span></span><br><span class="line"><span class="comment"> * always collide. (Among known examples are sets of Float keys</span></span><br><span class="line"><span class="comment"> * holding consecutive whole numbers in small tables.)  So we</span></span><br><span class="line"><span class="comment"> * apply a transform that spreads the impact of higher bits</span></span><br><span class="line"><span class="comment"> * downward. There is a tradeoff between speed, utility, and</span></span><br><span class="line"><span class="comment"> * quality of bit-spreading. Because many common sets of hashes</span></span><br><span class="line"><span class="comment"> * are already reasonably distributed (so don&#x27;t benefit from</span></span><br><span class="line"><span class="comment"> * spreading), and because we use trees to handle large sets of</span></span><br><span class="line"><span class="comment"> * collisions in bins, we just XOR some shifted bits in the</span></span><br><span class="line"><span class="comment"> * cheapest possible way to reduce systematic lossage, as well as</span></span><br><span class="line"><span class="comment"> * to incorporate impact of the highest bits that would otherwise</span></span><br><span class="line"><span class="comment"> * never be used in index calculations because of table bounds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义辅助变量</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// table</span></span><br><span class="line">    <span class="comment">// HashMap属性 transient Node&lt;K,V&gt;[] table; </span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 第一次扩容</span></span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// i = (n - 1) &amp; hash ：根据key计算哈希值在table那个位置</span></span><br><span class="line">    <span class="comment">// 把位置的值赋值给辅助变量p</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">// p为空，创建Node</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 比较是否相同</span></span><br><span class="line">        <span class="comment">// 开发技巧提示：定义变量的时候，在需要的局部变量（辅助工作），再创建</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="comment">// 如果当前索引位置对应链表的第一个元素和准备要添加的元素的hash值相同 且 （准备加入的key和指向Node节点的key是同一个对象 或 equals方法返回true）</span></span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// p是不是一颗红黑树</span></span><br><span class="line">            <span class="comment">// 按照红黑树的方法添加</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 索引位置是链表，进行循环比较</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//找到最后没找到，直接挂到后面</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 判断添加后是否达到八个节点</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        <span class="comment">//达到则对当前链表进行树化（转成红黑树）</span></span><br><span class="line">                        <span class="comment">//这个方法还会进一步判断 (n = tab.length) &lt; MIN_TREEIFY_CAPACITY</span></span><br><span class="line">                        <span class="comment">//数组大小 &lt; 64 通过扩容解决，并不会树化</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 一旦比较到相同就退出</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 空方法</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="comment">//表示成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、扩容和树化机制"><a href="#3、扩容和树化机制" class="headerlink" title="3、扩容和树化机制"></a>3、扩容和树化机制</h3><ul><li>HashSet底层是HashMap,初始化大小为16（DEFAULT_INITIAL_CAPACITY &#x3D; 1 &lt;&lt; 4; &#x2F;&#x2F; aka 16），临界值（threshold）是 16 * 加载因子（DEFAULT_LOAD_FACTOR）是0.75 &#x3D; 12</li><li>如果table数组使用到了临界值12，就会扩容到 16 * 2  &#x3D; 32，新的临界值变为24，以此类推</li><li>java8中，一条链表长度到了8（TREEIFY_THRESHOLD）且table的大小大于64（static final int MIN_TREEIFY_CAPACITY &#x3D; 64;）就会进行树化(红黑树),否则仍然使用扩容机制</li></ul><p><strong>追源码</strong></p><p>第一次添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure><p>临界值增加到两倍：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span> oldTab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">             oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">        <span class="comment">// 临界值 * 2</span></span><br><span class="line">        newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、LinkedHashSet"><a href="#三、LinkedHashSet" class="headerlink" title="三、LinkedHashSet"></a>三、LinkedHashSet</h2><ol><li>LinkedHashSet是HashSet的子类</li><li>LinkedHashSet底层维护一个LinkedHashMap，数组 + 双向链表</li><li>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，同时使用链表维护元素的次序，这使得元素看起来是以插入顺序保存的</li><li>LinkedHashSet 不允许添加重复元素</li></ol><h3 id="1、追源码"><a href="#1、追源码" class="headerlink" title="1、追源码"></a>1、追源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;liu&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="string">&quot;HSP&quot;</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        <span class="comment">// 加入顺序和遍历顺序一致</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、Map接口"><a href="#四、Map接口" class="headerlink" title="四、Map接口"></a>四、Map接口</h2><h3 id="1、Map接口实现类的特点"><a href="#1、Map接口实现类的特点" class="headerlink" title="1、Map接口实现类的特点"></a>1、Map接口实现类的特点</h3><p><strong>1、Map与Collection并列存在，用于保存具有映射关系的数据：Key - Value</strong></p><p><strong>2、Map中的key和vlaue可以是任何引用类型的数据，会封装到HashMap$Node</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.hash = hash;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>        &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>      &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">        <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、Map中的key不能重复，原因同HashSet</strong></p><p>当有相同的key等价于替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">&quot;no1&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;no1&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure><p><strong>4、key,vlaue都可以为空，但key为空只能有一个</strong></p><p><strong>5、常用字符串作key</strong></p><p><strong>6、Map存放数据的key-value示意图，一对k-v是放在一个HashMap$Node中的，因为Node实现了Entry接口，有些书上也说一对k-v就是一个Entry</strong></p><p><img src="https://i.loli.net/2021/05/10/2n1GCE7PawyORFr.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(<span class="string">&quot;no1&quot;</span>,<span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;no2&quot;</span>,<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Object o : set) &#123;</span><br><span class="line">    Map.Entry entry= (Map.Entry)o;</span><br><span class="line">    System.out.println(entry.getKey());</span><br><span class="line">    System.out.println(entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Set</span> <span class="variable">keySet</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">System.out.println(map.keySet().getClass());</span><br><span class="line"><span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line">System.out.println(map.values().getClass());</span><br></pre></td></tr></table></figure><h3 id="2、Map接口的常用方法"><a href="#2、Map接口的常用方法" class="headerlink" title="2、Map接口的常用方法"></a>2、Map接口的常用方法</h3><h4 id="1、put"><a href="#1、put" class="headerlink" title="1、put"></a>1、put</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment"> * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment"> * value is replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、remove"><a href="#2、remove" class="headerlink" title="2、remove"></a>2、remove</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the mapping for the specified key from this map if present.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  key key whose mapping is to be removed from the map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>)) == <span class="literal">null</span> ?</span><br><span class="line">        <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、get"><a href="#3、get" class="headerlink" title="3、get"></a>3、get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the value to which the specified key is mapped,</span></span><br><span class="line"><span class="comment"> * or &#123;<span class="doctag">@code</span> null&#125; if this map contains no mapping for the key.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;More formally, if this map contains a mapping from a key</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> k&#125; to a value &#123;<span class="doctag">@code</span> v&#125; such that &#123;<span class="doctag">@code</span> (key==null ? k==null :</span></span><br><span class="line"><span class="comment"> * key.equals(k))&#125;, then this method returns &#123;<span class="doctag">@code</span> v&#125;; otherwise</span></span><br><span class="line"><span class="comment"> * it returns &#123;<span class="doctag">@code</span> null&#125;.  (There can be at most one such mapping.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A return value of &#123;<span class="doctag">@code</span> null&#125; does not &lt;i&gt;necessarily&lt;/i&gt;</span></span><br><span class="line"><span class="comment"> * indicate that the map contains no mapping for the key; it&#x27;s also</span></span><br><span class="line"><span class="comment"> * possible that the map explicitly maps the key to &#123;<span class="doctag">@code</span> null&#125;.</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@link</span> #containsKey containsKey&#125; operation may be used to</span></span><br><span class="line"><span class="comment"> * distinguish these two cases.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #put(Object, Object)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、size"><a href="#4、size" class="headerlink" title="4、size"></a>4、size</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the number of key-value mappings in this map.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of key-value mappings in this map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、isEmpty"><a href="#5、isEmpty" class="headerlink" title="5、isEmpty"></a>5、isEmpty</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains no key-value mappings.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this map contains no key-value mappings</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">size</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、clear"><a href="#6、clear" class="headerlink" title="6、clear"></a>6、clear</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes all of the mappings from this map.</span></span><br><span class="line"><span class="comment"> * The map will be empty after this call returns.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tab.length; ++i)</span><br><span class="line">            tab[i] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、containsKey"><a href="#7、containsKey" class="headerlink" title="7、containsKey"></a>7、containsKey</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the</span></span><br><span class="line"><span class="comment"> * specified key.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   key   The key whose presence in this map is to be tested</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the specified</span></span><br><span class="line"><span class="comment"> * key.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getNode(hash(key), key) != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、HashMap"><a href="#五、HashMap" class="headerlink" title="五、HashMap"></a>五、HashMap</h2><h3 id="1、扩容机制同HashSet"><a href="#1、扩容机制同HashSet" class="headerlink" title="1、扩容机制同HashSet"></a>1、扩容机制同HashSet</h3><p>尝试下自己总结：</p><ul><li><p>维护table数组存储key - value 节点 HashMap$Node implements Map$Entry  (HashMap$Node [] table)</p></li><li><p>默认大小(DEFAULT_INITIAL_CAPACITY)为16，默认扩容因子(DEFAULT_LOAD_FACTOR)为0.75</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure></li><li><p>添加时根据key - value的<strong>key</strong>计算hash值得到索引位置，若位置没有则直接添加，若有则判断key是否相同，相同则覆盖，不同则判断是否需要树然后进行对应的处理</p></li><li><p>树化条件 <strong>链表长度 &gt; 8 &amp;&amp; table.length &gt; 64</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment"> * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment"> * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment"> * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment"> * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment"> * shrinkage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment"> * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment"> * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment"> * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br></pre></td></tr></table></figure></li><li><p>当容量达到临界值时，容量扩为原来两倍，临界值变为原来两倍（即 16-&gt;32,12-&gt;24）</p></li></ul><h3 id="2、源码解读"><a href="#2、源码解读" class="headerlink" title="2、源码解读"></a>2、源码解读</h3><p>尝试下自己解读：</p><p>1、resize 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment"> * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment"> * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment"> * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment"> * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 原来有数据需要扩容</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 超过最大容量</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 进行扩容</span></span><br><span class="line">        <span class="comment">// newCap = oldCap &lt;&lt; 1 (newCap = 2 * oldCap)</span></span><br><span class="line">        <span class="comment">// newThr = oldThr &lt;&lt; 1 (newThr = 2 * oldThr)</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始容量已经设置为阈值 ??不是很明白何时调用这个方法，先放一放</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">// 使用默认</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY; <span class="comment">// 16</span></span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); <span class="comment">//  12</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、putVal方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// 数组为空或length为0，初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 索引位置没有元素，直接挂</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 索引位置有元素</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// hash值相同，key值相同</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这条链表已经为红黑树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 逐个比较链表元素</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 没有一个相同，就挂到最后</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 加入后判断是否树化，是否到达8个</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        <span class="comment">// 这个方法会再判断容量是否到64，若不到不会进行树化，而是扩容解决</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 发现相同</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 已经存在key</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                <span class="comment">// 替换</span></span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// size大于临界值，进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    </span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、扩容、树化"><a href="#3、扩容、树化" class="headerlink" title="3、扩容、树化"></a>3、扩容、树化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> <span class="title class_">A</span>(i),<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有A对象的hash值都为100</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>debug这段代码</p><p>链表长度为8时</p><p><img src="https://i.loli.net/2021/05/11/9KHDVXBvqNQY2J4.png" alt="image-20210511165337487"></p><p>再添加一个，扩容而非树化：</p><p><img src="https://i.loli.net/2021/05/11/CgHdcJYm36QplZX.png"></p><p>再添加，扩容而非树化</p><p><img src="https://i.loli.net/2021/05/11/64qGbzhRSMT9ypC.png"></p><p>再添加，达到树化条件</p><p><img src="https://i.loli.net/2021/05/11/XAgwrvEutT1cOqR.png"></p><h2 id="六、HashTable"><a href="#六、HashTable" class="headerlink" title="六、HashTable"></a>六、HashTable</h2><p>不同：</p><ul><li>键和值都不能为null</li><li>线程安全</li><li>默认大小为11，加载因子0.75</li><li>按照<strong>自己的扩容机制</strong>扩容    （*2 + 1）</li></ul><h3 id="1、扩容"><a href="#1、扩容" class="headerlink" title="1、扩容"></a>1、扩容</h3><p>默认，调用无参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a new, empty hashtable with a default initial capacity (11)</span></span><br><span class="line"><span class="comment"> * and load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Increases the capacity of and internally reorganizes this</span></span><br><span class="line"><span class="comment"> * hashtable, in order to accommodate and access its entries more</span></span><br><span class="line"><span class="comment"> * efficiently.  This method is called automatically when the</span></span><br><span class="line"><span class="comment"> * number of keys in the hashtable exceeds this hashtable&#x27;s capacity</span></span><br><span class="line"><span class="comment"> * and load factor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> table.length;</span><br><span class="line">    Entry&lt;?,?&gt;[] oldMap = table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)</span><br><span class="line">            <span class="comment">// Keep running with MAX_ARRAY_SIZE buckets</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        newCapacity = MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    Entry&lt;?,?&gt;[] newMap = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[newCapacity];</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    threshold = (<span class="type">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">    table = newMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="literal">null</span> ; ) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = old;</span><br><span class="line">            old = old.next;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;</span><br><span class="line">            e.next = (Entry&lt;K,V&gt;)newMap[index];</span><br><span class="line">            newMap[index] = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、Properties"><a href="#七、Properties" class="headerlink" title="七、Properties"></a>七、Properties</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties</span> <span class="keyword">extends</span> <span class="title class_">Hashtable</span>&lt;Object,Object&gt; &#123;</span><br></pre></td></tr></table></figure><p>多用于读取配置文件 .propreties</p><h2 id="八、集合选型"><a href="#八、集合选型" class="headerlink" title="八、集合选型"></a>八、集合选型</h2><p><img src="https://i.loli.net/2021/05/11/w26TsfOME4uKhp7.png"></p><h2 id="九、TreeSet、TreeMap"><a href="#九、TreeSet、TreeMap" class="headerlink" title="九、TreeSet、TreeMap"></a>九、TreeSet、TreeMap</h2><p>TreeSet底层就是TreeMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;E,Object&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以排序的set</p><p>若使用无参构造器仍无序</p><p>有参构造器，传入比较器进行比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a new, empty tree set, sorted according to the specified</span></span><br><span class="line"><span class="comment"> * comparator.  All elements inserted into the set must be &lt;i&gt;mutually</span></span><br><span class="line"><span class="comment"> * comparable&lt;/i&gt; by the specified comparator: &#123;<span class="doctag">@code</span> comparator.compare(e1,</span></span><br><span class="line"><span class="comment"> * e2)&#125; must not throw a &#123;<span class="doctag">@code</span> ClassCastException&#125; for any elements</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> e1&#125; and &#123;<span class="doctag">@code</span> e2&#125; in the set.  If the user attempts to add</span></span><br><span class="line"><span class="comment"> * an element to the set that violates this constraint, the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> add&#125; call will throw a &#123;<span class="doctag">@code</span> ClassCastException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> comparator the comparator that will be used to order this set.</span></span><br><span class="line"><span class="comment"> *        If &#123;<span class="doctag">@code</span> null&#125;, the &#123;<span class="doctag">@linkplain</span> Comparable natural</span></span><br><span class="line"><span class="comment"> *        ordering&#125; of the elements will be used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(comparator));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用匿名内部类</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ((String)o1).compareTo((String)o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">set.add(<span class="string">&quot;gfds&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;zzz&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;fff&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure><p>追下实现排序的源码</p><p>底层维护root根节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Node in the Tree.  Doubles as a means to pass key-value pairs back to</span></span><br><span class="line"><span class="comment"> * user (see Map.Entry).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; left;</span><br><span class="line">    Entry&lt;K,V&gt; right;</span><br><span class="line">    Entry&lt;K,V&gt; parent;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">color</span> <span class="operator">=</span> BLACK;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment"> * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment"> * value is replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &#123;<span class="doctag">@code</span> key&#125;, or</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> null&#125; if there was no mapping for &#123;<span class="doctag">@code</span> key&#125;.</span></span><br><span class="line"><span class="comment"> *         (A &#123;<span class="doctag">@code</span> null&#125; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &#123;<span class="doctag">@code</span> null&#125; with &#123;<span class="doctag">@code</span> key&#125;.)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassCastException if the specified key cannot be compared</span></span><br><span class="line"><span class="comment"> *         with the keys currently in the map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment"> *         and this map uses natural ordering, or its comparator</span></span><br><span class="line"><span class="comment"> *         does not permit null keys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; t = root;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断key是否为空</span></span><br><span class="line">        compare(key, key); <span class="comment">// type (and possibly null) check</span></span><br><span class="line"></span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, <span class="literal">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cmp;</span><br><span class="line">    Entry&lt;K,V&gt; parent;</span><br><span class="line">    <span class="comment">// split comparator and comparable paths</span></span><br><span class="line">    Comparator&lt;? <span class="built_in">super</span> K&gt; cpr = comparator;</span><br><span class="line">    <span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = cpr.compare(key, t.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                t = t.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                t = t.right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = k.compareTo(t.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                t = t.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                t = t.right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, parent);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">        parent.left = e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        parent.right = e;</span><br><span class="line">    fixAfterInsertion(e);</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、Collections工具类"><a href="#十、Collections工具类" class="headerlink" title="十、Collections工具类"></a>十、Collections工具类</h2><p>常用方法：</p><h3 id="1、reverse"><a href="#1、reverse" class="headerlink" title="1、reverse"></a>1、reverse</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reverses the order of the elements in the specified list.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method runs in linear time.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  list the list whose elements are to be reversed.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if the specified list or</span></span><br><span class="line"><span class="comment"> *         its list-iterator does not support the &lt;tt&gt;set&lt;/tt&gt; operation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(List&lt;?&gt; list)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">    <span class="keyword">if</span> (size &lt; REVERSE_THRESHOLD || list <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>, mid=size&gt;&gt;<span class="number">1</span>, j=size-<span class="number">1</span>; i&lt;mid; i++, j--)</span><br><span class="line">            swap(list, i, j);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// instead of using a raw type here, it&#x27;s possible to capture</span></span><br><span class="line">        <span class="comment">// the wildcard but it will require a call to a supplementary</span></span><br><span class="line">        <span class="comment">// private method</span></span><br><span class="line">        <span class="type">ListIterator</span> <span class="variable">fwd</span> <span class="operator">=</span> list.listIterator();</span><br><span class="line">        <span class="type">ListIterator</span> <span class="variable">rev</span> <span class="operator">=</span> list.listIterator(size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>, mid=list.size()&gt;&gt;<span class="number">1</span>; i&lt;mid; i++) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">tmp</span> <span class="operator">=</span> fwd.next();</span><br><span class="line">            fwd.set(rev.previous());</span><br><span class="line">            rev.set(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、shuffle"><a href="#2、shuffle" class="headerlink" title="2、shuffle"></a>2、shuffle</h3><p>洗牌算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Randomly permute the specified list using the specified source of</span></span><br><span class="line"><span class="comment"> * randomness.  All permutations occur with equal likelihood</span></span><br><span class="line"><span class="comment"> * assuming that the source of randomness is fair.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This implementation traverses the list backwards, from the last element</span></span><br><span class="line"><span class="comment"> * up to the second, repeatedly swapping a randomly selected element into</span></span><br><span class="line"><span class="comment"> * the &quot;current position&quot;.  Elements are randomly selected from the</span></span><br><span class="line"><span class="comment"> * portion of the list that runs from the first element to the current</span></span><br><span class="line"><span class="comment"> * position, inclusive.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method runs in linear time.  If the specified list does not</span></span><br><span class="line"><span class="comment"> * implement the &#123;<span class="doctag">@link</span> RandomAccess&#125; interface and is large, this</span></span><br><span class="line"><span class="comment"> * implementation dumps the specified list into an array before shuffling</span></span><br><span class="line"><span class="comment"> * it, and dumps the shuffled array back into the list.  This avoids the</span></span><br><span class="line"><span class="comment"> * quadratic behavior that would result from shuffling a &quot;sequential</span></span><br><span class="line"><span class="comment"> * access&quot; list in place.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  list the list to be shuffled.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  rnd the source of randomness to use to shuffle the list.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if the specified list or its</span></span><br><span class="line"><span class="comment"> *         list-iterator does not support the &lt;tt&gt;set&lt;/tt&gt; operation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shuffle</span><span class="params">(List&lt;?&gt; list, Random rnd)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">    <span class="keyword">if</span> (size &lt; SHUFFLE_THRESHOLD || list <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=size; i&gt;<span class="number">1</span>; i--)</span><br><span class="line">            swap(list, i-<span class="number">1</span>, rnd.nextInt(i));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Object arr[] = list.toArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Shuffle array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=size; i&gt;<span class="number">1</span>; i--)</span><br><span class="line">            swap(arr, i-<span class="number">1</span>, rnd.nextInt(i));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dump array back into list</span></span><br><span class="line">        <span class="comment">// instead of using a raw type here, it&#x27;s possible to capture</span></span><br><span class="line">        <span class="comment">// the wildcard but it will require a call to a supplementary</span></span><br><span class="line">        <span class="comment">// private method</span></span><br><span class="line">        <span class="type">ListIterator</span> <span class="variable">it</span> <span class="operator">=</span> list.listIterator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">            it.next();</span><br><span class="line">            it.set(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、sort"><a href="#3、sort" class="headerlink" title="3、sort"></a>3、sort</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sorts the specified list according to the order induced by the</span></span><br><span class="line"><span class="comment"> * specified comparator.  All elements in the list must be &lt;i&gt;mutually</span></span><br><span class="line"><span class="comment"> * comparable&lt;/i&gt; using the specified comparator (that is,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> c.compare(e1, e2)&#125; must not throw a &#123;<span class="doctag">@code</span> ClassCastException&#125;</span></span><br><span class="line"><span class="comment"> * for any elements &#123;<span class="doctag">@code</span> e1&#125; and &#123;<span class="doctag">@code</span> e2&#125; in the list).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will</span></span><br><span class="line"><span class="comment"> * not be reordered as a result of the sort.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The specified list must be modifiable, but need not be resizable.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@implNote</span></span></span><br><span class="line"><span class="comment"> * This implementation defers to the &#123;<span class="doctag">@link</span> List#sort(Comparator)&#125;</span></span><br><span class="line"><span class="comment"> * method using the specified list and comparator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &lt;T&gt; the class of the objects in the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  list the list to be sorted.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  c the comparator to determine the order of the list.  A</span></span><br><span class="line"><span class="comment"> *        &#123;<span class="doctag">@code</span> null&#125; value indicates that the elements&#x27; &lt;i&gt;natural</span></span><br><span class="line"><span class="comment"> *        ordering&lt;/i&gt; should be used.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassCastException if the list contains elements that are not</span></span><br><span class="line"><span class="comment"> *         &lt;i&gt;mutually comparable&lt;/i&gt; using the specified comparator.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if the specified list&#x27;s</span></span><br><span class="line"><span class="comment"> *         list-iterator does not support the &#123;<span class="doctag">@code</span> set&#125; operation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException (optional) if the comparator is</span></span><br><span class="line"><span class="comment"> *         found to violate the &#123;<span class="doctag">@link</span> Comparator&#125; contract</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> List#sort(Comparator)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(List&lt;T&gt; list, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line">    list.sort(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、swap"><a href="#4、swap" class="headerlink" title="4、swap"></a>4、swap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swaps the elements at the specified positions in the specified list.</span></span><br><span class="line"><span class="comment"> * (If the specified positions are equal, invoking this method leaves</span></span><br><span class="line"><span class="comment"> * the list unchanged.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list The list in which to swap elements.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i the index of one element to be swapped.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j the index of the other element to be swapped.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException if either &lt;tt&gt;i&lt;/tt&gt; or &lt;tt&gt;j&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> *         is out of range (i &amp;lt; 0 || i &amp;gt;= list.size()</span></span><br><span class="line"><span class="comment"> *         || j &amp;lt; 0 || j &amp;gt;= list.size()).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(List&lt;?&gt; list, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="comment">// instead of using a raw type here, it&#x27;s possible to capture</span></span><br><span class="line">    <span class="comment">// the wildcard but it will require a call to a supplementary</span></span><br><span class="line">    <span class="comment">// private method</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> list;</span><br><span class="line">    l.set(i, l.set(j, l.get(i)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、max"><a href="#5、max" class="headerlink" title="5、max"></a>5、max</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the maximum element of the given collection, according to the</span></span><br><span class="line"><span class="comment"> * order induced by the specified comparator.  All elements in the</span></span><br><span class="line"><span class="comment"> * collection must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified</span></span><br><span class="line"><span class="comment"> * comparator (that is, &lt;tt&gt;comp.compare(e1, e2)&lt;/tt&gt; must not throw a</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;e2&lt;/tt&gt; in the collection).&lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method iterates over the entire collection, hence it requires</span></span><br><span class="line"><span class="comment"> * time proportional to the size of the collection.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &lt;T&gt; the class of the objects in the collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  coll the collection whose maximum element is to be determined.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  comp the comparator with which to determine the maximum element.</span></span><br><span class="line"><span class="comment"> *         A &lt;tt&gt;null&lt;/tt&gt; value indicates that the elements&#x27; &lt;i&gt;natural</span></span><br><span class="line"><span class="comment"> *        ordering&lt;/i&gt; should be used.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the maximum element of the given collection, according</span></span><br><span class="line"><span class="comment"> *         to the specified comparator.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassCastException if the collection contains elements that are</span></span><br><span class="line"><span class="comment"> *         not &lt;i&gt;mutually comparable&lt;/i&gt; using the specified comparator.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if the collection is empty.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Comparable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">max</span><span class="params">(Collection&lt;? extends T&gt; coll, Comparator&lt;? <span class="built_in">super</span> T&gt; comp)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comp==<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> (T)max((Collection) coll);</span><br><span class="line"></span><br><span class="line">    Iterator&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>&gt; i = coll.iterator();</span><br><span class="line">    <span class="type">T</span> <span class="variable">candidate</span> <span class="operator">=</span> i.next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">next</span> <span class="operator">=</span> i.next();</span><br><span class="line">        <span class="keyword">if</span> (comp.compare(next, candidate) &gt; <span class="number">0</span>)</span><br><span class="line">            candidate = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、frequency"><a href="#6、frequency" class="headerlink" title="6、frequency"></a>6、frequency</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the number of elements in the specified collection equal to the</span></span><br><span class="line"><span class="comment"> * specified object.  More formally, returns the number of elements</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;e&lt;/tt&gt; in the collection such that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;(o == null ? e == null : o.equals(e))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c the collection in which to determine the frequency</span></span><br><span class="line"><span class="comment"> *     of &lt;tt&gt;o&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o the object whose frequency is to be determined</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of elements in &#123;<span class="doctag">@code</span> c&#125; equal to &#123;<span class="doctag">@code</span> o&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if &lt;tt&gt;c&lt;/tt&gt; is null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">frequency</span><span class="params">(Collection&lt;?&gt; c, Object o)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object e : c)</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">                result++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object e : c)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(e))</span><br><span class="line">                result++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、copy"><a href="#7、copy" class="headerlink" title="7、copy"></a>7、copy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copies all of the elements from one list into another.  After the</span></span><br><span class="line"><span class="comment"> * operation, the index of each copied element in the destination list</span></span><br><span class="line"><span class="comment"> * will be identical to its index in the source list.  The destination</span></span><br><span class="line"><span class="comment"> * list must be at least as long as the source list.  If it is longer, the</span></span><br><span class="line"><span class="comment"> * remaining elements in the destination list are unaffected. &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method runs in linear time.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &lt;T&gt; the class of the objects in the lists</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  dest The destination list.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  src The source list.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException if the destination list is too small</span></span><br><span class="line"><span class="comment"> *         to contain the entire source List.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if the destination list&#x27;s</span></span><br><span class="line"><span class="comment"> *         list-iterator does not support the &lt;tt&gt;set&lt;/tt&gt; operation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(List&lt;? <span class="built_in">super</span> T&gt; dest, List&lt;? extends T&gt; src)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">srcSize</span> <span class="operator">=</span> src.size();</span><br><span class="line">    <span class="keyword">if</span> (srcSize &gt; dest.size())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Source does not fit in dest&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (srcSize &lt; COPY_THRESHOLD ||</span><br><span class="line">        (src <span class="keyword">instanceof</span> RandomAccess &amp;&amp; dest <span class="keyword">instanceof</span> RandomAccess)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;srcSize; i++)</span><br><span class="line">            dest.set(i, src.get(i));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ListIterator&lt;? <span class="built_in">super</span> T&gt; di=dest.listIterator();</span><br><span class="line">        ListIterator&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>&gt; si=src.listIterator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;srcSize; i++) &#123;</span><br><span class="line">            di.next();</span><br><span class="line">            di.set(si.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、replaceAll"><a href="#8、replaceAll" class="headerlink" title="8、replaceAll"></a>8、replaceAll</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces all occurrences of one specified value in a list with another.</span></span><br><span class="line"><span class="comment"> * More formally, replaces with &lt;tt&gt;newVal&lt;/tt&gt; each element &lt;tt&gt;e&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * in &lt;tt&gt;list&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;(oldVal==null ? e==null : oldVal.equals(e))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> * (This method has no effect on the size of the list.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &lt;T&gt; the class of the objects in the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list the list in which replacement is to occur.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> oldVal the old value to be replaced.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newVal the new value with which &lt;tt&gt;oldVal&lt;/tt&gt; is to be</span></span><br><span class="line"><span class="comment"> *        replaced.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if &lt;tt&gt;list&lt;/tt&gt; contained one or more elements</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;e&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;(oldVal==null ?  e==null : oldVal.equals(e))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if the specified list or</span></span><br><span class="line"><span class="comment"> *         its list-iterator does not support the &lt;tt&gt;set&lt;/tt&gt; operation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  1.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">replaceAll</span><span class="params">(List&lt;T&gt; list, T oldVal, T newVal)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">    <span class="keyword">if</span> (size &lt; REPLACEALL_THRESHOLD || list <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldVal==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (list.get(i)==<span class="literal">null</span>) &#123;</span><br><span class="line">                    list.set(i, newVal);</span><br><span class="line">                    result = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (oldVal.equals(list.get(i))) &#123;</span><br><span class="line">                    list.set(i, newVal);</span><br><span class="line">                    result = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ListIterator&lt;T&gt; itr=list.listIterator();</span><br><span class="line">        <span class="keyword">if</span> (oldVal==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (itr.next()==<span class="literal">null</span>) &#123;</span><br><span class="line">                    itr.set(newVal);</span><br><span class="line">                    result = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (oldVal.equals(itr.next())) &#123;</span><br><span class="line">                    itr.set(newVal);</span><br><span class="line">                    result = <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>面试：试分析 TreeSet 和 HashSet 是如何实现去重的</strong></p><p>HashSet : hashCode() + equals() ，根据传入的key由hash()方法得到table表的索引位置，若索引位置为空则直接添加。若索引位置已有元素，则遍历索引位置所在的链根据equals()比较是否相同，若不同则添加，相同则放弃添加</p><p>TreeSet:如果传入了Comparator比较对象，就调用compareTo方法比较，相同则不添加；若没有传入，则根据key实现Comparable接口的compareTo方法比较</p><p>代码分析：分析set中元素个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1002</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        p1.setName(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        set.remove(p1);</span><br><span class="line">        </span><br><span class="line">        System.out.println(set);</span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;CC&quot;</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line">        <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line">        <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Person)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="keyword">return</span> getId() == person.getId() &amp;&amp;</span><br><span class="line">                Objects.equals(getName(), person.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(getId(), getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="day10"><a href="#day10" class="headerlink" title="day10"></a>day10</h1><blockquote><p>摘要</p><ul><li>泛型</li></ul></blockquote><!--more--><h2 id="一、引出泛型"><a href="#一、引出泛型" class="headerlink" title="一、引出泛型"></a>一、引出泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">generic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传统方法</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺旺&quot;</span>,<span class="number">2</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.不能约束数据类型，不安全</span></span><br><span class="line">        <span class="comment">//2.需要进行数据类型转换，数据量大时影响效率</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            <span class="comment">//向下转型</span></span><br><span class="line">            <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) o;</span><br><span class="line">            System.out.println(dog.getName());</span><br><span class="line">            System.out.println(dog.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Dog&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>,<span class="number">1</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺旺&quot;</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Dog dog : list) &#123;</span><br><span class="line">    System.out.println(dog.getAge());</span><br><span class="line">    System.out.println(dog.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处：</p><ol><li>编译时检查元素类型</li><li>不在进行类型抓换，提升效率</li></ol><h2 id="二、泛型"><a href="#二、泛型" class="headerlink" title="二、泛型"></a>二、泛型</h2><p>泛 ：广泛；型：类型</p><ol><li>泛型又称为参数化类型，解决数据类型的安全性问题</li><li>在类声明或实例化时只需要指定具体的类型即可</li><li>java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生ClassCastException异常</li><li>泛型的作用：可以在类声明时通过一个标识<strong>表示类中某个属性的类型</strong>；或者<strong>某个方法返回值的类型</strong>，或是<strong>参数类型</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    Person&lt;String&gt; person = <span class="keyword">new</span> <span class="title class_">Person</span>&lt;&gt;(<span class="string">&quot;java编程思想&quot;</span>);</span><br><span class="line">    Person&lt;Integer&gt; person2 = <span class="keyword">new</span> <span class="title class_">Person</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">// 数据类型在定义Person对象的时候指定，在编译期间就确定E是什么类型</span></span><br><span class="line">    E s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(E s)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细节：</p><p><strong>1、T,E只能是引用数据类型</strong></p><p><strong>2、在给泛型指定了类型，可以传入该类型或该类的子类型</strong></p><p><strong>3、推荐使用这种写法 ArrayList<Dog> list &#x3D; new ArrayList&lt;&gt;();</strong></p><p><strong>4、默认使用Object类</strong></p><h2 id="三、自定义泛型"><a href="#三、自定义泛型" class="headerlink" title="三、自定义泛型"></a>三、自定义泛型</h2><h3 id="1、自定义泛型类"><a href="#1、自定义泛型类" class="headerlink" title="1、自定义泛型类"></a>1、自定义泛型类</h3><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class 类名&lt;T,R...&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意细节：</p><p>1、普通成员可以使用泛型（属性、方法）</p><p>2、使用泛型的数组，不能初始化（不知道什么类型，不知道分配多少空间）</p><p>3、静态方法中不能使用类的泛型（静态方法和对象无关，类加载时，对象还没有创建）</p><p>4、泛型类的类型，实在创建对象时确定的</p><p>5、如果在创建对象时没有指定类型，默认为Object类</p><h3 id="2、自定义泛型接口"><a href="#2、自定义泛型接口" class="headerlink" title="2、自定义泛型接口"></a>2、自定义泛型接口</h3><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface 类名&lt;T,R...&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意细节：</p><p>1、接口中，静态资源不能使用泛型</p><p>2、泛型接口的类型，在<strong>继承接口</strong>或者<strong>实现接口</strong>时确定的</p><p>3、默认Object</p><h3 id="3、自定义泛型方法"><a href="#3、自定义泛型方法" class="headerlink" title="3、自定义泛型方法"></a>3、自定义泛型方法</h3><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;T,R..&gt; 返回类型 方法名 (参数列表) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意细节：</p><p>1、泛型方法可以定义在普通类，也可以定义在泛型类</p><p>2、泛型方法被调用的时候，类型必须确定</p><h3 id="4、泛型的继承和通配符"><a href="#4、泛型的继承和通配符" class="headerlink" title="4、泛型的继承和通配符"></a>4、泛型的继承和通配符</h3><p>1、泛型不具备继承性</p><p>2、&lt;?&gt;:支持任意泛型类型</p><p>3、&lt;? extends A&gt; 支持A类以及A类的子类，规定了泛型的上限</p><p>4、&lt;? super A&gt; 支持A类以及A类的父类，不限于直接父类，规定了泛型的下线</p><h2 id="四、Junit"><a href="#四、Junit" class="headerlink" title="四、Junit"></a>四、Junit</h2><p>单元测试</p><hr><h1 id="day11"><a href="#day11" class="headerlink" title="day11"></a>day11</h1><blockquote><p>线程基础</p></blockquote><!--more--><h2 id="一、线程（基础）"><a href="#一、线程（基础）" class="headerlink" title="一、线程（基础）"></a>一、线程（基础）</h2><h3 id="1、相关概念"><a href="#1、相关概念" class="headerlink" title="1、相关概念"></a>1、相关概念</h3><p><strong>程序</strong>：指令即集合；</p><p><strong>指令</strong>：cpu能识别并执行的最基本命令</p><p><strong>进程</strong>：<strong>运行中的程序</strong>；<strong>程序的一次执行过程;</strong></p><p><strong>线程</strong>：线程是由进程创建的，是进程的一个实体</p><p>一个进程可以拥有多个线程</p><p><strong>单线程</strong>：同一个时刻，只允许执行一个线程</p><p><strong>多线程</strong>：用一个时刻，可以执行多个线程</p><p><strong>并发</strong>：宏观上同时，微观上交替执行（单核cpu多任务）</p><p><strong>并行</strong>：多个任务同时执行（多核cpu）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cpu核数</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="type">int</span> <span class="variable">cpuNumber</span> <span class="operator">=</span> runtime.availableProcessors();</span><br><span class="line">System.out.println(cpuNumber);</span><br></pre></td></tr></table></figure><h3 id="2、线程的基本使用"><a href="#2、线程的基本使用" class="headerlink" title="2、线程的基本使用"></a>2、线程的基本使用</h3><ol><li>继承Thread类，重写run方法</li><li>实现Runable接口，</li></ol><h4 id="1、继承Thread类"><a href="#1、继承Thread类" class="headerlink" title="1、继承Thread类"></a>1、继承Thread类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="comment">// 为什么是start方法然后执行run方法</span></span><br><span class="line">        cat.start();<span class="comment">// 启动线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 说明：当main线程启动了一个子线程 Thread-0 主线程不会阻塞，会继续执行</span></span><br><span class="line">        <span class="comment">// 这时，主线程和子线程交替执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程继续执行&quot;</span> + Thread.currentThread().getName()); <span class="comment">// main</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程 i= &quot;</span> + i);</span><br><span class="line">            <span class="comment">//主线程休眠</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当一个类继承了Thread类，这个类就可以当做线程类使用</span></span><br><span class="line"><span class="comment">// 重写run方法，写上自己的业务代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;喵喵，我是小猫咪&quot;</span> + times ++ + <span class="string">&quot;线程名&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (times == <span class="number">8</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//退出while循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 为什么是start方法然后执行run方法<br>cat.start();&#x2F;&#x2F; 启动线程</p><p>cat.run()，并没有启动一个线程，而是主线程调用run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class="line"><span class="comment">     * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">     * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">     * so that it can be added to the group&#x27;s list of threads</span></span><br><span class="line"><span class="comment">     * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class="line">    group.add(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        start0(); <span class="comment">//关键这个方法</span></span><br><span class="line">        started = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">              it will be passed up the call stack */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// native方法，是由jvm调用，底层是c/c++实现</span></span><br><span class="line"><span class="comment">// 真正实现多线程的效果，是start0()</span></span><br><span class="line"><span class="comment">// jvm调用start0() 线程变为就绪态，不一定立即执行，由cpu进行调度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="2、实现Runnable接口"><a href="#2、实现Runnable接口" class="headerlink" title="2、实现Runnable接口"></a>2、实现Runnable接口</h4><ul><li>java是单继承，某种情况下一个类可能已经继承了某个父类，java设计者提供Runnable接口创建进程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.com.thread_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/24 13:29</span></span><br><span class="line"><span class="comment"> * 实现Runnable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">        <span class="comment">// 设计模式 -- 静态代理 == 模拟实现机制</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;wangwang&quot;</span> + count++ +Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟Thread静态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="keyword">new</span> <span class="title class_">Tiger</span>());</span><br><span class="line">        proxy.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;aowu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟极简的Thread</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        start0(); <span class="comment">//真正实现多线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span> &#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、基本使用"><a href="#3、基本使用" class="headerlink" title="3、基本使用"></a>3、基本使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T1</span>();</span><br><span class="line">        <span class="type">T2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T2</span>();</span><br><span class="line">        Thread thread1= <span class="keyword">new</span> <span class="title class_">Thread</span>(t1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t2);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span> + count++);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hi&quot;</span> + count++);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、继承Thread-与-实现Runnable的区别"><a href="#4、继承Thread-与-实现Runnable的区别" class="headerlink" title="4、继承Thread 与 实现Runnable的区别"></a>4、继承Thread 与 实现Runnable的区别</h4><ol><li>从java的设计来看，通过继承Thread或者实现Runnable接口创建线程本质上没有区别</li><li>实现Runnable接口方式更加适合多个线程共享一个资源的情况，并且避免了单继承的限制</li></ol><p>建议使用Runnable接口 </p><h4 id="5、售票系统模拟"><a href="#5、售票系统模拟" class="headerlink" title="5、售票系统模拟"></a>5、售票系统模拟</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SellTicket01</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket01</span>();</span><br><span class="line">        <span class="type">SellTicket01</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket01</span>();</span><br><span class="line">        <span class="type">SellTicket01</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket01</span>();</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Thread</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicket01</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 三个进程都同时运行到这里</span></span><br><span class="line">            <span class="keyword">if</span> (num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;售出一张票，剩下&quot;</span> + (--num) );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">1</span>售出一张票，剩下<span class="number">1</span></span><br><span class="line">Thread-<span class="number">2</span>售出一张票，剩下<span class="number">2</span></span><br><span class="line">Thread-<span class="number">0</span>售出一张票，剩下<span class="number">0</span></span><br><span class="line">Thread-<span class="number">1</span>售出一张票，剩下-<span class="number">1</span></span><br><span class="line">售票结束</span><br><span class="line">Thread-<span class="number">2</span>售出一张票，剩下-<span class="number">1</span></span><br><span class="line">售票结束</span><br><span class="line">售票结束</span><br></pre></td></tr></table></figure><p>使用继承Thread仍存在这个问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Thread-2售出一张票，剩下1</span><br><span class="line">Thread-0售出一张票，剩下-1</span><br><span class="line">Thread-1售出一张票，剩下0</span><br><span class="line">售票结束</span><br><span class="line">售票结束</span><br><span class="line">售票结束</span><br></pre></td></tr></table></figure><p><strong>如何解决这个问题？</strong></p><h4 id="6、线程终止"><a href="#6、线程终止" class="headerlink" title="6、线程终止"></a>6、线程终止</h4><ol><li>线程完成任务自动退出</li><li>使用变量控制run方法退出停止线程，即通知方式</li></ol><h3 id="3、常用方法（一）"><a href="#3、常用方法（一）" class="headerlink" title="3、常用方法（一）"></a>3、常用方法（一）</h3><h4 id="1、setName"><a href="#1、setName" class="headerlink" title="1、setName"></a>1、setName</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Changes the name of this thread to be equal to the argument</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;name&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * First the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread is called</span></span><br><span class="line"><span class="comment"> * with no arguments. This may result in throwing a</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;SecurityException&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>      name   the new name for this thread.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  SecurityException  if the current thread cannot modify this</span></span><br><span class="line"><span class="comment"> *               thread.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #getName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #checkAccess()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;name cannot be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>) &#123;</span><br><span class="line">        setNativeName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、getName"><a href="#2、getName" class="headerlink" title="2、getName"></a>2、getName</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns this thread&#x27;s name.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  this thread&#x27;s name.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     #setName(String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、start"><a href="#3、start" class="headerlink" title="3、start"></a>3、start</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Causes this thread to begin execution; the Java Virtual Machine</span></span><br><span class="line"><span class="comment"> * calls the &lt;code&gt;run&lt;/code&gt; method of this thread.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The result is that two threads are running concurrently: the</span></span><br><span class="line"><span class="comment"> * current thread (which returns from the call to the</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;start&lt;/code&gt; method) and the other thread (which executes its</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;run&lt;/code&gt; method).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * It is never legal to start a thread more than once.</span></span><br><span class="line"><span class="comment"> * In particular, a thread may not be restarted once it has completed</span></span><br><span class="line"><span class="comment"> * execution.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  IllegalThreadStateException  if the thread was already</span></span><br><span class="line"><span class="comment"> *               started.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #run()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #stop()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class="line"><span class="comment">     * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">     * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">     * so that it can be added to the group&#x27;s list of threads</span></span><br><span class="line"><span class="comment">     * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class="line">    group.add(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        start0();</span><br><span class="line">        started = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">              it will be passed up the call stack */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、run"><a href="#4、run" class="headerlink" title="4、run"></a>4、run</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If this thread was constructed using a separate</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;Runnable&lt;/code&gt; run object, then that</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;Runnable&lt;/code&gt; object&#x27;s &lt;code&gt;run&lt;/code&gt; method is called;</span></span><br><span class="line"><span class="comment"> * otherwise, this method does nothing and returns.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Subclasses of &lt;code&gt;Thread&lt;/code&gt; should override this method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     #start()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     #stop()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     #Thread(ThreadGroup, Runnable, String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、setPriority"><a href="#5、setPriority" class="headerlink" title="5、setPriority"></a>5、setPriority</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Changes the priority of this thread.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * First the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread is called</span></span><br><span class="line"><span class="comment"> * with no arguments. This may result in throwing a</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;SecurityException&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Otherwise, the priority of this thread is set to the smaller of</span></span><br><span class="line"><span class="comment"> * the specified &lt;code&gt;newPriority&lt;/code&gt; and the maximum permitted</span></span><br><span class="line"><span class="comment"> * priority of the thread&#x27;s thread group.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newPriority priority to set this thread to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  IllegalArgumentException  If the priority is not in the</span></span><br><span class="line"><span class="comment"> *               range &lt;code&gt;MIN_PRIORITY&lt;/code&gt; to</span></span><br><span class="line"><span class="comment"> *               &lt;code&gt;MAX_PRIORITY&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  SecurityException  if the current thread cannot modify</span></span><br><span class="line"><span class="comment"> *               this thread.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #getPriority</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #checkAccess()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #getThreadGroup()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #MAX_PRIORITY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        #MIN_PRIORITY</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>        ThreadGroup#getMaxPriority()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setPriority</span><span class="params">(<span class="type">int</span> newPriority)</span> &#123;</span><br><span class="line">    ThreadGroup g;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((g = getThreadGroup()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class="line">            newPriority = g.getMaxPriority();</span><br><span class="line">        &#125;</span><br><span class="line">        setPriority0(priority = newPriority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、getPriority"><a href="#6、getPriority" class="headerlink" title="6、getPriority"></a>6、getPriority</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns this thread&#x27;s priority.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  this thread&#x27;s priority.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     #setPriority</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> priority;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、sleep"><a href="#7、sleep" class="headerlink" title="7、sleep"></a>7、sleep</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Causes the currently executing thread to sleep (temporarily cease</span></span><br><span class="line"><span class="comment"> * execution) for the specified number of milliseconds, subject to</span></span><br><span class="line"><span class="comment"> * the precision and accuracy of system timers and schedulers. The thread</span></span><br><span class="line"><span class="comment"> * does not lose ownership of any monitors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  millis</span></span><br><span class="line"><span class="comment"> *         the length of time to sleep in milliseconds</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment"> *          if the value of &#123;<span class="doctag">@code</span> millis&#125; is negative</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  InterruptedException</span></span><br><span class="line"><span class="comment"> *          if any thread has interrupted the current thread. The</span></span><br><span class="line"><span class="comment"> *          &lt;i&gt;interrupted status&lt;/i&gt; of the current thread is</span></span><br><span class="line"><span class="comment"> *          cleared when this exception is thrown.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException;</span><br></pre></td></tr></table></figure><h4 id="8、interrupt"><a href="#8、interrupt" class="headerlink" title="8、interrupt"></a>8、interrupt</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interrupts this thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Unless the current thread is interrupting itself, which is</span></span><br><span class="line"><span class="comment"> * always permitted, the &#123;<span class="doctag">@link</span> #checkAccess() checkAccess&#125; method</span></span><br><span class="line"><span class="comment"> * of this thread is invoked, which may cause a &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * SecurityException&#125; to be thrown.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If this thread is blocked in an invocation of the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * Object#wait() wait()&#125;, &#123;<span class="doctag">@link</span> Object#wait(long) wait(long)&#125;, or &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * Object#wait(long, int) wait(long, int)&#125; methods of the &#123;<span class="doctag">@link</span> Object&#125;</span></span><br><span class="line"><span class="comment"> * class, or of the &#123;<span class="doctag">@link</span> #join()&#125;, &#123;<span class="doctag">@link</span> #join(long)&#125;, &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * #join(long, int)&#125;, &#123;<span class="doctag">@link</span> #sleep(long)&#125;, or &#123;<span class="doctag">@link</span> #sleep(long, int)&#125;,</span></span><br><span class="line"><span class="comment"> * methods of this class, then its interrupt status will be cleared and it</span></span><br><span class="line"><span class="comment"> * will receive an &#123;<span class="doctag">@link</span> InterruptedException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If this thread is blocked in an I/O operation upon an &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.nio.channels.InterruptibleChannel InterruptibleChannel&#125;</span></span><br><span class="line"><span class="comment"> * then the channel will be closed, the thread&#x27;s interrupt</span></span><br><span class="line"><span class="comment"> * status will be set, and the thread will receive a &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.nio.channels.ClosedByInterruptException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If this thread is blocked in a &#123;<span class="doctag">@link</span> java.nio.channels.Selector&#125;</span></span><br><span class="line"><span class="comment"> * then the thread&#x27;s interrupt status will be set and it will return</span></span><br><span class="line"><span class="comment"> * immediately from the selection operation, possibly with a non-zero</span></span><br><span class="line"><span class="comment"> * value, just as if the selector&#x27;s &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.nio.channels.Selector#wakeup wakeup&#125; method were invoked.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If none of the previous conditions hold then this thread&#x27;s interrupt</span></span><br><span class="line"><span class="comment"> * status will be set. &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Interrupting a thread that is not alive need not have any effect.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment"> *          if the current thread cannot modify this thread</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@revised</span> 6.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@spec</span> JSR-51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interrupt</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> != Thread.currentThread())</span><br><span class="line">        checkAccess();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (blockerLock) &#123;</span><br><span class="line">        <span class="type">Interruptible</span> <span class="variable">b</span> <span class="operator">=</span> blocker;</span><br><span class="line">        <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</span><br><span class="line">            interrupt0();           <span class="comment">// Just to set the interrupt flag</span></span><br><span class="line">            b.interrupt(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    interrupt0();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、常用方法（二）"><a href="#4、常用方法（二）" class="headerlink" title="4、常用方法（二）"></a>4、常用方法（二）</h3><h4 id="1、yield"><a href="#1、yield" class="headerlink" title="1、yield"></a>1、yield</h4><p>线程的礼让，让出cpu，让其他线程执行，但礼让的时间不确定，所以也不一定礼让成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A hint to the scheduler that the current thread is willing to yield</span></span><br><span class="line"><span class="comment"> * its current use of a processor. The scheduler is free to ignore this</span></span><br><span class="line"><span class="comment"> * hint.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Yield is a heuristic attempt to improve relative progression</span></span><br><span class="line"><span class="comment"> * between threads that would otherwise over-utilise a CPU. Its use</span></span><br><span class="line"><span class="comment"> * should be combined with detailed profiling and benchmarking to</span></span><br><span class="line"><span class="comment"> * ensure that it actually has the desired effect.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; It is rarely appropriate to use this method. It may be useful</span></span><br><span class="line"><span class="comment"> * for debugging or testing purposes, where it may help to reproduce</span></span><br><span class="line"><span class="comment"> * bugs due to race conditions. It may also be useful when designing</span></span><br><span class="line"><span class="comment"> * concurrency control constructs such as the ones in the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.util.concurrent.locks&#125; package.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">yield</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="2、join"><a href="#2、join" class="headerlink" title="2、join"></a>2、join</h4><p>线程的插队。插队的线程一旦插队成功，则肯定先执行插入的线程的所有的任务</p><blockquote><p>案例：创建一个子线程，每个一秒输出hello。输出20次，主线程每隔一秒输出hi，输出20次；要求：两个线程同时执行，当主线程输出5次后，就让子线程运行完毕，主线程再继续</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T1</span>();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程吃了&quot;</span> + i + <span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    t1.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程吃了&quot;</span> + i + <span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、常用方法（三）"><a href="#5、常用方法（三）" class="headerlink" title="5、常用方法（三）"></a>5、常用方法（三）</h3><p>用户线程和守护进程</p><ul><li>用户线程：也叫工作线程，当线程的任务执行完成或通知方式结束</li><li>守护线程：一般是为工作线程服务，当所有的用户线程结束时，守护线程自动结束</li><li>常见的守护进程：辣鸡回收机制</li></ul><blockquote><p>将一个线程设置为守护线程</p></blockquote><h3 id="6、线程的生命周期"><a href="#6、线程的生命周期" class="headerlink" title="6、线程的生命周期"></a>6、线程的生命周期</h3><p>线程的状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread which has not yet started.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NEW,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a runnable thread.  A thread in the runnable</span></span><br><span class="line"><span class="comment">     * state is executing in the Java virtual machine but it may</span></span><br><span class="line"><span class="comment">     * be waiting for other resources from the operating system</span></span><br><span class="line"><span class="comment">     * such as processor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNNABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread blocked waiting for a monitor lock.</span></span><br><span class="line"><span class="comment">     * A thread in the blocked state is waiting for a monitor lock</span></span><br><span class="line"><span class="comment">     * to enter a synchronized block/method or</span></span><br><span class="line"><span class="comment">     * reenter a synchronized block/method after calling</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BLOCKED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread.</span></span><br><span class="line"><span class="comment">     * A thread is in the waiting state due to calling one of the</span></span><br><span class="line"><span class="comment">     * following methods:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join() Thread.join&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#park() LockSupport.park&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span></span><br><span class="line"><span class="comment">     * perform a particular action.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * on an object is waiting for another thread to call</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span></span><br><span class="line"><span class="comment">     * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * is waiting for a specified thread to terminate.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread with a specified waiting time.</span></span><br><span class="line"><span class="comment">     * A thread is in the timed waiting state due to calling one of</span></span><br><span class="line"><span class="comment">     * the following methods with a specified positive waiting time:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #sleep Thread.sleep&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait(long) Object.wait&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join(long) Thread.join&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a terminated thread.</span></span><br><span class="line"><span class="comment">     * The thread has completed execution.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/24/rOKwNWqtizoP1lL.png"></p><h3 id="7、线程同步"><a href="#7、线程同步" class="headerlink" title="7、线程同步"></a>7、线程同步</h3><p>线程同步机制：在多线程编程中，一些敏感数据不允许被多个线程同时访问，此时使用同步访问技术，<strong>保证数据在任何同一时刻，最多有一个线程访问</strong>，以保证数据的完整性</p><p>1、同步代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (对象) &#123; <span class="comment">//得到对象的锁，才能操作同步代码</span></span><br><span class="line">    <span class="comment">// 需要同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、声明方法，表示整个方法为同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pulic <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">// 需要同步的代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似于锁门排队上厕所</p><p><strong>synchronized 解决售票问题：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicket01</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 同步方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;售出一张票，剩下&quot;</span> + (--num) );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>互斥锁：</strong></p><ol><li>java语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性</li><li>每个对象都对应一个可称为”互斥锁“的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象</li><li>关键字synchronized 来与对象的互斥锁联系。当某个对象用synchronized修饰时，表明该对象在任一时刻只能有一个线程访问</li><li>同步的局限性：导致程序的执行效率要降低</li><li>同步方法（非静态）的锁可以是this，也可以是其他对象（要求是同一个对象）</li><li>同步方法（静态）的锁为当前类（类名.class）</li></ol><p><strong>细节：</strong></p><ol><li>普通方法使用synchronized，默认锁对象为this</li><li>静态方法使用synchronized，默认锁对象为类名.class</li><li>实现步骤：<br>1、分析上锁代码<br>2、尽量使用代码块<br>3、要求多个线程的锁为同一个对象</li></ol><h3 id="8、线程死锁"><a href="#8、线程死锁" class="headerlink" title="8、线程死锁"></a>8、线程死锁</h3><p>基本介绍：多个线程都占用了对方的锁资源，但不肯想让，导致了死锁</p><blockquote><p>模拟一个死锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">true</span>);</span><br><span class="line">        a.setName(<span class="string">&quot;线程A&quot;</span>);</span><br><span class="line">        a.start();</span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">false</span>);</span><br><span class="line">        b.setName(<span class="string">&quot;线程B&quot;</span>);</span><br><span class="line">        b.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">object1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">object2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeadLockDemo</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object1) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;进入1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (object2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;进入2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;进入3&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (object1) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;进入4&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线程B进入3</span><br><span class="line">线程A进入1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9、释放锁"><a href="#9、释放锁" class="headerlink" title="9、释放锁"></a>9、释放锁</h3><p><img src="https://i.loli.net/2021/05/24/JOGBVKfU2ZdvecY.png"></p><p><img src="https://i.loli.net/2021/05/24/2TnDFhRl5W9ks7C.png"></p><p>作业：两个进程同时存钱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.com.homework;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/24 22:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (money &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                money -= <span class="number">1000</span>;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;取出了1000&quot;</span> + <span class="string">&quot;当前余额&quot;</span> + money);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="day12"><a href="#day12" class="headerlink" title="day12"></a>day12</h1><blockquote><p>IO流</p><p>当初写爬虫的时候发现文件基础十分薄弱</p></blockquote><!--more--><h2 id="一、文件的基本使用"><a href="#一、文件的基本使用" class="headerlink" title="一、文件的基本使用"></a>一、文件的基本使用</h2><h3 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><p><strong>文件</strong>：保存数据的地方</p><p><strong>文件流</strong>：文件在程序中是以流的形式来操作的</p><p><strong>流（输入流&#x2F;输出流）</strong>：数据在文件和程序之间经历的路径</p><h3 id="2、常用文件操作"><a href="#2、常用文件操作" class="headerlink" title="2、常用文件操作"></a>2、常用文件操作</h3><h4 id="1、创建文件"><a href="#1、创建文件" class="headerlink" title="1、创建文件"></a>1、创建文件</h4><p>常用构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new &lt;code&gt;File&lt;/code&gt; instance by converting the given</span></span><br><span class="line"><span class="comment"> * pathname string into an abstract pathname.  If the given string is</span></span><br><span class="line"><span class="comment"> * the empty string, then the result is the empty abstract pathname.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   pathname  A pathname string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  NullPointerException</span></span><br><span class="line"><span class="comment"> *          If the &lt;code&gt;pathname&lt;/code&gt; argument is &lt;code&gt;null&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String pathname)</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new &lt;code&gt;File&lt;/code&gt; instance from a parent abstract</span></span><br><span class="line"><span class="comment"> * pathname and a child pathname string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   parent  The parent abstract pathname</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   child   The child pathname string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  NullPointerException</span></span><br><span class="line"><span class="comment"> *          If &lt;code&gt;child&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">File</span><span class="params">(File parent, String child)</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new &lt;code&gt;File&lt;/code&gt; instance from a parent pathname string</span></span><br><span class="line"><span class="comment"> * and a child pathname string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   parent  The parent pathname string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   child   The child pathname string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  NullPointerException</span></span><br><span class="line"><span class="comment"> *          If &lt;code&gt;child&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String parent, String child)</span> &#123;</span><br></pre></td></tr></table></figure><p>创建文件方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Atomically creates a new, empty file named by this abstract pathname if</span></span><br><span class="line"><span class="comment"> * and only if a file with this name does not yet exist.  The check for the</span></span><br><span class="line"><span class="comment"> * existence of the file and the creation of the file if it does not exist</span></span><br><span class="line"><span class="comment"> * are a single operation that is atomic with respect to all other</span></span><br><span class="line"><span class="comment"> * filesystem activities that might affect the file.</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;</span></span><br><span class="line"><span class="comment"> * Note: this method should &lt;i&gt;not&lt;/i&gt; be used for file-locking, as</span></span><br><span class="line"><span class="comment"> * the resulting protocol cannot be made to work reliably. The</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.nio.channels.FileLock FileLock&#125;</span></span><br><span class="line"><span class="comment"> * facility should be used instead.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &lt;code&gt;true&lt;/code&gt; if the named file does not exist and was</span></span><br><span class="line"><span class="comment"> *          successfully created; &lt;code&gt;false&lt;/code&gt; if the named file</span></span><br><span class="line"><span class="comment"> *          already exists</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IOException</span></span><br><span class="line"><span class="comment"> *          If an I/O error occurred</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment"> *          If a security manager exists and its &lt;code&gt;&#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> *          java.lang.SecurityManager#checkWrite(java.lang.String)&#125;&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> *          method denies write access to the file</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">createNewFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">security</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (security != <span class="literal">null</span>) security.checkWrite(path);</span><br><span class="line">    <span class="keyword">if</span> (isInvalid()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Invalid file path&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2、获取文件信息"><a href="#2、获取文件信息" class="headerlink" title="2、获取文件信息"></a>2、获取文件信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the name of the file or directory denoted by this abstract</span></span><br><span class="line"><span class="comment"> * pathname.  This is just the last name in the pathname&#x27;s name</span></span><br><span class="line"><span class="comment"> * sequence.  If the pathname&#x27;s name sequence is empty, then the empty</span></span><br><span class="line"><span class="comment"> * string is returned.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the absolute pathname string of this abstract pathname.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAbsolutePath</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the pathname string of this abstract pathname&#x27;s parent, or</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;null&lt;/code&gt; if this pathname does not name a parent directory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getParent</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests whether the file or directory denoted by this abstract pathname</span></span><br><span class="line"><span class="comment"> * exists.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests whether the file denoted by this abstract pathname is a</span></span><br><span class="line"><span class="comment"> * directory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDirectory</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests whether the file denoted by this abstract pathname is a normal</span></span><br><span class="line"><span class="comment"> * file.  A file is &lt;em&gt;normal&lt;/em&gt; if it is not a directory and, in</span></span><br><span class="line"><span class="comment"> * addition, satisfies other system-dependent criteria.  Any non-directory</span></span><br><span class="line"><span class="comment"> * file created by a Java application is guaranteed to be a normal file.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFile</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the length of the file denoted by this abstract pathname.</span></span><br><span class="line"><span class="comment"> * The return value is unspecified if this pathname denotes a directory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">length</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><h4 id="3、目录的操作和文件的删除"><a href="#3、目录的操作和文件的删除" class="headerlink" title="3、目录的操作和文件的删除"></a>3、目录的操作和文件的删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates the directory named by this abstract pathname.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mkdir</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates the directory named by this abstract pathname, including any</span></span><br><span class="line"><span class="comment"> * necessary but nonexistent parent directories.  Note that if this</span></span><br><span class="line"><span class="comment"> * operation fails it may have succeeded in creating some of the necessary</span></span><br><span class="line"><span class="comment"> * parent directories.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mkdirs</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Deletes the file or directory denoted by this abstract pathname.  If</span></span><br><span class="line"><span class="comment"> * this pathname denotes a directory, then the directory must be empty in</span></span><br><span class="line"><span class="comment"> * order to be deleted.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br></pre></td></tr></table></figure><h2 id="二、IO流原理及流的分类"><a href="#二、IO流原理及流的分类" class="headerlink" title="二、IO流原理及流的分类"></a>二、IO流原理及流的分类</h2><p>流的分类：</p><ul><li>按操作数据单位不同分为：字节流（8 bit），字符流</li><li>按数据的流向不同分为：输入流、输出流</li><li>按流的角色不同分为：节点流、处理流&#x2F;包装流</li></ul><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><p>java的Io流设计40多个类，掌握常用即可</p><h2 id="三、FileInputStream-x2F-OutputStream"><a href="#三、FileInputStream-x2F-OutputStream" class="headerlink" title="三、FileInputStream&#x2F;OutputStream"></a>三、FileInputStream&#x2F;OutputStream</h2><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2021/05/25/W3TgFMqBL8P1cbr.png"></h3><p>输入案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileInputStream= <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;f:\\hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((read = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)read);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileInputStream= <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;f:\\hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,readLen));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/25/kYqnQxEp6INTz9h.png"></p><p>输出案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入内容时会覆盖原来的内容</span></span><br><span class="line">        fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;f:\\a.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入一个字节</span></span><br><span class="line">        fileOutputStream.write(<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;cyfwlp&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line">        fileOutputStream.write(bytes,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例：文件拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> <span class="string">&quot;f:\\b.jpg&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> <span class="string">&quot;f:\\a.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]; <span class="comment">// 1m</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(source);</span><br><span class="line">        fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(target);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fileOutputStream.write(buf,<span class="number">0</span>,readLen);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="四、FileReader-x2F-Writer"><a href="#四、FileReader-x2F-Writer" class="headerlink" title="四、FileReader&#x2F;Writer"></a>四、FileReader&#x2F;Writer</h2><blockquote><p>发现方法差不多，注意细节就行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;f:\\story.txt&quot;</span>);</span><br><span class="line">    <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">8</span>];</span><br><span class="line">    <span class="type">int</span> readLen;</span><br><span class="line">    <span class="keyword">while</span> ((readLen = fileReader.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        java.lang.<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.lang.String(buf,<span class="number">0</span>,readLen);</span><br><span class="line">        System.out.print(str);</span><br><span class="line">    &#125;</span><br><span class="line">    fileReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;f:\\aaa.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">fileWriter.write(<span class="string">&#x27;h&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须关闭或刷新才能写入成功</span></span><br><span class="line"><span class="comment">// 追源码可发现</span></span><br><span class="line">fileWriter.close();</span><br></pre></td></tr></table></figure><h2 id="五、节点流和处理流"><a href="#五、节点流和处理流" class="headerlink" title="五、节点流和处理流"></a>五、节点流和处理流</h2><p>节点流：从一个特定的数据源<strong>读写数据</strong>，如FileReader,FileWriter</p><p>处理流（也叫<strong>包装流</strong>）：连接在已存在的流（节点流或处理流）之上，为程序提供更强大的读写功能，也更加灵活、如BufferedReader、BufferecdWriter</p><p><img src="https://i.loli.net/2021/05/25/uUkFhveoWr6RKE1.png" alt="image-20210525161606501"></p><p>BufferedReader有属性Reader，可以封装一个节点流，该节点流可以是任何Reader的子类</p><p><strong>区别：</strong></p><ol><li>节点流是低级流&#x2F;底层流，直接与数据源相连</li><li>处理流（包装流）包装节点流，可以消除不同节点流的实现差异，提供更方便的方法实现输入和输出</li><li>处理流使用<strong>修饰器设计模式Decorator（也译为装饰模式）</strong></li></ol><p><strong>处理流优势：</strong></p><ol><li>性能的提高：增加缓冲的方式提高输入输出效率</li><li>操作的便捷：消除不同节点流的差异，调用相同方法即可</li></ol><p><strong>修饰器模式（Decorator）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readString</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/25 16:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReader_</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读文件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringReader_</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readString</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读取字符串&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferReader_</span> <span class="keyword">extends</span> <span class="title class_">Reader</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Reader reader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferReader_</span><span class="params">(Reader reader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.reader = reader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拓展方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFiles</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            reader.readFile();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readStrings</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            reader.readString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、Buffer-InputStream-x2F-OutputStream"><a href="#六、Buffer-InputStream-x2F-OutputStream" class="headerlink" title="六、Buffer InputStream&#x2F;OutputStream"></a>六、Buffer InputStream&#x2F;OutputStream</h2><ol><li>属于字节流</li><li>关闭时关闭外层流即可</li></ol><p><strong>拷贝案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;f:\\a.jpg&quot;</span>));</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;f:\\b.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((readLen = bufferedInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    bufferedOutputStream.write(buf,<span class="number">0</span>,readLen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bufferedInputStream.close();</span><br><span class="line">bufferedOutputStream.close();</span><br></pre></td></tr></table></figure><h2 id="七、Buffer-Reader-x2F-Writer"><a href="#七、Buffer-Reader-x2F-Writer" class="headerlink" title="七、Buffer Reader&#x2F;Writer"></a>七、Buffer Reader&#x2F;Writer</h2><ol><li>属于字符流</li><li>关闭时关闭外层流即可（追源码）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭包装的节点流</span></span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            in = <span class="literal">null</span>;</span><br><span class="line">            cb = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;f:\\story.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">String line;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按行读取</span></span><br><span class="line"><span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bufferedReader.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;f:\\a.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">bufferedWriter.write(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line"><span class="comment">// 插入和系统相关的换行符</span></span><br><span class="line">bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">bufferedWriter.write(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">bufferedWriter.write(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">bufferedWriter.close();</span><br></pre></td></tr></table></figure><p><strong>拷贝文本文件案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;f:\\a.txt&quot;</span>));</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;f:\\story.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    bufferedWriter.write(line);</span><br><span class="line">    bufferedWriter.newLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bufferedReader.close();</span><br><span class="line">bufferedWriter.close();</span><br></pre></td></tr></table></figure><h2 id="八、对象流-Object-InputStream-x2F-OutputStream"><a href="#八、对象流-Object-InputStream-x2F-OutputStream" class="headerlink" title="八、对象流-Object InputStream&#x2F;OutputStream"></a>八、对象流-Object InputStream&#x2F;OutputStream</h2><p>需求：需要保存对象到文件 – 保存值和数据类型</p><p>序列化和反序列化：</p><p>序列化：保存数据时，保存<strong>数据的值</strong>和<strong>数据类型</strong></p><p>反序列化：取出数据时，取出<strong>值</strong>和<strong>数据类型</strong>，恢复为对象</p><p>写入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 序列化后保存的文件格式不是纯文本</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;f:\\aa.dat&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">objectOutputStream.writeInt(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">objectOutputStream.writeBoolean(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">objectOutputStream.writeDouble(<span class="number">9.5</span>);</span><br><span class="line"></span><br><span class="line">objectOutputStream.writeUTF(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line"></span><br><span class="line">objectOutputStream.writeObject(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;xiaowang&quot;</span>,<span class="number">11</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">objectOutputStream.close();</span><br></pre></td></tr></table></figure><p>读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;f:\\aa.dat&quot;</span>;</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line"></span><br><span class="line">System.out.println(objectInputStream.readInt());</span><br><span class="line">System.out.println(objectInputStream.readBoolean());</span><br><span class="line">System.out.println(objectInputStream.readDouble());</span><br><span class="line">System.out.println(objectInputStream.readUTF());</span><br><span class="line">System.out.println(objectInputStream.readObject());</span><br></pre></td></tr></table></figure><p><strong>细节：</strong></p><ol><li>读写顺序一致</li><li>要求序列化或反序列化的对象，需要实现Serializeble接口</li><li>序列化的类中建议添加SerialVersionUID，为了提高版本的兼容性</li><li>序列化时，默认将所有属性序列化，除了<strong>static</strong>属性和<strong>transient</strong>属性</li><li>序列化时，要求属性也实现序列化接口</li></ol><p><strong>标准输入、输出流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &quot;standard&quot; input stream. This stream is already</span></span><br><span class="line"><span class="comment"> * open and ready to supply input data. Typically this stream</span></span><br><span class="line"><span class="comment"> * corresponds to keyboard input or another input source specified by</span></span><br><span class="line"><span class="comment"> * the host environment or user.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 键盘</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &quot;standard&quot; output stream. This stream is already</span></span><br><span class="line"><span class="comment"> * open and ready to accept output data. Typically this stream</span></span><br><span class="line"><span class="comment"> * corresponds to display output or another output destination</span></span><br><span class="line"><span class="comment"> * specified by the host environment or user.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//显示器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="九、转换流-InputStreamReader-x2F-OutputStreamWriter"><a href="#九、转换流-InputStreamReader-x2F-OutputStreamWriter" class="headerlink" title="九、转换流-InputStreamReader&#x2F;OutputStreamWriter"></a>九、转换流-InputStreamReader&#x2F;OutputStreamWriter</h2><p>乱码问题 引出 转换流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;f:\\a.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 默认情况下按照utf-8编码读取</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">System.out.println(s);</span><br><span class="line">br.close();</span><br></pre></td></tr></table></figure><p>若a.txt编码不为utf-8则乱码</p><p><strong>字节流 -&gt; 字符流 （指定编码）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an InputStreamReader that uses the given charset.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  in       An InputStream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  cs       A charset</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@spec</span> JSR-51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputStreamReader</span><span class="params">(InputStream in, Charset cs)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(in);</span><br><span class="line">    <span class="keyword">if</span> (cs == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;charset&quot;</span>);</span><br><span class="line">    sd = StreamDecoder.forInputStreamReader(in, <span class="built_in">this</span>, cs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字符流 -&gt; 字节流 （指定编码）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an OutputStreamWriter that uses the given charset.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  out</span></span><br><span class="line"><span class="comment"> *         An OutputStream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  cs</span></span><br><span class="line"><span class="comment"> *         A charset</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@spec</span> JSR-51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">OutputStreamWriter</span><span class="params">(OutputStream out, Charset cs)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(out);</span><br><span class="line">    <span class="keyword">if</span> (cs == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;charset&quot;</span>);</span><br><span class="line">    se = StreamEncoder.forOutputStreamWriter(out, <span class="built_in">this</span>, cs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理文本数据，字符流效率更高，且解决中文乱码问题，建议将字节流转为字符流</p><p>解决乱码问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;f:\\a.txt&quot;</span>);</span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fr,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line">bufferedReader.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;f:\\a.txt&quot;</span>);</span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">outputStreamWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fileOutputStream,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(outputStreamWriter);</span><br><span class="line">bw.write(<span class="string">&quot;廖涛&quot;</span>);</span><br><span class="line">bw.close();</span><br></pre></td></tr></table></figure><h2 id="十、打印流-PrintStream-x2F-PrintWriter"><a href="#十、打印流-PrintStream-x2F-PrintWriter" class="headerlink" title="十、打印流 PrintStream&#x2F;PrintWriter"></a><strong>十、打印流 PrintStream&#x2F;PrintWriter</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规使用</span></span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// print底层调用write方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span>) &#123;</span><br><span class="line">        s = <span class="string">&quot;null&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    write(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出到文件</span></span><br><span class="line">System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;e:\\aaa.txt&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;111&quot;</span>);</span><br></pre></td></tr></table></figure><p>PrintWriter差不多</p><h2 id="十一、Properties类"><a href="#十一、Properties类" class="headerlink" title="十一、Properties类"></a>十一、Properties类</h2><p><strong>常用于读取配置文件或写入配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ip</span>=<span class="string">192.168.12.12</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>传统方法实现较为麻烦 -&gt; 引出 Properties类</p><p>配置文件格式：</p><p>键&#x3D;值</p><p>键&#x3D;值</p><p>若含有中文，存为unicode码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;G:\\idea_project\\javaBasicHan\\src\\day14\\properties_\\mysql.properties&quot;</span>));</span><br><span class="line">properties.list(System.out);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">System.out.println(username);</span><br><span class="line"></span><br><span class="line">properties.setProperty(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;汤姆&quot;</span>);</span><br><span class="line"></span><br><span class="line">properties.store(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;G:\\idea_project\\javaBasicHan\\src\\day14\\properties_\\mysql.properties&quot;</span>),<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/25/MQO1fLd2KeWoJSv.png"></p><hr><h1 id="day13"><a href="#day13" class="headerlink" title="day13"></a>day13</h1><blockquote><p>网络编程</p></blockquote><!--more--><h2 id="一、网络相关概念"><a href="#一、网络相关概念" class="headerlink" title="一、网络相关概念"></a>一、网络相关概念</h2><p>学过计网，不再讨论</p><h2 id="二、InetAddress类"><a href="#二、InetAddress类" class="headerlink" title="二、InetAddress类"></a>二、InetAddress类</h2><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">System.out.println(localHost);</span><br><span class="line"></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">host1</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;DESKTOP-P6D5FT4&quot;</span>);</span><br><span class="line">System.out.println(host1);</span><br><span class="line"></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">host2</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;taoblog421.cn&quot;</span>);</span><br><span class="line">System.out.println(host2);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">ipAddress</span> <span class="operator">=</span> host2.getHostAddress();</span><br><span class="line">System.out.println(ipAddress);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">hostName</span> <span class="operator">=</span> host2.getHostName(); <span class="comment">//返回主机名或域名</span></span><br><span class="line">System.out.println(hostName);</span><br></pre></td></tr></table></figure><h2 id="三、Soket（一）"><a href="#三、Soket（一）" class="headerlink" title="三、Soket（一）"></a>三、Soket（一）</h2><ol><li>套接字（Socket）开发网络应用程序被广泛采用</li><li>通信的两端都有Socket，是两台机器间通信的端点</li><li>网络通信其实就是Socket间的通信</li><li>Socket允许把网络连接当成一个流，数据在两个Socket之间通过IO传输</li><li>一般吧主动发起通信的应用程序称为客户端，等待通信请求的为服务端</li></ol><p><img src="https://i.loli.net/2021/05/27/TmM4sc6XQEoq8Ax.png"></p><h3 id="1、tcp网络通信编程-一"><a href="#1、tcp网络通信编程-一" class="headerlink" title="1、tcp网络通信编程(一)"></a>1、tcp网络通信编程(一)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端启动&quot;</span>);</span><br><span class="line">        <span class="comment">// 在本机9999端口监听，等待连接</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有客户端连接则返回socket连接对象，程序继续</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> readLen;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,readLen));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器退出&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 连接指定主机的9999端口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接成功返回socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(),<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;hello,server&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端启动&quot;</span>);</span><br><span class="line">        <span class="comment">// 在本机9999端口监听，等待连接</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有客户端连接则返回socket连接对象，程序继续</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> readLen;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,readLen));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;hello,client&quot;</span>.getBytes());</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器退出&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 连接指定主机的9999端口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接成功返回socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(),<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 结束标志</span></span><br><span class="line">        outputStream.write(<span class="string">&quot;hello,server&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 结束输出</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> readLen;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,readLen));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.0 字符流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若使用newline结束标志，另一端需要是用readline读取</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line"></span><br><span class="line">        String str;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((str = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        bufferedWriter.flush(); <span class="comment">//需要手动刷新</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">outputStreamWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(outputStreamWriter);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;你好啊&quot;</span>);</span><br><span class="line">        bufferedWriter.flush(); <span class="comment">//需要手动刷新</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        String str;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((str = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、tcp网络通信编程-二）"><a href="#2、tcp网络通信编程-二）" class="headerlink" title="2、tcp网络通信编程(二）"></a>2、tcp网络通信编程(二）</h3><p><img src="https://i.loli.net/2021/05/27/fEaDAR9M2PlbKnI.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端启动.......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.InputStreamTOByte(bufferedInputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将得到的字节数组写入到指定的文件</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:\\aa.jpg&quot;</span>));</span><br><span class="line">        bufferedOutputStream.write(bytes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//向客户端回复收到图片</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;收到图片&quot;</span>);</span><br><span class="line">        bufferedWriter.flush();</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(),<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:\\a.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件的内容</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.InputStreamTOByte(bufferedInputStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        bufferedOutputStream.write(bytes);</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收回复的消息</span></span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> StreamUtils.InputStreamTOString(inputStream);</span><br><span class="line">        System.out.println(string);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、netstat"><a href="#3、netstat" class="headerlink" title="3、netstat"></a>3、netstat</h3><p>netstat -an 可以查看当前主机的网络情况，包括<strong>监听端口</strong>和<strong>网络连接</strong>情况</p><p><img src="https://i.loli.net/2021/05/27/HUhGCgWlYSiKtV7.png"></p><h3 id="4、tcp秘密"><a href="#4、tcp秘密" class="headerlink" title="4、tcp秘密"></a>4、tcp秘密</h3><ul><li>当客户端连接到服务器端后，实际上客户端也是通过一个端口和服务器进行通讯的，这个端口是TCP&#x2F;IP来分配的，是不确定的，随机的</li></ul><h2 id="四、Soket（二）"><a href="#四、Soket（二）" class="headerlink" title="四、Soket（二）"></a>四、Soket（二）</h2><ul><li>类DaragramSocket和DatagramPacket，实现了基于UDP协议的网络程序</li></ul><h3 id="1、udp网络通信编程（了解）"><a href="#1、udp网络通信编程（了解）" class="headerlink" title="1、udp网络通信编程（了解）"></a>1、udp网络通信编程（了解）</h3><p><img src="https://i.loli.net/2021/05/27/hqzodvx2cyMF1UD.png"></p><p><img src="https://i.loli.net/2021/05/27/OQt4xU6LR3WbAo9.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 9998接口接收数据</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="string">&quot;明天吃火锅去吗&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>],<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        socket.receive(packet1);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet1.getLength();</span><br><span class="line">        <span class="type">byte</span>[] respond = packet1.getData();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(respond,<span class="number">0</span>,length));</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">datagramSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">datagramPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf,buf.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用接收方法，没接收到则阻塞</span></span><br><span class="line">        datagramSocket.receive(datagramPacket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拆包，取出数据并显示</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> datagramPacket.getLength();</span><br><span class="line">        <span class="type">byte</span>[] data = datagramPacket.getData();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,length));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] replay = <span class="string">&quot;有事，你自己去吧&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(replay, replay.length, InetAddress.getLocalHost(), <span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        datagramSocket.send(packet);</span><br><span class="line"></span><br><span class="line">        datagramSocket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、多用户通讯系统"><a href="#五、多用户通讯系统" class="headerlink" title="五、多用户通讯系统"></a>五、多用户通讯系统</h2><h3 id="1、软件开发流程"><a href="#1、软件开发流程" class="headerlink" title="1、软件开发流程"></a>1、软件开发流程</h3><p><img src="https://i.loli.net/2021/05/27/CaMt2BZeLoSOQvN.png"></p><h3 id="2、需求分析"><a href="#2、需求分析" class="headerlink" title="2、需求分析"></a>2、需求分析</h3><ol><li>用户登录</li><li>拉取在线用户列表</li><li>无异常退出</li><li>私聊</li><li>群聊</li><li>发文件</li><li>服务器推送新闻</li></ol><h3 id="3、功能实现-整体分析"><a href="#3、功能实现-整体分析" class="headerlink" title="3、功能实现 - 整体分析"></a>3、功能实现 - 整体分析</h3><p><img src="https://i.loli.net/2021/05/27/2dvI1ixWzJsLoKT.png"></p><h4 id="1、功能实现-用户登录"><a href="#1、功能实现-用户登录" class="headerlink" title="1、功能实现 - 用户登录"></a>1、功能实现 - 用户登录</h4><p>实现上图所示的各条线</p><h4 id="2、功能实现-拉取在线用户"><a href="#2、功能实现-拉取在线用户" class="headerlink" title="2、功能实现 - 拉取在线用户"></a>2、功能实现 - 拉取在线用户</h4><h4 id="3、功能实现-正常退出"><a href="#3、功能实现-正常退出" class="headerlink" title="3、功能实现 - 正常退出"></a>3、功能实现 - 正常退出</h4><p><img src="https://i.loli.net/2021/05/28/G5RL3qrIDJy4xzA.png"></p><h4 id="4、功能实现-私聊"><a href="#4、功能实现-私聊" class="headerlink" title="4、功能实现 - 私聊"></a>4、功能实现 - 私聊</h4><p><img src="https://i.loli.net/2021/05/29/SeqiMHfvkTnE9hF.png"></p><h4 id="5、功能实现-群聊"><a href="#5、功能实现-群聊" class="headerlink" title="5、功能实现 - 群聊"></a>5、功能实现 - 群聊</h4><p>和私聊差不多</p><h4 id="6、功能实现-发文件"><a href="#6、功能实现-发文件" class="headerlink" title="6、功能实现 - 发文件"></a>6、功能实现 - 发文件</h4><p><img src="https://i.loli.net/2021/05/29/vXIZSn9OJjQ1Hht.png"></p><h4 id="7、功能实现-服务器推送"><a href="#7、功能实现-服务器推送" class="headerlink" title="7、功能实现-服务器推送"></a>7、功能实现-服务器推送</h4><p>其实和群发差不多</p><p><img src="https://i.loli.net/2021/05/29/i2HI5yp1xXchsUJ.png"></p><h4 id="8、功能实现-离线发送留言和文件"><a href="#8、功能实现-离线发送留言和文件" class="headerlink" title="8、功能实现-离线发送留言和文件"></a>8、功能实现-离线发送留言和文件</h4><p>拓展功能 独自实现</p><p><img src="https://i.loli.net/2021/05/29/YJNG9y2jiAQ6RSW.png"></p><blockquote><p>确实通过这个项目学到不少</p></blockquote><hr><h1 id="day14"><a href="#day14" class="headerlink" title="day14"></a>day14</h1><blockquote><p>反射</p></blockquote><!--more--><h2 id="一、反射机制"><a href="#一、反射机制" class="headerlink" title="一、反射机制"></a>一、反射机制</h2><h3 id="1、需求引出反射"><a href="#1、需求引出反射" class="headerlink" title="1、需求引出反射"></a>1、需求引出反射</h3><blockquote><p>从配置文件读取类的全限定类名和方法名，在程序中调用这个方法</p></blockquote><p>传统方法无法实现 – 反射</p><p><em>这样的需求在学习框架时比价多，即通过外部文件配置，在不修改源码的情况下来控制程序，也符合设计模式的ocp原则（开闭原则）</em></p><p>反射快速入门：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">classpath</span> <span class="operator">=</span> <span class="string">&quot;basic.day16.reflect1.Cat&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;f2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射快速入门</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(classpath);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(methodName);</span><br><span class="line">method.invoke(o);</span><br></pre></td></tr></table></figure><h3 id="2、反射机制"><a href="#2、反射机制" class="headerlink" title="2、反射机制"></a>2、反射机制</h3><p><strong>加载完类</strong>之后，在<strong>堆</strong>中会产生一个<strong>Class类型</strong>的<strong>对象</strong>（一个类只有一个Class对象），这个对象包含了类的额完整结构信息。通过这个对象得到类的结构。这个对象就像一面镜子，通过这个镜子看到类的结构，故称为 - 反射。</p><p>反射机制原理图</p><p><img src="https://i.loli.net/2021/05/31/2fYNODIBsXv45iU.png"></p><h3 id="3、反射优化"><a href="#3、反射优化" class="headerlink" title="3、反射优化"></a>3、反射优化</h3><p>优点：动态的创建和使用对象（框架底层核心）</p><p>缺点：效率低，解释执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    f1();</span><br><span class="line">    f2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">90000000</span>; i++) &#123;</span><br><span class="line">        cat.f1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(end - start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">classpath</span> <span class="operator">=</span> <span class="string">&quot;basic.day16.reflect1.Cat&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;f1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; aClass = Class.forName(classpath);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> aClass.getMethod(methodName);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">90000000</span>; i++) &#123;</span><br><span class="line">        method.invoke(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化：</strong></p><p>关闭访问检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用方法是取消访问检测</span></span><br><span class="line">method.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="二、Class类"><a href="#二、Class类" class="headerlink" title="二、Class类"></a>二、Class类</h2><ul><li>Class对象不是new出来的，而是系统创建的</li></ul><p>new对象的时候：</p><p><img src="https://i.loli.net/2021/05/31/usrQDH1AvZ3PBcm.png"></p><p>反射创建对象：</p><p><img src="https://i.loli.net/2021/05/31/6145Wx7Tp2cewQn.png"></p><p>都会进到<strong>ClassLoader</strong>的<strong>loadClass</strong>方法</p><p>loadClass方法就是创建类的Class对象</p><ul><li><p>每个对象都会记得自己是由哪一个Class对象生成的</p></li><li><p>通过Class对象可以获得一个类的完整结构</p></li><li><p>类的字节码二进制数据，是放在方法区的</p></li></ul><h3 id="1、常用方法"><a href="#1、常用方法" class="headerlink" title="1、常用方法"></a>1、常用方法</h3><p>常用方法都是见面知其意</p><h3 id="2、获取Class对象的方式"><a href="#2、获取Class对象的方式" class="headerlink" title="2、获取Class对象的方式"></a>2、获取Class对象的方式</h3><h4 id="1、Class-forName"><a href="#1、Class-forName" class="headerlink" title="1、Class.forName()"></a>1、Class.forName()</h4><p>多用于从配置文件读取（回忆以前写xml文件，有好多全限定类名）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;basic.day16.reflect1.Cat&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="2、类名-class"><a href="#2、类名-class" class="headerlink" title="2、类名.class"></a>2、类名.class</h4><p>参数的传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Cat&gt; aClass = Cat.class;</span><br></pre></td></tr></table></figure><h4 id="3、对象-class"><a href="#3、对象-class" class="headerlink" title="3、对象.class"></a>3、对象.class</h4><p>创建好对象，得到Classd对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">cat.getClass();</span><br></pre></td></tr></table></figure><h4 id="4、类加载器得到"><a href="#4、类加载器得到" class="headerlink" title="4、类加载器得到"></a>4、类加载器得到</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> cat.getClass().getClassLoader();</span><br><span class="line">Class&lt;?&gt; cls3 = classLoader.loadClass(<span class="string">&quot;basic.day16.reflect1.Cat&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="3、哪些类有Class对象"><a href="#3、哪些类有Class对象" class="headerlink" title="3、哪些类有Class对象"></a>3、哪些类有Class对象</h3><ol><li>外部类，内部类（成员内部类、静态内部类、局部内部类、匿名内部类）</li><li>接口</li><li>数组</li><li>枚举</li><li>注解</li><li>基本数据类型</li><li>void</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; stringClass = String.class;</span><br><span class="line"></span><br><span class="line">Class&lt;Serializable&gt; serializableClass = Serializable.class;</span><br><span class="line"></span><br><span class="line">Class&lt;Integer[]&gt; aClass = Integer[].class;</span><br><span class="line"></span><br><span class="line">Class&lt;Enum&gt; enumClass = Enum.class;</span><br><span class="line"></span><br><span class="line">Class&lt;Deprecated&gt; deprecatedClass = Deprecated.class;</span><br><span class="line"></span><br><span class="line">Class&lt;Integer&gt; integerClass = <span class="type">int</span>.class;</span><br><span class="line"></span><br><span class="line">Class&lt;Void&gt; voidClass = <span class="keyword">void</span>.class;</span><br><span class="line"></span><br><span class="line">Class&lt;Class&gt; classClass = Class.class;</span><br></pre></td></tr></table></figure><h2 id="三、类加载"><a href="#三、类加载" class="headerlink" title="三、类加载"></a>三、类加载</h2><p><strong>基本说明：</strong></p><p>反射机制是java实现动态语言的关键，也就是通过反射实现类动态加载</p><p><strong>静态加载</strong>：编译时加载相关的类，如果没有则报错，依赖性太强</p><p><strong>动态加载</strong>：运行时加载需要的类，如果运行时不用该类，则不报错，降低依赖</p><p><strong>类加载时机：</strong></p><ul><li>new 对象时</li><li>子类被加载时，父类被加载</li><li>调用类中的静态成员</li><li>通过反射</li></ul><p><img src="https://i.loli.net/2021/05/31/GDoJyYOx2mE9QBe.png"></p><p><img src="https://i.loli.net/2021/05/31/hmiSNQMj3KxBrIA.png"></p><p><strong>加载（Loading）</strong>:将字节码从不同数据源（可能是.class文件，也可能是jar包，甚至网络）转化为二级制流加载到内存中，并生成一个该类的java.lang.Class对象</p><p><strong>连接（Linging）</strong>:</p><p>​    <strong>验证（verification）：</strong></p><p>​    确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的安全，包括：文件格式验证（是否以魔数oxcafebabe开头）等。</p><p>​    可以考虑使用-Xverify:none参数来关闭大部分类验证措施，缩短虚拟机类加载的时间</p><p>​    <strong>准备（preparration）：</strong></p><p>​    静态变量分配内存并默认初始化，这些变量使用的内存在堆中分配</p><p>​    <strong>解析（resolution）：</strong></p><p>​    虚拟机将常量池的<strong>符号引用</strong>替换为<strong>直接引用</strong>的过程</p><p><strong>初始化（initialization）：</strong></p><p>执行<clinit>()方法的过程</p><p><clinit>()方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中所有的<strong>静态变量</strong>的赋值动作和<strong>静态代码块</strong>中的语句，并进行合并</p><p>虚拟机会保证一个类的<clinit>()方法在多线程环境中正确的被加锁，同步；如果多个线程同时去初始化一个类，那么只会有一个线程去执行类的<clinit>()方法，其他线性将阻塞等待</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//1 加载b类，生成class对象</span></span><br><span class="line">        <span class="comment">//2 连接 num = 0</span></span><br><span class="line">        <span class="comment">//3 初始化</span></span><br><span class="line">        <span class="comment">// clinit() &#123;</span></span><br><span class="line">        <span class="comment">//    num = 300;</span></span><br><span class="line">        <span class="comment">//    System.out.println(&quot;b的静态代码块被执行&quot;);</span></span><br><span class="line">        <span class="comment">//    num = 100;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        System.out.println(B.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;b的静态代码块被执行&quot;</span>);</span><br><span class="line">        num = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/02/AqVPupyRsHZbLMI.png" alt="image-20210602122828296"></p><p>jvm底层再深入研究</p><h2 id="四、反射获取类的结构信息"><a href="#四、反射获取类的结构信息" class="headerlink" title="四、反射获取类的结构信息"></a>四、反射获取类的结构信息</h2><p>方法都是所见即所得，无需专门记录，使用查询文档即可</p><p><a href="https://tool.oschina.net/apidocs/apidoc?api=jdk-zh">在线文档</a></p><h2 id="五、通过反射创建对象"><a href="#五、通过反射创建对象" class="headerlink" title="五、通过反射创建对象"></a>五、通过反射创建对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/2 12:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectCreateInstance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;basic.day16.reflect_.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user1</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; constructor = cls.getConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user2</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; constructor1 = cls.getDeclaredConstructor(<span class="type">int</span>.class, String.class);</span><br><span class="line">        <span class="comment">//爆破</span></span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user3</span> <span class="operator">=</span> constructor1.newInstance(<span class="number">12</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(user3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/2 13:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectUseField</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;basic.day16.reflect_.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">student</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        age.set(student,<span class="number">88</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//静态变量可以传null</span></span><br><span class="line">        name.set(<span class="literal">null</span>,<span class="string">&quot;小王&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(name.get(<span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;name=&quot;</span> + name +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/2 13:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectUseMethods</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;basic.day16.reflect_.AA&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">f1</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;f1&quot;</span>, String.class, <span class="type">int</span>.class);</span><br><span class="line">        f1.invoke(<span class="literal">null</span>,<span class="string">&quot;123&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">aa</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">f2</span> <span class="operator">=</span> cls.getDeclaredMethod(<span class="string">&quot;f2&quot;</span>);</span><br><span class="line">        f2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f2.invoke(aa);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(String a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法大同小异</p><blockquote><p>墙上芦苇，头重脚轻根底浅</p><p>山间竹笋，嘴尖皮厚腹中空</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言基础</title>
      <link href="/article/2dbe2370.html"/>
      <url>/article/2dbe2370.html</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>将7篇笔记整合到一起，完整的c语言基础</p><p>学习课程为：<a href="https://www.bilibili.com/video/BV1kh411d7Dq">https://www.bilibili.com/video/BV1kh411d7Dq</a></p></blockquote><span id="more"></span><h1 id="c语言简介、基本数据类型"><a href="#c语言简介、基本数据类型" class="headerlink" title="c语言简介、基本数据类型"></a>c语言简介、基本数据类型</h1><h2 id="一、C语言发展"><a href="#一、C语言发展" class="headerlink" title="一、C语言发展"></a>一、C语言发展</h2><p>与UNIX 密不可分，汇编语言编写的UNIX，UNIX使用c语言改写，从此编写操作系统的主要语言</p><p>至今仍是排名靠前语言</p><p><img src="https://i.loli.net/2021/01/30/v54VmLOI7yBdNCE.png"></p><p>主流版本： c89(标准c)，c99</p><p><strong>c语言特点：</strong></p><ul><li>代码级别的跨平台</li><li>允许直接访问物理地址，对硬件进行操作：（操作系统，数据库，杀毒软件，C语言，驱动…）</li><li>传值方式：按值&#x2F;按指针</li><li>没有对象 - 结构体</li></ul><hr><h2 id="二、C程序运机制"><a href="#二、C程序运机制" class="headerlink" title="二、C程序运机制"></a>二、C程序运机制</h2><ol><li>编辑：编写.c文件，就是源代码</li><li>编译：将.c文件翻译成目标文件(.obj)  &#x2F;&#x2F;计算机底层</li><li>链接：将目标文件.obj  + 库文件 生成可执行文件(.exe)  &#x2F;&#x2F;计算机底层</li><li>运行：执行.exe文件，得到运行结果</li></ol><p><img src="https://i.loli.net/2021/01/31/LMPrk8G4OWBb9iQ.png"></p><p><strong>编译：</strong></p><p>有了c源文件(xxx.c)，通过<strong>编译器</strong>将其编译成obj文件(目标文件)。<br>如果程序没有错误，没有任何提示，但在Debug目录下会出现一个（程序名）.obj文件，该文件称为目标文件。</p><p><strong>链接：</strong></p><p>有了目标文件（.obj文件）,通过<strong>链接程序</strong>将其和运行所需要的<strong>C库文件</strong>链接成exe文件（可执行文件）。<br>如果程序没有错误，没有任何提示，但在Debug目录下会出现一个项目名.exe文件，该文件称为可执行文件。</p><p>为什么需要链接库文件？ 使用printf等函数是c程序库中提供，并不是自己写的（一个printf函数有上千行代码）。<br>链接后的.exe比.obj大很多（还包含了库文件）。</p><p><strong>运行：</strong></p><p>链接后生成的.exe文件（二进制文件）。<br>可以在控制台直接运行。</p><hr><h2 id="三、常用转义符"><a href="#三、常用转义符" class="headerlink" title="三、常用转义符"></a>三、常用转义符</h2><p>知道的不再赘述</p><p><strong>\r 表示回车</strong> 不是换行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;张无忌赵敏周\r芷若小昭&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为 芷若小昭敏周</p><hr><h2 id="四、变量"><a href="#四、变量" class="headerlink" title="四、变量"></a>四、变量</h2><p>变量：变量相当于内存中一个存储空间的表示</p><p>输出格式：%d ,%f,%c,%s %ld,%lld,%lf</p><blockquote><p>%ld用于输出long int</p><p>%lld用于输出long long int</p><p>%lf用于输出double</p></blockquote><h3 id="4-1、变量的数据类型"><a href="#4-1、变量的数据类型" class="headerlink" title="4.1、变量的数据类型"></a>4.1、变量的数据类型</h3><p><img src="https://i.loli.net/2021/01/31/tGPJoS2q8WL6UzH.png"></p><p><strong>操作系统</strong>，<strong>系统位数</strong>，<strong>编译器</strong>都会导致部分数据类型字节长度不一样，使用sizeof()得到的字节长度。</p><p>实际工作中，c程序通常在linux&#x2F;unix中运行</p><p><img src="https://i.loli.net/2021/01/31/1pPReXNLrBuD75i.png"></p><h4 id="4-1-1、整型"><a href="#4-1-1、整型" class="headerlink" title="4.1.1、整型"></a>4.1.1、整型</h4><p>表示整数的数据类型</p><table><thead><tr><th>数据类型</th><th>存储大小(字节)</th><th>范围(最高位表示符号位)</th></tr></thead><tbody><tr><td>char &#x2F; signed char</td><td>1</td><td>-128  到 127</td></tr><tr><td>unsigned char</td><td>1</td><td>0 到 255</td></tr><tr><td>int &#x2F; signed int</td><td>2 或 4</td><td>-2^15 到 2^15 - 1 或 -2^31 到 2^31 - 1</td></tr><tr><td>unsigned int</td><td>2 或 4</td><td>0 到 65535（2^15 -1） 或 0 到 2^31 -1</td></tr><tr><td>short &#x2F; signed short</td><td>2</td><td>-2^15 到 2^15 - 1</td></tr><tr><td>unsigned short</td><td>2</td><td>0 到 65535（2^15 -1）</td></tr><tr><td>long &#x2F; signed long</td><td>4</td><td>-2^31 到 2^31 - 1</td></tr><tr><td>unsigned long</td><td>4</td><td>0 到 2^31 -1</td></tr></tbody></table><blockquote><p><strong>提出问题：以 signed char类型为例子，为何范围是 -128 - 127 而不是 -127 - 127</strong></p><p>关于二进制补码,反码,源码见：<a href="http://taoblog421.cn/article/9b6873a3.html">http://taoblog421.cn/article/9b6873a3.html</a></p><p>参考：<a href="https://blog.csdn.net/yty19970212/article/details/81592398">https://blog.csdn.net/yty19970212/article/details/81592398</a></p><p>之前困扰许久的问题，先看正数，我们找到<strong>内存中存的都是补码</strong>，而对于正数：原码&#x3D;反码&#x3D;补码<br>最小范围为 0000 0001 -&gt; 1<br>最大范围为1111 1111 -&gt; 2^0 + 2^1 + 2^2 + … + 2^7（回忆初中知识<strong>等比数列</strong>公式 s &#x3D; a1(1-q^n)&#x2F;(1-q)） &#x3D; 1*(1-2^8) &#x2F; (1 - 2) &#x3D; 2^8 - 1 &#x3D; 127</p><p>对于负数，首先<strong>引出反码</strong>：<br>若负数也按照原码存储，则计算1-1使，计算机只能将减法转换为加法即1+(-1)<br>0000 0001 + 1000 0001 &#x3D; 1000 0010 &#x3D; -2显然错误，引出反码解决这个问题；</p><p>若负数按照反码存储，计算1+(-1)<br>0000 0001 + 1111 1110 &#x3D; 1111 1111 -&gt;1000 0000 &#x3D; -0</p><p>虽然反码解决了减法问题，但是-0是什么玩意，我们都知道<strong>0既不是正数也不是负数</strong>。</p><p><strong>引出补码：负数的补码为反码+1</strong>，计算1+(-1)<br>0000 0001 + 1111 1111 &#x3D; 1 0000 0000 &#x3D; 0<br>因此多出来一个1000 0000 那么1000 000 表示什么呢，不用说自然是表示 -128了。</p><p>int型同理可得</p></blockquote><h4 id="4-1-2、浮点型"><a href="#4-1-2、浮点型" class="headerlink" title="4.1.2、浮点型"></a>4.1.2、浮点型</h4><p>表示小数的数据类型</p><ul><li>浮点数是近似值（要是细究的话和高数的拉格朗日级数有关系，最烦高数了，不管他）</li><li>尾数部分可能丢失，造成精度损失</li><li>通常使用double(默认为double)</li><li>printf 默认保留后六位</li></ul><table><thead><tr><th>数据类型</th><th>存储大小(字节)</th><th>范围（符号位+指数位+尾数为）</th><th>精度</th></tr></thead><tbody><tr><td>float 单精度</td><td>4</td><td>1.2E-38 到 3.4E+38</td><td>6位小数</td></tr><tr><td>double 双精度</td><td>8</td><td>2.3E-308 到 1.7E+308</td><td>15位小数</td></tr></tbody></table><p>科学计数法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> b = <span class="number">1.1e2</span>; <span class="comment">//1.1 * (10^2)</span></span><br><span class="line"><span class="type">double</span> c = <span class="number">1.1e-2</span>; <span class="comment">//1.1 * (10^-2)</span></span><br></pre></td></tr></table></figure><h4 id="4-1-3、字符型"><a href="#4-1-3、字符型" class="headerlink" title="4.1.3、字符型"></a>4.1.3、字符型</h4><p>char 表示字母或数字  ‘A’ , ‘1’ </p><p>char的底层是整数:</p><ul><li>存储：字符’a’ –&gt; acsii值(97) –&gt; 二进制(01100001) –&gt; 存储</li><li>读取反之</li></ul><p>ASSIC:</p><ul><li>128个字符，只使用了7位，第一位始终为0</li></ul><h4 id="4-1-4、布尔型"><a href="#4-1-4、布尔型" class="headerlink" title="4.1.4、布尔型"></a>4.1.4、布尔型</h4><p>c89没有定义布尔类型</p><p>表达不直观，使用宏定义解决如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOOL int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    BOOL isOk = TRUE;</span><br><span class="line">    <span class="keyword">if</span>(isOk) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>c99提供_Bool型</strong>,_Bool仍然是整数型，但只能赋值为0或1，非零的值会被存储为1</p><p>头文件stdbool.h 可以方便的操作布尔类型变量 （int flag &#x3D; true&#x2F;false）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-2、基本数据类型转换"><a href="#4-2、基本数据类型转换" class="headerlink" title="4.2、基本数据类型转换"></a>4.2、基本数据类型转换</h3><h4 id="4-2-1、自动类型转换"><a href="#4-2-1、自动类型转换" class="headerlink" title="4.2.1、自动类型转换"></a>4.2.1、自动类型转换</h4><p><img src="https://i.loli.net/2021/02/01/WQqPzBD7JlExeFX.png" alt="数据类型自动转换表"></p><p><img src="https://i.loli.net/2021/02/01/eqLxJg3F25kDz49.png" alt="数据类型自动转换表"></p><ul><li>多种类型数据混合运算时，系统将都转为精度最大的类型</li><li>赋值运算中可能发送降低精度，如 float -&gt; double</li></ul><h4 id="4-2-2、强制类型转换"><a href="#4-2-2、强制类型转换" class="headerlink" title="4.2.2、强制类型转换"></a>4.2.2、强制类型转换</h4><p>将高精度或转为精度小的数据类型，使用强制转换符（）,可能会造成精度降低或溢出，需要格外注意</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> d1 = <span class="number">1.63321</span>;</span><br><span class="line"><span class="type">int</span> num = (<span class="type">int</span>)d1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br></pre></td></tr></table></figure><hr><blockquote><p>先扎扎实实把C语言基础过一遍，暂定就靠本校了，求稳没什么不好的，冲吧，一直说的一句话，不要看不起本校，考的起再说。</p></blockquote><h1 id="运算符与指针"><a href="#运算符与指针" class="headerlink" title="运算符与指针"></a>运算符与指针</h1><blockquote><p>运算符与指针入门（再一次学习c语言果然和初学不一样哈哈）</p></blockquote><!--more--><h2 id="一、指针入门"><a href="#一、指针入门" class="headerlink" title="一、指针入门"></a>一、指针入门</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num的地址%p&quot;</span>,&amp;num); <span class="comment">//point &amp;表示取地址</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/02/1wzvxBZKDMTGUAd.png"></p><blockquote><p>发现在我的编译器里地址类型为8Byte</p></blockquote><h3 id="1-1、指针应用案例"><a href="#1-1、指针应用案例" class="headerlink" title="1.1、指针应用案例"></a>1.1、指针应用案例</h3><ol><li>写一个程序，获取一个int变量num的地址，并显示到终端</li><li>将num的地址赋值给指针ptr，并通过ptr去修改num的值</li><li>画出案例的内存布局图</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">88</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num的值%d，num的地址%p\n&quot;</span>,num,&amp;num);</span><br><span class="line">    <span class="type">int</span> *ptr = &amp;num;</span><br><span class="line">    *ptr = <span class="number">99</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num的值%d，num的地址%p&quot;</span>,num,&amp;num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/02/1jdNuRbzBsg9Eit.png"></p><blockquote><p>我喜欢将指针类型这样定义，更容易理解 int* a。</p><p>但是注意：若定义 int* a,b;  a为指针类型，b为int类型。</p></blockquote><h3 id="1-2、指针细节"><a href="#1-2、指针细节" class="headerlink" title="1.2、指针细节"></a>1.2、指针细节</h3><ul><li>基本数据类型，都有对应的指针类型</li><li>此外还是<strong>指向数组的指针</strong>，<strong>指向结构体的指针</strong>，<strong>指向共用体的指针</strong>，（二级指针，多级指针）后续学习</li></ul><h3 id="1-3、值传递和地址传递"><a href="#1-3、值传递和地址传递" class="headerlink" title="1.3、值传递和地址传递"></a>1.3、值传递和地址传递</h3><p><strong>1、值传递</strong></p><p>将变量指向的存储内容，在传值&#x2F;赋值时，<strong>拷贝</strong>一份给接收变量（将实参拷贝给形参）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> num2 = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/02/fV4nd1QUDKWsYJl.png"></p><p><strong>2、地址传递</strong></p><p>如果是<strong>指针</strong>或者<strong>数组</strong>在传值&#x2F;赋值时，指针传递存储地址，数组传递首地址</p><p>分别分析以下两种情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;num;</span><br><span class="line"><span class="type">int</span> *p2 = p;</span><br><span class="line">*p2 = <span class="number">55</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;num;</span><br><span class="line"><span class="type">int</span> *p2 = &amp;p; <span class="comment">//编译器给出警告：Incompatible pointer types initializing &#x27;int *&#x27; with an expression of type &#x27;int ** ; remove &amp;(fix available)Cast expression to int* </span></span><br><span class="line"><span class="comment">//int** p2 = &amp;p;</span></span><br><span class="line">*p2 = <span class="number">55</span></span><br></pre></td></tr></table></figure><h2 id="二、-常量"><a href="#二、-常量" class="headerlink" title="二、 常量"></a>二、 常量</h2><ol><li>固定值，不能修改</li><li>可以是任何基本数据类型</li></ol><ul><li><strong>整数常量</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">85</span>         <span class="comment">// 十进制</span></span><br><span class="line"><span class="number">0213</span>       <span class="comment">// 八进制</span></span><br><span class="line"><span class="number">0x4b</span>/<span class="number">0X4b</span> <span class="comment">// 十六进制</span></span><br><span class="line"><span class="number">30</span>        <span class="comment">// 整数</span></span><br><span class="line"><span class="number">30u</span>/<span class="number">30U</span>   <span class="comment">// 无符号整数</span></span><br><span class="line"><span class="number">30l</span>/<span class="number">30L</span>  <span class="comment">// 长整数</span></span><br><span class="line"><span class="number">30ul</span>     <span class="comment">// 长无符号整数</span></span><br></pre></td></tr></table></figure><ul><li><strong>浮点常量</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.13</span> <span class="comment">//float</span></span><br><span class="line"><span class="number">3.12e2</span> <span class="comment">//科学计数法</span></span><br><span class="line"><span class="number">3.14f</span> <span class="comment">//double</span></span><br></pre></td></tr></table></figure><ul><li><strong>字符常量</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="string">&#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><strong>字符串常量</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;cyfwlp&quot;</span></span><br><span class="line"><span class="string">&quot;cyf \</span></span><br><span class="line"><span class="string">wlp&quot;</span> <span class="comment">// \表示换行</span></span><br></pre></td></tr></table></figure><blockquote><p>字符串常量会存储在<strong>全局区</strong>的<strong>文字常量区</strong></p></blockquote><h3 id="2-1、常量的定义"><a href="#2-1、常量的定义" class="headerlink" title="2.1、常量的定义"></a>2.1、常量的定义</h3><p>一般使用<strong>大写+下划线</strong>定义常量</p><ul><li><p>使用#define 预处理器 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 常量名 常量值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br></pre></td></tr></table></figure></li><li><p>使用const关键字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> 数据类型 常量名 = 常量值</span><br><span class="line">    </span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14</span></span><br></pre></td></tr></table></figure></li></ul><p>区别：</p><ol><li><p>const带类型，define不带类型</p></li><li><p>const在编译，运行时才起作用，define在编译的预处理阶段起作用</p></li><li><p>define只是<strong>简单的替换</strong>，没有类型检查，简单的字符串替换会导致<strong>边界效应</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> A 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B A+3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C A/B*3 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//分析</span></span><br><span class="line">    <span class="comment">//define就是简单的替换</span></span><br><span class="line">    <span class="comment">//C = A/A+3*3 = 10 </span></span><br><span class="line">    <span class="comment">//而不是预想的0.75</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%d&quot;</span>,C);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>const可以进行调试，而define不行，预编译阶段以及替换，调试的时候就没有了</p></li><li><p>const不能重复定义，而define可以通过undef取消某个符号的定义，再重新定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> PI</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.15</span></span><br></pre></td></tr></table></figure></li><li><p>define还可以配合#ifdef,#ifndef,#endif 来使用，使代码更加灵活。比如通过#define来启动或关闭调试信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define DEBUG</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ok,调试信息&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello，另外的信息&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h2><h3 id="3-1、算数运算符"><a href="#3-1、算数运算符" class="headerlink" title="3.1、算数运算符"></a>3.1、算数运算符</h3><blockquote><p>+ - * &#x2F; % ++ –</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> d1 = <span class="number">10</span>/<span class="number">4</span> = <span class="number">2</span>;</span><br><span class="line"><span class="type">double</span> d2 = <span class="number">10.0</span>/<span class="number">4</span> = <span class="number">2.500000</span>;</span><br><span class="line"><span class="type">double</span> d2 = <span class="number">10</span>/<span class="number">4.0</span> = <span class="number">2.500000</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> res1 = <span class="number">10</span>%<span class="number">3</span>  = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> res2 = <span class="number">-10</span>%<span class="number">3</span> = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> res3 = <span class="number">10</span>%<span class="number">-3</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取模运算底层： a%b = a - a/b * b</span></span><br></pre></td></tr></table></figure><blockquote><p>取模可以理解为限制范围防止溢出 %x就是把范围限制在(0,x)</p><p>如小时候使用的闹钟需要从九点调到六点，有两种方法：<br>1、9 - 3 &#x3D; 6 （逆时针转三个小时）<br>2、(9 + 9) % 12 &#x3D; 6 (顺时针转九个小时)</p></blockquote><blockquote><p>% 要求操作数为整数</p></blockquote><p><strong>i++ 与 ++i</strong></p><blockquote><p>i++ 先使用i的值，再i的值++。<br>++i i的值先++，再使用i的值。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> j = i++;</span><br><span class="line"><span class="comment">//等阶：</span></span><br><span class="line"><span class="comment">// int j = i; i = i + 1;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;j = %d,i = %d\n&quot;</span>,j,i); <span class="comment">// 10,11</span></span><br><span class="line"><span class="type">int</span> k = ++i;</span><br><span class="line"><span class="comment">//等阶：</span></span><br><span class="line"><span class="comment">// i = i + 1 ; int k = i + 1;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;k = %d,i = %d\n&quot;</span>,k,i); <span class="comment">// 12,12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//独立使用是等阶的</span></span><br><span class="line">k++;</span><br><span class="line">++k;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;k = %d&quot;</span>,k); <span class="comment">//14</span></span><br></pre></td></tr></table></figure><h3 id="3-2、关系运算符"><a href="#3-2、关系运算符" class="headerlink" title="3.2、关系运算符"></a>3.2、关系运算符</h3><table><thead><tr><th>算数运算符</th><th>优先级</th></tr></thead><tbody><tr><td>&gt;   &lt;   &gt;&#x3D;   &lt;&#x3D;</td><td>1</td></tr><tr><td>&#x3D;&#x3D;   !&#x3D;</td><td>2</td></tr></tbody></table><p>false:0</p><p>true:<strong>非零</strong>，默认1</p><blockquote><p>a &#x3D;&#x3D; b &lt; c    等价于  a &#x3D;&#x3D; (b &lt; c)</p></blockquote><h3 id="3-3、逻辑运算符"><a href="#3-3、逻辑运算符" class="headerlink" title="3.3、逻辑运算符"></a>3.3、逻辑运算符</h3><p>短路现象：</p><p>&amp;&amp; 第一个条件为false，后面的条件不再判断 （可以用来避免空指针异常）</p><p>|| 第一个条件为true，后面的条件不再判断</p><h3 id="3-4、赋值运算符"><a href="#3-4、赋值运算符" class="headerlink" title="3.4、赋值运算符"></a>3.4、赋值运算符</h3><p>赋值运算符的顺序为从右到左</p><h3 id="3-5、位运算符"><a href="#3-5、位运算符" class="headerlink" title="3.5、位运算符"></a>3.5、位运算符</h3><h4 id="1、进制转换"><a href="#1、进制转换" class="headerlink" title="1、进制转换"></a>1、进制转换</h4><blockquote><p>我的总结：n进制转2进制，就用模n取余法</p><p>n进制转十进制：n^0 + n^1 + … + n^m</p></blockquote><p><strong>1.1、其他进制转十进制</strong></p><p>1011 &#x3D; 1 * 2^0 + 1 *  2^1 + 0 * 2^2 + 1 * 2^3 &#x3D; 1 + 2 + 8 &#x3D; 11 (我的做法：记住这个：256 128 64 32 16 8 4 2 1，然后对应二进制位，1的话就加，0就不加，得到结果就是十进制)</p><p>0123 &#x3D; 3 * 8^0 + 2 * 8^1  + 1 * 8^2 + 0 * 8^3 &#x3D; 83</p><p>0X34A &#x3D; A(10) * 16^0 + 4 * 16^1 + 3 * 16^2 &#x3D; 10 + 64 + 768 &#x3D; 842</p><p><strong>1.2、十进制转其他进制</strong></p><p>十进制转二进制：模2取余</p><p>八进制转二进制：模8取余</p><p>十六进制转二进制：模16取余</p><p> <strong>1.3、二进制转其他进制</strong></p><p>二进制转八进制：三位一组转为十进制再拼接</p><p>二进制转十六进制：四位一组转十进制再拼接</p><p><strong>1.4、其他进制转二进制</strong></p><p>八进制转二进制：每一位转为对应的三位的二进制数</p><p>0237 &#x3D;&gt; (000 0)10 011 111</p><p>十六进制转二进制：每一位转为对应的四位的二进制数</p><p>0x23B &#x3D;&gt; (00)10 0011 1011</p><h4 id="2、位运算"><a href="#2、位运算" class="headerlink" title="2、位运算"></a>2、位运算</h4><p><strong>原码，反码，补码：</strong></p><ol><li>二进制的最高位是符号位，0表示正数，1表示负数</li><li>正数的原码，反码，补码都一样</li><li>负数：<br>反码 &#x3D; 原码取反（符号位不变）<br>补码 &#x3D; 反码 + 1</li><li>0的反码，补码都是0</li><li>计算机是按照<strong>反码</strong>运算的</li></ol><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与 (1,x -&gt; 1)</td></tr><tr><td>|</td><td>按位或 (0,x -&gt; 0)</td></tr><tr><td>^</td><td>按位异或（1,0 -&gt; 1）</td></tr><tr><td>~</td><td>按位取反</td></tr><tr><td>&lt;&lt;</td><td>左移 （左边丢弃，右边补0）</td></tr><tr><td>&gt;&gt;</td><td>右移  （正数左补0，负数左补1，右边丢弃）</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移（左边补0，右边丢弃）</td></tr></tbody></table><blockquote><p>正数左补0，负数左补1是保证正数右移完还是正数，负数右移完还是负数</p><p>&lt;&lt;1 相当于 *2</p><p>&gt;&gt;1 相当于 &#x2F;2</p></blockquote><p>真值表</p><table><thead><tr><th>A</th><th>B</th><th>A&amp;B</th><th>A|B</th><th>A^B</th><th>~A</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td></tr></tbody></table><h3 id="3-6、三元运算符"><a href="#3-6、三元运算符" class="headerlink" title="3.6、三元运算符"></a>3.6、三元运算符</h3><p>if(条件)?表达式1：表达式2</p><p>细节：表达式1和表法式2要为可以赋给接收变量的类型（或者可以自动转换），否则可能会有精度损失</p><hr><h2 id="四、标识符"><a href="#四、标识符" class="headerlink" title="四、标识符"></a>四、标识符</h2><p>变量，函数命名：数字，字母，_和$，数字不能打头</p><blockquote><p>可以用$符吗？</p><p>在我的编译器里用来通过编译且正确执行。</p></blockquote><hr><h1 id="枚举、函数、static、常用系统函数"><a href="#枚举、函数、static、常用系统函数" class="headerlink" title="枚举、函数、static、常用系统函数"></a>枚举、函数、static、常用系统函数</h1><h2 id="一、程序流程控制"><a href="#一、程序流程控制" class="headerlink" title="一、程序流程控制"></a>一、程序流程控制</h2><h3 id="1-1、顺序控制"><a href="#1-1、顺序控制" class="headerlink" title="1.1、顺序控制"></a>1.1、顺序控制</h3><p>略</p><h3 id="1-2、选择控制"><a href="#1-2、选择控制" class="headerlink" title="1.2、选择控制"></a>1.2、选择控制</h3><p><strong>1、if</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">   ...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、switch</strong></p><p>表达式需为整型（包括字符型）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">switch (表达式) &#123;</span><br><span class="line">    case 1:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">    case 2:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">    case 3:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3、循环控制"><a href="#1-3、循环控制" class="headerlink" title="1.3、循环控制"></a>1.3、循环控制</h3><p><strong>1、for循环</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、while循环</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、do-while循环</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int i = 0;</span><br><span class="line">do &#123;</span><br><span class="line">    printf(&quot;%d&quot;,i);</span><br><span class="line">    ++i;</span><br><span class="line">&#125; while (i &lt; 5);</span><br></pre></td></tr></table></figure><p><strong>4、多重循环</strong></p><p>break 和 continue</p><blockquote><p>break 退出整个循环<br>continue 退出当前轮循环，开始下一轮循环</p></blockquote><p><strong>5、goto语句</strong></p><p>所有语言中都不主张使用，造成程序流程混乱</p><hr><h2 id="二、枚举"><a href="#二、枚举" class="headerlink" title="二、枚举"></a>二、枚举</h2><ol><li>枚举是一种<strong>构造数据类型</strong>，只有几个有限的特定数据时使用</li><li>enum (enumeration)</li></ol><p>快速入门:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span></span><br><span class="line">    MON = <span class="number">1</span>,</span><br><span class="line">    TUE = <span class="number">2</span>,</span><br><span class="line">    WED = <span class="number">3</span>,</span><br><span class="line">    THU = <span class="number">4</span>,</span><br><span class="line">    FRI = <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">day</span>;</span></span><br><span class="line">day = WED;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,day);</span><br></pre></td></tr></table></figure><h3 id="2-1、枚举的遍历"><a href="#2-1、枚举的遍历" class="headerlink" title="2.1、枚举的遍历"></a>2.1、枚举的遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span></span><br><span class="line">    MON = <span class="number">1</span>,TUE,WED,THU,FRI,SAT,SUN <span class="comment">//没有赋值，就会按顺序赋值</span></span><br><span class="line">&#125; day;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( day = MON; day &lt;= SUN ; ++day) &#123; <span class="comment">//要求枚举元素连续赋值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、switch使用枚举"><a href="#2-2、switch使用枚举" class="headerlink" title="2.2、switch使用枚举"></a>2.2、switch使用枚举</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span></span><br><span class="line">    MON = <span class="number">1</span>,TUE,WED,THU,FRI,SAT,SUN </span><br><span class="line">&#125; day;</span><br><span class="line"></span><br><span class="line">day = WED;</span><br><span class="line"><span class="keyword">switch</span> (day)&#123;</span><br><span class="line">    <span class="keyword">case</span> MON:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,day);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WED:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,day);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> THU:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,day);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>第一个枚举类型的默认值为0，然后按顺序赋值（前一个+1）</p></li><li><p>定义枚举类型同时定义枚举变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span></span><br><span class="line">    MON = <span class="number">1</span>,TUE,WED,THU,FRI,SAT,SUN </span><br><span class="line">&#125; day ;</span><br></pre></td></tr></table></figure></li><li><p>先定义枚举类型再定义枚举变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span></span><br><span class="line">    MON = <span class="number">1</span>,TUE,WED,THU,FRI,SAT,SUN </span><br><span class="line">&#125; ;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">day</span>;</span></span><br></pre></td></tr></table></figure></li><li><p>省略枚举名的定义（枚举变量只有一个）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    MON = <span class="number">1</span>,TUE,WED,THU,FRI,SAT,SUN </span><br><span class="line">&#125; day ;</span><br></pre></td></tr></table></figure></li></ol><p>很像结构体</p><hr><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><ul><li>完成某一功能的程序指令（语句）的集合</li><li>c语言中函数分为自定义函数、系统函数</li></ul><h3 id="3-1、头文件"><a href="#3-1、头文件" class="headerlink" title="3.1、头文件"></a>3.1、头文件</h3><p>在一个文件中调用另一个文件中的函数 &#x3D;&gt; 头文件</p><ul><li>拓展名为.h的文件，包含了c函数的<strong>定义和声明</strong>，被多个源文件引用共享</li><li>#include 文件包含命令 ，用来引入头文件 ，#include 属于<strong>预处理指令</strong></li><li>#include 处理的过程就是<strong>将头文件的内容插入到该命令所在的位置</strong>，从而把头文件和源文件连接成一个文件（等同于<strong>复制粘贴</strong>）</li><li>建议把所有的<strong>常量，宏，系统全局变量和函数原型</strong>写在头文件中，需要时引用</li></ul><p>快速入门：</p><p>function.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myfun.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>myfun.h:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>myfun.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> <span class="comment">//系统函数 &lt;&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myfun.h&quot;</span> <span class="comment">//自定义函数 &quot;&quot;</span></span></span><br><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Notes:</p><ol><li>引用头文件相当于<strong>复制</strong></li><li>源文件的名字可以和头文件不同</li><li>&lt;&gt; 引用系统头文件 （也可以引用自定义头文件）<br>“ ” 引用自定义头文件</li><li>引用多次和引用一次作用一样，代码层面有<strong>防止重复引入机制</strong></li><li>头文件中只能包含变量和函数的声明，<strong>不能包含定义</strong></li></ol></blockquote><h3 id="3-2、函数调用机制"><a href="#3-2、函数调用机制" class="headerlink" title="3.2、函数调用机制"></a>3.2、函数调用机制</h3><p><img src="https://i.loli.net/2021/02/04/gToU1vdwXsI598i.png"></p><h3 id="3-3、函数递归调用"><a href="#3-3、函数递归调用" class="headerlink" title="3.3、函数递归调用"></a>3.3、函数递归调用</h3><p>在函数体内又调用了自身</p><p><img src="https://i.loli.net/2021/02/04/Fycmk8gJBia1nvS.png"></p><h3 id="3-4、按值传递与按指针传递"><a href="#3-4、按值传递与按指针传递" class="headerlink" title="3.4、按值传递与按指针传递"></a>3.4、按值传递与按指针传递</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">f3</span><span class="params">(<span class="type">int</span> *p)</span> &#123;</span><br><span class="line">    (*p)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">6</span>;</span><br><span class="line">    f2(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n);</span><br><span class="line">    f3(&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>默认按指针传递：指针和数组</strong></p><h3 id="3-5、c语言支持可变参数"><a href="#3-5、c语言支持可变参数" class="headerlink" title="3.5、c语言支持可变参数"></a>3.5、c语言支持可变参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// num表示参数个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fun</span> <span class="params">(<span class="type">int</span> num,...)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、变量的作用域"><a href="#四、变量的作用域" class="headerlink" title="四、变量的作用域"></a>四、变量的作用域</h2><ol><li>函数内部声明&#x2F;定义的局部变量，作用域仅限函数内部</li><li>代码块声明&#x2F;定义的局部变量，作用域代码块</li><li>局部变量和全局变量重名，优先使用局部变量</li><li>函数外部定义即为全局变量（通常放在头文件中）</li></ol><p><strong>初始化问题：</strong></p><ul><li><p>局部变量需要初始化后使用，否则可能异常退出</p></li><li><p><strong>全局变量系统自动初始化</strong></p><table><thead><tr><th>数据类型</th><th>默认化初始值</th></tr></thead><tbody><tr><td>int</td><td>0</td></tr><tr><td>char</td><td>‘\0’</td></tr><tr><td>float</td><td>0.0</td></tr><tr><td>double</td><td>0.0</td></tr><tr><td>pointer 指针</td><td>null</td></tr></tbody></table></li></ul><blockquote><p>Notes</p><ol><li>全集变量（Global Variable）保存在内存的全局存储区（Global）中，占用静态的存储单元，它的作用域是整个程序，也就是所有的代码文件</li><li>局部变量（Local Variable）保存在栈(Stack)中，函数被调用时候才分配存储单元</li><li>C语言规定，只能从小的作用域向大额作用去寻找变量，而不能反过来，使用更小的作用域的变量</li></ol></blockquote><p><img src="https://i.loli.net/2021/02/06/ns2trHS17LIiDoO.png" alt="C语言内存布局图"></p><h3 id="4-1、static关键字"><a href="#4-1、static关键字" class="headerlink" title="4.1、static关键字"></a>4.1、static关键字</h3><p>static关键字在c语言中比较常用，使用恰当能够大大提高程序的模块化特性，有利于拓展和维护</p><p><strong>局部变量使用static修饰：</strong></p><ol><li>称为静态局部变量</li><li>自动初始化</li><li>存储于内存的静态存储区，只会初始一次，即使函数返回，它的值也保持不变</li></ol><p><strong>全局变量使用static修饰：</strong></p><ol><li>普通全局变量对整个工程可见，其他文件可以使用extern外部声明后直接使用，也就是其他文件不能再定义一个相同名字的变量了（否则编译器会认为他们是一个变量），静态全局变量仅对当前文件可见，其他文件不可访问。<br><strong>报错：</strong><br>CMakeFiles\day01.dir&#x2F;objects.a(static.c.obj):G:&#x2F;clion_project&#x2F;basic&#x2F;day01&#x2F;static.c:9: multiple definition of &#96;n’<br>CMakeFiles\day01.dir&#x2F;objects.a(function.c.obj):G:&#x2F;clion_project&#x2F;basic&#x2F;day01&#x2F;head&#x2F;function.c:39: first defined here<br><strong>若要使用：</strong><br>extern int n; </li><li>定义不需要与其他文件共享的全局变量时，加上static关键字能够有效的降低程序之间的耦合，避免不同变量的冲突，且不会误用</li></ol><p><strong>函数使用static:</strong></p><ol><li>非静态函数可以在另一个文件中通过extern引用</li><li>静态函数只能在声明它的文件中可见，其他文件不能引用该函数</li></ol><hr><h2 id="五、常用系统函数"><a href="#五、常用系统函数" class="headerlink" title="五、常用系统函数"></a>五、常用系统函数</h2><h3 id="5-1、字符串常用的系统函数"><a href="#5-1、字符串常用的系统函数" class="headerlink" title="5.1、字符串常用的系统函数"></a>5.1、字符串常用的系统函数</h3><p>头文件：&lt;string.h&gt;</p><table><thead><tr><th>功能</th><th>函数</th><th>备注</th></tr></thead><tbody><tr><td><strong>得到字符串长度</strong></td><td>size_t strlen(const char *str)</td><td></td></tr><tr><td><strong>拷贝字符串</strong></td><td>char *strcpy(char *dest,const char *src)</td><td>src 指向的字符串复制到dest</td></tr><tr><td><strong>连接字符串</strong></td><td>char *strcat(char *dest,const char *src)</td><td>src 指向的字符串复制到dest</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> src[<span class="number">50</span>],dest[<span class="number">50</span>];</span><br><span class="line"><span class="type">char</span> *str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str.len = %llu\n&quot;</span>,<span class="built_in">strlen</span>(str));</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(src,<span class="string">&quot;cyf&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(dest,<span class="string">&quot;wlp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;src = %s\n&quot;</span>,src);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;dest = %s\n&quot;</span>,dest);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcat</span>(dest,src);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;dest = %s\n&quot;</span>,dest);</span><br></pre></td></tr></table></figure><h3 id="5-2、日期常用的系统函数"><a href="#5-2、日期常用的系统函数" class="headerlink" title="5.2、日期常用的系统函数"></a>5.2、日期常用的系统函数</h3><p>头文件：&lt;time.h&gt;</p><table><thead><tr><th>功能</th><th>函数</th><th>备注</th></tr></thead><tbody><tr><td><strong>获取当前时间</strong></td><td>char *ctime(const time_t *timer)</td><td>返回一个表示当前时间的字符串，当前时间是基于参数timer</td></tr><tr><td><strong>编写一段代码来统计函数test执行的时间</strong></td><td>double difftime(time_t time1,time_t time2)</td><td>time1 - time2</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">time_t</span> curtime; <span class="comment">// time_t 结构体</span></span><br><span class="line">time(&amp;curtime); <span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前时间 = %s&quot;</span>,ctime(&amp;curtime));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">time_t</span> start,end;</span><br><span class="line"><span class="type">double</span> diff;</span><br><span class="line">time(&amp;start);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;程序启动时间：%s\n&quot;</span>,ctime(&amp;start));</span><br><span class="line">test();</span><br><span class="line">time(&amp;end);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;程序结束时间：%s\n&quot;</span>,ctime(&amp;end));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">diff = difftime(end,start);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,diff);</span><br></pre></td></tr></table></figure><h3 id="5-3、数学常用的系统函数"><a href="#5-3、数学常用的系统函数" class="headerlink" title="5.3、数学常用的系统函数"></a>5.3、数学常用的系统函数</h3><table><thead><tr><th>功能</th><th>函数</th><th>备注</th></tr></thead><tbody><tr><td>返回e的x次幂值</td><td>double exp(double x)</td><td></td></tr><tr><td>返回x的自然对数（基数为e）</td><td>double log(double x)</td><td></td></tr><tr><td>返回x的y次幂</td><td>double power(double x,double y)</td><td></td></tr><tr><td>返回x的平方根</td><td>double sqrt(double x)</td><td></td></tr><tr><td>返回x的绝对值</td><td>double fabs(double x)</td><td></td></tr></tbody></table><hr><h1 id="类型转换、数组"><a href="#类型转换、数组" class="headerlink" title="类型转换、数组"></a>类型转换、数组</h1><h2 id="一、基本数据类型和字符串类型的转换"><a href="#一、基本数据类型和字符串类型的转换" class="headerlink" title="一、基本数据类型和字符串类型的转换"></a>一、基本数据类型和字符串类型的转换</h2><h3 id="1-1、基本数据类型-gt-字符串类型"><a href="#1-1、基本数据类型-gt-字符串类型" class="headerlink" title="1.1、基本数据类型 -&gt; 字符串类型"></a>1.1、基本数据类型 -&gt; 字符串类型</h3><p><strong>sprintf函数：</strong></p><p>sprintf函数打印到字符串中，相似printf函数，在其他数据类型转字符串时应用广泛</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(str1,<span class="string">&quot;%d %d&quot;</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(str1,<span class="string">&quot;%8.2f&quot;</span>,<span class="number">3.15</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str1);</span><br></pre></td></tr></table></figure><h3 id="1-2、字符串类型-gt-基本数据类型"><a href="#1-2、字符串类型-gt-基本数据类型" class="headerlink" title="1.2、字符串类型 -&gt; 基本数据类型"></a>1.2、字符串类型 -&gt; 基本数据类型</h3><p><strong>通过 &lt;stdlib.h&gt; 调用 atoi atof 即可</strong></p><p><strong>如果格式不正确，会默认转为0或0.0</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[<span class="number">10</span>] = <span class="string">&quot;1234567&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[<span class="number">10</span>] = <span class="string">&quot;12.67423&quot;</span>;</span><br><span class="line"><span class="type">char</span> str3[<span class="number">10</span>] = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="type">char</span> str4[<span class="number">10</span>] = <span class="string">&quot;111&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num1 = atoi(str1);</span><br><span class="line"><span class="type">short</span> s1 = atoi(str4);</span><br><span class="line"><span class="type">double</span> d = atof(str2);</span><br><span class="line"><span class="type">char</span> c = str3[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num1 = %d,s1=%d,d=%f,c=%c&quot;</span>,num1,s1,d,c);</span><br></pre></td></tr></table></figure><hr><h2 id="二、预处理命令和宏定义"><a href="#二、预处理命令和宏定义" class="headerlink" title="二、预处理命令和宏定义"></a>二、预处理命令和宏定义</h2><h3 id="2-1、预处理命令基本介绍"><a href="#2-1、预处理命令基本介绍" class="headerlink" title="2.1、预处理命令基本介绍"></a>2.1、预处理命令基本介绍</h3><ol><li><strong>以#开头的命令</strong>称为预处理</li><li>编译之前对源文件进行简单加工的过程</li><li>预处理是C语言的一个重要功能，由<strong>预处理程序</strong>完成，当一个源文件进行编译时，系统自动调用预处理程序对源程序中的预处理部分作处理，处理后自动进行编译</li><li>C语言提供了多种预处理功能，如<strong>宏定义、文件包含，条件编译…</strong></li></ol><blockquote><p>开发一个C语言程序，让它暂停五秒后再输出“cyfwlp”，并且要求跨平台，在Windows和linux下都能运行</p><p>提示：</p><ol><li>Windows 暂停函数的原型 void Slepp(DWORD dwMillsecounds)，参数的单位是毫秒，位于&lt;windows.h&gt;头文件</li><li>linux 暂停函数 unsigned int sleep (unsigned int secound)，参数的单位值秒位于&lt;unistd.h&gt;</li><li>#if #elif #endif 都是预处理命令，它们都是在编译前由预处理程序来执行的</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> _linux_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __WIN64</span></span><br><span class="line">    Sleep(<span class="number">5000</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> _linux_</span></span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;cyfwlp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、宏定义"><a href="#2-2、宏定义" class="headerlink" title="2.2、宏定义"></a>2.2、宏定义</h3><p>#define叫做宏定义命令，用一个标识符标识一个<strong>字符串</strong>，源文件出现标识符进行<strong>简单的替换</strong></p><p><strong>宏定义的形式：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 宏名 字符串</span></span><br></pre></td></tr></table></figure><ol><li>宏名命名与变量相同；字符串可以是数字，表法式，if语句，函数等</li><li>程序中反复使用的表达式就可以使用宏定义</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M (n*n+3*n)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    sum = <span class="number">3</span> * M + <span class="number">4</span> * M + <span class="number">5</span> * M;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %d&quot;</span>,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Notes</p><ol><li><strong>预处理程序</strong>对表达式不作任何检查，若有错误，只能在编译已被宏展开的的源程序时发现</li><li>宏定义不需要加；（若加了会把;也一起替换）</li><li>作用域为源程序结束，终止可以使用#undef命令</li><li>习惯使用大写（也可以使用小写）</li><li>可以使用宏定义表示数据类型，书写方便<br>#define UINT unsigned int</li><li>与typedef区别：宏定义只是简单的字符串代替，而typedef是在编译阶段由编译器处理的，给原有的数据类型起新的名字，作为一种新的数据类型</li></ol></blockquote><h3 id="2-3、带参数的宏定义"><a href="#2-3、带参数的宏定义" class="headerlink" title="2.3、带参数的宏定义"></a>2.3、带参数的宏定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 宏名 （形式参数） 字符串 <span class="comment">//定义</span></span></span><br><span class="line"></span><br><span class="line">宏名（实际参数）<span class="comment">//使用</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M (n*n+3*n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) a&gt;b?a:b</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,MAX(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>形式参数之间可以出现空格，但是宏名与形式参数之间不能有空格 </p></blockquote><h3 id="2-4、C语言预处理命令总结"><a href="#2-4、C语言预处理命令总结" class="headerlink" title="2.4、C语言预处理命令总结"></a>2.4、C语言预处理命令总结</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>#</td><td>空指令，没有任何效果</td></tr><tr><td>#include</td><td>引入头文件</td></tr><tr><td>#define</td><td>宏定义</td></tr><tr><td>#undef</td><td>取消宏定义</td></tr><tr><td>#if</td><td>如果条件为真，则编译</td></tr><tr><td>#ifdef</td><td>如果宏已经定义，则编译</td></tr><tr><td>#ifndef</td><td>如果宏没有定义，则编译</td></tr><tr><td>#elif</td><td>else if 为真则编译</td></tr><tr><td>#endif</td><td>结束 if</td></tr></tbody></table><hr><h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><h3 id="3-1、数组介绍"><a href="#3-1、数组介绍" class="headerlink" title="3.1、数组介绍"></a>3.1、数组介绍</h3><p>数组可以存放多个同一数据类型的数据，是构造类型，传递是按照引用传递（地址传递）</p><p><strong>快速入门：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> hens[<span class="number">6</span>];</span><br><span class="line">    </span><br><span class="line">    hens[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">    hens[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">    hens[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    hens[<span class="number">3</span>] = <span class="number">9</span>;</span><br><span class="line">    hens[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">    hens[<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> totalWeight = <span class="number">0.0</span>;</span><br><span class="line">    <span class="type">double</span> avgWeight = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arrLen = <span class="keyword">sizeof</span>(hens)/ <span class="keyword">sizeof</span>(<span class="type">int</span>); <span class="comment">//得到数组长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arrLen; ++i) &#123;</span><br><span class="line">        totalWeight += hens[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;totalWeight = %f\n&quot;</span>,totalWeight);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;avgWeight = %f&quot;</span>,totalWeight/arrLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、数组定义和内存布局"><a href="#3-2、数组定义和内存布局" class="headerlink" title="3.2、数组定义和内存布局"></a>3.2、数组定义和内存布局</h3><p><strong>定义和初始化方式</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">3</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><ol><li>数组名就代表数组<strong>首元素的地址</strong>，即a[0]地址</li><li>数组的各个元素在内存中是连续分布的</li></ol><blockquote><p>Notes</p><ol><li>数组一旦定义&#x2F;声明，长度是固定的，不能动态变化</li><li>数组若没有赋值：<br>全局数组默认0<br>非全局数组是机器辣鸡值（系统原来分配给这块内存的值）</li></ol></blockquote><h3 id="3-3、数组按照引用传递"><a href="#3-3、数组按照引用传递" class="headerlink" title="3.3、数组按照引用传递"></a>3.3、数组按照引用传递</h3><p><img src="https://i.loli.net/2021/02/09/vDqgiAVNBJCWGaO.png"></p><h3 id="3-4、字符数组与字符串"><a href="#3-4、字符数组与字符串" class="headerlink" title="3.4、字符数组与字符串"></a>3.4、字符数组与字符串</h3><p>用来存放字符的数组称为字符数组，C语言中没有string类型的变量，因此 C语言中 字符数组 &#x3D;&#x3D; 字符串</p><blockquote><p>Notes</p><ol><li><p>在C语言中，字符串实际上是使用null字符（’\0’）终止的一维字符数组。因此，一个以null结尾的字符串，包含了组成字符串的字符</p></li><li><p>‘\0’是ASCII码表中第0个字符，用null表示，称为空字符。该字符既不能显示，也不是控制字符，输出该字符不会有任何效果，它在C语言中仅作为字符串结束标致</p></li><li><p>字符串在内存的布局分析</p><p><img src="https://i.loli.net/2021/02/15/e3X6UjyNGVYRJ8k.png"></p></li><li><p>如果在给某个字符数组赋初值时，赋给的元素个数小于该数组的长度，会自动加’\0’表示字符串结束</p><p>赋给元素的个数等于数组的长度，则不会自动添加’\0’</p></li></ol></blockquote><p><strong>指针指向字符数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* str = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str本身的地址%p，str指向的地址%p\n&quot;</span>,&amp;str,str);</span><br><span class="line">str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str本身的地址%p，str指向的地址%p&quot;</span>,&amp;str,str);</span><br><span class="line"></span><br><span class="line">G:\clion_project\basic\day01\cmake-build-debug\day01.exe</span><br><span class="line">str本身的地址<span class="number">000000000061F</span>E18，str指向的地址<span class="number">0000000000404020</span></span><br><span class="line">str本身的地址<span class="number">000000000061F</span>E18，str指向的地址<span class="number">000000000040404</span>A</span><br><span class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>Notes:</p><ol><li>如果定义了一个字符数组，那么它有确定的内存地址（即字符数组是一个常量）；而定义了一个字符指针变量，它并未指向某个确定的字符数据，并且可以多次赋值</li><li>printf(“%s”,str)可以输出str指向的字符串</li></ol></blockquote><h3 id="3-5、字符串相关函数"><a href="#3-5、字符串相关函数" class="headerlink" title="3.5、字符串相关函数"></a>3.5、字符串相关函数</h3><table><thead><tr><th>序号</th><th>函数</th><th>目的</th></tr></thead><tbody><tr><td>1</td><td>strcpy(s1,s2)</td><td>复制s2到s1</td></tr><tr><td>2</td><td>strcat(s1,s2)</td><td>连接s1,s2</td></tr><tr><td>3</td><td>strlen(s1)</td><td>返回s1长度</td></tr><tr><td>4</td><td>strcmp(s1,s2)</td><td>如果s1和s2相同，返回0，s1&lt;s2返回小于0，s1&gt;s2返回大于0</td></tr><tr><td>5</td><td>strchr(s1,ch)</td><td>返回一个指针，指向字符串s1中字符ch第一次出现的位置</td></tr><tr><td>6</td><td>strstr(s1,s2)</td><td>返回一个指针，指向字符串s1中字符串s2的第一次出现的位置</td></tr></tbody></table><blockquote><p>Notes:</p><ol><li>‘\0’用于检测和判断字符串是否结束，字符串长度不会统计’\0’</li><li>系统对字符串常量自动加’\0’表示结束，如”cyfwlp”共有6个字符，但是在内存中占7个字节</li><li>如果定义的字符个数比数组长度小，系统会将剩余的元素空间全部填充0</li></ol></blockquote><hr><h2 id="四、排序和查找"><a href="#四、排序和查找" class="headerlink" title="四、排序和查找"></a>四、排序和查找</h2><h3 id="4-1、冒泡排序（bubble-sort）"><a href="#4-1、冒泡排序（bubble-sort）" class="headerlink" title="4.1、冒泡排序（bubble sort）:"></a><strong>4.1、冒泡排序（bubble sort）:</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> t = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">3</span>,<span class="number">9</span>,<span class="number">-1</span>,<span class="number">10</span>,<span class="number">-2</span>,<span class="number">-11</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    bubbleSort(arr,len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; len; ++k) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、二分查找（binary-search）："><a href="#4-2、二分查找（binary-search）：" class="headerlink" title="4.2、二分查找（binary search）："></a>4.2、二分查找（binary search）：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> target,<span class="type">int</span> low,<span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="comment">//未找到 </span></span><br><span class="line">    <span class="keyword">if</span> (low &gt; high) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (target &lt; arr[mid]) &#123;</span><br><span class="line">        binarySearch(arr,target,low,mid<span class="number">-1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; arr[mid]) &#123;</span><br><span class="line">        binarySearch(arr,target,mid + <span class="number">1</span>,high);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target == arr[mid])&#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="type">int</span> index = binarySearch(arr, <span class="number">11</span>, <span class="number">0</span>, len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;index = %d&quot;</span>,index);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、二维数组"><a href="#五、二维数组" class="headerlink" title="五、二维数组"></a>五、二维数组</h2><h3 id="5-1、快速入门"><a href="#5-1、快速入门" class="headerlink" title="5.1、快速入门"></a>5.1、快速入门</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">4</span>][<span class="number">6</span>]; <span class="comment">//未初始化是辣鸡地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line">        a[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>,a[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a的地址%p\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[0]的地址%p\n&quot;</span>,a[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[0][0]的地址为%p\n&quot;</span>,&amp;a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a[%d][%d]的地址%p &quot;</span>,k,i,&amp;a[k][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---输出---</span><br><span class="line">a的地址<span class="number">000000000061F</span>DA0</span><br><span class="line">a[<span class="number">0</span>]的地址<span class="number">000000000061F</span>DA0</span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>]的地址为<span class="number">000000000061F</span>DA0</span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>]的地址<span class="number">000000000061F</span>DA0 a[<span class="number">0</span>][<span class="number">1</span>]的地址<span class="number">000000000061F</span>DA4 a[<span class="number">0</span>][<span class="number">2</span>]的地址<span class="number">000000000061F</span>DA8 a[<span class="number">0</span>][<span class="number">3</span>]的地址<span class="number">000000000061F</span>DAC</span><br><span class="line">a[<span class="number">0</span>][<span class="number">4</span>]的地址<span class="number">000000000061F</span>DB0 a[<span class="number">0</span>][<span class="number">5</span>]的地址<span class="number">000000000061F</span>DB4</span><br><span class="line">a[<span class="number">1</span>][<span class="number">0</span>]的地址<span class="number">000000000061F</span>DB8 a[<span class="number">1</span>][<span class="number">1</span>]的地址<span class="number">000000000061F</span>DBC a[<span class="number">1</span>][<span class="number">2</span>]的地址<span class="number">000000000061F</span>DC0 a[<span class="number">1</span>][<span class="number">3</span>]的地址<span class="number">000000000061F</span>DC4</span><br><span class="line">a[<span class="number">1</span>][<span class="number">4</span>]的地址<span class="number">000000000061F</span>DC8 a[<span class="number">1</span>][<span class="number">5</span>]的地址<span class="number">000000000061F</span>DCC</span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>]的地址<span class="number">000000000061F</span>DD0 a[<span class="number">2</span>][<span class="number">1</span>]的地址<span class="number">000000000061F</span>DD4 a[<span class="number">2</span>][<span class="number">2</span>]的地址<span class="number">000000000061F</span>DD8 a[<span class="number">2</span>][<span class="number">3</span>]的地址<span class="number">000000000061F</span>DDC</span><br><span class="line">a[<span class="number">2</span>][<span class="number">4</span>]的地址<span class="number">000000000061F</span>DE0 a[<span class="number">2</span>][<span class="number">5</span>]的地址<span class="number">000000000061F</span>DE4</span><br><span class="line">a[<span class="number">3</span>][<span class="number">0</span>]的地址<span class="number">000000000061F</span>DE8 a[<span class="number">3</span>][<span class="number">1</span>]的地址<span class="number">000000000061F</span>DEC a[<span class="number">3</span>][<span class="number">2</span>]的地址<span class="number">000000000061F</span>DF0 a[<span class="number">3</span>][<span class="number">3</span>]的地址<span class="number">000000000061F</span>DF4</span><br><span class="line">a[<span class="number">3</span>][<span class="number">4</span>]的地址<span class="number">000000000061F</span>DF8 a[<span class="number">3</span>][<span class="number">5</span>]的地址<span class="number">000000000061F</span>DFC</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/16/JvzS692GpxEPQ7X.png"></p><p><strong>各个元素地址是连续分布的</strong></p><h3 id="5-1、二维数组的遍历"><a href="#5-1、二维数组的遍历" class="headerlink" title="5.1、二维数组的遍历"></a>5.1、二维数组的遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="built_in">map</span>[][<span class="number">3</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算行数和列数的方法</span></span><br><span class="line"><span class="type">int</span> rows = <span class="keyword">sizeof</span>(<span class="built_in">map</span>)/<span class="keyword">sizeof</span>(<span class="built_in">map</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="type">int</span> cols = <span class="keyword">sizeof</span>(<span class="built_in">map</span>[<span class="number">0</span>])/ <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cols; ++j) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>,<span class="built_in">map</span>[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Notes:</p><ol><li>可以只对部分元素赋值，未赋值元素自动取零。</li><li>如果对全部元素赋值，那么第一维的长度可以不给出。</li><li>二维数组可以看作由多个一维数组嵌套而成的；<strong>如果一个一维数组的每个元素又是一个二维数组</strong>，那么他就是二维数组。</li></ol></blockquote><hr><h1 id="debug、指针"><a href="#debug、指针" class="headerlink" title="debug、指针"></a>debug、指针</h1><h2 id="一、断点调试"><a href="#一、断点调试" class="headerlink" title="一、断点调试"></a>一、断点调试</h2><p>开发中诡异错误，断点调试看代码执行过程</p><p><img src="https://i.loli.net/2021/02/17/TNPsBrpVLKoX81x.png"></p><hr><h2 id="二、指针"><a href="#二、指针" class="headerlink" title="二、指针"></a>二、指针</h2><p>至今对于复杂的指针没搞清楚，是真的弱啊</p><h3 id="2-1、指针的算数运算"><a href="#2-1、指针的算数运算" class="headerlink" title="2.1、指针的算数运算"></a>2.1、指针的算数运算</h3><p>指针表示地址，可以进行四种运算 ++,–,+,-</p><p><img src="https://i.loli.net/2021/02/17/OLxbt7hYpw3D5cq.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">G:\clion_project\basic\day01\cmake-build-debug\day01.exe</span><br><span class="line">var[<span class="number">0</span>]的地址=<span class="number">000000000061F</span>E08</span><br><span class="line">vat[<span class="number">0</span>]=<span class="number">10</span></span><br><span class="line">var[<span class="number">1</span>]的地址=<span class="number">000000000061F</span>E0C</span><br><span class="line">vat[<span class="number">1</span>]=<span class="number">100</span></span><br><span class="line">var[<span class="number">2</span>]的地址=<span class="number">000000000061F</span>E10</span><br><span class="line">vat[<span class="number">2</span>]=<span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="2-2、指针的比较"><a href="#2-2、指针的比较" class="headerlink" title="2.2、指针的比较"></a>2.2、指针的比较</h3><p>指针可以使用关系运算符比较</p><p>比较地址是否相同</p><h3 id="2-3、指针数组"><a href="#2-3、指针数组" class="headerlink" title="2.3、指针数组"></a>2.3、指针数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型* 指针数组名[大小]</span><br><span class="line">如：<span class="type">int</span> *ptr[<span class="number">3</span>]</span><br></pre></td></tr></table></figure><ol><li>ptr声明一个指针数组</li><li>由三个整数指针构成，因此，ptr中的每个元素，都是指向int值的指针</li></ol><p><img src="https://i.loli.net/2021/02/17/dR9ub1JkhaE2mev.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *ptr[] = &#123;<span class="string">&quot;三国演义&quot;</span>,<span class="string">&quot;水浒传&quot;</span>,<span class="string">&quot;红楼梦&quot;</span>,<span class="string">&quot;西游记&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,ptr[i]); <span class="comment">//这里不需要加*</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4、二级指针"><a href="#2-4、二级指针" class="headerlink" title="2.4、二级指针"></a>2.4、二级指针</h3><ol><li>一个指向指针的指针变量必须如下声明，即在变量前放置两个<em>号，例如 int ** ptr &#x2F;&#x2F;ptr类型是int</em>*</li><li>当一个目标值被一个指针间接指向到另一个指针时，访问这个值需要两个星号运算符 **ptr</li><li>内存布局图</li></ol><p><img src="https://i.loli.net/2021/02/17/8jkGgBiSTJlsDfu.png"></p><h3 id="2-5、传递指针（地址）给函数"><a href="#2-5、传递指针（地址）给函数" class="headerlink" title="2.5、传递指针（地址）给函数"></a>2.5、传递指针（地址）给函数</h3><p>当函数的形参类型是指针时，若要使用该函数，需要传递指针或者地址或者数组给参数</p><p><strong>传递指针，地址</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span> *p)</span> &#123;</span><br><span class="line">    *p += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> *p = &amp;num;</span><br><span class="line"></span><br><span class="line">    test2(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">    </span><br><span class="line">    test2(&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/17/UvSADLlpnRwg4qP.png"></p><p><strong>传递数组</strong></p><p> <img src="https://i.loli.net/2021/02/17/9QYxTqre4iXS6Rc.png"></p><h3 id="2-6、返回指针的函数"><a href="#2-6、返回指针的函数" class="headerlink" title="2.6、返回指针的函数"></a>2.6、返回指针的函数</h3><p>C语言允许返回值是一个指针（地址），这样的函数称为<strong>指针函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回两个字符串中较长的一个</span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strLong</span><span class="params">(<span class="type">char</span> *str1,<span class="type">char</span> *str2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(str1) &gt; <span class="built_in">strlen</span>(str2)) &#123;</span><br><span class="line">        <span class="keyword">return</span> str1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Notes:</p><ol><li>用指针作为函数返回值时，函数允许后会销毁内部定义的所有局部数据，包括<strong>局部变量、局部数组、形式参数</strong>，函数返回的指针不能指向这些数据</li><li>销毁：<strong>并不是将局部数据所占用的内存全部清0，而是程序放弃对它的使用权，后面的代码可以继续使用这块内存</strong></li><li>C语言不支持在调用函数的时候返回局部变量的地址，如果确有这样的需求，需要将局部变量定义为<strong>static变量(存储在静态区)</strong></li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> n = <span class="number">100</span>; <span class="comment">//n的存储位置在静态存储区</span></span><br><span class="line">    <span class="keyword">return</span> &amp;n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *p = func();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = *p;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p指向的值：%d&quot;</span>,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例：返回一个大小为10的随机数数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        arr[i] = rand();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *p = f1();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7、函数指针（指向函数的指针）"><a href="#2-7、函数指针（指向函数的指针）" class="headerlink" title="2.7、函数指针（指向函数的指针）"></a>2.7、函数指针（指向函数的指针）</h3><ol><li>一个函数总是占用着一段连续的区域，函数名在表达式中有时也会被转换为该函数所在内存区域的首地址，这和数组名非常相似</li><li>把函数的这个首地址（或者入口地址）赋值给一个指针变量，使指针变量指向函数所在的内存区域，然后通过指针变量就可以找到并调用该函数，这种指针就是<strong>函数指针</strong></li></ol><p><strong>函数指针定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">returnType (*pointerName)(param <span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>) returnType为函数返回值类型</span><br><span class="line"> <span class="number">2</span>) pointerName为指针名称</span><br><span class="line"> <span class="number">3</span>) patamList为函数参数列表</span><br><span class="line"> <span class="number">4</span>) 参数列表可以只给出类型，省略参数名称</span><br><span class="line"> <span class="number">5</span>) 注意（）的优先级高于*，第一个括号不能省略，省略就变成指针函数（返回指针的函数）</span><br></pre></td></tr></table></figure><p><strong>用函数指针来实现对函数的调用，返回两个整数中的最大值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回较大的数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> (*pmax)(<span class="type">int</span>,<span class="type">int</span>) = max;<span class="comment">//可以省略参数名</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d&quot;</span>,(*pmax)(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/17/3Xz8GOPc2Jd1l6M.png"></p><h3 id="2-8、回调函数"><a href="#2-8、回调函数" class="headerlink" title="2.8、回调函数"></a>2.8、回调函数</h3><ol><li>函数指针变量可以作为某个函数的参数来使用，回调函数就是一个通过函数指针调用的函数</li><li>简单的讲：回调函数就是由别人函数执行时调用你传入的参数（通过函数指针完成）</li></ol><p>实例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initArray</span><span class="params">(<span class="type">int</span>* <span class="built_in">array</span>, <span class="type">int</span> arraySize, <span class="type">int</span>(*f)())</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arraySize; ++i) &#123;</span><br><span class="line">        <span class="built_in">array</span>[i] = f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取随机值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getRandomValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line">    initArray(arr, <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(<span class="type">int</span>),getRandomValue);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Notes:</p><ol><li>指针变量存放的是地址，从这个角度看指针的本质就是地址</li><li>变量声明时，没有明确的地址赋值，赋为NULL</li><li>赋值为NULL的指针称为空指针，NULL是定义在标准库&lt;stdio.h&gt;中的常量 #define NULL 0</li><li>指针使用一览（见后面内容）</li></ol></blockquote><hr><h1 id="动态内存分配、结构体、共用体"><a href="#动态内存分配、结构体、共用体" class="headerlink" title="动态内存分配、结构体、共用体"></a>动态内存分配、结构体、共用体</h1><h2 id="一、动态内存分配"><a href="#一、动态内存分配" class="headerlink" title="一、动态内存分配"></a>一、动态内存分配</h2><h3 id="1-1、内存布局"><a href="#1-1、内存布局" class="headerlink" title="1.1、内存布局"></a>1.1、内存布局</h3><p>c语言中，不同数据在内存中分配的说明</p><p><img src="https://i.loli.net/2021/02/06/ns2trHS17LIiDoO.png"></p><ol><li>全局变量 – 内存中的静态存储区</li><li>非全局局部变量 – 内存中的动态存储区 – stack栈</li><li>临时使用的数据 – 建立动态内存分配区域，需要随时开辟，不需要时及时释放– heap堆</li><li>根据需要向系统申请所需大小的空间，由于未在声明部分定义其为变量或数组，不能通过变量或数组名来引用这些数据，只能通过指针来（引用）</li></ol><h3 id="1-2、内存动态分配相关函数"><a href="#1-2、内存动态分配相关函数" class="headerlink" title="1.2、内存动态分配相关函数"></a>1.2、内存动态分配相关函数</h3><p><strong>头文件 #include &lt;stdlib.h&gt;</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">malloc</span> <span class="params">(<span class="type">unsigned</span> <span class="type">int</span> size)</span> <span class="comment">// memory allocation</span></span><br><span class="line">-- 作用 ：在内存的动态存储区分配一个长度为size的连续空间</span><br><span class="line">    -- 函数的返回值是所分配的第一个字节的地址，该函数是指针型函数</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">calloc</span> <span class="params">(<span class="type">unsigned</span> n,<span class="type">unsigned</span> size)</span> <span class="comment">// clear allocation</span></span><br><span class="line">    -- 作用：在内存的动态存储区分配n个长度为size的空间，这个空间一般比较大，用于存储一个数组</span><br><span class="line">    -- 为一维数组开辟动态存储空间，n为数组元素个数，每个元素长度为size</span><br><span class="line">    -- 返回起始位置的地址（指针函数）</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span>* p)</span></span><br><span class="line">    -- 作用：释放变量p指向的动态空间</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">realloc</span><span class="params">(<span class="type">void</span>* p,<span class="type">unsigned</span> <span class="type">int</span> size)</span> <span class="comment">// reset allocation</span></span><br><span class="line">    -- 作用：重新分配<span class="built_in">malloc</span>或<span class="built_in">calloc</span>函数获得的动态空间大小，将p指向的动态空间大小改变为size,p的值不变</span><br></pre></td></tr></table></figure><blockquote><p>返回值类型：</p><p>c99标准，返回类型void*为无类型指针，即不指向哪一种具体的数据类型，只表示一个纯地址，不指向任何具体的对象</p><p>当把void指针赋值给不同类型的指针变量（或相反）时，编译器会自动进行转换</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> *p1 = &amp;a;</span><br><span class="line">    <span class="type">char</span> *p2;</span><br><span class="line">    <span class="type">void</span> *p3;</span><br><span class="line"></span><br><span class="line">    p3 = p1;</span><br><span class="line">    p2 = p3;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p3);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/18/oMTrRsUlLDxwqtK.png"></p><blockquote><p>Notes:</p><ol><li>避免分配大量小的内存块，分配堆上的内存有系统开销，分配多个小的内存要比分配几个大的内存块开销大</li><li>仅在需要时分配内存，使用完及时释放，否则可能出现<strong>内存泄露</strong></li><li>在释放内存前，确保不会无意中<strong>覆盖堆上已经分配的内存地址</strong>，否则程序就会出现<strong>内存泄露</strong>。在循环分配内存时，要特别小心</li></ol></blockquote><h3 id="1-3、指针使用一览"><a href="#1-3、指针使用一览" class="headerlink" title="1.3、指针使用一览"></a>1.3、指针使用一览</h3><table><thead><tr><th>变量定义</th><th>类型表示</th><th>含义</th></tr></thead><tbody><tr><td>int i</td><td>int</td><td>定义整型变量</td></tr><tr><td>int *p</td><td>int *</td><td>定义整型指针变量</td></tr><tr><td>int a[5]</td><td>int[5]</td><td>定义整数数组</td></tr><tr><td>int *p[4]</td><td>int*[4]</td><td><strong>指针数组</strong>，它由四个指向整型数据的指针组成</td></tr><tr><td>int (*p)[4]</td><td>int(*)[4]</td><td><strong>数组指针，行指针</strong>，p为指向包含4个元素的一维数组的指针变量</td></tr><tr><td>int f()</td><td>int()</td><td>函数</td></tr><tr><td>int *p()</td><td>int *()</td><td><strong>指针函数</strong> （返回值为指针的函数）</td></tr><tr><td>int (*p)()</td><td>int(*)()</td><td><strong>函数指针</strong> （指向函数地址的指针）</td></tr><tr><td>int **p</td><td>int**</td><td>二级指针</td></tr><tr><td>void *p</td><td>void*</td><td>无类型指针（c99以上可以自动转换）</td></tr></tbody></table><hr><h2 id="二、结构体"><a href="#二、结构体" class="headerlink" title="二、结构体"></a>二、结构体</h2><h3 id="2-1、快速入门"><a href="#2-1、快速入门" class="headerlink" title="2.1、快速入门"></a>2.1、快速入门</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span>&#123;</span> <span class="comment">//结构体的名字，Cat就是自己构造的数据类型</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Cat</span> <span class="title">cat1</span>;</span></span><br><span class="line">    cat1.name = <span class="string">&quot;小白&quot;</span>;</span><br><span class="line">    cat1.age = <span class="number">3</span>;</span><br><span class="line">    cat1.color = <span class="string">&quot;白色&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s,%d,%s&quot;</span>,cat1.name,cat1.age,cat1.color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、内存布局"><a href="#2-3、内存布局" class="headerlink" title="2.3、内存布局"></a>2.3、内存布局</h3><p><img src="https://i.loli.net/2021/02/18/d6U7qS4hgEcZVYA.png"></p><h3 id="2-3、结构体声明"><a href="#2-3、结构体声明" class="headerlink" title="2.3、结构体声明"></a>2.3、结构体声明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名称 &#123;</span> <span class="comment">//结构体名称首字母大写</span></span><br><span class="line">    成员列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>成员变量需赋值后使用</li><li>成员变量可以是基础类型，也可以是指针，结构体</li></ol><h3 id="2-4、创建结构体和结构体变量"><a href="#2-4、创建结构体和结构体变量" class="headerlink" title="2.4、创建结构体和结构体变量"></a>2.4、创建结构体和结构体变量</h3><p><strong>1、先定义结构体，再创建结构体变量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span>&#123;</span> <span class="comment">//结构体的名字，Cat就是自己构造的数据类型</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span> <span class="title">cat1</span>;</span></span><br></pre></td></tr></table></figure><p><strong>2、定义结构体的同时，定义结构体变量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span>&#123;</span> <span class="comment">//结构体的名字，Cat就是自己构造的数据类型</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125;cat1, cat2;</span><br></pre></td></tr></table></figure><p><strong>3、匿名结构体（只需要两个变量，后面不再使用结构体数据类型）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> <span class="comment">//结构体的名字，Cat就是自己构造的数据类型</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125;cat1, cat2;</span><br></pre></td></tr></table></figure><h3 id="2-5、成员的获取和赋值"><a href="#2-5、成员的获取和赋值" class="headerlink" title="2.5、成员的获取和赋值"></a>2.5、成员的获取和赋值</h3><p><strong>结构体变量名.成员名</strong>  获取进行赋值和获取</p><p><strong>定义时赋值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> </span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span>* color;</span><br><span class="line">&#125;cat1 = &#123;<span class="string">&quot;小白&quot;</span>,<span class="number">3</span>,<span class="string">&quot;白色&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dog</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">say</span><span class="params">(<span class="keyword">struct</span> Dog dog)</span> &#123; <span class="comment">//默认按值传递，也可以传递指针</span></span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> info[<span class="number">50</span>];</span><br><span class="line">    dog.name = <span class="string">&quot;小花&quot;</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(info,<span class="string">&quot;name=%s,age=%d,weight=%f&quot;</span>,dog.name,dog.age,dog.weight);</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Dog</span> <span class="title">dog</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* info = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    dog.name = <span class="string">&quot;小黄&quot;</span>;</span><br><span class="line">    dog.age = <span class="number">18</span>;</span><br><span class="line">    dog.weight = <span class="number">12.12</span>;</span><br><span class="line"></span><br><span class="line">    info = say(dog);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,dog.name);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、共用体"><a href="#三、共用体" class="headerlink" title="三、共用体"></a>三、共用体</h2><p>1）<strong>共用体（Union）</strong>（也称为联合或联合体）属于构造类型，它可以包含多个类型不同的成员。和结构体非常类似，但是也有不同的地方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> 共用体名&#123;</span></span><br><span class="line">    成员列表</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2）结构体和共用体的区别在于：结构体的<strong>各个成员会占用不同的内存，互相之间没有影响</strong>；而共用体的<strong>所有成员占用同一段内存</strong>，修改一个成员变量会影响所有成员</p><h3 id="3-1、快速入门"><a href="#3-1、快速入门" class="headerlink" title="3.1、快速入门"></a>3.1、快速入门</h3><p>1）定义共用体变量的三种方式（和结构体一样）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">data</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">data</span> <span class="title">a</span>;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">data</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">&#125;a,b;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">&#125;a,b;</span><br></pre></td></tr></table></figure><ol start="2"><li>快速入门</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">data</span> &#123;</span> <span class="comment">//三个成员共有数据空间，该空间的大小以占用最大的成员变量为准</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">short</span> f;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">data</span> <span class="title">a</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld,%lld\n&quot;</span>, <span class="keyword">sizeof</span>(a), <span class="keyword">sizeof</span>(<span class="keyword">union</span> data)); <span class="comment">// 4/4</span></span><br><span class="line"></span><br><span class="line">    a.n = <span class="number">0x40</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c,%d\n&quot;</span>,a.n,a.ch,a.f);</span><br><span class="line"></span><br><span class="line">    a.ch = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c,%d\n&quot;</span>,a.n,a.ch,a.f);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---输出</span><br><span class="line"><span class="number">4</span>,<span class="number">4</span></span><br><span class="line"><span class="number">64</span>,@,<span class="number">64</span></span><br><span class="line"><span class="number">57</span>,<span class="number">9</span>,<span class="number">57</span></span><br></pre></td></tr></table></figure><h3 id="3-2、内存布局"><a href="#3-2、内存布局" class="headerlink" title="3.2、内存布局"></a>3.2、内存布局</h3><p><img src="https://i.loli.net/2021/02/20/oavOcURTleVXhdI.png"></p><h3 id="3-3、最佳实践"><a href="#3-3、最佳实践" class="headerlink" title="3.3、最佳实践"></a>3.3、最佳实践</h3><p>学生信息：姓名、编号、性别、职业、分数，<br>教师信息：姓名、编号、性别、职业、教学科目，<br>使用共用体编程完成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TOTAL 2</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> sex; <span class="comment">// f -&gt; 女 ，m -&gt; 男</span></span><br><span class="line">    <span class="type">char</span> profession; <span class="comment">// s-&gt;student ,t-&gt;teacher</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="type">float</span> score;</span><br><span class="line">        <span class="type">char</span> course[<span class="number">20</span>];</span><br><span class="line">    &#125;sc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">persons</span>[<span class="title">TOTAL</span>];</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; TOTAL; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input info：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %c %c&quot;</span>,persons[i].name,&amp;persons[i].num,&amp;persons[i].sex,&amp;persons[i].profession);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (persons[i].profession == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;输入学生成绩&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;persons[i].sc.score);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;输入老师课程&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,persons[i].sc.course);</span><br><span class="line">        &#125;</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nName\t\tNum\t\tSex\t\tProfession\t\tScore/Course\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; TOTAL; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (persons[j].profession == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\t\t%d\t\t%c\t\t%c\t\t%.2f\n&quot;</span>,persons[j].name,persons[j].num,persons[j].sex,</span><br><span class="line">                    persons[j].profession,persons[j].sc.score);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\t\t%d\t\t%c\t\t%c\t\t%s\n&quot;</span>,persons[j].name,persons[j].num,persons[j].sex,</span><br><span class="line">                   persons[j].profession,persons[j].sc.course);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="一、文件"><a href="#一、文件" class="headerlink" title="一、文件"></a>一、文件</h2><h3 id="1-1、文件基本介绍"><a href="#1-1、文件基本介绍" class="headerlink" title="1.1、文件基本介绍"></a>1.1、文件基本介绍</h3><p>文件：数据源（保存数据的地方）（操作系统：一组有意义的信息的集合）</p><blockquote><p>在计算机的存储设备上存储数据的集合</p></blockquote><p>流：数据在数据源（文件）和程序（内存）之间经历的路径</p><p>输入流：数据从数据源（文件）到程序（内存）的路径</p><p>输出流：数据从程序（内存）到数据源（文件）的路径</p><p>标准库：&lt;stdio.h&gt;  <a href="https://www.runoob.com/cprogramming/c-standard-library-stdio-h.html">https://www.runoob.com/cprogramming/c-standard-library-stdio-h.html</a></p><p><strong>文本文件、二进制文件</strong></p><h3 id="1-2、标准文件"><a href="#1-2、标准文件" class="headerlink" title="1.2、标准文件"></a>1.2、标准文件</h3><p>1）<strong>C语言把所有设备都当做文件（linux操作系统）</strong>，所有设备（比如显示器）被处理的方式与文件相同。以下三个文件会在程序执行时自动打开，以便访问键盘和屏幕</p><table><thead><tr><th>标准文件</th><th>文件指针</th><th>设备</th></tr></thead><tbody><tr><td>标准输入</td><td>stdin</td><td>键盘</td></tr><tr><td>标准输出</td><td>stdout</td><td>屏幕</td></tr><tr><td>标准错误</td><td>stderr</td><td>你的屏幕</td></tr></tbody></table><p>2）<strong>文件指针是访问文件的方式</strong>，我们会讲解如何从屏幕读取值以及如何把结果输出到屏幕上</p><p>3）C语言的I&#x2F;O(输入&#x2F;输出)通常使用printf()和scanf()两个函数</p><h3 id="1-3、getchar-amp-putchar-函数"><a href="#1-3、getchar-amp-putchar-函数" class="headerlink" title="1.3、getchar() &amp; putchar 函数"></a>1.3、getchar() &amp; putchar 函数</h3><p>1）int getchar() 函数从屏幕读取下一个可用的字符，并把它返回为一个整数。</p><p>2）int putchar() 函数把字符输出到屏幕上，并返回相同的字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> c = getchar();</span><br><span class="line">    <span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4、gets-amp-puts-函数"><a href="#1-4、gets-amp-puts-函数" class="headerlink" title="1.4、gets &amp; puts 函数"></a>1.4、gets &amp; puts 函数</h3><p>1）char* gets(char* s) 函数从stdin读取一行到s指向的缓冲区，直到一个终止符或EOF。</p><p>2）int puts(const char* s) 函数把字符串s和一个尾随的换行符写入到stdout</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">    </span><br><span class="line">    gets(str);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5、文件读写"><a href="#1-5、文件读写" class="headerlink" title="1.5、文件读写"></a>1.5、文件读写</h3><p>1）如何创建、打开、关闭文本文件或二进制文件</p><p>2）一个文件，无论是二进制文件还是文本文件，都是<strong>一系列的字节</strong>，C语言不仅提供了访问顶层的函数，也提供了底层（os）调用来处理存储设备上的文件</p><p><strong>打开文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE* <span class="title function_">fopen</span><span class="params">(<span class="type">char</span>* filename, <span class="type">const</span> <span class="type">char</span>* mode)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>模式（文本文件）</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>打开一个已有的文本文件，允许<strong>读取</strong>文件</td></tr><tr><td>w</td><td>打开一个文本文件，允许<strong>写入</strong>文件，若不存在则创建。若文件存在，会被截断为零长度，重新写入</td></tr><tr><td>a</td><td>打开一个文本文件，以追加模式写入文件。若不存在则创建。</td></tr><tr><td>r+</td><td>打开一文本文件，允许<strong>读写</strong>文件</td></tr><tr><td>w+</td><td>打开一个文本文件，允许<strong>读写</strong>文件，若不存在则创建。若文件存在，会被截断为零长度，重新写入</td></tr><tr><td>a+</td><td>打开一个文本文件，若不存在则创建。以<strong>追加模式写入</strong>文件。读则是<strong>从头读取</strong></td></tr></tbody></table><p>二进制文件 +b(binary) ：rb,wb,rb+,ab+…</p><p><strong>关闭文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">(FILE *fp)</span></span><br></pre></td></tr></table></figure><p>1）如果成功关闭文件，函数返回零；否则返回EOF。函数功能：清空缓冲区中的数据，关闭文件，并释放用于该文件的所有内存</p><p>2）使用完文件（读、写）后一定要将该文件关闭</p><p><strong>写入文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> c, FILE *fp)</span>;</span><br></pre></td></tr></table></figure><p>字符c写入到fp指向的输出流中 ，如果写入成功，它会返回写入的字符，发生错误返回EOF。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s, FILE *fp)</span>;</span><br></pre></td></tr></table></figure><p>字符串s写入到fp指向的输出流，如果写入成功返回非负值，发生错误返回EOF。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fprintf</span><span class="params">(FILE *fp, <span class="type">const</span> <span class="type">char</span> *format,...)</span>;</span><br></pre></td></tr></table></figure><p>字符串写入到函数（格式）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(<span class="string">&quot;test100.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%s\n&quot;</span>,<span class="string">&quot;陈一发我老婆~~&quot;</span>);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">&quot;我老婆陈一发~~\n123&quot;</span>,fp);</span><br><span class="line">    </span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>读取文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">(FILE *fp)</span></span><br></pre></td></tr></table></figure><p>从fp指向的输入文件中读取一个字符。返回值是读取的字符，如果发生错误则返回EOF。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">fgets</span><span class="params">(<span class="type">char</span> *buf, <span class="type">int</span> n, FILE *fp)</span></span><br></pre></td></tr></table></figure><p>1）说明：函数fgets()从fp指向的输入流中读取n-1个字符。它会把读取的字符串复制到缓冲区buf，并在最后追加一个null字符在终止字符串，如果这个函数在读取最后一个字符之前就遇到一个换行符\n或者文件的结尾EOF，则只会返回读取的字符，包括换行符</p><p>2）也可以使用 int fscanf(FILE *fp, const char *format，…) 函数来从文件中读取字符串，但是在遇到第一个空格字符时，它会停止读取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    fp = fopen(<span class="string">&quot;test100.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buff[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//    fscanf(fp,&quot;%s&quot;,buff);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fgets(buff,<span class="number">1024</span>,fp) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,buff);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、小结"><a href="#二、小结" class="headerlink" title="二、小结"></a>二、小结</h2><blockquote><p>卖油翁：</p><p>陈康肃公善射，当世无双 ，公亦以此自矜。尝射于家圃，有卖油翁释担而立，睨之久而不去。见其发矢十中八九，但微颔之。<br>康肃问曰：“汝亦知射乎？吾射不亦精乎？”。翁曰：“无他， 但手熟尔。”康肃忿然曰：“尔安敢轻吾射！”翁曰：“以我酌油知之。”乃取一葫芦置于地，以钱覆其口，徐以杓酌油沥之，自钱孔入，而钱不湿。因曰：“我亦无他，惟手熟尔。”康肃笑而遣之。</p></blockquote><blockquote><p>陆游：</p><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><p>为了考研重新学习了一遍C语言，怎么说呢，发现自己以前学习的远远不到位，后期就把数据结构与算法C语言实现一遍，但是java版本的都还没有看完，谷粒学院也还有两天的内容，这个寒假先把谷粒学院结束了。开学再从长计议</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo切换主题大坑</title>
      <link href="/article/7bb05c7b.html"/>
      <url>/article/7bb05c7b.html</url>
      
        <content type="html"><![CDATA[<p>大坑大坑</p><p>先记录问题：</p><p>再更换了博客主题后，本地运行没问题，一部署就<strong>导航条不显示，控制台报错jquery未定义</strong></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318222618443.png" alt="导航条不显示"></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318222640173.png" alt="控制台报错"></p><p>之所以说是大坑，确实不易发现；定位问题在<strong>main.js</strong></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318222903496.png" alt="main.js"></p><p>这时发现，<strong>请求到的js并不是宝塔里的js</strong></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318222958162.png" alt="宝塔中main.js"></p><p>清除了浏览器的缓存（无痕浏览器打开）还是不行</p><p><strong>请求到的js是什么呢?</strong></p><p><strong>居然是以前博客主题的js</strong></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318223146485.png" alt="amaing主题 main.js"></p><p>得出结论 ：问题为<strong>宝塔面板的缓存</strong></p><blockquote><p>试图解决方法一：将宝塔页面删除重新创建；</p><p>结果实验还行不行</p></blockquote><blockquote><p>试图解决方法二：等宝塔的缓存什么时候到了；</p><p>这个问题都困扰我一个下午+晚上了，不解决了还是人吗。</p></blockquote><blockquote><p>试图解决方法三：宝塔面板清除缓存</p><p><a href="https://www.bt.cn/bbs/thread-4122-1-1.html">https://www.bt.cn/bbs/thread-4122-1-1.html</a> ，有人之前就遇到过这个问题，然而他并没有解决貌似</p><p>在这篇文章中找到了解决方法 ： <a href="https://hostloc.com/thread-790102-1-1.html">https://hostloc.com/thread-790102-1-1.html</a></p></blockquote><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318225745245.png"></p><p>找到引入main.js的地方加上参数</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318225916925.png"></p><p>刷新，解决问题</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318232923331.png"></p><p>未解决，这是public后的html里改引用main.js，得找到还没有提交上去的时候在哪引用main.js</p><p>翻着翻着发现有配置文件配置main.js的位置</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318232923331.png"></p><p>不妨修改main.js的名字为main01.js</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318233734388.png"></p><p>终于彻底解决；</p><p>深刻体会到这句话</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220318233315195.png"></p><p>如果一开始就顺着报错摸索应该可以更快定位到错误，然而还是选择了寻求谷歌，百度和博客主题的开发者（在开发者的评论下面好像有人和我遇到相同的问题）</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客视频上传工具</title>
      <link href="/article/6689a444.html"/>
      <url>/article/6689a444.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>没次更新博客的视频贼麻烦，需要先从油管上下载，然后再上传到阿里云，再修改配置文件，再更新博客；</p><p>现在写个小程序完成这个功能</p><p>1、youtube视频下载</p><p>2、阿里云oss</p><p>3、文件操作</p><p>4、执行cmd</p></blockquote><span id="more"></span><h3 id="1、youtube视频下载"><a href="#1、youtube视频下载" class="headerlink" title="1、youtube视频下载"></a>1、youtube视频下载</h3><p>以前都是用在线网页下载，当然不能解决需求，还好找到这个 <a href="https://github.com/ytdl-org/youtube-dl">https://github.com/ytdl-org/youtube-dl</a></p><p>按照文档下载：</p><p><img src="https://i.loli.net/2021/07/08/S1zb2HNBJxLXYtP.png"></p><p>往下翻发现需要py环境</p><p><img src="https://i.loli.net/2021/07/08/T2zjwMibAdhlNSg.png" alt="image-20210708155711039"></p><p><img src="https://i.loli.net/2021/07/08/o5n3WZi1UCrhETN.png" alt="image-20210708155827405"></p><p>没问题</p><p>直接测试：(不加任何配置，默认下载最佳) 需要将vpn代理改为全局</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube<span class="literal">-dl</span> https://www.youtube.com/watch?v=<span class="number">0</span>KZ<span class="literal">-4uaj_QU</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin\Desktop\新建文件夹&gt;youtube<span class="literal">-dl</span> https://www.youtube.com/watch?v=<span class="number">0</span>KZ<span class="literal">-4uaj_QU</span></span><br><span class="line">[<span class="type">youtube</span>] <span class="number">0</span>KZ<span class="literal">-4uaj_QU</span>: Downloading webpage</span><br><span class="line">[<span class="type">youtube</span>] <span class="number">0</span>KZ<span class="literal">-4uaj_QU</span>: Downloading player <span class="number">1</span>eb201ea</span><br><span class="line">[<span class="type">youtube</span>] <span class="number">0</span>KZ<span class="literal">-4uaj_QU</span>: Downloading MPD manifest</span><br><span class="line">[<span class="type">download</span>] Destination: 陈一发儿－飛鳥和蟬<span class="literal">-0KZ-4uaj_QU</span>.mp4</span><br><span class="line">[<span class="type">download</span>] <span class="number">100</span>% of <span class="number">11.79</span>MiB <span class="keyword">in</span> <span class="number">00</span>:<span class="number">27</span></span><br></pre></td></tr></table></figure><p>然而清晰度感人，大小也才11m，自然不是很行</p><p><strong>原来YouTube的1080p及以上的分辨率都是音视频分离</strong></p><p>继续钻研：</p><p><img src="https://i.loli.net/2021/07/08/mIt6e39LYoR8xPS.png" alt="image-20210708161534212"></p><p>原来下载1080p的就只有图像没有声音，这也应该是有些youtube下载网站不行的原因</p><p>解决方法自然是<strong>分别下载音频视频</strong>再合并了</p><p>引出 ： <a href="https://ffmpeg.org/download.html">https://ffmpeg.org/download.html</a></p><p>这个作用就是合并音频和视频</p><p>下载然后把bin目录加入系统变量path</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -version</span><br></pre></td></tr></table></figure><p>安装成功</p><p>这里猜测会不会安装了ffmpeg在下载时会自动组合最高画质和音质。。。</p><p>发现并不会，那咋组合呢问题来了；好像组合都是手动先查询，然后再输入组合下载，这样自动性能就降低了</p><p>stakeoverflowed yyds</p><p><img src="https://i.loli.net/2021/07/08/nX4m1k8PjKoaWRG.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -f bestvideo+bestaudio --proxy 127.0.0.1:1080 https://www.youtube.com/watch?v=0KZ-4uaj_QU </span><br></pre></td></tr></table></figure><p>发现下载后是.webm格式，问题来了，能在博客里播放吗（后来证明可以）</p><p>然后文件名问题，下载在当前目录，需要一个可以访问到的文件名 以参数传进来，而且不能重复（会传多个文件以后）</p><p>最终命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube<span class="literal">-dl</span> <span class="operator">-f</span> bestvideo+bestaudio <span class="literal">--proxy</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span> <span class="literal">-o</span> <span class="number">11254</span> https://www.youtube.com/watch?v=<span class="number">0</span>KZ<span class="literal">-4uaj_QU</span></span><br></pre></td></tr></table></figure><p>需要将路径和文件名由参数传入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style=&quot;font-family:SimSun;font-size:14px;&quot;&gt;@ECHO OFF</span><br><span class="line">cd G:\blog\fafa</span><br><span class="line">set input=%1%</span><br><span class="line">set input2=%2%</span><br><span class="line">youtube-dl -f &#x27;&#x27;bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best&#x27;&#x27; --proxy 127.0.0.1:1080 -o %input% %input2%</span><br><span class="line">PAUSE&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.cyfwlp.download;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/8 19:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Download</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载视频，传入youtube视频连接，返回路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> File <span class="title function_">downloadVideo</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="comment">//对url进行处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">        result += url;</span><br><span class="line">        result += <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(l);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;cmd /c start G:\\blog\\fafa\\&quot;</span>+ <span class="string">&quot;dowmload&quot;</span> + <span class="string">&quot;.bat &quot;</span>+str+<span class="string">&quot; &quot;</span>+result+<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">ps</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">            ps.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">            ioe.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;child thread donn&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;G:\\blog\\fafa\\&quot;</span>+str+<span class="string">&quot;.webm&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        downloadVideo(<span class="string">&quot;https://www.youtube.com/watch?v=2XapuxXCUvQ&amp;list=PLi3zrmUZHiY-BkmXAR8snIRFCteS9g4Ga&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>掌握了这一部分，理论上可以自己写一个youtube下载的网站</p></blockquote><h3 id="2、阿里云oss"><a href="#2、阿里云oss" class="headerlink" title="2、阿里云oss"></a>2、阿里云oss</h3><p>这一块简单，直接拖代码复用就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.cyfwlp.oss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/8 18:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Oss</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">upload</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="comment">// Endpoint以杭州为例，其它Region请按实际情况填写。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 云账号AccessKey有所有API访问权限，建议遵循阿里云安全最佳实践，创建并使用RAM子账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 上传文件流。</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            inputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="type">String</span> <span class="variable">objeckName</span> <span class="operator">=</span> file.getName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            objeckName = uuid + objeckName;</span><br><span class="line">            ossClient.putObject(<span class="string">&quot;edu-cubeonline&quot;</span>, objeckName, inputStream);</span><br><span class="line">            url = <span class="string">&quot;https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/&quot;</span>+objeckName+<span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭OSSClient。</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\admin\\Desktop\\新建文件夹\\11254.webm&quot;</span>);</span><br><span class="line">        System.out.println(upload(file));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、写入文件"><a href="#3、写入文件" class="headerlink" title="3、写入文件"></a>3、写入文件</h3><p>涉及到json,使用fastjson进行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.cyfwlp.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/8 17:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置文件写入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 视频名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 视频路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">writeConfig</span><span class="params">(String name, String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;G:\\blog\\amzing\\taoBlog\\themes\\amazing\\source\\json_data\\video.json&quot;</span>);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fileInputStream);</span><br><span class="line">        String str;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">jsondata</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> ((str = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            jsondata.append(str);</span><br><span class="line">            jsondata.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Video&gt; parse = (List&lt;Video&gt;) JSON.parse(jsondata.toString(), Feature.OrderedField);</span><br><span class="line">        <span class="type">Video</span> <span class="variable">video</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Video</span>(name, url);</span><br><span class="line">        parse.add(video);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newjsondata</span> <span class="operator">=</span> JSON.toJSONString(parse);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;G:\\blog\\amzing\\taoBlog\\themes\\amazing\\source\\json_data\\video.json&quot;</span>));</span><br><span class="line">        bufferedWriter.write(newjsondata);</span><br><span class="line">        bufferedWriter.flush();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、执行cmd"><a href="#4、执行cmd" class="headerlink" title="4、执行cmd"></a>4、执行cmd</h3><p>发现不是那么简单这里</p><p>需要用到批处理脚本的知识，出来没接触过这个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style=&quot;font-family:SimSun;font-size:14px;&quot;&gt;@ECHO OFF</span><br><span class="line">cd G:\blog\amzing\taoBlog</span><br><span class="line">hexo clean &amp;&amp; hexo deploy</span><br><span class="line">PAUSE&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.cyfwlp.deploy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/8 18:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Deploy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新并上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">deploy</span><span class="params">(String batName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;cmd /c start G:\\blog\\amzing\\taoBlog\\&quot;</span>+ batName + <span class="string">&quot;.bat&quot;</span>;<span class="comment">// pass</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">ps</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">            ps.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">            ioe.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;child thread donn&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        deploy(<span class="string">&quot;deployed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、最终整合和封装"><a href="#5、最终整合和封装" class="headerlink" title="5、最终整合和封装"></a>5、最终整合和封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liaotao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/8 15:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.cyfwlp.deploy.Deploy;</span><br><span class="line"><span class="keyword">import</span> cn.cyfwlp.download.Download;</span><br><span class="line"><span class="keyword">import</span> cn.cyfwlp.file.Write;</span><br><span class="line"><span class="keyword">import</span> cn.cyfwlp.oss.Oss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 没次更新博客发发的视频贼麻烦，需要先从油管上下载，然后再上传到阿里云，再修改配置文件，再更新博客；</span></span><br><span class="line"><span class="comment"> * 写一段小代码来实现这个过程</span></span><br><span class="line"><span class="comment"> * 1、youtube视频下载</span></span><br><span class="line"><span class="comment"> * 2、阿里云oss</span></span><br><span class="line"><span class="comment"> * 3、文件操作</span></span><br><span class="line"><span class="comment"> * 4、执行cmd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入视频名称：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入youtube路径&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="comment">//下载文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> Download.downloadVideo(url);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">5</span>);</span><br><span class="line">        <span class="comment">//上传oss</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Oss.upload(file);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        Write.write(name,str);</span><br><span class="line">        <span class="comment">//更新</span></span><br><span class="line">        Deploy.deploy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装前解决最后一个问题：下载可能失败！</p><p><img src="https://i.loli.net/2021/07/08/PUX6px1TSYWw54j.png"></p><p>讲道理vpn是很稳的，只需要延长这个配置时间就行</p><p>修改下载脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style=&quot;font-family:SimSun;font-size:14px;&quot;&gt;@ECHO OFF</span><br><span class="line">cd G:\blog\fafa</span><br><span class="line">set input=%1%</span><br><span class="line">set input2=%2%</span><br><span class="line">youtube-dl -f bestvideo+bestaudio --proxy 127.0.0.1:1080 --socket-timeout 60 -o %input% %input2%</span><br><span class="line">PAUSE&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>60s绝对够</p><p>封装为exe</p><p>使用exe4j（已经使用过一次）</p><p>最终测试：</p><p><img src="https://i.loli.net/2021/07/08/ndxcIvPOjo4DNCA.png"></p><p><img src="https://i.loli.net/2021/07/08/Knh5PcOLVxjBMIk.png"></p><p>最最后问题，视频名会乱码</p><p>chcp 65001</p><p><img src="https://i.loli.net/2021/07/08/7WfXBZvyhkC9PQu.png"></p><p>下载命令行执行此命令，再执行exe，测试</p><p>这个方法好像不大可靠</p><p><img src="https://i.loli.net/2021/07/08/RHtEilaJ3uhNVKs.png"></p><p>百度得另一方法：</p><p><img src="https://i.loli.net/2021/07/08/onLZrROupVKheFw.png"></p><p>还是不行，再次百度，修改这个配置</p><p><img src="https://i.loli.net/2021/07/09/8WQizkb9hf1cCRJ.png"></p><p>我草，还有乱码。。。</p><p>在idea里打开代码运行吧需要使用的时候，已经占了太多时间了；</p><p><strong>存在问题：</strong></p><ol><li><strong>视频等待下载时间为5min，可能会时间不够或者等待时间较长，应该使用多线程来解决</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学上网</title>
      <link href="/article/812d49a5.html"/>
      <url>/article/812d49a5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>言简意赅，科学上网</p></blockquote><span id="more"></span><h3 id="1、免费机场"><a href="#1、免费机场" class="headerlink" title="1、免费机场"></a>1、免费机场</h3><p>首先我推荐的两个网站都<strong>锁了大陆的ip</strong>，需要先找免费的连进去（免费梯子看直播当然不现实）</p><p>推荐蓝灯 <a href="https://getlantern.org/zh_CN/">https://getlantern.org/zh_CN/</a> 应该可以免费试用</p><p>安装后运行即可</p><p><img src="https://i.loli.net/2021/05/29/1Muaq6CSDPt5kHA.png"></p><p>每天有一点免费流量可以用（也可以直接升级蓝灯专业版使用，本人没有用过不知道效果如何）</p><h3 id="2、机场推荐"><a href="#2、机场推荐" class="headerlink" title="2、机场推荐"></a>2、机场推荐</h3><p>绝无广告，完全是自己用的比较稳定，看老鼠台油管都很稳</p><p><a href="https://yunyi.nl/">https://yunyi.nl/</a></p><p><a href="https://renzhe.cloud/">https://renzhe.cloud/</a></p><p>以 <a href="https://yunyi.nl/%E4%B8%BA%E4%BE%8B">https://yunyi.nl/为例</a></p><p>注册登录账号</p><p><img src="https://i.loli.net/2021/05/29/9dzWKcegUkrqYIx.png" alt="image-20210529211030551"></p><p>右边选择商店套餐，根据需要购买（支持微信，支付宝支付）</p><blockquote><p>忍者云<a href="https://renzhe.cloud/%E6%9C%899.9%E4%B8%80%E6%9C%88%E5%A5%97%E9%A4%90%EF%BC%8C%E8%8B%A5%E4%B8%8D%E9%80%89%E6%8B%A920%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%E9%82%A3%E4%B8%AA">https://renzhe.cloud/有9.9一月套餐，若不选择20可以选择那个</a></p></blockquote><p><strong>建议一月一月购买！！！</strong></p><p>购买完成后在首页点击复制ssr订阅</p><p><img src="https://i.loli.net/2021/05/29/kC91NItdTPWbUhe.png"></p><p>下载 ssr</p><p>下载链接：<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.1/ShadowsocksR-win-4.9.1.zip">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.1/ShadowsocksR-win-4.9.1.zip</a></p><p>解压，运行这个（不知道2.0,4.0啥区别应该差不多吧。。。）</p><p><img src="https://i.loli.net/2021/05/29/6S27RFp8AvtgcQm.png"></p><p>右下角小图标右键</p><p><img src="https://i.loli.net/2021/05/29/WUDvqbcJuIs3yzt.png" alt="image-20210529213845256"></p><p><img src="https://i.loli.net/2021/05/29/Om6xpHCc3Rhdsa5.png"></p><p><strong>点击add</strong></p><p>这一栏输入刚刚复制的内容</p><p><img src="https://i.loli.net/2021/05/29/yV8gIqXLiBhzDwT.png"></p><p>点击确定</p><p>右键小图标更新</p><p><img src="https://i.loli.net/2021/05/29/cavQr8OLTZU14Px.png"></p><p>代理模式改为pac模式（大陆ip不使用代理）</p><p><img src="https://i.loli.net/2021/05/29/bnT1CkPdsp7XHA6.png" alt="image-20210529212334917"></p><p>服务器，选择新添加的订阅</p><p>（这里关闭服务器负载均衡）</p><p><img src="https://i.loli.net/2021/05/29/ypiAk4t8wm5RuIN.png"></p><p>选择节点</p><p><img src="https://i.loli.net/2021/05/29/OdF4KBIpZ9iEnjw.png" alt="image-20210529212519922"></p><p>便可以开始愉快的看直播</p><p><img src="https://i.loli.net/2021/05/29/YgW9fZr4ypmIoV1.png"></p><p>这还有自己搭ssr代理方法，不是有兴趣的话没有必要</p><p><a href="http://taoblog421.cn/posts/25bd3e2a/">http://taoblog421.cn/posts/25bd3e2a/</a></p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
          <category> 翻墙 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>100篇博客纪念！</title>
      <link href="/article/1945b697.html"/>
      <url>/article/1945b697.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>大概一年前开始有了记博客的习惯，不知不觉已经水了100篇了</p></blockquote><span id="more"></span><h2 id="梦开始的地方"><a href="#梦开始的地方" class="headerlink" title="梦开始的地方"></a>梦开始的地方</h2><blockquote><p>疫情期间白嫖了半年云服务器，瞎折腾了几天搞了个云笔记，当时感觉nb的不得了啊哈，回头看看也就是照着网上的方法直接部署….，然后发到了csdn上，还是有几个人参考并评论交流</p></blockquote><p><img src="https://i.loli.net/2021/05/25/nRbGJC8tAIlL1Fo.png" alt="image-20210525231123973"></p><p><img src="https://i.loli.net/2021/05/25/hGPiLXmZ7ej681c.png"></p><h2 id="wordpress阶段"><a href="#wordpress阶段" class="headerlink" title="wordpress阶段"></a>wordpress阶段</h2><blockquote><p>莫名其妙买了三年腾讯云的学生服务器（有一定被客服坑的原因）加上本来就准备坚持记博客，很多东西学过就忘、不用就忘。自己遇到同样的问题再翻也比较方便，选择直接部署的wordpress，也是很快就可以搭建起来</p></blockquote><p><img src="https://i.loli.net/2021/05/25/4lcMvhfPxqboGew.png"></p><p>然后就是跟着韩顺平韩老师学数据结构与算法、王道的操作系统（当时应付考试）、尚硅谷springboot（就前六章学了个大概）、Vue……</p><p><img src="https://i.loli.net/2021/05/25/gfPYuAiT6Kc3QxN.png"></p><p>学过、忘过….</p><p>谷粒学院项目确实让水平提升不少</p><p><img src="https://i.loli.net/2021/05/25/t3JNWSwVYOzsmXP.png"></p><p><strong>比较有意思的</strong></p><blockquote><p>破解网易云？</p><p>也是网上的方法，可以听网易云所有歌。但通过博客分享给很多同学朋友，还是很不错</p></blockquote><p><img src="https://i.loli.net/2021/05/25/zApaP6WCwSeloBc.png"></p><blockquote><p>自建vps，</p><p>被油管上的视频洗脑上头，详见博客内容，然后闲置的服务器自建代理</p></blockquote><p><img src="https://i.loli.net/2021/05/25/Zx8oReJlkAvjyNd.png"></p><blockquote><p>爬虫程序</p><p>在水友的求助下，简单封装了一个爬虫程序，感受到互联网记忆的可怕</p></blockquote><p><img src="https://i.loli.net/2021/05/25/f5DTAgnJu6QcybV.png" alt="image-20210525232915394"></p><h2 id="hexo阶段（目前）"><a href="#hexo阶段（目前）" class="headerlink" title="hexo阶段（目前）"></a>hexo阶段（目前）</h2><blockquote><p>随着博客的数量多起来，wordpress开始巨卡无比，半年前的一天决定换为纯静态的hexo，使用稍微麻烦一点，但速度很可观</p></blockquote><p><img src="https://i.loli.net/2021/05/25/QdqLBGnwMZm9rXA.png"></p><p><img src="https://i.loli.net/2021/05/25/LfCrFwNZJYhIWzg.png"></p><p>步入考研阶段，为了考研重新学了一遍c语言；</p><p>发现java基础也很薄弱，可能这就是听不懂框架底层源码的原因，在拟定考研本校压力不是很大的情况下正在重新学一遍java，基础不牢，地动山摇啊</p><p><img src="https://i.loli.net/2021/05/25/r87tvI5LGlaMXCj.png"></p><blockquote><p>第100篇博客，希望可以坚持下去吧！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喜瑞斯商城2.0</title>
      <link href="/article/484b8864.html"/>
      <url>/article/484b8864.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>喜瑞斯商城2.0</p></blockquote><h2 id="一、技术栈"><a href="#一、技术栈" class="headerlink" title="一、技术栈"></a>一、技术栈</h2><p>bs架构、前后端分离开发、微服务</p><p><strong>主要技术栈：</strong></p><p>后端：springboot、springcloud、mybatisPlus、reids、mysql、easyExcel、swagger</p><p>前端：vue 、element-ui、axios、node.js、nginx</p><p>其他：阿里云短信、阿里云oss（对象存储）、支付宝支付</p><h2 id="二、运行说明"><a href="#二、运行说明" class="headerlink" title="二、运行说明"></a>二、运行说明</h2><p><strong>项目源码获取方法见文章末尾</strong></p><h3 id="1、前置准备："><a href="#1、前置准备：" class="headerlink" title="1、前置准备："></a>1、前置准备：</h3><h4 id="1、redis"><a href="#1、redis" class="headerlink" title="1、redis"></a>1、redis</h4><p>redis用于存储用户登录信息、短信验证码等操作</p><p>安装并启动即可</p><p><a href="https://redis.io/">https://redis.io/</a></p><h4 id="2、nacos"><a href="#2、nacos" class="headerlink" title="2、nacos"></a>2、nacos</h4><p>微服务注册中心使用阿里巴巴的nacos，同样安装并启动即可</p><p><a href="https://nacos.io/en-us/">https://nacos.io/en-us/</a></p><h4 id="3、nginx"><a href="#3、nginx" class="headerlink" title="3、nginx"></a>3、nginx</h4><p>nginx进行请求转发，将请求转发给各个微服务</p><p>配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"> </span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"> </span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    client_max_body_size 1024m;</span><br><span class="line"> </span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"> </span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"> </span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"> </span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"> </span><br><span class="line">    #gzip  on;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       9001;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location ~ /backstage/ &#123;</span><br><span class="line">            proxy_pass http://localhost:8001;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /goods/ &#123;</span><br><span class="line">            proxy_pass http://localhost:8002;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /oss/ &#123;</span><br><span class="line">            proxy_pass http://localhost:8003;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /pay/ &#123;</span><br><span class="line">            proxy_pass http://localhost:8004;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ /sms/ &#123;</span><br><span class="line">            proxy_pass http://localhost:8005;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ /user/ &#123;</span><br><span class="line">            proxy_pass http://localhost:8006;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>安装并启动即可</p><p><a href="https://www.nginx.com/">https://www.nginx.com/</a></p><h4 id="4、node-js"><a href="#4、node-js" class="headerlink" title="4、node.js"></a>4、node.js</h4><p>安装即可，前端用到</p><p><a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p><strong>确认8001-8006端口，以及以上应用默认端口没有被占用</strong></p><h3 id="2、启动后端"><a href="#2、启动后端" class="headerlink" title="2、启动后端"></a>2、启动后端</h3><p>修改各个微服务的配置文件，主要为数据库连接信息</p><p>配置文件样例：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 服务名 (spring-cloud用到)</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">service-backstage</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 环境设置：dev、test、prod</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># mysql数据库连接</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/sq_cyfwlp?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># json返回时间格式</span></span><br><span class="line"><span class="attr">spring.jackson.date-format</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="attr">spring.jackson.time-zone</span>=<span class="string">GMT+8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#nacos服务地址</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><p>启动各个微服务：</p><p>运行xxxApplication即可</p><p>如</p><p><img src="https://i.loli.net/2021/05/22/IWovLDhuzAbStlq.png"></p><p><strong>接口文档</strong>使用swagger生成</p><p><img src="https://i.loli.net/2021/05/22/tQ9XcgwFLiozfhW.png"></p><p>将地址中的端口换位对应微服务的端口即可查看对应的接口文档</p><h3 id="3、启动前端"><a href="#3、启动前端" class="headerlink" title="3、启动前端"></a>3、启动前端</h3><p>需提前安装node.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>即可(两个前端系统使用不同端口，可同时启动)</p><h2 id="三、项目演示"><a href="#三、项目演示" class="headerlink" title="三、项目演示"></a>三、项目演示</h2><p>b站链接：<a href="https://www.bilibili.com/video/BV1MU4y1L7NT">https://www.bilibili.com/video/BV1MU4y1L7NT</a></p><blockquote><p>写在最后，开发不易，项目还是有很多需要改正或者进一步优化的地方。本来看上一个项目下载量还行想恰一波烂钱，本着开源精神还是把源码放出来，如果这个项目可以帮助到你，还是可以支持一瓶肥宅快乐水</p></blockquote><img src="https://i.loli.net/2021/05/22/EeJiuKLg6o24dr7.png" style="zoom:33%;" /><blockquote><p>源码：<a href="https://wwa.lanzoui.com/iHx7Opco3ze">https://wwa.lanzoui.com/iHx7Opco3ze</a>（蓝奏云直接打包带走）</p><p>gitee:<a href="https://gitee.com/liao_tao123">https://gitee.com/liao_tao123</a> (三个部分都托管在gitee上)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gittalk登录403解决方案</title>
      <link href="/article/500ad1da.html"/>
      <url>/article/500ad1da.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前几天甚至前几周发现电脑上博客的评论用不了了，gittalk登录不上去，而平板上的却可以就凑活用了，网上查了查有不少人都遇到这个问题，决定解决这个问题</p></blockquote><span id="more"></span><h2 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h2><p><img src="https://i.loli.net/2021/05/15/MYatWdTAGreQ3Rv.png"></p><p>f12发现，问题的根源是这个请求</p><p><img src="https://i.loli.net/2021/05/15/sa4WzAhuFvH7rex.png" alt="image-20210515102934093"></p><p>索性直接访问这个地址看看</p><p><img src="https://i.loli.net/2021/05/15/DhFP3leXOa67rRS.png"></p><p>再点连接到这个界面</p><p><img src="https://i.loli.net/2021/05/15/4HJLzNDExfub2Vq.png" alt="image-20210515123451580"></p><p>可以看到原因是这个<strong>服务器被限制使用了二月开始</strong>，自建一个就行</p><h2 id="2、解决"><a href="#2、解决" class="headerlink" title="2、解决"></a>2、解决</h2><p>参考：<a href="https://www.qiansw.com/solve-the-problem-of-using-gitalk-authorization-403.html">https://www.qiansw.com/solve-the-problem-of-using-gitalk-authorization-403.html</a></p><p>自建一个代理服务器就行</p><p>在宝塔中进行如下配置</p><p><img src="https://i.loli.net/2021/05/15/ev7FDLwJUIWtKrZ.png"></p><p>修改配置文件（我的需修改多处）：</p><p><img src="https://i.loli.net/2021/05/15/lr5jTcfS2neO8FR.png"></p><p>（！！！不要修改这个）</p><p><img src="https://i.loli.net/2021/05/15/SQTP2ftb1Dwy45G.png"></p><p>重新部署</p><p>这时发现文章评论和留言没有问题了，但是<strong>碎碎念直接没了</strong>，准备直接修改碎碎念的源码</p><p><img src="https://i.loli.net/2021/05/15/MkS7vXbUsWrToBt.png"></p><p><img src="https://i.loli.net/2021/05/15/IZdrgBHYpKvxWXt.png"></p><p>修改这个js即可</p><p><img src="https://i.loli.net/2021/05/15/IZdrgBHYpKvxWXt.png"></p><p>直接搜索然后替换请求地址即可</p><p><img src="https://i.loli.net/2021/05/15/3PbTDIyfSEa7cCs.png"></p><p>再次重新部署</p><p>还是没有碎碎念，无奈改回去，现在文章和留言评论已经没问题，专注解决碎碎念问题</p><p>莫名其妙发现已经结局，就是只修改一处配置文件即可</p><p><img src="https://i.loli.net/2021/05/15/TOfj1S9VkdNXvuc.png"></p><p>终于可以愉快的使用评论了继续！！</p><p>�论了继续！！</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署到自己服务器</title>
      <link href="/article/4bd2c845.html"/>
      <url>/article/4bd2c845.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客从wordpress迁移到hexo已经两周至于，在github page上自己看还行（梯子），但分享链接访问就很慢，再加上导致以前买的学生服务器闲置，有必要把hexo部署到自己的服务器上（<del>还在考虑使用cdn加速绕过备案，或许可以</del>，备案已经完成），现记录方法</p></blockquote><span id="more"></span><blockquote><p>再次继续写这篇博客是服务器被黑客搞了，被迫重装系统，密码千万不要设置12345678!!</p><p>现在就在这台服务器上从零开始搞一遍</p></blockquote><h2 id="一、本地操作"><a href="#一、本地操作" class="headerlink" title="一、本地操作"></a>一、本地操作</h2><p>由于原先已经成功部署到github服务器上，本地不需要操作</p><h2 id="二、服务器端操作"><a href="#二、服务器端操作" class="headerlink" title="二、服务器端操作"></a>二、服务器端操作</h2><p>我的大致理解就是在服务器上创建一个git仓库，然后本地同步的时候即同步到github的仓库也同步到服务器上的仓库就可以。</p><p>发现git的知识还是很薄弱，就大概会用 </p><h3 id="1、git环境准备"><a href="#1、git环境准备" class="headerlink" title="1、git环境准备"></a>1、git环境准备</h3><p>查看是否已经安装了git，我也不知道啥时候安装的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]# git --version</span><br><span class="line">git version 1.8.3.1</span><br></pre></td></tr></table></figure><p>安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]# yum install git</span><br></pre></td></tr></table></figure><p>然后就是个难点了，需要自己的电脑和服务器建立连接，相当于在服务器上搭建git服务（我的大致理解）</p><p>先鼓捣鼓捣测试，再继续</p><p><strong>先创建用户组和用户，并授予权限,创建仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos ~]# groupadd git</span><br><span class="line">[root@VM-0-15-centos ~]# useradd git -g git</span><br><span class="line">//给git用户一个复杂的密码，否则可能会被破解</span><br><span class="line">[root@VM-0-15-centos /]# passwd git</span><br><span class="line">Changing password for user git.</span><br><span class="line">New password: </span><br><span class="line">Retype new password: </span><br><span class="line">Sorry, passwords do not match.</span><br><span class="line">New password: </span><br><span class="line">Retype new password: </span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line">//先创建一个用与测试功能的仓库</span><br><span class="line">[root@VM-0-15-centos git]# cd /home/git</span><br><span class="line">[root@VM-0-15-centos git]# git init --bare test.git</span><br><span class="line">// 需要将文件授予git用户</span><br><span class="line">[root@VM-0-15-centos git]# chown -R git test.git</span><br></pre></td></tr></table></figure><p><strong>使用钩子函数，在文件提交到仓库时，同步到指定的目录</strong></p><p>先在git目录下创建target文件夹用于同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos git]# mkdir target</span><br><span class="line">[root@VM-0-15-centos git]# ls</span><br><span class="line">target  test.git</span><br></pre></td></tr></table></figure><p>进入仓库，在hooks下创建的post-receive文件，编辑</p><p>输入以下内容：git –work-tree&#x3D;&#x2F;home&#x2F;target  checkout -f</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos hooks]# vim post-receive</span><br><span class="line">[root@VM-0-15-centos hooks]# chown -R git post-receive //</span><br><span class="line">[root@VM-0-15-centos hooks]# chmod +x post-receive //脚本需有可执行权限</span><br></pre></td></tr></table></figure><p><strong>这时候可以开始测试:</strong></p><p>执行 ：git clone git@yourip :&#x2F;home&#x2F;git&#x2F;test.git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> git@212.64.71.101:/home/git/test.git</span></span><br><span class="line">Cloning into &#x27;test&#x27;...</span><br><span class="line">The authenticity of host &#x27;212.64.71.101 (212.64.71.101)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:eX/LeVy7VZ0JxJ5Y88NE5kJ/zUozVdpjQ7IDKRqqkN8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? y</span><br><span class="line">Please type &#x27;yes&#x27;, &#x27;no&#x27; or the fingerprint: yes</span><br><span class="line">Warning: Permanently added &#x27;212.64.71.101&#x27; (ECDSA) to the list of known hosts.</span><br><span class="line">git@212.64.71.101&#x27;s password:</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br></pre></td></tr></table></figure><p>客隆仓库后在仓库里添加文件用于测试</p><p><img src="https://i.loli.net/2020/12/16/8sAnmxdIPG634uW.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add 1.txt</span></span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -<span class="string">&#x27;测试钩子函数&#x27;</span></span></span><br><span class="line">[master (root-commit) a5b6704] 娴嬭瘯閽╁瓙鍑芥暟</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 1.txt</span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin master</span></span><br><span class="line">git@212.64.71.101&#x27;s password:</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 229 bytes | 229.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: error: unable to create file 1.txt (Permission denied)</span><br><span class="line">To 212.64.71.101:/home/git/test.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不幸的报错了然而  <strong>remote: error: unable to create file 1.txt (Permission denied)</strong> </p><p>先看git日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos test.git]# git log</span><br><span class="line">commit a5b6704a8b2db43bf715babcd05e4df86f6c10d0</span><br><span class="line">Author: liaotao421 &lt;1984457659@qq.com&gt;</span><br><span class="line">Date:   Wed Dec 16 12:50:07 2020 +0800</span><br><span class="line"></span><br><span class="line">    测试钩子函数</span><br></pre></td></tr></table></figure><p>是提交成功了的，再根据报错信息可能是权限问题，发现target目录拥有者并不是git</p><p><img src="https://i.loli.net/2020/12/16/zZ4uOMgTmckdlj6.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git /home/git/target</span><br></pre></td></tr></table></figure><p>再来一次：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add 1.txt</span></span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&#x27;再次测试&#x27;</span></span></span><br><span class="line">[master 03a6964] 鍐嶆娴嬭瘯</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull origin master</span></span><br><span class="line">git@212.64.71.101&#x27;s password:</span><br><span class="line">From 212.64.71.101:/home/git/test</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Already up to date.</span><br></pre></td></tr></table></figure><p>并没有报错，查看服务器上文件：</p><p>咋还没有。。。。</p><p>应该是target文件没有写入权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chomd 777 target</span><br></pre></td></tr></table></figure><p>再创建个文件试一次：</p><p><img src="https://i.loli.net/2020/12/16/WXEuZQyqk5Hzg3x.png"></p><p>再次提交发现文件以及同步到target目录</p><p><img src="https://i.loli.net/2020/12/16/sEFgDfHQUt5h4T9.png"></p><p>没有问题，继续</p><h3 id="2、ssh秘钥"><a href="#2、ssh秘钥" class="headerlink" title="2、ssh秘钥"></a>2、ssh秘钥</h3><p>现在发现每次提交都要输入密码，意味着每次更新博客都需要输密码，肯定是太麻烦了，于是有听说有种避免这种情况的方法</p><p>这种输入用户名，密码的加密方式为对称加密，还有一种加密方式为非对称加密，有两个秘钥：私钥和公钥</p><ul><li>私钥是每个人私有的（需妥善保管），而公钥顾名思义是公开的</li><li>私钥和公钥是一一对应的</li><li>用私钥加密的数据只能公钥可以解开，用公钥加密的数据只有私钥可以解</li></ul><p>这里<strong>主要</strong>使用的是认证（不知道传输过程中对数据加密了没有emmm）</p><p>服务器需要知道传输文件的是我的笔记本，而不是假冒的，就需要知道到我笔记本的公钥，然后我发送<strong>私钥加密</strong>的文件，服务器用<strong>公钥解</strong>，如果解的开就是笔记本发送的文件</p><p><strong>在本地生成私钥和秘钥：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/admin/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/admin/.ssh/id_rsa</span><br><span class="line">Your public key has been saved in /c/Users/admin/.ssh/id_rsa.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:d8OT9qgBdSRjA/3xXYPSZgJXk34UIBxbmTGNueL2uXM admin@DESKTOP-P6D5FT4</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 3072]----+</span><br><span class="line">|        .+B+=B@..|</span><br><span class="line">|         .oO=@o+.|</span><br><span class="line">|          .oBoo.o|</span><br><span class="line">|         . +.+...|</span><br><span class="line">|        S o O .  |</span><br><span class="line">|         o = =   |</span><br><span class="line">|          o o o  |</span><br><span class="line">|           o + E |</span><br><span class="line">|          .  .+  |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/16/yzWskvmxheUoJp4.png"></p><p>.pub就是公钥，没有.pub的是私钥</p><p>将公钥给服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i id_rsa.pub git@212.64.71.101</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-copy-id -i id_rsa.pub git@212.64.71.101</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;id_rsa.pub&quot;</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">git@212.64.71.101&#x27;s password:</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">git@212.64.71.101&#x27;s password:</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">git@212.64.71.101&#x27;s password:</span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &#x27;git@212.64.71.101&#x27;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><p><strong>貌似这样就行了，测试</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add 3.txt</span></span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&#x27;测试免密&#x27;</span></span></span><br><span class="line">[master 1cff8de] 娴嬭瘯鍏嶅瘑</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 3.txt</span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin master</span></span><br><span class="line">Enumerating objects: 4, done.</span><br><span class="line">Counting objects: 100% (4/4), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 300 bytes | 300.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">To 212.64.71.101:/home/git/test.git</span><br><span class="line">   101e4bc..1cff8de  master -&gt; master</span><br><span class="line"></span><br><span class="line">admin@DESKTOP-P6D5FT4 MINGW64 ~/Desktop/test/test (master)</span><br></pre></td></tr></table></figure><p>没有问题，现在可以免密提交</p><p><img src="https://i.loli.net/2020/12/16/Pz7cOx8WArKVZgd.png"></p><h3 id="3、站点开设"><a href="#3、站点开设" class="headerlink" title="3、站点开设"></a>3、站点开设</h3><blockquote><p>今天也是域名刚完成了备案，但是还要进行公安备案，不知道能直接用不</p></blockquote><p><strong>1、使用宝塔面板</strong></p><p>宝塔傻瓜式操作即可</p><p><img src="https://i.loli.net/2020/12/16/huqy8UtfojNGW1V.png"></p><p><img src="https://i.loli.net/2020/12/16/jrPaEFkyHzIi5Rx.png"></p><p><strong>2、不使用宝塔面板</strong></p><p>安装 nginx 作为web服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.20.2.tar.gz</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><p>解压,配置编译运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.20.2.tar.gz</span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h3 id="4、博客仓库创建"><a href="#4、博客仓库创建" class="headerlink" title="4、博客仓库创建"></a>4、博客仓库创建</h3><p>有了上面的经验，现在所需要进行的有：</p><ol><li>新建仓库用来存放博客内容</li><li>提交后把内容自动同步到站点目录</li></ol><p>没有错，只有两步！</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">使用宝塔</button></li><li class="tab"><button type="button" data-href="#test4-2">不使用宝塔</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-15-centos git]# git init --bare blog.git</span><br><span class="line">Initialized empty Git repository in /home/git/blog.git/</span><br><span class="line">[root@VM-0-15-centos git]# chown -R git blog.git</span><br><span class="line">[root@VM-0-15-centos hooks]# vim post-recieve</span><br><span class="line">[root@VM-0-15-centos hooks]# chown -R git post-recieve</span><br><span class="line">[root@VM-0-15-centos hooks]# chmod +x post-recieve</span><br><span class="line">//将网站目录授予git用户（重要！）</span><br><span class="line">[root@VM-0-15-centos wwwroot]# chown -R git taoblog421.cn</span><br><span class="line">chown: changing ownership of ‘taoblog421.cn/.user.ini’: Operation not permitted //这个文件不影响</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p>修改钩子函数，同步到nginx的html文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/git/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">nginx下html文件夹目录</span></span><br><span class="line">DIR=/usr/local/nginx/html</span><br><span class="line">git --work-tree=$&#123;DIR&#125; clean -fd</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接强制检出</span></span><br><span class="line">git --work-tree=$&#123;DIR&#125; checkout --force</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="5、最终测试"><a href="#5、最终测试" class="headerlink" title="5、最终测试"></a>5、最终测试</h3><p>修改hexo配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@212.64.71.101:/home/git/blog.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>运行：hexo clean &amp;&amp; hexo deploy</p><p><img src="https://i.loli.net/2020/12/16/DVlZFTuNxcRrpvi.png"></p><p>访问：</p><p><img src="https://i.loli.net/2020/12/16/JtDWCwF8Pk4ufiL.png"></p><h2 id="三、cdn加速-优化配置"><a href="#三、cdn加速-优化配置" class="headerlink" title="三、cdn加速 优化配置"></a>三、<del>cdn加速</del> <del>优化配置</del></h2><blockquote><p>这时候我发现 只要开了vpn访问速度就飞快，但是资源都是在国内服务器上</p></blockquote><p>访问速度不使用VPN自然势必托管github快</p><p>在来个cdn加速直接起飞（访问量较少，应该花不到好多钱）</p><p>选阿里云，虽然都是资本家，还是选择阿里，emmm</p><p>我开了之后发现加速并不是很明显，emmm，还是从优化配置入手吧</p><p>好像有种说法是代码托管在github再使用cdn加速会有效果</p><p>大概能用就行，考试要紧，假期慢慢再搞优化吧，现在对国内访问已经足够友好了</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/article/b37651.html"/>
      <url>/article/b37651.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录自己目的使用博客的搭建方法</p></blockquote><p>wordpress在文章变多后巨卡无比，于是转为hexo，虽然在使用上没有wordpress方便，但是由于纯静态要快很多，主题的选择也很丰富</p><p>前置需求：</p><ol><li>github账户（可以直接部署在gitpage上）</li><li>一台电脑</li></ol><h2 id="一、hexo安装"><a href="#一、hexo安装" class="headerlink" title="一、hexo安装"></a>一、hexo安装</h2><p><a href="https://hexo.io/zh-cn/">hexo官网</a> ，好处是hexo作者是国人，官方文档便于阅读</p><p>需要 <a href="https://nodejs.org/zh-cn/download/">node.js</a> 和 <a href="https://git-scm.com/downloads">git</a> ，如果做开发的话应该会有这两个环境，无的话选择系统对应的版本下载安装就可以</p><p>这是我使用的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin&gt;git --version</span><br><span class="line">git version 2.28.0.windows.1</span><br><span class="line"></span><br><span class="line">C:\Users\admin&gt;node -v</span><br><span class="line">v12.18.3</span><br></pre></td></tr></table></figure><blockquote><p>这部分按照官网文档操作其实就可，本博客核心在于<strong>快速的建立起一个模板还不错的博客以便使用</strong>。</p></blockquote><p>为方便演示，我在桌面新建文件夹操作</p><p>在<strong>文件夹内</strong>打开<strong>命令行</strong>（方法：win10 按住shift + 鼠标右键，点击再此处打开powershell窗口，然后输入cmd回车进入。win11鼠标右键然后点击在终端打开即可）</p><p><img src="https://i.loli.net/2021/02/22/ik4q7fOuCmY3HUb.png" alt="image-20210222120000851"></p><p><strong>安装 hexo</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><strong>创建目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;文件名&gt; // 执行后从git仓库下载，有点小慢正常</span><br></pre></td></tr></table></figure><p>等待下载完成，有这些文件</p><p><img src="https://i.loli.net/2021/02/22/Wmwk2NDFMfQxdCn.png" alt="image-20210222122114580"></p><p><strong>启动</strong></p><p>在&lt;文件名&gt;目录进入cmd ，输入<strong>hexo server</strong> 即可启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin\Desktop\blog\blog&gt;hexo server</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a></p><p><img src="https://i.loli.net/2021/02/22/fVeBL9hy73cQJnr.png"></p><p>此时显示的是hexo默认的主题，当然看起来不是很行</p><blockquote><p>如需更换其他主题以及hexo的其他使用都可以参照官方文档</p></blockquote><p>下面就分享使用我正在使用的这套模板的方法</p><p>网址 <a href="taoblog421.cn">taoblog421.cn</a> (看起来高大上许多哈)</p><p><img src="https://i.loli.net/2021/02/22/HKC6VJOmZetqjIw.png"></p><blockquote><p>2022.7.26更新，切换使用了butterfly主题</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726114839621.png"></p></blockquote><hr><h2 id="二、amazing主题"><a href="#二、amazing主题" class="headerlink" title="二、amazing主题"></a>二、amazing主题</h2><p>使用的主题为这位大佬<a href="https://github.com/removeif">@removeif</a> 魔改，在他的博客可以找到食用方法，但是我还是折腾了很久，因为描述的并不是十分详细，但是使用起来效果不错</p><p><a href="https://wwa.lanzous.com/iWnWzlzjkxi">点击下载主题</a></p><p>下面就关键的配置进行说明</p><p>两个关键配置文件：</p><ol><li>主配置文件   目录下_config.yml</li><li>主题配置文件  主题下_config.yml</li></ol><p>然后根据大佬的博客进行修改即可！</p><blockquote><p>2022.7.26更新，重点放在如何使用butterfly主题上</p></blockquote><hr><h2 id="三、butterfly主题"><a href="#三、butterfly主题" class="headerlink" title="三、butterfly主题"></a>三、butterfly主题</h2><p>官方文档：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a>，涵盖了全面的配置说明，可直接阅读，也可按下文快速搭建博客后阅读官方文档对细节进行完善。</p><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p>推荐使用gitee安装</p><p>在上一步创建的文件夹里运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>修改<strong>主配置文件_config.yml</strong>，将主题配置为butterfly</p><blockquote><p>再次区分两个配置文件</p><ol><li>主配置文件   根目录下_config.yml</li><li>主题配置文件  主题目录下_config.yml</li></ol></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span> </span><br></pre></td></tr></table></figure><p>安装需要的插件（若不安装报错）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><h4 id="标签页和分类页"><a href="#标签页和分类页" class="headerlink" title="标签页和分类页"></a>标签页和分类页</h4><blockquote><p>将自带的那篇博客（目录\source_posts）进行修改，以便看到标签页，分类页创造成功的效果</p><p>修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">tags: </span><br><span class="line">  - tag1</span><br><span class="line">  - tag2</span><br><span class="line">categories: </span><br><span class="line">  - ccategorie1</span><br><span class="line">  - ccategorie2</span><br></pre></td></tr></table></figure></blockquote><p>创建两个页面，在根目录执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin\Desktop\新建文件夹\blogDemo&gt;hexo new page tags</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO</span><br><span class="line">  ===================================================================</span><br><span class="line"></span><br><span class="line">      #####  #    # ##### ##### ###### #####  ###### #      #   #</span><br><span class="line">      #    # #    #   #     #   #      #    # #      #       # #</span><br><span class="line">      #####  #    #   #     #   #####  #    # #####  #        #</span><br><span class="line">      #    # #    #   #     #   #      #####  #      #        #</span><br><span class="line">      #    # #    #   #     #   #      #   #  #      #        #</span><br><span class="line">      #####   ####    #     #   ###### #    # #      ######   #</span><br><span class="line"></span><br><span class="line">                            4.3.1</span><br><span class="line">  ===================================================================</span><br><span class="line">INFO  Created: ~\Desktop\新建文件夹\blogDemo\source\tags\index.md</span><br></pre></td></tr></table></figure><p>修改这个生成的index.md文件</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726121215801.png" alt="image-20220726121215801"></p><p>浏览器输入<a href="http://localhost:4000/tags/%EF%BC%8C%E7%9C%8B%E5%88%B0%E6%88%90%E5%8A%9F%E5%88%9B%E5%BB%BA%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2">http://localhost:4000/tags/，看到成功创建这个页面</a></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726122342546.png"></p><p><strong>同理</strong>，可以创建<strong>分类页面</strong>，聪明的你一定没问题</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726122704371.png"></p><h4 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h4><p>通过上面创建两个页面，可以得出创建界面的命令为 hexp new page &lt;页面名&gt;</p><p>先创建页面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><p>修改type为”link”</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726123151593.png"></p><p>在Hexo博客目录中source下创建文件夹_data，在文件夹里创建一个文件<em>link.yml</em>，复制下面的内容并修改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure><p>浏览器输入<a href="http://localhost:4000/link/%E6%9F%A5%E7%9C%8B%E6%95%88%E6%9E%9C">http://localhost:4000/link/查看效果</a></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726125821099.png"></p><h4 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h4><p>介绍自己的一个界面，用同样的方法创建一个名为about的页面</p><p>修改index.md即可，这里附上我自己的页面，可在此基础上修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于我</span><br><span class="line">date: 2022-03-18 13:33:16</span><br><span class="line">comments: false</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#### 个人简介</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">诸葛亮诫子书愿共勉：</span><br><span class="line"></span><br><span class="line">&gt;&quot;***夫君子之行，静以修身，俭以养德。非淡泊无以明志，非宁静无以致远。夫学须静也，才须学也，非学无以广才，非志无以成学。淫慢则不能励精，险躁则不能治性。年与时驰，意与日去，遂成枯落，多不接世，悲守穷庐，将复何及！***&quot;</span><br><span class="line">&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">个人信息：</span><br><span class="line"></span><br><span class="line">双非研一SE学生。</span><br><span class="line">博客大部分内容为学习笔记自查自用，少量原创内容。</span><br><span class="line">爱好杂而不精，端游（现在只打LOL了），魔方，乒乓球，看书，爬山......</span><br><span class="line"></span><br><span class="line">#### 博客信息</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">+ 网站采用的[Icarus主题](http://github.com/ppoffice/hexo-theme-icarus) </span><br><span class="line">+ 在[原作者项目](https://removeif.github.io/)基础上修改配置而成</span><br><span class="line">+ 原站点[blog.tao421.xyz](http://blog.tao421.xyz)欢迎访问</span><br><span class="line">+ 采用[Butterfly主题](https://butterfly.js.org/)重建博客</span><br><span class="line"></span><br><span class="line">***更新日志：***</span><br><span class="line">--*2020.11.24：完成博客迁移，可以继续记录学习内容*</span><br><span class="line">--*2020.11.25：在[项目](https://removeif.github.io/)基础下进行修改配置建立新站点*</span><br><span class="line">--*2020.11.24：域名需要开始备案，原站点不能访问，wordpress太慢，准备弃坑*</span><br><span class="line">--*2022.3.18：更换主题*</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">#### 计划</span><br><span class="line"></span><br><span class="line">**2022计划**</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&gt;**2022-GOALS**              </span><br><span class="line">&gt;</span><br><span class="line">&gt;+ [x] 成为本校研究生</span><br><span class="line">&gt;+ [ ] 看20本书</span><br><span class="line">&gt;+ [ ] 英语六级刷分</span><br><span class="line">&gt;+ [ ] 赚钱，争取经济独立</span><br><span class="line">&gt;+ [ ] 减肥</span><br><span class="line"></span><br><span class="line">**2021计划**</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&gt;**2021-GOALS**              </span><br><span class="line">&gt;更新于202.3.18</span><br><span class="line">&gt;</span><br><span class="line">&gt;+ [x] 考研通过初试</span><br><span class="line">&gt;+ [ ] 买的专业书看一遍（java编程思想,深入理解计算机系统...）</span><br><span class="line">&gt;+ [ ] 有空继续看剩下的几部武侠小说（雪山飞狐、碧血剑....）</span><br><span class="line">&gt;+ [ ] 魔方别彻底丢了</span><br><span class="line">&gt;+ [ ] 写100篇博客（灌水，技术，瞎折腾...）</span><br><span class="line">&gt;  **额外：**</span><br><span class="line">&gt;+ [x] 经常看Youtube视频，历史尤其中国近代史知识，政治知识增加</span><br><span class="line">&gt;+ [x] 解锁成就“看穿生死”，“不再焦虑”</span><br><span class="line">&gt;+ [x] 看了不少经典粤语电影</span><br><span class="line">&gt;  **总结：**</span><br><span class="line">&gt;+ 考研上岸了一半，其他是都没有完成</span><br><span class="line">&gt;+ 再接再厉</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- **2019计划**</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">2018.12.31/21:59:00-&gt;更新于2019.12.31</span><br><span class="line"></span><br><span class="line">&gt;**2019-GOALS**</span><br><span class="line">&gt;</span><br><span class="line">&gt;+ [x] 购买的专业书籍至少看完一遍（并发、重构、设计模式...）-&gt; 95%</span><br><span class="line">&gt;  **额外：**</span><br><span class="line">&gt;+ [x] 追了很多剧</span><br><span class="line">&gt;  **总结：**</span><br><span class="line">&gt;+ 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！</span><br><span class="line"></span><br><span class="line">&lt;br&gt; --&gt;</span><br></pre></td></tr></table></figure><p>浏览器输入：<a href="http://localhost:4000/about/">http://localhost:4000/about/</a> 查看效果</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726131328874.png"></p><h4 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h4><p>用同样的方法创建一个名为messageboard的页面</p><p>修改生成的index.md</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 留言板</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">comments: true</span><br></pre></td></tr></table></figure><blockquote><p>这个暂时看不到效果，需等待配置评论功能后</p></blockquote><h4 id="网站信息"><a href="#网站信息" class="headerlink" title="网站信息"></a>网站信息</h4><p>修改<strong>主配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Taoblog</span> </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;subtitle&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;分享技术，记录生活&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h4><p>上面创建那么多页面，得显示在导航条</p><p>修改<strong>主题配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">连接:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726132542953.png"></p><h4 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h4><p>需要将博客链接到你的其他社交媒体，我是链接了下面这些平台</p><blockquote><p>其他的平台图标需要自己找，参见<a href="https://butterfly.js.org/posts/4aa8abbe/#%E7%A4%BE%E4%BA%A4%E5%9C%96%E6%A8%99">官方文档的说明</a></p></blockquote><p>修改<strong>主题配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  fab fa-github: https://github.com/xxxxx || Github</span><br><span class="line">  fas fa-envelope: mailto:xxxxxx@gmail.com || Email</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726133246698.png"></p><p>由于这里使用的是font-awesome，对墙内用户很不友好，博客提供了使用阿里巴巴矢量库图标的方法，<a href="https://butterfly.js.org/posts/4073eda/#Icon">参见</a></p><p>或等我在进阶内容中书写这一部分的内容</p><p>这里顺带把头像修改了，主题配置文件找到avatar</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">https://i.loli.net/2021/02/05/TatLkECB7mx1ZGd.jpg</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>换成自己的头像即可（那个effect开启后头像会一直旋转）</p><h4 id="页脚"><a href="#页脚" class="headerlink" title="页脚"></a>页脚</h4><p>一般都是需要备案滴，主题配置文件修改为如下（可按照自己需要跳转）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  owner:</span><br><span class="line">    enable: true</span><br><span class="line">    since: 2020</span><br><span class="line">  custom_text: ©版权说明：本网站所有内容均收集于互联网或自己创作,&lt;br&gt;方便于网友与自己学习交流，如有侵权，请&lt;a href = &#x27;http://taoblog421.cn/messageboard/&#x27;&gt;留言&lt;/a&gt;，立即处理&lt;br&gt;&lt;a href=&quot;https://beian.miit.gov.cn/&quot;&gt;&lt;span&gt;备案号：陇ICP备2020004464号-1&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">  copyright: false # Copyright of theme and framework</span><br></pre></td></tr></table></figure><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726134218325.png"></p><h4 id="右下角的按钮"><a href="#右下角的按钮" class="headerlink" title="右下角的按钮"></a>右下角的按钮</h4><p>这一部分直接看官网文档吧，按自己想法开启&#x2F;关闭</p><ul><li>translate</li><li>darkmode</li><li>readmode</li></ul><p>选择是否开启即可。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># The text of a button</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">簡</span></span><br><span class="line">  <span class="comment"># the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># Time delay</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Simplified Chinese</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&#x27;繁&#x27;</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Traditional Chinese</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&#x27;簡&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Toggle Button to switch dark/light mode</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Switch dark/light mode automatically (自動切換 dark mode和 light mode)</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 1  Following System Settings, if the system doesn&#x27;t support dark mode, it will switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 2  Switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: false</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read Mode (閲讀模式)</span></span><br><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h4><p>主题配置文件，可以选择显示或者不显示，基本无需修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">Follow</span> <span class="string">Me</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/xxxxxx</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">date</span> <span class="comment"># date or updated</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># busuanzi count for PV / UV in site</span></span><br><span class="line"><span class="comment"># 訪問人數</span></span><br><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time difference between publish date and now (網頁運行時間)</span></span><br><span class="line"><span class="comment"># Formal: Month/Day/Year Time or Year/Month/Day Time</span></span><br><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">publish_date:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Aside widget - Newest Comments</span></span><br><span class="line"><span class="attr">newest_comments:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="number">10</span> <span class="comment"># unit: mins, save data to localStorage</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><p>当然需要读者与你交流，提供了多种评论，我用过gittalk，但是伟大防火墙（GreatFireWall）搞的有时候用不了，这里使用Valine</p><p><a href="https://valine.js.org/">https://valine.js.org/</a></p><p>首先得获取到app id 和 app key ，参照官网完全没问题</p><p>在<strong>主题配置文件</strong>中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">UdlOld4ASbFChikw4W0qkuA3-gzGzoHs</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="string">j7HSw45F6iXY7fRL8jAtFIA</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">retro</span> <span class="comment"># gravatar style https://valine.js.org/#/avatar</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span></span><br><span class="line">  <span class="attr">bg:</span> <span class="comment"># valine background</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><p>还要在comment选择 valine</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">Valine</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in post&#x27;s top_img</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in Home Page</span></span><br></pre></td></tr></table></figure><p>这时候留言板也可用</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726140341343.png"></p><h4 id="网站背景"><a href="#网站背景" class="headerlink" title="网站背景"></a>网站背景</h4><p>蓝的背景也太low了</p><p>修改<strong>主题配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/2696bc4f7d074573b1b11cb488a5080a1.jpg</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Footer Background</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h3 id="3、撰写文章"><a href="#3、撰写文章" class="headerlink" title="3、撰写文章"></a>3、撰写文章</h3><p>这里推荐使用插件hexo-admin</p><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure><p>安装后启动hexo</p><p>浏览器输入：<a href="http://localhost:4000/admin/#/%E8%BF%9B%E5%85%A5%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2">http://localhost:4000/admin/#/进入管理界面</a></p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726141812916.png"></p><p>点击new post输入文字名开始撰写</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726141859087.png"></p><p>我一般是在typora写好后复制过来，然后点击右上角的设置，输入文字的分类和标签，点击publish发布即可。</p><p><img src="https://edu-cubeonline.oss-cn-chengdu.aliyuncs.com/image-20220726142039227.png"></p><blockquote><p>部署的话，可以阅读本人博客 <a href="http://taoblog421.cn/article/4bd2c845.html">hexo部署到自己服务器</a></p><p>或者部署到github page，参考别人博客  <a href="https://segmentfault.com/a/1190000017986794">超详细Hexo+Github Page搭建技术博客教程【持续更新】</a></p><p>强烈建议部署到自己的服务器，访问快。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己搭建ssr代理</title>
      <link href="/article/25bd3e2a.html"/>
      <url>/article/25bd3e2a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前几天因为网络赚钱上头购买的国外vps还闲置着，还有那些YouTube上什么小说，视频，成人站广告引流赚钱看看就行，不能说绝对是被割韭菜，一部分人纯碎是凭借视频的播放量加上传授所谓的内购项目来牟利，想一想，如果你发现了一个被动赚钱的项目，你会闷声发大财还是公之于众，再加上我国网络监管的力度，还是把心思放在正道上为妙！ <img src="https://i.loli.net/2020/12/03/1SLFatPoX7mv64M.jpg" alt="img" style="zoom: 33%;" />        ，记录一篇使用<strong>国外vps</strong>“科学上网”的方法</p></blockquote><span id="more"></span><h2 id="一、一些我也分不清的概念"><a href="#一、一些我也分不清的概念" class="headerlink" title="一、一些我也分不清的概念"></a>一、一些我也分不清的概念</h2><h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN:"></a>VPN:</h3><p>VPN可谓是经常说了，平时自己折腾折腾的也知道大概可以用来科学上网，要是问我什么是VPN，大概就是知道中文虚拟专用网络（Virtual Private Network），也就说不出个所以然了（计算机网络学过一点，搞忘了），网上扒一段作用</p><blockquote><p>“vpn作用：提供安全可靠的通信渠道，一般而言企业使用较多。延伸作用：科学上网。说明：VPN的出现并不是为了“科学上网”，二是在公网上建立加密的通信渠道。例如，公司员工出差或者在寝室，想要登录公司内网邮箱怎么办？这时VPN就派上用场了，可以通过第三方连接工具进行远程连接，比如思科就有相应的工具。”</p></blockquote><h3 id="VPS，虚拟主机，云服务器，服务器"><a href="#VPS，虚拟主机，云服务器，服务器" class="headerlink" title="VPS，虚拟主机，云服务器，服务器"></a>VPS，虚拟主机，云服务器，服务器</h3><p>这些概念还是可以区分下，</p><p>服务器：就是看得见摸得着的服务器，可以理解性能更佳的主机，等以后或许可以搞一台放家里，emmmmm</p><p>云服务器（Elastic Compute Service 简称ESC）：接触到是疫情期间阿里云的白嫖活动，开启了新世界的大门啊哈哈，目前我就主要使用腾讯云推出的腾讯云学生服务器，一年120还是很划算（辣鸡腾讯客服忽悠我买了三年），用途就可以自己部署部署项目，建小型站点什么的</p><p>虚拟主机：当时因为分不清云服务器与虚拟主机，看便宜就买了一台，虽然是香港的不需要备案，但便宜的太离谱，一年好像40多，访问啥的贼慢，已经弃置，虚拟主机就是弱化版的云服务器，也可以进行建站，但性能不如云服务器，而且没有操作系统，自然不能安装java环境啥的</p><p>VPS:就是把服务器虚拟化成一个一个，没部分都有独立的ip，操作系统，之前我都不知道有这玩意，买了一台发现性能比腾讯云的学生稍好，多一个核，价格又差不多（就离谱），推荐网站 <a href="https://pacificrack.com/">https://pacificrack.com/</a> ，有各种价位的套餐，可以使用支付宝支付</p><h3 id="SSR-SS"><a href="#SSR-SS" class="headerlink" title="SSR,SS"></a>SSR,SS</h3><p>一样是知道名字，但细说说不出个所以然，扒一段解释继续</p><blockquote><p>SS全称shadowsocks，一开始为个人独立开发并用作“科学上网”，后被大家所熟知和广泛使用。再后来，据说作者被请去“喝茶”，停止了该项目。</p></blockquote><blockquote><p>SSR全称shadowsocks-R。SSR作者声称SS不够隐匿，容易被防火墙检测到，SSR在改进了混淆和协议，更难被防火墙检测到。简单地说，SSR是SS的改进版。</p></blockquote><p>底层原理就不去探究了，步入正题，开始搭建自己的SSR代理！</p><p>ps : 以上各种观点均个人理解，可能漏洞百出，勿喷<img src="https://i.loli.net/2020/12/03/HYzmwS8DZjOaWJu.jpg" alt="img" style="zoom:50%;" /></p><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><p>其实网上一搜找个教程照着做就行，还是自己写写，记录记录踩到的坑啥的</p><h3 id="1、拥有一台国外VPS"><a href="#1、拥有一台国外VPS" class="headerlink" title="1、拥有一台国外VPS"></a>1、拥有一台国外VPS</h3><p>买 就完事了，性能差不多就行应该，应该吧 <a href="%5Bhttps://pacificrack.com/%5D(https://pacificrack.com/)">推荐网站</a></p><h3 id="2、连接到终端进行操作"><a href="#2、连接到终端进行操作" class="headerlink" title="2、连接到终端进行操作"></a>2、连接到终端进行操作</h3><p>连接我用的xshell，当然各种工具都行，默认这些工具读者都会了，回头在b站发一个从零开始教程</p><p><strong>移动到你选择的目录，一键安装，运行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/CecilWu/SSR-Chinese/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/03/N25FYZmcOMQrIJL.png" alt="image-20201203221555870"></p><p><strong>相信各位已经看出，现在只需要配置就可以了</strong></p><p>安装网上的方法，加密协议选10，输入自己的密码，一路默认回车，有Y输入y</p><p>（安装的东西还是挺多感觉）</p><p><img src="https://i.loli.net/2020/12/03/Evl8CdHXsKTIe5P.png" alt="image-20201203225800326"></p><p>安装中… …</p><p><img src="https://i.loli.net/2020/12/04/nucqHyvDOw47xGj.png" alt="image-20201204002348669"></p><p>这样就安装完成</p><h3 id="3、安装Shadowsocks"><a href="#3、安装Shadowsocks" class="headerlink" title="3、安装Shadowsocks"></a>3、安装Shadowsocks</h3><p>（得下这个蓝飞机，我电脑上的红飞机不得行不知道为什么）</p><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.1.7.1/Shadowsocks-4.1.7.1.zip">下载地址</a></p><p>打开，将配置修改为自己的ssr配置信息</p><p><img src="https://i.loli.net/2020/12/04/iAqg6cPfjVZ59Mn.png" alt="image-20201204002536886"></p><p>即可开始“科学上网”</p><p><img src="https://i.loli.net/2020/12/04/d4jPGJF1MxzAbIp.png" alt="image-20201204002611903"></p><h2 id="三、效果测试"><a href="#三、效果测试" class="headerlink" title="三、效果测试"></a>三、效果测试</h2><p><img src="https://i.loli.net/2020/12/04/pyXHcaBg5qnfVZ3.png" alt="image-20201204002745794"></p><blockquote><p>速度自然是没有每月15的机场快，看视频上很难替代，但谷歌搜索，推特等使用还行，提高vps性能可以加快速度</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
          <category> 翻墙 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>喜瑞斯商城1.0</title>
      <link href="/article/e0cd336a.html"/>
      <url>/article/e0cd336a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>话不多说，一套模仿京东淘宝的电商系统源码，快来带走吧</p></blockquote><span id="more"></span><p><a href="https://www.bilibili.com/video/BV1qD4y1D7Vw">b站链接</a></p><p><a href="https://github.com/liaotao421/xiruisi">github链接</a></p><p><a href="https://lanzous.com/b00tlwh7c">项目源码</a></p><p><strong>项目为大二工程实践完成项目，说是组队开发实际为一人开发，前端使用<a href="https://github.com/ycf001/youpinngou">黑马品优购界面</a> + javaex框架，后端使用ssm框架，使用短信验证，支付宝沙箱支付等功能吗，现在看来代码写的并不是很好，供学习借鉴指正！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源项目 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h4 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h4><hr><p>诸葛亮诫子书愿共勉：</p><blockquote><p>“<em><strong>夫君子之行，静以修身，俭以养德。非淡泊无以明志，非宁静无以致远。夫学须静也，才须学也，非学无以广才，非志无以成学。淫慢则不能励精，险躁则不能治性。年与时驰，意与日去，遂成枯落，多不接世，悲守穷庐，将复何及！</strong></em>“<br><br></p></blockquote><p>个人信息：</p><p>双非研一SE学生。<br>博客大部分内容为学习笔记自查自用，少量原创内容。<br>爱好杂而不精，端游（现在只打LOL了），魔方，乒乓球，看书，爬山……</p><h4 id="博客信息"><a href="#博客信息" class="headerlink" title="博客信息"></a>博客信息</h4><hr><ul><li>网站采用的<a href="http://github.com/ppoffice/hexo-theme-icarus">Icarus主题</a> </li><li>在<a href="https://removeif.github.io/">原作者项目</a>基础上修改配置而成</li><li>原站点<a href="http://blog.tao421.xyz/">blog.tao421.xyz</a>欢迎访问</li><li>采用<a href="https://butterfly.js.org/">Butterfly主题</a>重建博客</li></ul><p><em><strong>更新日志：</strong></em><br>–<em>2020.11.24：完成博客迁移，可以继续记录学习内容</em><br>–<em>2020.11.25：在<a href="https://removeif.github.io/">项目</a>基础下进行修改配置建立新站点</em><br>–<em>2020.11.24：域名需要开始备案，原站点不能访问，wordpress太慢，准备弃坑</em><br>–<em>2022.3.18：更换主题</em></p><br><h4 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h4><p><strong>2022计划</strong></p><hr><blockquote><p><strong>2022-GOALS</strong>              </p><ul><li><input checked="" disabled="" type="checkbox"> 成为本校研究生</li><li><input disabled="" type="checkbox"> 看20本书</li><li><input disabled="" type="checkbox"> 英语六级刷分</li><li><input disabled="" type="checkbox"> 赚钱，争取经济独立</li><li><input disabled="" type="checkbox"> 减肥</li></ul></blockquote><p><strong>2021计划</strong></p><hr><blockquote><p><strong>2021-GOALS</strong><br>更新于202.3.18</p><ul><li><input checked="" disabled="" type="checkbox"> 考研通过初试</li><li><input disabled="" type="checkbox"> 买的专业书看一遍（java编程思想,深入理解计算机系统…）</li><li><input disabled="" type="checkbox"> 有空继续看剩下的几部武侠小说（雪山飞狐、碧血剑….）</li><li><input disabled="" type="checkbox"> 魔方别彻底丢了</li><li><input disabled="" type="checkbox"> 写100篇博客（灌水，技术，瞎折腾…）</li></ul><p><strong>额外：</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 经常看Youtube视频，历史尤其中国近代史知识，政治知识增加</li><li><input checked="" disabled="" type="checkbox"> 解锁成就“看穿生死”，“不再焦虑”</li><li><input checked="" disabled="" type="checkbox"> 看了不少经典粤语电影</li></ul><p><strong>总结：</strong></p><ul><li>考研上岸了一半，其他是都没有完成</li><li>再接再厉</li></ul></blockquote><!-- **2019计划**---2018.12.31/21:59:00->更新于2019.12.31>**2019-GOALS**>+ [x] 购买的专业书籍至少看完一遍（并发、重构、设计模式...）-> 95%> **额外：**>+ [x] 追了很多剧> **总结：**>+ 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！<br> -->]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留言板</title>
      <link href="/messageboard/index.html"/>
      <url>/messageboard/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
